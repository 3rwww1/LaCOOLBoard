<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="class_cool_time" kind="class" language="C++" prot="public">
    <compoundname>CoolTime</compoundname>
    <includes refid="_cool_time_8h" local="no">CoolTime.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_cool_time_1afa77d58c0c21cfe8b7c27e34d82f07b9" prot="private" static="no" mutable="no">
        <type>DS1337</type>
        <definition>DS1337 CoolTime::rtc</definition>
        <argsstring></argsstring>
        <name>rtc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CoolTime.h" line="54" column="1" bodyfile="CoolTime.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cool_time_1a9d032e76c3470a15b3bbbc52af6463f7" prot="private" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long CoolTime::timeSync</definition>
        <argsstring></argsstring>
        <name>timeSync</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CoolTime.h" line="56" column="1" bodyfile="CoolTime.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cool_time_1a1916d98810c2a4e9ba72867e8c1b9a99" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int CoolTime::timeZone</definition>
        <argsstring></argsstring>
        <name>timeZone</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CoolTime.h" line="58" column="1" bodyfile="CoolTime.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cool_time_1ad2b9858f399108cb440dd1e908916f04" prot="private" static="no" mutable="no">
        <type>IPAddress</type>
        <definition>IPAddress CoolTime::timeServer</definition>
        <argsstring></argsstring>
        <name>timeServer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CoolTime.h" line="60" column="1" bodyfile="CoolTime.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cool_time_1a4e23216a8121ca79d0fb019f30884b92" prot="private" static="no" mutable="no">
        <type>WiFiUDP</type>
        <definition>WiFiUDP CoolTime::Udp</definition>
        <argsstring></argsstring>
        <name>Udp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CoolTime.h" line="62" column="1" bodyfile="CoolTime.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cool_time_1a2f777da44d7ba678be8185299e9b49d1" prot="private" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int CoolTime::localPort</definition>
        <argsstring></argsstring>
        <name>localPort</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CoolTime.h" line="64" column="1" bodyfile="CoolTime.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cool_time_1a27e6abc82a5c2f72161956967005bec7" prot="private" static="no" mutable="no">
        <type>byte</type>
        <definition>byte CoolTime::packetBuffer[NTP_PACKET_SIZE]</definition>
        <argsstring>[NTP_PACKET_SIZE]</argsstring>
        <name>packetBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CoolTime.h" line="68" column="1" bodyfile="CoolTime.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_cool_time_1a2b36c4009f083ece2d407fec077c4938" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CoolTime::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_cool_time_1a2b36c4009f083ece2d407fec077c4938" kindref="member">CoolTime::begin()</ref>: This method is provided to init the rtc, the udp connection and the Sync Provider</para><para><simplesect kind="return"><para>true if successful,false otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CoolTime.h" line="31" column="1" bodyfile="CoolTime.cpp" bodystart="25" bodyend="47"/>
        <references refid="class_cool_time_1a41fbbbfd651c2079f54d4b2911e4c705" compoundref="_cool_time_8cpp" startline="137" endline="162">getNtpTime</references>
        <referencedby refid="class_cool_board_1acba7c5aef7268b2c0044bdb54d3b9d76" compoundref="_cool_board_8cpp" startline="24" endline="67">CoolBoard::begin</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cool_time_1aae601f795452cfa48d9fb337aed483a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CoolTime::update</definition>
        <argsstring>()</argsstring>
        <name>update</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_cool_time_1aae601f795452cfa48d9fb337aed483a8" kindref="member">CoolTime::update()</ref>: This method is provided to correct the rtc Time when it drifts,once every week. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CoolTime.h" line="33" column="1" bodyfile="CoolTime.cpp" bodystart="54" bodyend="68"/>
        <references refid="class_cool_time_1a5ae038a4498602b189f76a10bf02adf8" compoundref="_cool_time_8cpp" startline="117" endline="126">isTimeSync</references>
        <references refid="class_cool_time_1a41fbbbfd651c2079f54d4b2911e4c705" compoundref="_cool_time_8cpp" startline="137" endline="162">getNtpTime</references>
        <referencedby refid="class_cool_board_1aa0bbc4bc605e35618d18e68795c61363" compoundref="_cool_board_8cpp" startline="105" endline="147">CoolBoard::onLineMode</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cool_time_1a87c28260c1bc77091162cbcf1ee2e129" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CoolTime::config</definition>
        <argsstring>()</argsstring>
        <name>config</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_cool_time_1a87c28260c1bc77091162cbcf1ee2e129" kindref="member">CoolTime::config()</ref>: This method is provided to configure the <ref refid="class_cool_time" kindref="compound">CoolTime</ref> object through a configuration file.</para><para><simplesect kind="return"><para>true if successful,false otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CoolTime.h" line="35" column="1" bodyfile="CoolTime.cpp" bodystart="211" bodyend="284"/>
        <referencedby refid="class_cool_board_1acba7c5aef7268b2c0044bdb54d3b9d76" compoundref="_cool_board_8cpp" startline="24" endline="67">CoolBoard::begin</referencedby>
        <referencedby refid="class_cool_board_1a8612756d3f73198cdde857a66f0fe690" compoundref="_cool_board_8cpp" startline="346" endline="389">CoolBoard::update</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cool_time_1ae5528ed0ba9e78c711084968054950e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CoolTime::config</definition>
        <argsstring>(int timeZone, IPAddress timeServer, unsigned int localPort)</argsstring>
        <name>config</name>
        <param>
          <type>int</type>
          <declname>timeZone</declname>
        </param>
        <param>
          <type>IPAddress</type>
          <declname>timeServer</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>localPort</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CoolTime::config(time Zone, Time server IP , udp Port): This method is provided to do manual configuration. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CoolTime.h" line="36" column="1" bodyfile="CoolTime.cpp" bodystart="196" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="class_cool_time_1af355e7f9b3898211cd2ff25eab5933b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CoolTime::printConf</definition>
        <argsstring>()</argsstring>
        <name>printConf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_cool_time_1af355e7f9b3898211cd2ff25eab5933b1" kindref="member">CoolTime::printConf()</ref>: This method is provided to print the <ref refid="class_cool_time" kindref="compound">CoolTime</ref> configuration to the Serial Monitor </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CoolTime.h" line="37" column="1" bodyfile="CoolTime.cpp" bodystart="292" bodyend="298"/>
        <referencedby refid="class_cool_board_1acba7c5aef7268b2c0044bdb54d3b9d76" compoundref="_cool_board_8cpp" startline="24" endline="67">CoolBoard::begin</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cool_time_1ab81ea7fdaace111aa01cc1ec84c6d297" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CoolTime::setDateTime</definition>
        <argsstring>(int year, int month, int day, int hour, int minutes, int seconds)</argsstring>
        <name>setDateTime</name>
        <param>
          <type>int</type>
          <declname>year</declname>
        </param>
        <param>
          <type>int</type>
          <declname>month</declname>
        </param>
        <param>
          <type>int</type>
          <declname>day</declname>
        </param>
        <param>
          <type>int</type>
          <declname>hour</declname>
        </param>
        <param>
          <type>int</type>
          <declname>minutes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>seconds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CoolTime::setDateTime(year,month,dat,hour,minutes,seconds): This method is provided to manually set the RTc Time </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CoolTime.h" line="39" column="1" bodyfile="CoolTime.cpp" bodystart="75" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="class_cool_time_1a52a1503ad5cb540c71c44cfeceaead8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CoolTime::getTimeDate</definition>
        <argsstring>(int &amp;year, int &amp;month, int &amp;day, int &amp;hour, int &amp;minute, int &amp;second)</argsstring>
        <name>getTimeDate</name>
        <param>
          <type>int &amp;</type>
          <declname>year</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>month</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>day</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>hour</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>minute</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>second</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CoolTime::getTimeDate(year,month,day,hour,minute,seconds): This method is provided to get the RTC Time </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CoolTime.h" line="41" column="1" bodyfile="CoolTime.cpp" bodystart="87" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="class_cool_time_1a5d17f707a9d337720493b2bce9d41c21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long CoolTime::getLastSyncTime</definition>
        <argsstring>()</argsstring>
        <name>getLastSyncTime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_cool_time_1a5d17f707a9d337720493b2bce9d41c21" kindref="member">CoolTime::getLastSyncTime()</ref>: This method is provided to get the last time we syncronised the time</para><para><simplesect kind="return"><para>unsigned long representation of last syncronisation time in seconds </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CoolTime.h" line="43" column="1" bodyfile="CoolTime.cpp" bodystart="102" bodyend="105"/>
        <referencedby refid="class_cool_time_1a5ae038a4498602b189f76a10bf02adf8" compoundref="_cool_time_8cpp" startline="117" endline="126">isTimeSync</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cool_time_1a5ae038a4498602b189f76a10bf02adf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CoolTime::isTimeSync</definition>
        <argsstring>(unsigned long seconds=604800)</argsstring>
        <name>isTimeSync</name>
        <param>
          <type>unsigned long</type>
          <declname>seconds</declname>
          <defval>604800</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CoolTime::isTimeSync( time in seconds): This method is provided to test if the time is syncronised or not. By default we test once per week.</para><para><simplesect kind="return"><para>true if time is syncronised,false otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CoolTime.h" line="47" column="1" bodyfile="CoolTime.cpp" bodystart="117" bodyend="126"/>
        <references refid="class_cool_time_1a5d17f707a9d337720493b2bce9d41c21" compoundref="_cool_time_8cpp" startline="102" endline="105">getLastSyncTime</references>
        <referencedby refid="class_cool_time_1aae601f795452cfa48d9fb337aed483a8" compoundref="_cool_time_8cpp" startline="54" endline="68">update</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cool_time_1a41fbbbfd651c2079f54d4b2911e4c705" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>time_t</type>
        <definition>time_t CoolTime::getNtpTime</definition>
        <argsstring>()</argsstring>
        <name>getNtpTime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CoolTime::getNtopTime(): This method is provided to get the Time through an NTP request to a Time Server</para><para><simplesect kind="return"><para>a time_t (unsigned long ) timestamp in seconds </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CoolTime.h" line="49" column="1" bodyfile="CoolTime.cpp" bodystart="137" bodyend="162"/>
        <references refid="class_cool_time_1a236a38d120dc53bc67456d763838c5a1" compoundref="_cool_time_8cpp" startline="169" endline="189">sendNTPpacket</references>
        <references refid="_cool_time_8h_1a56a6ea64006651b4f42adf713e244f06" compoundref="_cool_time_8h" startline="18">NTP_PACKET_SIZE</references>
        <referencedby refid="class_cool_time_1a2b36c4009f083ece2d407fec077c4938" compoundref="_cool_time_8cpp" startline="25" endline="47">begin</referencedby>
        <referencedby refid="class_cool_time_1aae601f795452cfa48d9fb337aed483a8" compoundref="_cool_time_8cpp" startline="54" endline="68">update</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cool_time_1a236a38d120dc53bc67456d763838c5a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CoolTime::sendNTPpacket</definition>
        <argsstring>(IPAddress &amp;address)</argsstring>
        <name>sendNTPpacket</name>
        <param>
          <type>IPAddress &amp;</type>
          <declname>address</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CoolTime::sendNTPpacket( Time Server IP address): This method is provided to send an NTP request to the time server at the given address </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CoolTime.h" line="51" column="1" bodyfile="CoolTime.cpp" bodystart="169" bodyend="189"/>
        <references refid="_cool_time_8h_1a56a6ea64006651b4f42adf713e244f06" compoundref="_cool_time_8h" startline="18">NTP_PACKET_SIZE</references>
        <referencedby refid="class_cool_time_1a41fbbbfd651c2079f54d4b2911e4c705" compoundref="_cool_time_8cpp" startline="137" endline="162">getNtpTime</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class manages the DS1337 RTC . </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="21">
        <label>CoolTime</label>
        <link refid="class_cool_time"/>
      </node>
    </collaborationgraph>
    <location file="CoolTime.h" line="28" column="1" bodyfile="CoolTime.h" bodystart="27" bodyend="71"/>
    <listofallmembers>
      <member refid="class_cool_time_1a2b36c4009f083ece2d407fec077c4938" prot="public" virt="non-virtual"><scope>CoolTime</scope><name>begin</name></member>
      <member refid="class_cool_time_1a87c28260c1bc77091162cbcf1ee2e129" prot="public" virt="non-virtual"><scope>CoolTime</scope><name>config</name></member>
      <member refid="class_cool_time_1ae5528ed0ba9e78c711084968054950e0" prot="public" virt="non-virtual"><scope>CoolTime</scope><name>config</name></member>
      <member refid="class_cool_time_1a5d17f707a9d337720493b2bce9d41c21" prot="public" virt="non-virtual"><scope>CoolTime</scope><name>getLastSyncTime</name></member>
      <member refid="class_cool_time_1a41fbbbfd651c2079f54d4b2911e4c705" prot="public" virt="non-virtual"><scope>CoolTime</scope><name>getNtpTime</name></member>
      <member refid="class_cool_time_1a52a1503ad5cb540c71c44cfeceaead8a" prot="public" virt="non-virtual"><scope>CoolTime</scope><name>getTimeDate</name></member>
      <member refid="class_cool_time_1a5ae038a4498602b189f76a10bf02adf8" prot="public" virt="non-virtual"><scope>CoolTime</scope><name>isTimeSync</name></member>
      <member refid="class_cool_time_1a2f777da44d7ba678be8185299e9b49d1" prot="private" virt="non-virtual"><scope>CoolTime</scope><name>localPort</name></member>
      <member refid="class_cool_time_1a27e6abc82a5c2f72161956967005bec7" prot="private" virt="non-virtual"><scope>CoolTime</scope><name>packetBuffer</name></member>
      <member refid="class_cool_time_1af355e7f9b3898211cd2ff25eab5933b1" prot="public" virt="non-virtual"><scope>CoolTime</scope><name>printConf</name></member>
      <member refid="class_cool_time_1afa77d58c0c21cfe8b7c27e34d82f07b9" prot="private" virt="non-virtual"><scope>CoolTime</scope><name>rtc</name></member>
      <member refid="class_cool_time_1a236a38d120dc53bc67456d763838c5a1" prot="public" virt="non-virtual"><scope>CoolTime</scope><name>sendNTPpacket</name></member>
      <member refid="class_cool_time_1ab81ea7fdaace111aa01cc1ec84c6d297" prot="public" virt="non-virtual"><scope>CoolTime</scope><name>setDateTime</name></member>
      <member refid="class_cool_time_1ad2b9858f399108cb440dd1e908916f04" prot="private" virt="non-virtual"><scope>CoolTime</scope><name>timeServer</name></member>
      <member refid="class_cool_time_1a9d032e76c3470a15b3bbbc52af6463f7" prot="private" virt="non-virtual"><scope>CoolTime</scope><name>timeSync</name></member>
      <member refid="class_cool_time_1a1916d98810c2a4e9ba72867e8c1b9a99" prot="private" virt="non-virtual"><scope>CoolTime</scope><name>timeZone</name></member>
      <member refid="class_cool_time_1a4e23216a8121ca79d0fb019f30884b92" prot="private" virt="non-virtual"><scope>CoolTime</scope><name>Udp</name></member>
      <member refid="class_cool_time_1aae601f795452cfa48d9fb337aed483a8" prot="public" virt="non-virtual"><scope>CoolTime</scope><name>update</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
