<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="class_cool_m_q_t_t" kind="class" language="C++" prot="public">
    <compoundname>CoolMQTT</compoundname>
    <includes refid="_cool_m_q_t_t_8h" local="no">CoolMQTT.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_cool_m_q_t_t_1ab8bb951f87ddbf92db74c2ad16a3e53e" prot="private" static="no" mutable="no">
        <type>char</type>
        <definition>char CoolMQTT::mqttServer[50]</definition>
        <argsstring>[50]</argsstring>
        <name>mqttServer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ashiroji/Arduino/libraries/CoolBoard/CoolMQTT.h" line="39" column="1" bodyfile="/home/ashiroji/Arduino/libraries/CoolBoard/CoolMQTT.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cool_m_q_t_t_1af6b19e7074dbbb4ae493c44dcb53f7ff" prot="private" static="no" mutable="no">
        <type>String</type>
        <definition>String CoolMQTT::msg</definition>
        <argsstring></argsstring>
        <name>msg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ashiroji/Arduino/libraries/CoolBoard/CoolMQTT.h" line="40" column="1" bodyfile="/home/ashiroji/Arduino/libraries/CoolBoard/CoolMQTT.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cool_m_q_t_t_1a4492f52a441e83cc5151010317fdb52d" prot="private" static="no" mutable="no">
        <type>char</type>
        <definition>char CoolMQTT::inTopic[50]</definition>
        <argsstring>[50]</argsstring>
        <name>inTopic</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ashiroji/Arduino/libraries/CoolBoard/CoolMQTT.h" line="41" column="1" bodyfile="/home/ashiroji/Arduino/libraries/CoolBoard/CoolMQTT.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cool_m_q_t_t_1a109c786a17b463f9eeba046194279522" prot="private" static="no" mutable="no">
        <type>char</type>
        <definition>char CoolMQTT::outTopic[50]</definition>
        <argsstring>[50]</argsstring>
        <name>outTopic</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ashiroji/Arduino/libraries/CoolBoard/CoolMQTT.h" line="42" column="1" bodyfile="/home/ashiroji/Arduino/libraries/CoolBoard/CoolMQTT.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cool_m_q_t_t_1af01bc6160c5a191e90df1b6e7318828d" prot="private" static="no" mutable="no">
        <type>char</type>
        <definition>char CoolMQTT::clientId[50]</definition>
        <argsstring>[50]</argsstring>
        <name>clientId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ashiroji/Arduino/libraries/CoolBoard/CoolMQTT.h" line="43" column="1" bodyfile="/home/ashiroji/Arduino/libraries/CoolBoard/CoolMQTT.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cool_m_q_t_t_1a7f3cf26b51d6770f216e42c5ef13ca9f" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int CoolMQTT::bufferSize</definition>
        <argsstring></argsstring>
        <name>bufferSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ashiroji/Arduino/libraries/CoolBoard/CoolMQTT.h" line="44" column="1" bodyfile="/home/ashiroji/Arduino/libraries/CoolBoard/CoolMQTT.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cool_m_q_t_t_1acc30a0200967374a524092a8a806502a" prot="private" static="no" mutable="no">
        <type>WiFiClient</type>
        <definition>WiFiClient CoolMQTT::espClient</definition>
        <argsstring></argsstring>
        <name>espClient</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ashiroji/Arduino/libraries/CoolBoard/CoolMQTT.h" line="45" column="1" bodyfile="/home/ashiroji/Arduino/libraries/CoolBoard/CoolMQTT.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cool_m_q_t_t_1a4ca71e4f76ef868692a297efd45b1415" prot="private" static="no" mutable="no">
        <type>PubSubClient</type>
        <definition>PubSubClient CoolMQTT::client</definition>
        <argsstring></argsstring>
        <name>client</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ashiroji/Arduino/libraries/CoolBoard/CoolMQTT.h" line="46" column="1" bodyfile="/home/ashiroji/Arduino/libraries/CoolBoard/CoolMQTT.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cool_m_q_t_t_1a3240388137b885775aadf38e96b24c6b" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool CoolMQTT::newMsg</definition>
        <argsstring></argsstring>
        <name>newMsg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ashiroji/Arduino/libraries/CoolBoard/CoolMQTT.h" line="47" column="1" bodyfile="/home/ashiroji/Arduino/libraries/CoolBoard/CoolMQTT.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_cool_m_q_t_t_1ac9248808641ebf3054ed0620ea9d0100" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CoolMQTT::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="_cool_m_q_t_t_8cpp" kindref="compound">CoolMQTT.cpp</ref> This class handles the mqtt client <ref refid="class_cool_m_q_t_t_1ac9248808641ebf3054ed0620ea9d0100" kindref="member">CoolMQTT::begin()</ref>: This method is provided to set the mqtt client&apos;s parameters: -client -server -callback method -buffer size </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ashiroji/Arduino/libraries/CoolBoard/CoolMQTT.h" line="19" column="1" bodyfile="/home/ashiroji/Arduino/libraries/CoolBoard/CoolMQTT.cpp" bodystart="21" bodyend="28"/>
        <references refid="class_cool_m_q_t_t_1a30d82ad665bfb603f46ecdbc290775df" compoundref="_cool_m_q_t_t_8cpp" startline="120" endline="139">callback</references>
        <referencedby refid="class_cool_board_1acba7c5aef7268b2c0044bdb54d3b9d76" compoundref="_cool_board_8cpp" startline="24" endline="67">CoolBoard::begin</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cool_m_q_t_t_1a58b0b1f64b269c2681685208262fba1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CoolMQTT::connect</definition>
        <argsstring>(uint16_t keepAlive)</argsstring>
        <name>connect</name>
        <param>
          <type>uint16_t</type>
          <declname>keepAlive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CoolMQTT::connect( time to keep the connection alive ): This method is provided to connect the client to the server, publish to the out topic , subscribe to the in topic and set the keepAlive time. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ashiroji/Arduino/libraries/CoolBoard/CoolMQTT.h" line="20" column="1" bodyfile="/home/ashiroji/Arduino/libraries/CoolBoard/CoolMQTT.cpp" bodystart="56" bodyend="84"/>
        <referencedby refid="class_cool_board_1a519de78b807f8ec6463ff484eb925918" compoundref="_cool_board_8cpp" startline="75" endline="92">CoolBoard::connect</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cool_m_q_t_t_1ace977b3e90ab14b1199fe5c4fb0a13ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CoolMQTT::publish</definition>
        <argsstring>(const char *data)</argsstring>
        <name>publish</name>
        <param>
          <type>const char *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CoolMQTT::publish(data): This method is provided to publish data to the out topic </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ashiroji/Arduino/libraries/CoolBoard/CoolMQTT.h" line="22" column="1" bodyfile="/home/ashiroji/Arduino/libraries/CoolBoard/CoolMQTT.cpp" bodystart="91" bodyend="100"/>
        <referencedby refid="class_cool_board_1aa0bbc4bc605e35618d18e68795c61363" compoundref="_cool_board_8cpp" startline="104" endline="150">CoolBoard::onLineMode</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cool_m_q_t_t_1ae3c18f6ae9723746d32765f1c8f176ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>String</type>
        <definition>String CoolMQTT::read</definition>
        <argsstring>()</argsstring>
        <name>read</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_cool_m_q_t_t_1ae3c18f6ae9723746d32765f1c8f176ca" kindref="member">CoolMQTT::read()</ref>: This method is provided to return the last read message. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ashiroji/Arduino/libraries/CoolBoard/CoolMQTT.h" line="24" column="1" bodyfile="/home/ashiroji/Arduino/libraries/CoolBoard/CoolMQTT.cpp" bodystart="146" bodyend="155"/>
        <referencedby refid="class_cool_board_1aa0bbc4bc605e35618d18e68795c61363" compoundref="_cool_board_8cpp" startline="104" endline="150">CoolBoard::onLineMode</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cool_m_q_t_t_1a0158596b9a2297c8ba609b56ce6bace1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CoolMQTT::config</definition>
        <argsstring>(const char mqttServer[], const char inTopic[], const char outTopic[], const char clientId[], int bufferSize)</argsstring>
        <name>config</name>
        <param>
          <type>const char</type>
          <declname>mqttServer</declname>
          <array>[]</array>
        </param>
        <param>
          <type>const char</type>
          <declname>inTopic</declname>
          <array>[]</array>
        </param>
        <param>
          <type>const char</type>
          <declname>outTopic</declname>
          <array>[]</array>
        </param>
        <param>
          <type>const char</type>
          <declname>clientId</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int</type>
          <declname>bufferSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CoolMQTT::config(server,in topic, out topic , client id , buffer size): This method is provided to manually configure the mqtt client </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ashiroji/Arduino/libraries/CoolBoard/CoolMQTT.h" line="26" column="1" bodyfile="/home/ashiroji/Arduino/libraries/CoolBoard/CoolMQTT.cpp" bodystart="296" bodyend="307"/>
        <referencedby refid="class_cool_board_1acba7c5aef7268b2c0044bdb54d3b9d76" compoundref="_cool_board_8cpp" startline="24" endline="67">CoolBoard::begin</referencedby>
        <referencedby refid="class_cool_board_1a8612756d3f73198cdde857a66f0fe690" compoundref="_cool_board_8cpp" startline="335" endline="378">CoolBoard::update</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cool_m_q_t_t_1a6571671781a505feca9a8a56e256c6bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CoolMQTT::config</definition>
        <argsstring>()</argsstring>
        <name>config</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_cool_m_q_t_t_1a6571671781a505feca9a8a56e256c6bc" kindref="member">CoolMQTT::config()</ref>: This method is provided to configure the mqttClient : -server -inTopic -outTopic -client Id -buffer size </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ashiroji/Arduino/libraries/CoolBoard/CoolMQTT.h" line="27" column="1" bodyfile="/home/ashiroji/Arduino/libraries/CoolBoard/CoolMQTT.cpp" bodystart="166" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="class_cool_m_q_t_t_1a30d82ad665bfb603f46ecdbc290775df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CoolMQTT::callback</definition>
        <argsstring>(char *topic, byte *payload, unsigned int length)</argsstring>
        <name>callback</name>
        <param>
          <type>char *</type>
          <declname>topic</declname>
        </param>
        <param>
          <type>byte *</type>
          <declname>payload</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CoolMQTT::callback(in topic, incoming message , message length): This method is provided to handle incoming messages from the subscribed inTopic.</para><para>Arguments are automatically assigned in client.setCallback() </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ashiroji/Arduino/libraries/CoolBoard/CoolMQTT.h" line="29" column="1" bodyfile="/home/ashiroji/Arduino/libraries/CoolBoard/CoolMQTT.cpp" bodystart="120" bodyend="139"/>
        <references refid="_irene3000_8h_1a5905d48604152cf57aa6bfa087b49173" compoundref="_irene3000_8h" startline="22">temp</references>
        <referencedby refid="class_cool_m_q_t_t_1ac9248808641ebf3054ed0620ea9d0100" compoundref="_cool_m_q_t_t_8cpp" startline="21" endline="28">begin</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cool_m_q_t_t_1a40553a0ad4b5ecf1cb4411ab54ca85fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CoolMQTT::printConf</definition>
        <argsstring>()</argsstring>
        <name>printConf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_cool_m_q_t_t_1a40553a0ad4b5ecf1cb4411ab54ca85fb" kindref="member">CoolMQTT::printConf()</ref>: This method is provided to print the configuration to the Serial Monitor </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ashiroji/Arduino/libraries/CoolBoard/CoolMQTT.h" line="31" column="1" bodyfile="/home/ashiroji/Arduino/libraries/CoolBoard/CoolMQTT.cpp" bodystart="314" bodyend="325"/>
        <referencedby refid="class_cool_board_1acba7c5aef7268b2c0044bdb54d3b9d76" compoundref="_cool_board_8cpp" startline="24" endline="67">CoolBoard::begin</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cool_m_q_t_t_1a5d003307eff78efbd585e42b43b72b6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CoolMQTT::state</definition>
        <argsstring>()</argsstring>
        <name>state</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_cool_m_q_t_t_1a5d003307eff78efbd585e42b43b72b6d" kindref="member">CoolMQTT::state()</ref>: This method is provided to return the mqtt client&apos;s state: -4 : MQTT_CONNECTION_TIMEOUT - the server didn&apos;t respond within the keepalive time -3 : MQTT_CONNECTION_LOST - the network connection was broken -2 : MQTT_CONNECT_FAILED - the network connection failed -1 : MQTT_DISCONNECTED - the client is disconnected cleanly 0 : MQTT_CONNECTED - the cient is connected 1 : MQTT_CONNECT_BAD_PROTOCOL - the server doesn&apos;t support the requested version of MQTT 2 : MQTT_CONNECT_BAD_CLIENT_ID - the server rejected the client identifier 3 : MQTT_CONNECT_UNAVAILABLE - the server was unable to accept the connection 4 : MQTT_CONNECT_BAD_CREDENTIALS - the username/password were rejected 5 : MQTT_CONNECT_UNAUTHORIZED - the client was not authorized to connect </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ashiroji/Arduino/libraries/CoolBoard/CoolMQTT.h" line="33" column="1" bodyfile="/home/ashiroji/Arduino/libraries/CoolBoard/CoolMQTT.cpp" bodystart="45" bodyend="48"/>
        <referencedby refid="class_cool_board_1a519de78b807f8ec6463ff484eb925918" compoundref="_cool_board_8cpp" startline="75" endline="92">CoolBoard::connect</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cool_m_q_t_t_1aa5eaae967b562b62cbcf2b8d81f6e5d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CoolMQTT::mqttLoop</definition>
        <argsstring>()</argsstring>
        <name>mqttLoop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_cool_m_q_t_t_1aa5eaae967b562b62cbcf2b8d81f6e5d5" kindref="member">CoolMQTT::mqttLoop()</ref>: This method is provided to allow the client to process the data </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ashiroji/Arduino/libraries/CoolBoard/CoolMQTT.h" line="35" column="1" bodyfile="/home/ashiroji/Arduino/libraries/CoolBoard/CoolMQTT.cpp" bodystart="107" bodyend="111"/>
        <referencedby refid="class_cool_board_1aa0bbc4bc605e35618d18e68795c61363" compoundref="_cool_board_8cpp" startline="104" endline="150">CoolBoard::onLineMode</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="_cool_m_q_t_t_8h" kindref="compound">CoolMQTT.h</ref> This class handles the mqtt client </para>    </detaileddescription>
    <location file="/home/ashiroji/Arduino/libraries/CoolBoard/CoolMQTT.h" line="15" column="1" bodyfile="/home/ashiroji/Arduino/libraries/CoolBoard/CoolMQTT.h" bodystart="14" bodyend="50"/>
    <listofallmembers>
      <member refid="class_cool_m_q_t_t_1ac9248808641ebf3054ed0620ea9d0100" prot="public" virt="non-virtual"><scope>CoolMQTT</scope><name>begin</name></member>
      <member refid="class_cool_m_q_t_t_1a7f3cf26b51d6770f216e42c5ef13ca9f" prot="private" virt="non-virtual"><scope>CoolMQTT</scope><name>bufferSize</name></member>
      <member refid="class_cool_m_q_t_t_1a30d82ad665bfb603f46ecdbc290775df" prot="public" virt="non-virtual"><scope>CoolMQTT</scope><name>callback</name></member>
      <member refid="class_cool_m_q_t_t_1a4ca71e4f76ef868692a297efd45b1415" prot="private" virt="non-virtual"><scope>CoolMQTT</scope><name>client</name></member>
      <member refid="class_cool_m_q_t_t_1af01bc6160c5a191e90df1b6e7318828d" prot="private" virt="non-virtual"><scope>CoolMQTT</scope><name>clientId</name></member>
      <member refid="class_cool_m_q_t_t_1a0158596b9a2297c8ba609b56ce6bace1" prot="public" virt="non-virtual"><scope>CoolMQTT</scope><name>config</name></member>
      <member refid="class_cool_m_q_t_t_1a6571671781a505feca9a8a56e256c6bc" prot="public" virt="non-virtual"><scope>CoolMQTT</scope><name>config</name></member>
      <member refid="class_cool_m_q_t_t_1a58b0b1f64b269c2681685208262fba1d" prot="public" virt="non-virtual"><scope>CoolMQTT</scope><name>connect</name></member>
      <member refid="class_cool_m_q_t_t_1acc30a0200967374a524092a8a806502a" prot="private" virt="non-virtual"><scope>CoolMQTT</scope><name>espClient</name></member>
      <member refid="class_cool_m_q_t_t_1a4492f52a441e83cc5151010317fdb52d" prot="private" virt="non-virtual"><scope>CoolMQTT</scope><name>inTopic</name></member>
      <member refid="class_cool_m_q_t_t_1aa5eaae967b562b62cbcf2b8d81f6e5d5" prot="public" virt="non-virtual"><scope>CoolMQTT</scope><name>mqttLoop</name></member>
      <member refid="class_cool_m_q_t_t_1ab8bb951f87ddbf92db74c2ad16a3e53e" prot="private" virt="non-virtual"><scope>CoolMQTT</scope><name>mqttServer</name></member>
      <member refid="class_cool_m_q_t_t_1af6b19e7074dbbb4ae493c44dcb53f7ff" prot="private" virt="non-virtual"><scope>CoolMQTT</scope><name>msg</name></member>
      <member refid="class_cool_m_q_t_t_1a3240388137b885775aadf38e96b24c6b" prot="private" virt="non-virtual"><scope>CoolMQTT</scope><name>newMsg</name></member>
      <member refid="class_cool_m_q_t_t_1a109c786a17b463f9eeba046194279522" prot="private" virt="non-virtual"><scope>CoolMQTT</scope><name>outTopic</name></member>
      <member refid="class_cool_m_q_t_t_1a40553a0ad4b5ecf1cb4411ab54ca85fb" prot="public" virt="non-virtual"><scope>CoolMQTT</scope><name>printConf</name></member>
      <member refid="class_cool_m_q_t_t_1ace977b3e90ab14b1199fe5c4fb0a13ec" prot="public" virt="non-virtual"><scope>CoolMQTT</scope><name>publish</name></member>
      <member refid="class_cool_m_q_t_t_1ae3c18f6ae9723746d32765f1c8f176ca" prot="public" virt="non-virtual"><scope>CoolMQTT</scope><name>read</name></member>
      <member refid="class_cool_m_q_t_t_1a5d003307eff78efbd585e42b43b72b6d" prot="public" virt="non-virtual"><scope>CoolMQTT</scope><name>state</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
