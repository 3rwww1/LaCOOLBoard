<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="class_cool_board" kind="class" language="C++" prot="public">
    <compoundname>CoolBoard</compoundname>
    <includes refid="_cool_board_8h" local="no">CoolBoard.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_cool_board_1a42c2586fbb13ff7f06538e9284e8538d" prot="private" static="no" mutable="no">
        <type><ref refid="class_cool_file_system" kindref="compound">CoolFileSystem</ref></type>
        <definition>CoolFileSystem CoolBoard::fileSystem</definition>
        <argsstring></argsstring>
        <name>fileSystem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CoolBoard.h" line="69" column="1" bodyfile="CoolBoard.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cool_board_1af102be5288bd7f7a8e59b13f86e26a00" prot="private" static="no" mutable="no">
        <type><ref refid="class_cool_board_sensors" kindref="compound">CoolBoardSensors</ref></type>
        <definition>CoolBoardSensors CoolBoard::coolBoardSensors</definition>
        <argsstring></argsstring>
        <name>coolBoardSensors</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CoolBoard.h" line="71" column="1" bodyfile="CoolBoard.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cool_board_1a1b1d3c684a5baa56b08486e192fd8e97" prot="private" static="no" mutable="no">
        <type><ref refid="class_cool_board_led" kindref="compound">CoolBoardLed</ref></type>
        <definition>CoolBoardLed CoolBoard::coolBoardLed</definition>
        <argsstring></argsstring>
        <name>coolBoardLed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CoolBoard.h" line="73" column="1" bodyfile="CoolBoard.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cool_board_1a50d2a6716879d64a85f3c6b44ad63275" prot="private" static="no" mutable="no">
        <type><ref refid="class_cool_time" kindref="compound">CoolTime</ref></type>
        <definition>CoolTime CoolBoard::rtc</definition>
        <argsstring></argsstring>
        <name>rtc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CoolBoard.h" line="75" column="1" bodyfile="CoolBoard.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cool_board_1a55b28656e295140928557c47d7fff01e" prot="private" static="no" mutable="no">
        <type>WiFiManager</type>
        <definition>WiFiManager CoolBoard::wifiManager</definition>
        <argsstring></argsstring>
        <name>wifiManager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CoolBoard.h" line="77" column="1" bodyfile="CoolBoard.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cool_board_1a2399f44d7c23c1149a335cb3b46d90f1" prot="private" static="no" mutable="no">
        <type><ref refid="class_cool_m_q_t_t" kindref="compound">CoolMQTT</ref></type>
        <definition>CoolMQTT CoolBoard::mqtt</definition>
        <argsstring></argsstring>
        <name>mqtt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CoolBoard.h" line="79" column="1" bodyfile="CoolBoard.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cool_board_1a30b1357881b01ccbec676856a91e48e9" prot="private" static="no" mutable="no">
        <type><ref refid="class_jetpack" kindref="compound">Jetpack</ref></type>
        <definition>Jetpack CoolBoard::jetPack</definition>
        <argsstring></argsstring>
        <name>jetPack</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CoolBoard.h" line="81" column="1" bodyfile="CoolBoard.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cool_board_1ad103718ce316006c4695b8eb312eaf11" prot="private" static="no" mutable="no">
        <type><ref refid="class_irene3000" kindref="compound">Irene3000</ref></type>
        <definition>Irene3000 CoolBoard::irene3000</definition>
        <argsstring></argsstring>
        <name>irene3000</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CoolBoard.h" line="83" column="1" bodyfile="CoolBoard.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cool_board_1a09e26264839c65873eb56af476eff6b2" prot="private" static="no" mutable="no">
        <type><ref refid="class_external_sensors" kindref="compound">ExternalSensors</ref></type>
        <definition>ExternalSensors CoolBoard::externalSensors</definition>
        <argsstring></argsstring>
        <name>externalSensors</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CoolBoard.h" line="85" column="1" bodyfile="CoolBoard.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cool_board_1a6395459131d6889a3005f79c7a35e964" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool CoolBoard::userActive</definition>
        <argsstring></argsstring>
        <name>userActive</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CoolBoard.h" line="87" column="1" bodyfile="CoolBoard.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cool_board_1a9c3f7ac625481ee2ae802a25d97a4ae0" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool CoolBoard::ireneActive</definition>
        <argsstring></argsstring>
        <name>ireneActive</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CoolBoard.h" line="89" column="1" bodyfile="CoolBoard.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cool_board_1a9be03a913d26e558328935ca3b59a75e" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool CoolBoard::jetpackActive</definition>
        <argsstring></argsstring>
        <name>jetpackActive</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CoolBoard.h" line="91" column="1" bodyfile="CoolBoard.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cool_board_1a638b00b76aeb819ecfd4c10b8cdd7bb7" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool CoolBoard::externalSensorsActive</definition>
        <argsstring></argsstring>
        <name>externalSensorsActive</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CoolBoard.h" line="93" column="1" bodyfile="CoolBoard.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cool_board_1a0a51b2287139f66c738101fb53139230" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool CoolBoard::sleepActive</definition>
        <argsstring></argsstring>
        <name>sleepActive</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CoolBoard.h" line="95" column="1" bodyfile="CoolBoard.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cool_board_1a4de0096d575d66b472c4c1f0111fd452" prot="private" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t CoolBoard::logInterval</definition>
        <argsstring></argsstring>
        <name>logInterval</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CoolBoard.h" line="97" column="1" bodyfile="CoolBoard.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cool_board_1af2da1f85315b3d074a8b87d158094fb7" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int CoolBoard::answerJsonSize</definition>
        <argsstring></argsstring>
        <name>answerJsonSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CoolBoard.h" line="99" column="1" bodyfile="CoolBoard.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cool_board_1a58e4b6072e3ac8b141ec0befb479208e" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int CoolBoard::sensorJsonSize</definition>
        <argsstring></argsstring>
        <name>sensorJsonSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CoolBoard.h" line="101" column="1" bodyfile="CoolBoard.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cool_board_1a7a8d8d3d316220cdd049cd63c1aa8fe6" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int CoolBoard::serverTimeOut</definition>
        <argsstring></argsstring>
        <name>serverTimeOut</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CoolBoard.h" line="103" column="1" bodyfile="CoolBoard.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cool_board_1a427fb753dd8575bdf821c70a5c63d695" prot="private" static="no" mutable="no">
        <type>String</type>
        <definition>String CoolBoard::data</definition>
        <argsstring></argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CoolBoard.h" line="105" column="1" bodyfile="CoolBoard.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cool_board_1a7b835fafd449e5282f7f91d787a2dc15" prot="private" static="no" mutable="no">
        <type>String</type>
        <definition>String CoolBoard::answer</definition>
        <argsstring></argsstring>
        <name>answer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CoolBoard.h" line="107" column="1" bodyfile="CoolBoard.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_cool_board_1acba7c5aef7268b2c0044bdb54d3b9d76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CoolBoard::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_cool_board_1acba7c5aef7268b2c0044bdb54d3b9d76" kindref="member">CoolBoard::begin()</ref>: This method is provided to configure, begin the used CoolKit Parts. If Serial is enabled,it prints the configuration of the used parts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CoolBoard.h" line="42" column="1" bodyfile="CoolBoard.cpp" bodystart="21" bodyend="62"/>
        <references refid="class_jetpack_1a5a53e1ebf7aaf3bf3e0d37ea64ca09a7" compoundref="_jetpack_8cpp" startline="24" endline="32">Jetpack::begin</references>
        <references refid="class_cool_board_led_1ae3cbde8affcc6f011cbd698c8ef911f6" compoundref="_cool_board_led_8cpp" startline="113" endline="120">CoolBoardLed::begin</references>
        <references refid="class_cool_file_system_1a6ba6f666ed4c530174f8569d2c636748" compoundref="_cool_file_system_8cpp" startline="22" endline="26">CoolFileSystem::begin</references>
        <references refid="class_cool_m_q_t_t_1ac9248808641ebf3054ed0620ea9d0100" compoundref="_cool_m_q_t_t_8cpp" startline="26" endline="33">CoolMQTT::begin</references>
        <references refid="class_external_sensors_1a58ede0d786a86417254708870f04a21e" compoundref="_external_sensors_8cpp" startline="30" endline="55">ExternalSensors::begin</references>
        <references refid="class_cool_board_sensors_1a97095823ef7c8f5290812f1405b966b3" compoundref="_cool_board_sensors_8cpp" startline="85" endline="101">CoolBoardSensors::begin</references>
        <references refid="class_cool_time_1ab1976cf718b950bc31e003c3323b8adb" compoundref="_cool_time_8cpp" startline="30" endline="41">CoolTime::begin</references>
        <references refid="class_irene3000_1ad5891806c500ae1007afe52b9e304c2b" compoundref="irene3000_8cpp" startline="22" endline="25">Irene3000::begin</references>
        <references refid="class_cool_board_led_1a1b60e5e30bea96c49ed62ed1bf1ffc8b" compoundref="_cool_board_led_8cpp" startline="141" endline="189">CoolBoardLed::config</references>
        <references refid="class_external_sensors_1a862a4bd11346b37270d0244c2adabe5a" compoundref="_external_sensors_8cpp" startline="118" endline="266">ExternalSensors::config</references>
        <references refid="class_cool_m_q_t_t_1a9b703de4f1358f0ee7a5e8c44979c648" compoundref="_cool_m_q_t_t_8cpp" startline="340" endline="351">CoolMQTT::config</references>
        <references refid="class_jetpack_1ab065ee83e244265a2223a22f3ee4a719" compoundref="_jetpack_8cpp" startline="183" endline="300">Jetpack::config</references>
        <references refid="class_cool_time_1a87c28260c1bc77091162cbcf1ee2e129" compoundref="_cool_time_8cpp" startline="237" endline="310">CoolTime::config</references>
        <references refid="class_irene3000_1afed5c35e4b23963c157847ef27c11e9c" compoundref="irene3000_8cpp" startline="74" endline="203">Irene3000::config</references>
        <references refid="class_cool_board_sensors_1a9a218895c5423375c33c08f2c56fb23a" compoundref="_cool_board_sensors_8cpp" startline="222" endline="360">CoolBoardSensors::config</references>
        <references refid="class_cool_board_led_1a8ed3053a36f0ed4a131f43b5b17efb61" compoundref="_cool_board_led_8cpp" startline="197" endline="202">CoolBoardLed::printConf</references>
        <references refid="class_external_sensors_1a78c2bf55084435dd51d3c559b2d3c6f3" compoundref="_external_sensors_8cpp" startline="273" endline="287">ExternalSensors::printConf</references>
        <references refid="class_jetpack_1ac54a7bb4f9166bee32052253d9b1d306" compoundref="_jetpack_8cpp" startline="308" endline="319">Jetpack::printConf</references>
        <references refid="class_cool_m_q_t_t_1a40553a0ad4b5ecf1cb4411ab54ca85fb" compoundref="_cool_m_q_t_t_8cpp" startline="358" endline="369">CoolMQTT::printConf</references>
        <references refid="class_irene3000_1a7bc2414100b5e19eacc6630fa34b2654" compoundref="irene3000_8cpp" startline="210" endline="221">Irene3000::printConf</references>
        <references refid="class_cool_time_1af355e7f9b3898211cd2ff25eab5933b1" compoundref="_cool_time_8cpp" startline="318" endline="324">CoolTime::printConf</references>
        <references refid="class_cool_board_sensors_1af6fd79505815b204c178617ecf54c873" compoundref="_cool_board_sensors_8cpp" startline="368" endline="382">CoolBoardSensors::printConf</references>
      </memberdef>
      <memberdef kind="function" id="class_cool_board_1a583a874c09c07e70a6eb9229fc4beddb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CoolBoard::config</definition>
        <argsstring>()</argsstring>
        <name>config</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_cool_board_1a583a874c09c07e70a6eb9229fc4beddb" kindref="member">CoolBoard::config()</ref>: This method is provided to configure the <ref refid="class_cool_board" kindref="compound">CoolBoard</ref> : -log interval -Size of the data to write -Size of the data to read -irene3000 activated/deactivated -jetpack activated/deactivated -external Sensors activated/deactivated -mqtt server timeout</para><para><simplesect kind="return"><para>true if configuration is done, false otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CoolBoard.h" line="44" column="1" bodyfile="CoolBoard.cpp" bodystart="232" bodyend="378"/>
        <references refid="class_cool_file_system_1a6ba6f666ed4c530174f8569d2c636748" compoundref="_cool_file_system_8cpp" startline="22" endline="26">CoolFileSystem::begin</references>
        <referencedby refid="class_cool_board_1a8612756d3f73198cdde857a66f0fe690" compoundref="_cool_board_8cpp" startline="411" endline="487">update</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cool_board_1a8612756d3f73198cdde857a66f0fe690" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CoolBoard::update</definition>
        <argsstring>(const char *answer)</argsstring>
        <name>update</name>
        <param>
          <type>const char *</type>
          <declname>answer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CoolBoard::update(mqtt answer): This method is provided to handle the configuration update of the different parts </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CoolBoard.h" line="46" column="1" bodyfile="CoolBoard.cpp" bodystart="411" bodyend="487"/>
        <references refid="class_cool_m_q_t_t_1ac9248808641ebf3054ed0620ea9d0100" compoundref="_cool_m_q_t_t_8cpp" startline="26" endline="33">CoolMQTT::begin</references>
        <references refid="class_cool_board_led_1a1b60e5e30bea96c49ed62ed1bf1ffc8b" compoundref="_cool_board_led_8cpp" startline="141" endline="189">CoolBoardLed::config</references>
        <references refid="class_external_sensors_1a862a4bd11346b37270d0244c2adabe5a" compoundref="_external_sensors_8cpp" startline="118" endline="266">ExternalSensors::config</references>
        <references refid="class_cool_m_q_t_t_1a9b703de4f1358f0ee7a5e8c44979c648" compoundref="_cool_m_q_t_t_8cpp" startline="340" endline="351">CoolMQTT::config</references>
        <references refid="class_jetpack_1ab065ee83e244265a2223a22f3ee4a719" compoundref="_jetpack_8cpp" startline="183" endline="300">Jetpack::config</references>
        <references refid="class_cool_time_1a87c28260c1bc77091162cbcf1ee2e129" compoundref="_cool_time_8cpp" startline="237" endline="310">CoolTime::config</references>
        <references refid="class_irene3000_1afed5c35e4b23963c157847ef27c11e9c" compoundref="irene3000_8cpp" startline="74" endline="203">Irene3000::config</references>
        <references refid="class_cool_board_1a583a874c09c07e70a6eb9229fc4beddb" compoundref="_cool_board_8cpp" startline="232" endline="378">config</references>
        <references refid="class_cool_board_sensors_1a9a218895c5423375c33c08f2c56fb23a" compoundref="_cool_board_sensors_8cpp" startline="222" endline="360">CoolBoardSensors::config</references>
        <references refid="class_cool_m_q_t_t_1aa5eaae967b562b62cbcf2b8d81f6e5d5" compoundref="_cool_m_q_t_t_8cpp" startline="147" endline="151">CoolMQTT::mqttLoop</references>
        <references refid="class_cool_m_q_t_t_1ace977b3e90ab14b1199fe5c4fb0a13ec" compoundref="_cool_m_q_t_t_8cpp" startline="102" endline="115">CoolMQTT::publish</references>
        <references refid="class_cool_file_system_1a32dad79ae80182a83e2e8f52286b7c7b" compoundref="_cool_file_system_8cpp" startline="65" endline="281">CoolFileSystem::updateConfigFiles</references>
        <referencedby refid="class_cool_board_1aa0bbc4bc605e35618d18e68795c61363" compoundref="_cool_board_8cpp" startline="97" endline="177">onLineMode</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cool_board_1ae6b5e1274d760462290192acea4adca8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CoolBoard::offLineMode</definition>
        <argsstring>()</argsstring>
        <name>offLineMode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CoolBoard::offlineMode(): This method is provided to manage the offLine mode: -read sensors -do actions -save data in the file system </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CoolBoard.h" line="48" column="1" bodyfile="CoolBoard.cpp" bodystart="187" bodyend="216"/>
        <references refid="class_jetpack_1a86d2e83436ef4b85f4c3a6e85ac785b0" compoundref="_jetpack_8cpp" startline="114" endline="174">Jetpack::doAction</references>
        <references refid="class_cool_board_1ad03abdce2e65f520bbf2cff0f2d083cf" compoundref="_cool_board_8cpp" startline="509" endline="539">readSensors</references>
        <references refid="class_cool_file_system_1a4c560c2ddd40b74b7758e6ceb2c58957" compoundref="_cool_file_system_8cpp" startline="38" endline="55">CoolFileSystem::saveSensorData</references>
        <references refid="class_cool_time_1aae601f795452cfa48d9fb337aed483a8" compoundref="_cool_time_8cpp" startline="48" endline="58">CoolTime::update</references>
        <references refid="class_cool_board_1ae7358fb6e623cfc81b775f5f1734909b" compoundref="_cool_board_8cpp" startline="548" endline="570">userData</references>
      </memberdef>
      <memberdef kind="function" id="class_cool_board_1aa0bbc4bc605e35618d18e68795c61363" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CoolBoard::onLineMode</definition>
        <argsstring>()</argsstring>
        <name>onLineMode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_cool_board_1aa0bbc4bc605e35618d18e68795c61363" kindref="member">CoolBoard::onLineMode()</ref>: This method is provided to manage the online mode: -update clock -read sensor -do actions -publish data -read answer -update config </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CoolBoard.h" line="50" column="1" bodyfile="CoolBoard.cpp" bodystart="97" bodyend="177"/>
        <references refid="class_jetpack_1a86d2e83436ef4b85f4c3a6e85ac785b0" compoundref="_jetpack_8cpp" startline="114" endline="174">Jetpack::doAction</references>
        <references refid="class_cool_board_1aaa24480b273fc095a1356a589c333781" compoundref="_cool_board_8cpp" startline="496" endline="499">getLogInterval</references>
        <references refid="class_cool_file_system_1a5c58bca3735c0ed3efb268d70ef998ef" compoundref="_cool_file_system_8cpp" startline="305" endline="362">CoolFileSystem::getSensorSavedData</references>
        <references refid="class_cool_file_system_1a5a7eaeea7a9fbf8aaef651d862fa3b5b" compoundref="_cool_file_system_8cpp" startline="292" endline="295">CoolFileSystem::isDataSaved</references>
        <references refid="class_cool_m_q_t_t_1aa5eaae967b562b62cbcf2b8d81f6e5d5" compoundref="_cool_m_q_t_t_8cpp" startline="147" endline="151">CoolMQTT::mqttLoop</references>
        <references refid="class_cool_m_q_t_t_1ace977b3e90ab14b1199fe5c4fb0a13ec" compoundref="_cool_m_q_t_t_8cpp" startline="102" endline="115">CoolMQTT::publish</references>
        <references refid="class_cool_m_q_t_t_1ae3c18f6ae9723746d32765f1c8f176ca" compoundref="_cool_m_q_t_t_8cpp" startline="186" endline="195">CoolMQTT::read</references>
        <references refid="class_cool_board_1ad03abdce2e65f520bbf2cff0f2d083cf" compoundref="_cool_board_8cpp" startline="509" endline="539">readSensors</references>
        <references refid="class_cool_time_1aae601f795452cfa48d9fb337aed483a8" compoundref="_cool_time_8cpp" startline="48" endline="58">CoolTime::update</references>
        <references refid="class_cool_board_1a8612756d3f73198cdde857a66f0fe690" compoundref="_cool_board_8cpp" startline="411" endline="487">update</references>
        <references refid="class_cool_board_1ae7358fb6e623cfc81b775f5f1734909b" compoundref="_cool_board_8cpp" startline="548" endline="570">userData</references>
      </memberdef>
      <memberdef kind="function" id="class_cool_board_1a519de78b807f8ec6463ff484eb925918" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CoolBoard::connect</definition>
        <argsstring>()</argsstring>
        <name>connect</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_cool_board_1a519de78b807f8ec6463ff484eb925918" kindref="member">CoolBoard::connect()</ref>: This method is provided to manage the network connection and the mqtt connection.</para><para><simplesect kind="return"><para>mqtt client state </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CoolBoard.h" line="52" column="1" bodyfile="CoolBoard.cpp" bodystart="71" bodyend="85"/>
        <references refid="class_cool_m_q_t_t_1a58b0b1f64b269c2681685208262fba1d" compoundref="_cool_m_q_t_t_8cpp" startline="64" endline="92">CoolMQTT::connect</references>
        <references refid="class_cool_board_1aaa24480b273fc095a1356a589c333781" compoundref="_cool_board_8cpp" startline="496" endline="499">getLogInterval</references>
        <references refid="class_cool_m_q_t_t_1a5d003307eff78efbd585e42b43b72b6d" compoundref="_cool_m_q_t_t_8cpp" startline="51" endline="54">CoolMQTT::state</references>
      </memberdef>
      <memberdef kind="function" id="class_cool_board_1aaa24480b273fc095a1356a589c333781" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t CoolBoard::getLogInterval</definition>
        <argsstring>()</argsstring>
        <name>getLogInterval</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_cool_board_1aaa24480b273fc095a1356a589c333781" kindref="member">CoolBoard::getLogInterval()</ref>: This method is provided to get the log interval</para><para><simplesect kind="return"><para>interval value in ms </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CoolBoard.h" line="54" column="1" bodyfile="CoolBoard.cpp" bodystart="496" bodyend="499"/>
        <referencedby refid="class_cool_board_1a519de78b807f8ec6463ff484eb925918" compoundref="_cool_board_8cpp" startline="71" endline="85">connect</referencedby>
        <referencedby refid="class_cool_board_1aa0bbc4bc605e35618d18e68795c61363" compoundref="_cool_board_8cpp" startline="97" endline="177">onLineMode</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cool_board_1a486507b8f0981d3cc671ed31c2145755" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CoolBoard::printConf</definition>
        <argsstring>()</argsstring>
        <name>printConf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_cool_board_1a486507b8f0981d3cc671ed31c2145755" kindref="member">CoolBoard::printConf()</ref>: This method is provided to print the configuration to the Serial Monitor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CoolBoard.h" line="58" column="1" bodyfile="CoolBoard.cpp" bodystart="387" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="class_cool_board_1a5d0c8ff93b615efd676be432de9f164a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CoolBoard::sleep</definition>
        <argsstring>(int interval)</argsstring>
        <name>sleep</name>
        <param>
          <type>int</type>
          <declname>interval</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_cool_board_1a5d0c8ff93b615efd676be432de9f164a" kindref="member">CoolBoard::sleep(int interval)</ref>: This method is provided to allow the board to enter deepSleep mode for a period of time equal to interval in ms </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CoolBoard.h" line="60" column="1" bodyfile="CoolBoard.cpp" bodystart="579" bodyend="582"/>
      </memberdef>
      <memberdef kind="function" id="class_cool_board_1ad03abdce2e65f520bbf2cff0f2d083cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>String</type>
        <definition>String CoolBoard::readSensors</definition>
        <argsstring>()</argsstring>
        <name>readSensors</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_cool_board_1ad03abdce2e65f520bbf2cff0f2d083cf" kindref="member">CoolBoard::readSensors()</ref>: This method is provided to read and format all the sensors data in a single json.</para><para><simplesect kind="return"><para>json string of all the sensors read. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CoolBoard.h" line="62" column="1" bodyfile="CoolBoard.cpp" bodystart="509" bodyend="539"/>
        <references refid="class_external_sensors_1a53177b81eca3be89508b5511ddcd00fc" compoundref="_external_sensors_8cpp" startline="65" endline="95">ExternalSensors::read</references>
        <references refid="class_cool_board_sensors_1a91badb2539d91fda8679f2a597874c48" compoundref="_cool_board_sensors_8cpp" startline="123" endline="186">CoolBoardSensors::read</references>
        <references refid="class_irene3000_1a852a170feea994ea1df01c6b245b5d9a" compoundref="irene3000_8cpp" startline="35" endline="65">Irene3000::read</references>
        <referencedby refid="class_cool_board_1ae6b5e1274d760462290192acea4adca8" compoundref="_cool_board_8cpp" startline="187" endline="216">offLineMode</referencedby>
        <referencedby refid="class_cool_board_1aa0bbc4bc605e35618d18e68795c61363" compoundref="_cool_board_8cpp" startline="97" endline="177">onLineMode</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cool_board_1ae7358fb6e623cfc81b775f5f1734909b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>String</type>
        <definition>String CoolBoard::userData</definition>
        <argsstring>()</argsstring>
        <name>userData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_cool_board_1ae7358fb6e623cfc81b775f5f1734909b" kindref="member">CoolBoard::userData()</ref>: This method is provided to return the user&apos;s data.</para><para><simplesect kind="return"><para>json string of the user&apos;s data </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CoolBoard.h" line="64" column="1" bodyfile="CoolBoard.cpp" bodystart="548" bodyend="570"/>
        <references refid="class_cool_time_1ac4f32ee513c1328d984306645e8785a4" compoundref="_cool_time_8cpp" startline="101" endline="116">CoolTime::getESDate</references>
        <references refid="class_cool_m_q_t_t_1a373cc92fca7760d886f02d8a6e5b3f63" compoundref="_cool_m_q_t_t_8cpp" startline="375" endline="378">CoolMQTT::getUser</references>
        <referencedby refid="class_cool_board_1ae6b5e1274d760462290192acea4adca8" compoundref="_cool_board_8cpp" startline="187" endline="216">offLineMode</referencedby>
        <referencedby refid="class_cool_board_1aa0bbc4bc605e35618d18e68795c61363" compoundref="_cool_board_8cpp" startline="97" endline="177">onLineMode</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class manages the <ref refid="class_cool_board" kindref="compound">CoolBoard</ref> and all of Its functions. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="8">
        <label>CoolBoard</label>
        <link refid="class_cool_board"/>
      </node>
    </collaborationgraph>
    <location file="CoolBoard.h" line="38" column="1" bodyfile="CoolBoard.h" bodystart="37" bodyend="110"/>
    <listofallmembers>
      <member refid="class_cool_board_1a7b835fafd449e5282f7f91d787a2dc15" prot="private" virt="non-virtual"><scope>CoolBoard</scope><name>answer</name></member>
      <member refid="class_cool_board_1af2da1f85315b3d074a8b87d158094fb7" prot="private" virt="non-virtual"><scope>CoolBoard</scope><name>answerJsonSize</name></member>
      <member refid="class_cool_board_1acba7c5aef7268b2c0044bdb54d3b9d76" prot="public" virt="non-virtual"><scope>CoolBoard</scope><name>begin</name></member>
      <member refid="class_cool_board_1a583a874c09c07e70a6eb9229fc4beddb" prot="public" virt="non-virtual"><scope>CoolBoard</scope><name>config</name></member>
      <member refid="class_cool_board_1a519de78b807f8ec6463ff484eb925918" prot="public" virt="non-virtual"><scope>CoolBoard</scope><name>connect</name></member>
      <member refid="class_cool_board_1a1b1d3c684a5baa56b08486e192fd8e97" prot="private" virt="non-virtual"><scope>CoolBoard</scope><name>coolBoardLed</name></member>
      <member refid="class_cool_board_1af102be5288bd7f7a8e59b13f86e26a00" prot="private" virt="non-virtual"><scope>CoolBoard</scope><name>coolBoardSensors</name></member>
      <member refid="class_cool_board_1a427fb753dd8575bdf821c70a5c63d695" prot="private" virt="non-virtual"><scope>CoolBoard</scope><name>data</name></member>
      <member refid="class_cool_board_1a09e26264839c65873eb56af476eff6b2" prot="private" virt="non-virtual"><scope>CoolBoard</scope><name>externalSensors</name></member>
      <member refid="class_cool_board_1a638b00b76aeb819ecfd4c10b8cdd7bb7" prot="private" virt="non-virtual"><scope>CoolBoard</scope><name>externalSensorsActive</name></member>
      <member refid="class_cool_board_1a42c2586fbb13ff7f06538e9284e8538d" prot="private" virt="non-virtual"><scope>CoolBoard</scope><name>fileSystem</name></member>
      <member refid="class_cool_board_1aaa24480b273fc095a1356a589c333781" prot="public" virt="non-virtual"><scope>CoolBoard</scope><name>getLogInterval</name></member>
      <member refid="class_cool_board_1ad103718ce316006c4695b8eb312eaf11" prot="private" virt="non-virtual"><scope>CoolBoard</scope><name>irene3000</name></member>
      <member refid="class_cool_board_1a9c3f7ac625481ee2ae802a25d97a4ae0" prot="private" virt="non-virtual"><scope>CoolBoard</scope><name>ireneActive</name></member>
      <member refid="class_cool_board_1a30b1357881b01ccbec676856a91e48e9" prot="private" virt="non-virtual"><scope>CoolBoard</scope><name>jetPack</name></member>
      <member refid="class_cool_board_1a9be03a913d26e558328935ca3b59a75e" prot="private" virt="non-virtual"><scope>CoolBoard</scope><name>jetpackActive</name></member>
      <member refid="class_cool_board_1a4de0096d575d66b472c4c1f0111fd452" prot="private" virt="non-virtual"><scope>CoolBoard</scope><name>logInterval</name></member>
      <member refid="class_cool_board_1a2399f44d7c23c1149a335cb3b46d90f1" prot="private" virt="non-virtual"><scope>CoolBoard</scope><name>mqtt</name></member>
      <member refid="class_cool_board_1ae6b5e1274d760462290192acea4adca8" prot="public" virt="non-virtual"><scope>CoolBoard</scope><name>offLineMode</name></member>
      <member refid="class_cool_board_1aa0bbc4bc605e35618d18e68795c61363" prot="public" virt="non-virtual"><scope>CoolBoard</scope><name>onLineMode</name></member>
      <member refid="class_cool_board_1a486507b8f0981d3cc671ed31c2145755" prot="public" virt="non-virtual"><scope>CoolBoard</scope><name>printConf</name></member>
      <member refid="class_cool_board_1ad03abdce2e65f520bbf2cff0f2d083cf" prot="public" virt="non-virtual"><scope>CoolBoard</scope><name>readSensors</name></member>
      <member refid="class_cool_board_1a50d2a6716879d64a85f3c6b44ad63275" prot="private" virt="non-virtual"><scope>CoolBoard</scope><name>rtc</name></member>
      <member refid="class_cool_board_1a58e4b6072e3ac8b141ec0befb479208e" prot="private" virt="non-virtual"><scope>CoolBoard</scope><name>sensorJsonSize</name></member>
      <member refid="class_cool_board_1a7a8d8d3d316220cdd049cd63c1aa8fe6" prot="private" virt="non-virtual"><scope>CoolBoard</scope><name>serverTimeOut</name></member>
      <member refid="class_cool_board_1a5d0c8ff93b615efd676be432de9f164a" prot="public" virt="non-virtual"><scope>CoolBoard</scope><name>sleep</name></member>
      <member refid="class_cool_board_1a0a51b2287139f66c738101fb53139230" prot="private" virt="non-virtual"><scope>CoolBoard</scope><name>sleepActive</name></member>
      <member refid="class_cool_board_1a8612756d3f73198cdde857a66f0fe690" prot="public" virt="non-virtual"><scope>CoolBoard</scope><name>update</name></member>
      <member refid="class_cool_board_1a6395459131d6889a3005f79c7a35e964" prot="private" virt="non-virtual"><scope>CoolBoard</scope><name>userActive</name></member>
      <member refid="class_cool_board_1ae7358fb6e623cfc81b775f5f1734909b" prot="public" virt="non-virtual"><scope>CoolBoard</scope><name>userData</name></member>
      <member refid="class_cool_board_1a55b28656e295140928557c47d7fff01e" prot="private" virt="non-virtual"><scope>CoolBoard</scope><name>wifiManager</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
