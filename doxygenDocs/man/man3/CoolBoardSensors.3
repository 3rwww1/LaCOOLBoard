.TH "CoolBoardSensors" 3 "Thu Jul 13 2017" "CoolAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoolBoardSensors \- This class handles the On-Board Sensors\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolBoardSensors\&.h>\fP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBairActive\fP"
.br
.ti -1c
.RI "struct \fBlightActive\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBCoolBoardSensors\fP ()"
.br
.ti -1c
.RI "void \fBbegin\fP ()"
.br
.ti -1c
.RI "String \fBread\fP ()"
.br
.ti -1c
.RI "int \fBgetJsonSize\fP ()"
.br
.ti -1c
.RI "void \fBsetJsonSize\fP (int \fBjsonSize\fP)"
.br
.ti -1c
.RI "void \fBallActive\fP ()"
.br
.ti -1c
.RI "void \fBinitReadI2C\fP ()"
.br
.ti -1c
.RI "void \fBstopReadI2C\fP ()"
.br
.ti -1c
.RI "void \fBend\fP ()"
.br
.ti -1c
.RI "bool \fBconfig\fP ()"
.br
.ti -1c
.RI "void \fBprintConf\fP ()"
.br
.ti -1c
.RI "void \fBsetEnvSensorSettings\fP (uint8_t commInterface=I2C_MODE, uint8_t I2CAddress=0x76, uint8_t runMode=3, uint8_t tStandby=0, uint8_t filter=0, uint8_t tempOverSample=1, uint8_t pressOverSample=1, uint8_t humidOverSample=1)"
.br
.ti -1c
.RI "float \fBreadVBat\fP ()"
.br
.ti -1c
.RI "float \fBreadMoisture\fP ()"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "SI114X \fBlightSensor\fP = SI114X()"
.br
.ti -1c
.RI "BME280 \fBenvSensor\fP"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "struct \fBCoolBoardSensors::lightActive\fP \fBlightDataActive\fP"
.br
.ti -1c
.RI "struct \fBCoolBoardSensors::airActive\fP \fBairDataActive\fP"
.br
.ti -1c
.RI "const int \fBEnMoisture\fP = 13"
.br
.ti -1c
.RI "const int \fBAnMplex\fP = 12"
.br
.ti -1c
.RI "const int \fBEnI2C\fP = 5"
.br
.ti -1c
.RI "byte \fBvbatActive\fP =0"
.br
.ti -1c
.RI "byte \fBsoilMoistureActive\fP =0"
.br
.ti -1c
.RI "int \fBjsonSize\fP =500"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class handles the On-Board Sensors\&. 
.PP
Definition at line 24 of file CoolBoardSensors\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "CoolBoardSensors::CoolBoardSensors ()"
\fBCoolBoardSensors::CoolBoardSensors()\fP: This Constructor is provided to start the I2C interface and Init the different used pins 
.PP
Definition at line 35 of file CoolBoardSensors\&.cpp\&.
.PP
References AnMplex, EnI2C, and EnMoisture\&.
.PP
.nf
36 {
37 
38 #if DEBUG == 1
39 
40     Serial\&.println( F("Entering CoolBoardSensors Constructor") );
41     Serial\&.println();
42 
43 #endif
44     
45     Wire\&.begin(2, 14);                       //I2C init Maybe change this to the CoolBoard?
46 
47     pinMode(AnMplex, OUTPUT);                //Declare Analog Multiplexer OUTPUT
48     pinMode(EnMoisture, OUTPUT);             //Declare Moisture enable Pin
49     pinMode(EnI2C, OUTPUT);        //Declare I2C Enable pin 
50 
51 
52 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void CoolBoardSensors::allActive ()"
\fBCoolBoardSensors::allActive()\fP: This method is provided to allow activation of all the sensor board sensors without passing by the configuration file/method 
.PP
Definition at line 110 of file CoolBoardSensors\&.cpp\&.
.PP
References airDataActive, CoolBoardSensors::airActive::humidity, CoolBoardSensors::lightActive::ir, lightDataActive, CoolBoardSensors::airActive::pressure, soilMoistureActive, CoolBoardSensors::airActive::temperature, CoolBoardSensors::lightActive::uv, vbatActive, and CoolBoardSensors::lightActive::visible\&.
.PP
.nf
111 {
112 
113 #if DEBUG == 1 
114 
115     Serial\&.println( F("Entering CoolBoardSensors\&.allActive()") );
116     Serial\&.println();
117 
118 #endif
119     
120     this->lightDataActive\&.visible=1;
121     this->lightDataActive\&.ir=1;
122     this->lightDataActive\&.uv=1;  
123 
124     this->airDataActive\&.temperature=1;
125     this->airDataActive\&.humidity=1;
126     this->airDataActive\&.pressure=1;
127 
128 
129     this->vbatActive=1;
130 
131     this->soilMoistureActive=1;
132     
133 
134 
135 }
.fi
.SS "void CoolBoardSensors::begin ()"
\fBCoolBoardSensors::begin()\fP: This method is provided to start the sensors that are on the sensor board 
.PP
Definition at line 143 of file CoolBoardSensors\&.cpp\&.
.PP
References envSensor, initReadI2C(), lightSensor, and setEnvSensorSettings()\&.
.PP
Referenced by CoolBoard::begin()\&.
.PP
.nf
144 {  
145 
146 #if DEBUG == 1 
147      
148     Serial\&.println( F("Entering CoolBoardSensors\&.begin()") );
149     Serial\&.println();
150 
151 #endif
152 
153     initReadI2C();
154 
155     while (!lightSensor\&.Begin()) 
156     {
157     
158     #if DEBUG == 1
159 
160         Serial\&.println( F("Si1145 is not ready!  1 second") );
161 
162     #endif
163 
164         delay(1000);
165     }
166      
167     this->setEnvSensorSettings();
168     delay(10);  //Make sure sensor had enough time to turn on\&. BME280 requires 2ms to start up\&.
169     this->envSensor\&.begin();
170     delay(10);  //Make sure sensor had enough time to turn on\&. BME280 requires 2ms to start up\&.
171 
172 #if DEBUG == 1 
173     
174     Serial\&.print( F("BME280 begin answer is :") );
175     Serial\&.println(envSensor\&.begin(), HEX);
176     Serial\&.println();
177 
178 #endif
179 
180 }
.fi
.SS "bool CoolBoardSensors::config ()"
\fBCoolBoardSensors::config()\fP: This method is provided to configure the sensor board : -activate 1 -deactivate 0
.PP
\fBReturns:\fP
.RS 4
true if configuration is successful, false otherwise 
.RE
.PP

.PP
Definition at line 334 of file CoolBoardSensors\&.cpp\&.
.PP
References airDataActive, CoolBoardSensors::airActive::humidity, CoolBoardSensors::lightActive::ir, jsonSize, lightDataActive, CoolBoardSensors::airActive::pressure, soilMoistureActive, CoolBoardSensors::airActive::temperature, CoolBoardSensors::lightActive::uv, vbatActive, and CoolBoardSensors::lightActive::visible\&.
.PP
Referenced by CoolBoard::begin(), and CoolBoard::update()\&.
.PP
.nf
335 {
336 
337 #if DEBUG == 1
338 
339     Serial\&.println( F("Entering CoolBoardSensors\&.config()") );
340     Serial\&.println();
341 
342 #endif
343 
344     //read config file
345     //update data
346     File coolBoardSensorsConfig = SPIFFS\&.open("/coolBoardSensorsConfig\&.json", "r");
347 
348     if (!coolBoardSensorsConfig) 
349     {
350     
351     #if DEBUG == 1
352 
353         Serial\&.println( F("failed to read /coolBoardSensorsConfig\&.json") );
354         Serial\&.println();
355     
356     #endif
357 
358         return(false);
359     }
360     else
361     {
362         size_t size = coolBoardSensorsConfig\&.size();
363         // Allocate a buffer to store contents of the file\&.
364         std::unique_ptr<char[]> buf(new char[size]);
365 
366         coolBoardSensorsConfig\&.readBytes(buf\&.get(), size);
367         DynamicJsonBuffer jsonBuffer;
368         JsonObject& json = jsonBuffer\&.parseObject(buf\&.get());
369         if (!json\&.success()) 
370         {
371         
372         #if DEBUG == 1
373 
374             Serial\&.println( F("failed to parse coolBoardSensorsConfig json") );
375             Serial\&.println();
376         
377         #endif
378     
379             return(false);
380         } 
381         else
382         {
383 
384         #if DEBUG == 1
385 
386             Serial\&.println( F("Configuration Json is :") );
387             json\&.printTo(Serial);
388             Serial\&.println();
389         
390         #endif
391       
392             if(json["jsonSize"]\&.success() )
393             {
394                 this->jsonSize = json["jsonSize"]; 
395             }
396             else
397             {
398                 this->jsonSize=this->jsonSize;          
399             }
400             json["jsonSize"]=this->jsonSize;
401 
402             
403             if(json["BME280"]["temperature"]\&.success() )
404             {           
405                 this->airDataActive\&.temperature=json["BME280"]["temperature"];
406             }
407             else
408             {
409                 this->airDataActive\&.temperature=this->airDataActive\&.temperature;          
410             }
411             json["BME280"]["temperature"]=this->airDataActive\&.temperature;
412             
413             
414             if(json["BME280"]["humidity"]\&.success() )
415             {           
416             
417                 this->airDataActive\&.humidity=json["BME280"]["humidity"];
418             }
419             else
420             {
421                 this->airDataActive\&.humidity=this->airDataActive\&.humidity;
422             }
423             json["BME280"]["humidity"]=this->airDataActive\&.humidity;
424             
425             
426             if(json["BME280"]["pressure"]\&.success() )
427             {
428                 this->airDataActive\&.pressure=json["BME280"]["pressure"];
429             }
430             else
431             {
432                 this->airDataActive\&.pressure=this->airDataActive\&.pressure;
433             }
434             json["BME280"]["pressure"]=this->airDataActive\&.pressure;
435 
436             
437             if(json["SI114X"]["visible"]\&.success() )
438             {
439                 this->lightDataActive\&.visible=json["SI114X"]["visible"];
440             }
441             else
442             {
443                 this->lightDataActive\&.visible=this->lightDataActive\&.visible;
444             }
445             json["SI114X"]["visible"]=this->lightDataActive\&.visible;
446             
447             
448             if(json["SI114X"]["ir"]\&.success() )
449             {           
450                 this->lightDataActive\&.ir=json["SI114X"]["ir"];
451             }
452             else
453             {
454                 this->lightDataActive\&.ir=this->lightDataActive\&.ir;
455             }
456             json["SI114X"]["ir"]=this->lightDataActive\&.ir;
457 
458             
459             if(json["SI114X"]["uv"]\&.success() )          
460             {           
461                 this->lightDataActive\&.uv=json["SI114X"]["uv"];
462             }
463             else
464             {
465                 this->lightDataActive\&.uv=this->lightDataActive\&.uv;
466             }
467             json["SI114X"]["uv"]=this->lightDataActive\&.uv;
468 
469 
470             if(json["vbat"]\&.success() )
471             {
472                 this->vbatActive=json["vbat"];
473             }
474             else
475             {
476                 this->vbatActive=this->vbatActive;
477             }
478             json["vbat"]=this->vbatActive;
479 
480             
481             if(json["soilMoisture"]\&.success() )
482             {           
483                 this->soilMoistureActive= json["soilMoisture"];
484             }
485             else
486             {
487                 this->soilMoistureActive=this->soilMoistureActive;
488             }
489             json["soilMoisture"]=this->soilMoistureActive;
490 
491             coolBoardSensorsConfig\&.close();          
492             coolBoardSensorsConfig = SPIFFS\&.open("/coolBoardSensorsConfig\&.json", "w");            
493             if(!coolBoardSensorsConfig)
494             {
495             
496             #if DEBUG == 1
497 
498                 Serial\&.println( F("failed to write to /coolBoardSensorsConfig\&.json") );
499                 Serial\&.println();
500             
501             #endif
502 
503                 return(false);          
504             }  
505 
506             json\&.printTo(coolBoardSensorsConfig);
507             coolBoardSensorsConfig\&.close();          
508             
509         #if DEBUG == 1
510 
511             Serial\&.println( F("Saved Configuration Json is : ") );
512             json\&.printTo(Serial);
513             Serial\&.println();
514         
515         #endif
516 
517             return(true); 
518         }
519     }   
520 
521 }
.fi
.SS "void CoolBoardSensors::end ()"
\fBCoolBoardSensors::end()\fP: This method is provided to end the sensors on the sensor board 
.PP
Definition at line 187 of file CoolBoardSensors\&.cpp\&.
.PP
References lightSensor\&.
.PP
.nf
188 {
189 
190 #if DEBUG == 1  
191     Serial\&.println( F("Entering CoolBoardSensors\&.end()") );
192     Serial\&.println();
193 
194 #endif
195 
196     lightSensor\&.DeInit();
197 
198 }
.fi
.SS "int CoolBoardSensors::getJsonSize ()"
\fBCoolBoardSensors::getJsonSize()\fP: This method is provided to get the sensor board answer size
.PP
\fBReturns:\fP
.RS 4
json data size 
.RE
.PP

.PP
Definition at line 61 of file CoolBoardSensors\&.cpp\&.
.PP
References jsonSize\&.
.PP
.nf
62 {
63 
64 #if DEBUG == 1
65 
66     Serial\&.println( F("Entering CoolBoardSensors\&.getJsonSize()") );
67     Serial\&.println();
68     Serial\&.print( F("json size is : ") );
69     Serial\&.println(this->jsonSize);
70     Serial\&.println();
71 
72 #endif
73 
74     return(this->jsonSize );
75 }
.fi
.SS "void CoolBoardSensors::initReadI2C ()"
\fBCoolBoardSensors::initReadI2C()\fP: This method is provided to enable the I2C Interface on the sensor board\&. 
.PP
Definition at line 291 of file CoolBoardSensors\&.cpp\&.
.PP
References EnI2C\&.
.PP
Referenced by begin(), and read()\&.
.PP
.nf
292 {
293 
294 #if DEBUG == 1
295 
296     Serial\&.println( F("Entering CoolBoardSensors\&.initReadI2C()") );
297     Serial\&.println();
298 
299 #endif
300  
301     digitalWrite(EnI2C,HIGH);//HIGH= I2C Enable
302 
303 }
.fi
.SS "void CoolBoardSensors::printConf ()"
\fBCoolBoardSensors::printConf()\fP: This method is provided to print the configuration to the Serial Monitor 
.PP
Definition at line 529 of file CoolBoardSensors\&.cpp\&.
.PP
References airDataActive, CoolBoardSensors::airActive::humidity, CoolBoardSensors::lightActive::ir, jsonSize, lightDataActive, CoolBoardSensors::airActive::pressure, soilMoistureActive, CoolBoardSensors::airActive::temperature, CoolBoardSensors::lightActive::uv, vbatActive, and CoolBoardSensors::lightActive::visible\&.
.PP
Referenced by CoolBoard::begin()\&.
.PP
.nf
530 {
531 
532 #if DEBUG == 1
533 
534     Serial\&.println( F("Entering CoolBoardSensors\&.printConf()") );
535     Serial\&.println();
536 
537 #endif
538 
539     Serial\&.println("Sensors Configuration : ");
540     
541     Serial\&.print("json size : ");
542     Serial\&.println(this->jsonSize);
543 
544     Serial\&.print("airDataActive\&.temperature : ");
545     Serial\&.println(this->airDataActive\&.temperature);
546 
547     Serial\&.print("airDataActive\&.humidity : ");
548     Serial\&.println(airDataActive\&.humidity);
549 
550     Serial\&.print("airDataActive\&.pressure : ");
551     Serial\&.println(airDataActive\&.pressure);
552 
553     Serial\&.print("lightDataActive\&.visible : ");
554     Serial\&.println(lightDataActive\&.visible);
555 
556     Serial\&.print("lightDataActive\&.ir : ");
557     Serial\&.println(lightDataActive\&.ir);
558 
559     Serial\&.print("lightDataActive\&.uv : ");
560     Serial\&.println(lightDataActive\&.uv);
561     
562     Serial\&.print("vbatActive : ");
563     Serial\&.println(vbatActive);
564 
565     Serial\&.print("soilMoitureActive : ");
566     Serial\&.println(soilMoistureActive);
567 
568     Serial\&.println();
569 }
.fi
.SS "String CoolBoardSensors::read ()"
\fBCoolBoardSensors::read()\fP: This method is provided to return the data read by the sensor board
.PP
\fBReturns:\fP
.RS 4
a json string containing the sensors data 
.RE
.PP

.PP
Definition at line 208 of file CoolBoardSensors\&.cpp\&.
.PP
References airDataActive, envSensor, CoolBoardSensors::airActive::humidity, initReadI2C(), CoolBoardSensors::lightActive::ir, jsonSize, lightDataActive, lightSensor, CoolBoardSensors::airActive::pressure, readMoisture(), readVBat(), soilMoistureActive, CoolBoardSensors::airActive::temperature, CoolBoardSensors::lightActive::uv, vbatActive, and CoolBoardSensors::lightActive::visible\&.
.PP
Referenced by CoolBoard::readSensors()\&.
.PP
.nf
209 {
210 
211 #if DEBUG == 1 
212     
213     Serial\&.println( F("Entering CoolBoardSensors\&.read()") );
214     Serial\&.println();
215 
216 #endif
217 
218     String data;
219     DynamicJsonBuffer  jsonBuffer(jsonSize) ;
220     JsonObject& root = jsonBuffer\&.createObject();
221     
222     initReadI2C();
223     delay(100);
224     //light data
225     if(lightDataActive\&.visible)
226     {
227         root["visibleLight"] =lightSensor\&.ReadVisible() ;
228     }
229     
230     if(lightDataActive\&.ir)
231     {
232         root["infraRed"] = lightSensor\&.ReadIR();
233     }
234 
235     if(lightDataActive\&.uv)
236     {
237         float tempUV = (float)lightSensor\&.ReadUV()/100 ;
238         root["ultraViolet"] = tempUV;
239     }
240     
241     //BME280 data
242     if(airDataActive\&.pressure)   
243     {
244         root["Pressure"] =envSensor\&.readFloatPressure();
245     }
246     
247         
248     if(airDataActive\&.humidity)   
249     {   
250         root["Humidity"] =envSensor\&.readFloatHumidity() ;
251     }   
252     
253     if(airDataActive\&.temperature)
254     {
255         root["Temperature"]=envSensor\&.readTempC();
256     }
257     
258     //Vbat
259     if(vbatActive)  
260     {   
261         root["Vbat"]=this->readVBat();
262     }
263     
264     //earth Moisture
265     if(soilMoistureActive)
266     {   
267         root["soilMoisture"]=this->readMoisture();
268     }
269     
270     
271     root\&.printTo(data);
272 
273 #if DEBUG == 1
274 
275     Serial\&.println( F("CoolBoardSensors data is :") );
276     root\&.printTo(Serial);
277     Serial\&.println();
278 
279 #endif
280 
281     return(data);   
282     
283 
284 }
.fi
.SS "float CoolBoardSensors::readMoisture ()"
\fBCoolBoardSensors::readMoisture()\fP: This method is provided to red the Soil Moisture
.PP
\fBReturns:\fP
.RS 4
a float represnting the soil moisture 
.RE
.PP

.PP
Definition at line 655 of file CoolBoardSensors\&.cpp\&.
.PP
References AnMplex, and EnMoisture\&.
.PP
Referenced by read()\&.
.PP
.nf
656 {
657 
658 #if DEBUG == 1
659     
660     Serial\&.println( F("Entering CoolBoardSensors\&.readMoisture()") );
661     Serial\&.println();
662     
663 #endif
664 
665     digitalWrite(EnMoisture, LOW);                 //enable moisture sensor and waith a bit
666 
667     digitalWrite(AnMplex, HIGH);            //enable analog Switch to get the moisture
668 
669     delay(2000);
670 
671     int val = analogRead(A0);                       //read the value form the moisture sensor
672 
673     float result = (float)map(val, 0, 890, 0, 100); 
674 
675     digitalWrite(EnMoisture, HIGH);                  //disable moisture sensor for minimum wear
676     
677 #if DEBUG == 1 
678 
679     Serial\&.println( F("Soil Moisture is : ") );
680     Serial\&.println(result);
681     Serial\&.println();
682 
683 #endif 
684 
685     return (result);
686 }
.fi
.SS "float CoolBoardSensors::readVBat ()"
\fBCoolBoardSensors::readVBat()\fP: This method is provided to read the Battery Voltage\&.
.PP
\fBReturns:\fP
.RS 4
a float representing the battery voltage 
.RE
.PP

.PP
Definition at line 618 of file CoolBoardSensors\&.cpp\&.
.PP
References AnMplex\&.
.PP
Referenced by read()\&.
.PP
.nf
619 {
620 
621 #if DEBUG == 1
622 
623     Serial\&.println( F("Entering CoolBoardSensors\&.readVBat()") );
624     Serial\&.println();
625 
626 #endif
627 
628     digitalWrite(this->AnMplex, LOW);                            //Enable Analog Switch to get the batterie tension
629     
630     delay(200);
631     
632     int raw = analogRead(A0);                                    //read in batterie tension
633     
634     float val = 6\&.04 / 1024 * raw;                               //convert it apprimatly right tension in volts
635     
636 #if DEBUG == 1
637 
638     Serial\&.println( F("Vbat is : ") );
639     Serial\&.println(val);
640     Serial\&.println();
641 
642 #endif
643 
644     return (val);   
645 }
.fi
.SS "void CoolBoardSensors::setEnvSensorSettings (uint8_t commInterface = \fCI2C_MODE\fP, uint8_t I2CAddress = \fC0x76\fP, uint8_t runMode = \fC3\fP, uint8_t tStandby = \fC0\fP, uint8_t filter = \fC0\fP, uint8_t tempOverSample = \fC1\fP, uint8_t pressOverSample = \fC1\fP, uint8_t humidOverSample = \fC1\fP)"
CoolBoardSensors::setEnvSensorSetting(): This method is provided to set the enviornment sensor settings , if argument is ommitted , default value will be assigned 
.PP
Definition at line 578 of file CoolBoardSensors\&.cpp\&.
.PP
References envSensor\&.
.PP
Referenced by begin()\&.
.PP
.nf
583 {
584 
585 #if DEBUG == 1
586     
587     Serial\&.println( F("Entering CoolBoardSensors\&.setEnvSensorSettings()") );
588     Serial\&.println();
589 
590 #endif
591   
592     this->envSensor\&.settings\&.commInterface = commInterface;      
593 
594     this->envSensor\&.settings\&.I2CAddress = I2CAddress;
595 
596     this->envSensor\&.settings\&.runMode = runMode; 
597 
598     this->envSensor\&.settings\&.tStandby = tStandby; 
599 
600     this->envSensor\&.settings\&.filter = filter; 
601 
602     this->envSensor\&.settings\&.tempOverSample = tempOverSample;
603 
604     this->envSensor\&.settings\&.pressOverSample = pressOverSample;
605 
606     this->envSensor\&.settings\&.humidOverSample = humidOverSample;
607 
608 }
.fi
.SS "void CoolBoardSensors::setJsonSize (int jsonSize)"
CoolBoardSensors::setJsonSize( JSON size): This method is provided to set the sensor board answer size 
.PP
Definition at line 82 of file CoolBoardSensors\&.cpp\&.
.PP
References jsonSize\&.
.PP
.nf
83 {
84 
85 #if DEBUG == 1
86 
87     Serial\&.println( F("Entering CoolBoardSensors\&.setJsonSize()") );
88     Serial\&.println();    
89     Serial\&.print( F("old json Size is : ") );
90     Serial\&.println(this->jsonSize);
91 #endif
92         
93     this->jsonSize=jsonSize;
94 
95 #if DEBUG == 1 
96     
97     Serial\&.print( F("new json Size is : ") );
98     Serial\&.println(this->jsonSize);
99 
100 #endif
101     
102 }
.fi
.SS "void CoolBoardSensors::stopReadI2C ()"
\fBCoolBoardSensors::stopReadI2C()\fP: This method is provided to disable the I2C Interface on the sensor board 
.PP
Definition at line 310 of file CoolBoardSensors\&.cpp\&.
.PP
References EnI2C\&.
.PP
.nf
311 {
312 
313 #if DEBUG == 1
314 
315     Serial\&.println( F("Entering CoolBoardSensors\&.stopReadI2C()") );
316     Serial\&.println();
317 
318 #endif
319 
320     digitalWrite(EnI2C,LOW);//HIGH= I2C Enable
321 
322 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "struct \fBCoolBoardSensors::airActive\fP CoolBoardSensors::airDataActive\fC [private]\fP"

.PP
Referenced by allActive(), config(), printConf(), and read()\&.
.SS "const int CoolBoardSensors::AnMplex = 12\fC [private]\fP"

.PP
Definition at line 98 of file CoolBoardSensors\&.h\&.
.PP
Referenced by CoolBoardSensors(), readMoisture(), and readVBat()\&.
.SS "const int CoolBoardSensors::EnI2C = 5\fC [private]\fP"

.PP
Definition at line 99 of file CoolBoardSensors\&.h\&.
.PP
Referenced by CoolBoardSensors(), initReadI2C(), and stopReadI2C()\&.
.SS "const int CoolBoardSensors::EnMoisture = 13\fC [private]\fP"

.PP
Definition at line 97 of file CoolBoardSensors\&.h\&.
.PP
Referenced by CoolBoardSensors(), and readMoisture()\&.
.SS "BME280 CoolBoardSensors::envSensor"

.PP
Definition at line 77 of file CoolBoardSensors\&.h\&.
.PP
Referenced by begin(), read(), and setEnvSensorSettings()\&.
.SS "int CoolBoardSensors::jsonSize =500\fC [private]\fP"

.PP
Definition at line 104 of file CoolBoardSensors\&.h\&.
.PP
Referenced by config(), getJsonSize(), printConf(), read(), and setJsonSize()\&.
.SS "struct \fBCoolBoardSensors::lightActive\fP CoolBoardSensors::lightDataActive\fC [private]\fP"

.PP
Referenced by allActive(), config(), printConf(), and read()\&.
.SS "SI114X CoolBoardSensors::lightSensor = SI114X()"

.PP
Definition at line 75 of file CoolBoardSensors\&.h\&.
.PP
Referenced by begin(), end(), and read()\&.
.SS "byte CoolBoardSensors::soilMoistureActive =0\fC [private]\fP"

.PP
Definition at line 102 of file CoolBoardSensors\&.h\&.
.PP
Referenced by allActive(), config(), printConf(), and read()\&.
.SS "byte CoolBoardSensors::vbatActive =0\fC [private]\fP"

.PP
Definition at line 101 of file CoolBoardSensors\&.h\&.
.PP
Referenced by allActive(), config(), printConf(), and read()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolAPI from the source code\&.
