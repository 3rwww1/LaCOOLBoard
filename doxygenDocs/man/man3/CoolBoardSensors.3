.TH "CoolBoardSensors" 3 "Tue Aug 8 2017" "CoolAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoolBoardSensors \- This class handles the On-Board Sensors\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolBoardSensors\&.h>\fP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBairActive\fP"
.br
.ti -1c
.RI "struct \fBlightActive\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBCoolBoardSensors\fP ()"
.br
.ti -1c
.RI "void \fBbegin\fP ()"
.br
.ti -1c
.RI "String \fBread\fP ()"
.br
.ti -1c
.RI "void \fBallActive\fP ()"
.br
.ti -1c
.RI "void \fBend\fP ()"
.br
.ti -1c
.RI "bool \fBconfig\fP ()"
.br
.ti -1c
.RI "void \fBprintConf\fP ()"
.br
.ti -1c
.RI "void \fBsetEnvSensorSettings\fP (uint8_t commInterface=I2C_MODE, uint8_t I2CAddress=0x76, uint8_t runMode=3, uint8_t tStandby=0, uint8_t filter=0, uint8_t tempOverSample=1, uint8_t pressOverSample=1, uint8_t humidOverSample=1)"
.br
.ti -1c
.RI "float \fBreadVBat\fP ()"
.br
.ti -1c
.RI "float \fBreadMoisture\fP ()"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "SI114X \fBlightSensor\fP = SI114X()"
.br
.ti -1c
.RI "BME280 \fBenvSensor\fP"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "struct \fBCoolBoardSensors::lightActive\fP \fBlightDataActive\fP"
.br
.ti -1c
.RI "struct \fBCoolBoardSensors::airActive\fP \fBairDataActive\fP"
.br
.ti -1c
.RI "const int \fBEnMoisture\fP = 13"
.br
.ti -1c
.RI "const int \fBAnMplex\fP = 12"
.br
.ti -1c
.RI "byte \fBvbatActive\fP =0"
.br
.ti -1c
.RI "byte \fBsoilMoistureActive\fP =0"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class handles the On-Board Sensors\&. 
.PP
Definition at line 24 of file CoolBoardSensors\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "CoolBoardSensors::CoolBoardSensors ()"
\fBCoolBoardSensors::CoolBoardSensors()\fP: This Constructor is provided to init the different used pins 
.PP
Definition at line 34 of file CoolBoardSensors\&.cpp\&.
.PP
References AnMplex, and EnMoisture\&.
.PP
.nf
35 {
36 
37 #if DEBUG == 1
38 
39     Serial\&.println( F("Entering CoolBoardSensors Constructor") );
40     Serial\&.println();
41 
42 #endif
43     
44     pinMode(AnMplex, OUTPUT);                //Declare Analog Multiplexer OUTPUT
45     pinMode(EnMoisture, OUTPUT);             //Declare Moisture enable Pin
46 
47 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void CoolBoardSensors::allActive ()"
\fBCoolBoardSensors::allActive()\fP: This method is provided to allow activation of all the sensor board sensors without passing by the configuration file/method 
.PP
Definition at line 56 of file CoolBoardSensors\&.cpp\&.
.PP
References airDataActive, CoolBoardSensors::airActive::humidity, CoolBoardSensors::lightActive::ir, lightDataActive, CoolBoardSensors::airActive::pressure, soilMoistureActive, CoolBoardSensors::airActive::temperature, CoolBoardSensors::lightActive::uv, vbatActive, and CoolBoardSensors::lightActive::visible\&.
.PP
.nf
57 {
58 
59 #if DEBUG == 1 
60 
61     Serial\&.println( F("Entering CoolBoardSensors\&.allActive()") );
62     Serial\&.println();
63 
64 #endif
65     
66     this->lightDataActive\&.visible=1;
67     this->lightDataActive\&.ir=1;
68     this->lightDataActive\&.uv=1;  
69 
70     this->airDataActive\&.temperature=1;
71     this->airDataActive\&.humidity=1;
72     this->airDataActive\&.pressure=1;
73 
74 
75     this->vbatActive=1;
76 
77     this->soilMoistureActive=1;
78     
79 
80 
81 }
.fi
.SS "void CoolBoardSensors::begin ()"
\fBCoolBoardSensors::begin()\fP: This method is provided to start the sensors that are on the sensor board 
.PP
Definition at line 89 of file CoolBoardSensors\&.cpp\&.
.PP
References envSensor, lightSensor, and setEnvSensorSettings()\&.
.PP
Referenced by CoolBoard::begin()\&.
.PP
.nf
90 {  
91 
92 #if DEBUG == 1 
93      
94     Serial\&.println( F("Entering CoolBoardSensors\&.begin()") );
95     Serial\&.println();
96 
97 #endif
98 
99     while (!lightSensor\&.Begin()) 
100     {
101     
102     #if DEBUG == 1
103 
104         Serial\&.println( F("Si1145 is not ready!  1 second") );
105 
106     #endif
107 
108         delay(1000);
109     }
110      
111     this->setEnvSensorSettings();
112     delay(10);  //Make sure sensor had enough time to turn on\&. BME280 requires 2ms to start up\&.
113     this->envSensor\&.begin();
114     delay(10);  //Make sure sensor had enough time to turn on\&. BME280 requires 2ms to start up\&.
115 
116 #if DEBUG == 1 
117     
118     Serial\&.print( F("BME280 begin answer is :") );
119     Serial\&.println(envSensor\&.begin(), HEX);
120     Serial\&.println();
121 
122 #endif
123 
124 }
.fi
.SS "bool CoolBoardSensors::config ()"
\fBCoolBoardSensors::config()\fP: This method is provided to configure the sensor board : -activate 1 -deactivate 0
.PP
\fBReturns:\fP
.RS 4
true if configuration is successful, false otherwise 
.RE
.PP

.PP
Definition at line 242 of file CoolBoardSensors\&.cpp\&.
.PP
References airDataActive, CoolBoardSensors::airActive::humidity, CoolBoardSensors::lightActive::ir, lightDataActive, CoolBoardSensors::airActive::pressure, soilMoistureActive, CoolBoardSensors::airActive::temperature, CoolBoardSensors::lightActive::uv, vbatActive, and CoolBoardSensors::lightActive::visible\&.
.PP
Referenced by CoolBoard::begin()\&.
.PP
.nf
243 {
244 
245 #if DEBUG == 1
246 
247     Serial\&.println( F("Entering CoolBoardSensors\&.config()") );
248     Serial\&.println();
249 
250 #endif
251 
252     //read config file
253     //update data
254     File coolBoardSensorsConfig = SPIFFS\&.open("/coolBoardSensorsConfig\&.json", "r");
255 
256     if (!coolBoardSensorsConfig) 
257     {
258     
259     #if DEBUG == 1
260 
261         Serial\&.println( F("failed to read /coolBoardSensorsConfig\&.json") );
262         Serial\&.println();
263     
264     #endif
265 
266         return(false);
267     }
268     else
269     {
270         size_t size = coolBoardSensorsConfig\&.size();
271         // Allocate a buffer to store contents of the file\&.
272         std::unique_ptr<char[]> buf(new char[size]);
273 
274         coolBoardSensorsConfig\&.readBytes(buf\&.get(), size);
275         DynamicJsonBuffer jsonBuffer;
276         JsonObject& json = jsonBuffer\&.parseObject(buf\&.get());
277         if (!json\&.success()) 
278         {
279         
280         #if DEBUG == 1
281 
282             Serial\&.println( F("failed to parse coolBoardSensorsConfig json") );
283             Serial\&.println();
284         
285         #endif
286     
287             return(false);
288         } 
289         else
290         {
291 
292         #if DEBUG == 1
293 
294             Serial\&.println( F("Configuration Json is :") );
295             json\&.printTo(Serial);
296             Serial\&.println();
297 
298             Serial\&.print(F("jsonBuffer size: "));
299             Serial\&.println(jsonBuffer\&.size());
300             Serial\&.println();
301 
302             
303         
304         #endif
305             
306             if(json["BME280"]["temperature"]\&.success() )
307             {           
308                 this->airDataActive\&.temperature=json["BME280"]["temperature"];
309             }
310             else
311             {
312                 this->airDataActive\&.temperature=this->airDataActive\&.temperature;          
313             }
314             json["BME280"]["temperature"]=this->airDataActive\&.temperature;
315             
316             
317             if(json["BME280"]["humidity"]\&.success() )
318             {           
319             
320                 this->airDataActive\&.humidity=json["BME280"]["humidity"];
321             }
322             else
323             {
324                 this->airDataActive\&.humidity=this->airDataActive\&.humidity;
325             }
326             json["BME280"]["humidity"]=this->airDataActive\&.humidity;
327             
328             
329             if(json["BME280"]["pressure"]\&.success() )
330             {
331                 this->airDataActive\&.pressure=json["BME280"]["pressure"];
332             }
333             else
334             {
335                 this->airDataActive\&.pressure=this->airDataActive\&.pressure;
336             }
337             json["BME280"]["pressure"]=this->airDataActive\&.pressure;
338 
339             
340             if(json["SI114X"]["visible"]\&.success() )
341             {
342                 this->lightDataActive\&.visible=json["SI114X"]["visible"];
343             }
344             else
345             {
346                 this->lightDataActive\&.visible=this->lightDataActive\&.visible;
347             }
348             json["SI114X"]["visible"]=this->lightDataActive\&.visible;
349             
350             
351             if(json["SI114X"]["ir"]\&.success() )
352             {           
353                 this->lightDataActive\&.ir=json["SI114X"]["ir"];
354             }
355             else
356             {
357                 this->lightDataActive\&.ir=this->lightDataActive\&.ir;
358             }
359             json["SI114X"]["ir"]=this->lightDataActive\&.ir;
360 
361             
362             if(json["SI114X"]["uv"]\&.success() )          
363             {           
364                 this->lightDataActive\&.uv=json["SI114X"]["uv"];
365             }
366             else
367             {
368                 this->lightDataActive\&.uv=this->lightDataActive\&.uv;
369             }
370             json["SI114X"]["uv"]=this->lightDataActive\&.uv;
371 
372 
373             if(json["vbat"]\&.success() )
374             {
375                 this->vbatActive=json["vbat"];
376             }
377             else
378             {
379                 this->vbatActive=this->vbatActive;
380             }
381             json["vbat"]=this->vbatActive;
382 
383             
384             if(json["soilMoisture"]\&.success() )
385             {           
386                 this->soilMoistureActive= json["soilMoisture"];
387             }
388             else
389             {
390                 this->soilMoistureActive=this->soilMoistureActive;
391             }
392             json["soilMoisture"]=this->soilMoistureActive;
393 
394             coolBoardSensorsConfig\&.close();          
395             coolBoardSensorsConfig = SPIFFS\&.open("/coolBoardSensorsConfig\&.json", "w");            
396             if(!coolBoardSensorsConfig)
397             {
398             
399             #if DEBUG == 1
400 
401                 Serial\&.println( F("failed to write to /coolBoardSensorsConfig\&.json") );
402                 Serial\&.println();
403             
404             #endif
405 
406                 return(false);          
407             }  
408 
409             json\&.printTo(coolBoardSensorsConfig);
410             coolBoardSensorsConfig\&.close();          
411             
412         #if DEBUG == 1
413 
414             Serial\&.println( F("Saved Configuration Json is : ") );
415             json\&.printTo(Serial);
416             Serial\&.println();
417         
418         #endif
419 
420             return(true); 
421         }
422     }   
423 
424 }
.fi
.SS "void CoolBoardSensors::end ()"
\fBCoolBoardSensors::end()\fP: This method is provided to end the sensors on the sensor board 
.PP
Definition at line 131 of file CoolBoardSensors\&.cpp\&.
.PP
References lightSensor\&.
.PP
.nf
132 {
133 
134 #if DEBUG == 1  
135     Serial\&.println( F("Entering CoolBoardSensors\&.end()") );
136     Serial\&.println();
137 
138 #endif
139 
140     lightSensor\&.DeInit();
141 
142 }
.fi
.SS "void CoolBoardSensors::printConf ()"
\fBCoolBoardSensors::printConf()\fP: This method is provided to print the configuration to the Serial Monitor 
.PP
Definition at line 432 of file CoolBoardSensors\&.cpp\&.
.PP
References airDataActive, CoolBoardSensors::airActive::humidity, CoolBoardSensors::lightActive::ir, lightDataActive, CoolBoardSensors::airActive::pressure, soilMoistureActive, CoolBoardSensors::airActive::temperature, CoolBoardSensors::lightActive::uv, vbatActive, and CoolBoardSensors::lightActive::visible\&.
.PP
Referenced by CoolBoard::begin()\&.
.PP
.nf
433 {
434 
435 #if DEBUG == 1
436 
437     Serial\&.println( F("Entering CoolBoardSensors\&.printConf()") );
438     Serial\&.println();
439 
440 #endif
441 
442     Serial\&.println("Sensors Configuration : ");
443     
444     Serial\&.print("airDataActive\&.temperature : ");
445     Serial\&.println(this->airDataActive\&.temperature);
446 
447     Serial\&.print("airDataActive\&.humidity : ");
448     Serial\&.println(airDataActive\&.humidity);
449 
450     Serial\&.print("airDataActive\&.pressure : ");
451     Serial\&.println(airDataActive\&.pressure);
452 
453     Serial\&.print("lightDataActive\&.visible : ");
454     Serial\&.println(lightDataActive\&.visible);
455 
456     Serial\&.print("lightDataActive\&.ir : ");
457     Serial\&.println(lightDataActive\&.ir);
458 
459     Serial\&.print("lightDataActive\&.uv : ");
460     Serial\&.println(lightDataActive\&.uv);
461     
462     Serial\&.print("vbatActive : ");
463     Serial\&.println(vbatActive);
464 
465     Serial\&.print("soilMoitureActive : ");
466     Serial\&.println(soilMoistureActive);
467 
468     Serial\&.println();
469 }
.fi
.SS "String CoolBoardSensors::read ()"
\fBCoolBoardSensors::read()\fP: This method is provided to return the data read by the sensor board
.PP
\fBReturns:\fP
.RS 4
a json string containing the sensors data 
.RE
.PP

.PP
Definition at line 152 of file CoolBoardSensors\&.cpp\&.
.PP
References airDataActive, envSensor, CoolBoardSensors::airActive::humidity, CoolBoardSensors::lightActive::ir, lightDataActive, lightSensor, CoolBoardSensors::airActive::pressure, readMoisture(), readVBat(), soilMoistureActive, CoolBoardSensors::airActive::temperature, CoolBoardSensors::lightActive::uv, vbatActive, and CoolBoardSensors::lightActive::visible\&.
.PP
Referenced by CoolBoard::readSensors()\&.
.PP
.nf
153 {
154 
155 #if DEBUG == 1 
156     
157     Serial\&.println( F("Entering CoolBoardSensors\&.read()") );
158     Serial\&.println();
159 
160 #endif
161 
162     String data;
163     DynamicJsonBuffer  jsonBuffer ;
164     JsonObject& root = jsonBuffer\&.createObject();
165 
166     delay(100);
167     //light data
168     if(lightDataActive\&.visible)
169     {
170         root["visibleLight"] =lightSensor\&.ReadVisible() ;
171     }
172     
173     if(lightDataActive\&.ir)
174     {
175         root["infraRed"] = lightSensor\&.ReadIR();
176     }
177 
178     if(lightDataActive\&.uv)
179     {
180         float tempUV = (float)lightSensor\&.ReadUV()/100 ;
181         root["ultraViolet"] = tempUV;
182     }
183     
184     //BME280 data
185     if(airDataActive\&.pressure)   
186     {
187         root["Pressure"] =envSensor\&.readFloatPressure();
188     }
189     
190         
191     if(airDataActive\&.humidity)   
192     {   
193         root["Humidity"] =envSensor\&.readFloatHumidity() ;
194     }   
195     
196     if(airDataActive\&.temperature)
197     {
198         root["Temperature"]=envSensor\&.readTempC();
199     }
200     
201     //Vbat
202     if(vbatActive)  
203     {   
204         root["Vbat"]=this->readVBat();
205     }
206     
207     //earth Moisture
208     if(soilMoistureActive)
209     {   
210         root["soilMoisture"]=this->readMoisture();
211     }
212     
213     
214     root\&.printTo(data);
215 
216 #if DEBUG == 1
217 
218     Serial\&.println( F("CoolBoardSensors data is :") );
219     root\&.printTo(Serial);
220     Serial\&.println();
221     
222     Serial\&.print(F("jsonBuffer size: "));
223     Serial\&.println(jsonBuffer\&.size());
224     Serial\&.println();
225 
226 #endif
227 
228     return(data);   
229     
230 
231 }
.fi
.SS "float CoolBoardSensors::readMoisture ()"
\fBCoolBoardSensors::readMoisture()\fP: This method is provided to red the Soil Moisture
.PP
\fBReturns:\fP
.RS 4
a float represnting the soil moisture 
.RE
.PP

.PP
Definition at line 555 of file CoolBoardSensors\&.cpp\&.
.PP
References AnMplex, and EnMoisture\&.
.PP
Referenced by read()\&.
.PP
.nf
556 {
557 
558 #if DEBUG == 1
559     
560     Serial\&.println( F("Entering CoolBoardSensors\&.readMoisture()") );
561     Serial\&.println();
562     
563 #endif
564 
565     digitalWrite(EnMoisture, LOW);                 //enable moisture sensor and waith a bit
566 
567     digitalWrite(AnMplex, HIGH);            //enable analog Switch to get the moisture
568 
569     delay(2000);
570 
571     int val = analogRead(A0);                       //read the value form the moisture sensor
572 
573     float result = (float)map(val, 0, 890, 0, 100); 
574 
575     digitalWrite(EnMoisture, HIGH);                  //disable moisture sensor for minimum wear
576     
577 #if DEBUG == 1 
578 
579     Serial\&.println( F("Soil Moisture is : ") );
580     Serial\&.println(result);
581     Serial\&.println();
582 
583 #endif 
584 
585     return (result);
586 }
.fi
.SS "float CoolBoardSensors::readVBat ()"
\fBCoolBoardSensors::readVBat()\fP: This method is provided to read the Battery Voltage\&.
.PP
\fBReturns:\fP
.RS 4
a float representing the battery voltage 
.RE
.PP

.PP
Definition at line 518 of file CoolBoardSensors\&.cpp\&.
.PP
References AnMplex\&.
.PP
Referenced by read()\&.
.PP
.nf
519 {
520 
521 #if DEBUG == 1
522 
523     Serial\&.println( F("Entering CoolBoardSensors\&.readVBat()") );
524     Serial\&.println();
525 
526 #endif
527 
528     digitalWrite(this->AnMplex, LOW);                            //Enable Analog Switch to get the batterie tension
529     
530     delay(200);
531     
532     int raw = analogRead(A0);                                    //read in batterie tension
533     
534     float val = 6\&.04 / 1024 * raw;                               //convert it apprimatly right tension in volts
535     
536 #if DEBUG == 1
537 
538     Serial\&.println( F("Vbat is : ") );
539     Serial\&.println(val);
540     Serial\&.println();
541 
542 #endif
543 
544     return (val);   
545 }
.fi
.SS "void CoolBoardSensors::setEnvSensorSettings (uint8_t commInterface = \fCI2C_MODE\fP, uint8_t I2CAddress = \fC0x76\fP, uint8_t runMode = \fC3\fP, uint8_t tStandby = \fC0\fP, uint8_t filter = \fC0\fP, uint8_t tempOverSample = \fC1\fP, uint8_t pressOverSample = \fC1\fP, uint8_t humidOverSample = \fC1\fP)"
CoolBoardSensors::setEnvSensorSetting(): This method is provided to set the enviornment sensor settings , if argument is ommitted , default value will be assigned 
.PP
Definition at line 478 of file CoolBoardSensors\&.cpp\&.
.PP
References envSensor\&.
.PP
Referenced by begin()\&.
.PP
.nf
483 {
484 
485 #if DEBUG == 1
486     
487     Serial\&.println( F("Entering CoolBoardSensors\&.setEnvSensorSettings()") );
488     Serial\&.println();
489 
490 #endif
491   
492     this->envSensor\&.settings\&.commInterface = commInterface;      
493 
494     this->envSensor\&.settings\&.I2CAddress = I2CAddress;
495 
496     this->envSensor\&.settings\&.runMode = runMode; 
497 
498     this->envSensor\&.settings\&.tStandby = tStandby; 
499 
500     this->envSensor\&.settings\&.filter = filter; 
501 
502     this->envSensor\&.settings\&.tempOverSample = tempOverSample;
503 
504     this->envSensor\&.settings\&.pressOverSample = pressOverSample;
505 
506     this->envSensor\&.settings\&.humidOverSample = humidOverSample;
507 
508 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "struct \fBCoolBoardSensors::airActive\fP CoolBoardSensors::airDataActive\fC [private]\fP"

.PP
Referenced by allActive(), config(), printConf(), and read()\&.
.SS "const int CoolBoardSensors::AnMplex = 12\fC [private]\fP"

.PP
Definition at line 85 of file CoolBoardSensors\&.h\&.
.PP
Referenced by CoolBoardSensors(), readMoisture(), and readVBat()\&.
.SS "const int CoolBoardSensors::EnMoisture = 13\fC [private]\fP"

.PP
Definition at line 84 of file CoolBoardSensors\&.h\&.
.PP
Referenced by CoolBoardSensors(), and readMoisture()\&.
.SS "BME280 CoolBoardSensors::envSensor"

.PP
Definition at line 64 of file CoolBoardSensors\&.h\&.
.PP
Referenced by begin(), read(), and setEnvSensorSettings()\&.
.SS "struct \fBCoolBoardSensors::lightActive\fP CoolBoardSensors::lightDataActive\fC [private]\fP"

.PP
Referenced by allActive(), config(), printConf(), and read()\&.
.SS "SI114X CoolBoardSensors::lightSensor = SI114X()"

.PP
Definition at line 62 of file CoolBoardSensors\&.h\&.
.PP
Referenced by begin(), end(), and read()\&.
.SS "byte CoolBoardSensors::soilMoistureActive =0\fC [private]\fP"

.PP
Definition at line 88 of file CoolBoardSensors\&.h\&.
.PP
Referenced by allActive(), config(), printConf(), and read()\&.
.SS "byte CoolBoardSensors::vbatActive =0\fC [private]\fP"

.PP
Definition at line 87 of file CoolBoardSensors\&.h\&.
.PP
Referenced by allActive(), config(), printConf(), and read()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolAPI from the source code\&.
