.TH "CoolBoardSensors" 3 "Wed Jun 28 2017" "CoolAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoolBoardSensors \- This class handles the On-Board Sensors\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolBoardSensors\&.h>\fP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBairActive\fP"
.br
.ti -1c
.RI "struct \fBlightActive\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBCoolBoardSensors\fP ()"
.br
.ti -1c
.RI "void \fBallActive\fP ()"
.br
.ti -1c
.RI "void \fBbegin\fP ()"
.br
.ti -1c
.RI "bool \fBconfig\fP ()"
.br
.ti -1c
.RI "void \fBend\fP ()"
.br
.ti -1c
.RI "int \fBgetJsonSize\fP ()"
.br
.ti -1c
.RI "void \fBinitReadI2C\fP ()"
.br
.ti -1c
.RI "void \fBprintConf\fP ()"
.br
.ti -1c
.RI "String \fBread\fP ()"
.br
.ti -1c
.RI "float \fBreadMoisture\fP ()"
.br
.ti -1c
.RI "float \fBreadVBat\fP ()"
.br
.ti -1c
.RI "void \fBsetEnvSensorSettings\fP (uint8_t commInterface=I2C_MODE, uint8_t I2CAddress=0x76, uint8_t runMode=3, uint8_t tStandby=0, uint8_t filter=0, uint8_t tempOverSample=1, uint8_t pressOverSample=1, uint8_t humidOverSample=1)"
.br
.ti -1c
.RI "void \fBsetJsonSize\fP (int \fBjsonSize\fP)"
.br
.ti -1c
.RI "void \fBstopReadI2C\fP ()"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "BME280 \fBenvSensor\fP"
.br
.ti -1c
.RI "SI114X \fBlightSensor\fP = SI114X()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "struct \fBCoolBoardSensors::airActive\fP \fBairDataActive\fP"
.br
.ti -1c
.RI "const int \fBAnMplex\fP = 12"
.br
.ti -1c
.RI "byte \fBearthMoistureActive\fP"
.br
.ti -1c
.RI "const int \fBEnI2C\fP = 5"
.br
.ti -1c
.RI "const int \fBEnMoisture\fP = 13"
.br
.ti -1c
.RI "int \fBjsonSize\fP"
.br
.ti -1c
.RI "struct \fBCoolBoardSensors::lightActive\fP \fBlightDataActive\fP"
.br
.ti -1c
.RI "byte \fBvbatActive\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class handles the On-Board Sensors\&. 
.PP
Definition at line 24 of file CoolBoardSensors\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "CoolBoardSensors::CoolBoardSensors ()"
\fBCoolBoardSensors::CoolBoardSensors()\fP: This Constructor is provided to start the I2C interface and Init the different used pins 
.PP
Definition at line 23 of file CoolBoardSensors\&.cpp\&.
.PP
References AnMplex, EnI2C, and EnMoisture\&.
.PP
.nf
24 {
25     Wire\&.begin(2, 14);                       //I2C init Maybe change this to the CoolBoard?
26 
27     pinMode(AnMplex, OUTPUT);                //Declare Analog Multiplexer OUTPUT
28     pinMode(EnMoisture, OUTPUT);             //Declare Moisture enable Pin
29     pinMode(EnI2C, OUTPUT);        //Declare I2C Enable pin 
30 
31 
32 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void CoolBoardSensors::allActive ()"
\fBCoolBoardSensors::allActive()\fP: This method is provided to allow activation of all the sensor board sensors without passing by the configuration file/method 
.PP
Definition at line 62 of file CoolBoardSensors\&.cpp\&.
.PP
References airDataActive, earthMoistureActive, CoolBoardSensors::airActive::humidity, CoolBoardSensors::lightActive::ir, lightDataActive, CoolBoardSensors::airActive::pressure, CoolBoardSensors::airActive::temperature, CoolBoardSensors::lightActive::uv, vbatActive, and CoolBoardSensors::lightActive::visible\&.
.PP
.nf
63 {
64     lightDataActive\&.visible=1;
65     lightDataActive\&.ir=1;
66     lightDataActive\&.uv=1;    
67 
68     airDataActive\&.temperature=1;
69     airDataActive\&.humidity=1;
70     airDataActive\&.pressure=1;
71 
72 
73     vbatActive=1;
74     earthMoistureActive=1;
75 
76 
77 }
.fi
.SS "void CoolBoardSensors::begin ()"
\fBCoolBoardSensors::begin()\fP: This method is provided to start the sensors that are on the sensor board 
.PP
Definition at line 85 of file CoolBoardSensors\&.cpp\&.
.PP
References envSensor, initReadI2C(), lightSensor, and setEnvSensorSettings()\&.
.PP
Referenced by CoolBoard::begin()\&.
.PP
.nf
86 {       
87     initReadI2C();
88 
89     while (!lightSensor\&.Begin()) {
90       Serial\&.println("Si1145 is not ready!  1 second");
91       delay(1000);
92     }
93      
94     this->setEnvSensorSettings();
95     delay(10);  //Make sure sensor had enough time to turn on\&. BME280 requires 2ms to start up\&.
96     this->envSensor\&.begin();
97     delay(10);  //Make sure sensor had enough time to turn on\&. BME280 requires 2ms to start up\&.
98     Serial\&.println(envSensor\&.begin(), HEX);
99 
100 
101 }
.fi
.SS "bool CoolBoardSensors::config ()"
\fBCoolBoardSensors::config()\fP: This method is provided to configure the sensor board : -activate 1 -deactivate 0
.PP
\fBReturns:\fP
.RS 4
true if configuration is successful, false otherwise 
.RE
.PP

.PP
Definition at line 221 of file CoolBoardSensors\&.cpp\&.
.PP
References airDataActive, earthMoistureActive, CoolBoardSensors::airActive::humidity, CoolBoardSensors::lightActive::ir, jsonSize, lightDataActive, CoolBoardSensors::airActive::pressure, CoolBoardSensors::airActive::temperature, CoolBoardSensors::lightActive::uv, vbatActive, and CoolBoardSensors::lightActive::visible\&.
.PP
Referenced by CoolBoard::begin(), and CoolBoard::update()\&.
.PP
.nf
222 {
223     //read config file
224     //update data
225     File coolBoardSensorsConfig = SPIFFS\&.open("/coolBoardSensorsConfig\&.json", "r");
226 
227     if (!coolBoardSensorsConfig) 
228     {
229         return(false);
230     }
231     else
232     {
233         size_t size = coolBoardSensorsConfig\&.size();
234         // Allocate a buffer to store contents of the file\&.
235         std::unique_ptr<char[]> buf(new char[size]);
236 
237         coolBoardSensorsConfig\&.readBytes(buf\&.get(), size);
238         DynamicJsonBuffer jsonBuffer;
239         JsonObject& json = jsonBuffer\&.parseObject(buf\&.get());
240         if (!json\&.success()) 
241         {
242               return(false);
243         } 
244         else
245         {     
246             if(json["jsonSize"]\&.success() )
247             {
248                 this->jsonSize = json["jsonSize"]; 
249             }
250             else
251             {
252                 this->jsonSize=this->jsonSize;          
253             }
254             json["jsonSize"]=this->jsonSize;
255 
256             
257             if(json["BME280"]["temperature"]\&.success() )
258             {           
259                 this->airDataActive\&.temperature=json["BME280"]["temperature"];
260             }
261             else
262             {
263                 this->airDataActive\&.temperature=this->airDataActive\&.temperature;          
264             }
265             json["BME280"]["temperature"]=this->airDataActive\&.temperature;
266             
267             
268             if(json["BME280"]["humidity"]\&.success() )
269             {           
270             
271                 this->airDataActive\&.humidity=json["BME280"]["humidity"];
272             }
273             else
274             {
275                 this->airDataActive\&.humidity=this->airDataActive\&.humidity;
276             }
277             json["BME280"]["humidity"]=this->airDataActive\&.humidity;
278             
279             
280             if(json["BME280"]["pressure"]\&.success() )
281             {
282                 this->airDataActive\&.pressure=json["BME280"]["pressure"];
283             }
284             else
285             {
286                 this->airDataActive\&.pressure=this->airDataActive\&.pressure;
287             }
288             json["BME280"]["pressure"]=this->airDataActive\&.pressure;
289 
290             
291             if(json["SI114X"]["visible"]\&.success() )
292             {
293                 this->lightDataActive\&.visible=json["SI114X"]["visible"];
294             }
295             else
296             {
297                 this->lightDataActive\&.visible=this->lightDataActive\&.visible;
298             }
299             json["SI114X"]["visible"]=this->lightDataActive\&.visible;
300             
301             
302             if(json["SI114X"]["ir"]\&.success() )
303             {           
304                 this->lightDataActive\&.ir=json["SI114X"]["ir"];
305             }
306             else
307             {
308                 this->lightDataActive\&.ir=this->lightDataActive\&.ir;
309             }
310             json["SI114X"]["ir"]=this->lightDataActive\&.ir;
311 
312             
313             if(json["SI114X"]["uv"]\&.success() )          
314             {           
315                 this->lightDataActive\&.uv=json["SI114X"]["uv"];
316             }
317             else
318             {
319                 this->lightDataActive\&.uv=this->lightDataActive\&.uv;
320             }
321             json["SI114X"]["uv"]=this->lightDataActive\&.uv;
322 
323 
324             if(json["vbat"]\&.success() )
325             {
326                 this->vbatActive=json["vbat"];
327             }
328             else
329             {
330                 this->vbatActive=this->vbatActive;
331             }
332             json["vbat"]=this->vbatActive;
333 
334             
335             if(json["soilMoisture"]\&.success() )
336             {           
337                 this->earthMoistureActive= json["soilMoisture"];
338             }
339             else
340             {
341                 this->earthMoistureActive=this->earthMoistureActive;
342             }
343             json["soilMoisture"]=this->earthMoistureActive;
344 
345             coolBoardSensorsConfig\&.close();          
346             coolBoardSensorsConfig = SPIFFS\&.open("/coolBoardSensorsConfig\&.json", "w");            
347             if(!coolBoardSensorsConfig)
348             {
349                 return(false);          
350             }  
351 
352             json\&.printTo(coolBoardSensorsConfig);
353             coolBoardSensorsConfig\&.close();          
354             
355               return(true); 
356         }
357     }   
358 
359 }
.fi
.SS "void CoolBoardSensors::end ()"
\fBCoolBoardSensors::end()\fP: This method is provided to end the sensors on the sensor board 
.PP
Definition at line 108 of file CoolBoardSensors\&.cpp\&.
.PP
References lightSensor\&.
.PP
.nf
109 {
110 
111     lightSensor\&.DeInit();
112 
113 }
.fi
.SS "int CoolBoardSensors::getJsonSize ()"
\fBCoolBoardSensors::getJsonSize()\fP: This method is provided to get the sensor board answer size
.PP
\fBReturns:\fP
.RS 4
json data size 
.RE
.PP

.PP
Definition at line 41 of file CoolBoardSensors\&.cpp\&.
.PP
References jsonSize\&.
.PP
.nf
42 {
43     return(this->jsonSize );
44 }
.fi
.SS "void CoolBoardSensors::initReadI2C ()"
\fBCoolBoardSensors::initReadI2C()\fP: This method is provided to enable the I2C Interface on the sensor board\&. 
.PP
Definition at line 192 of file CoolBoardSensors\&.cpp\&.
.PP
References EnI2C\&.
.PP
Referenced by begin(), and read()\&.
.PP
.nf
193 {
194   
195     digitalWrite(EnI2C,HIGH);//HIGH= I2C Enable
196 
197 }
.fi
.SS "void CoolBoardSensors::printConf ()"
\fBCoolBoardSensors::printConf()\fP: This method is provided to print the configuration to the Serial Monitor 
.PP
Definition at line 367 of file CoolBoardSensors\&.cpp\&.
.PP
References airDataActive, earthMoistureActive, CoolBoardSensors::airActive::humidity, CoolBoardSensors::lightActive::ir, jsonSize, lightDataActive, CoolBoardSensors::airActive::pressure, CoolBoardSensors::airActive::temperature, CoolBoardSensors::lightActive::uv, vbatActive, and CoolBoardSensors::lightActive::visible\&.
.PP
Referenced by CoolBoard::begin()\&.
.PP
.nf
368 {
369     Serial\&.println("Sensors Conf ");
370     Serial\&.println(jsonSize);
371     Serial\&.println(airDataActive\&.temperature);
372     Serial\&.println(airDataActive\&.humidity);
373     Serial\&.println(airDataActive\&.pressure);
374 
375     Serial\&.println(lightDataActive\&.visible);
376     Serial\&.println(lightDataActive\&.ir);
377     Serial\&.println(lightDataActive\&.uv);
378     Serial\&.println(vbatActive);
379     Serial\&.println(earthMoistureActive);
380     Serial\&.println(" ");
381 }
.fi
.SS "String CoolBoardSensors::read ()"
\fBCoolBoardSensors::read()\fP: This method is provided to return the data read by the sensor board
.PP
\fBReturns:\fP
.RS 4
a json string containing the sensors data 
.RE
.PP

.PP
Definition at line 123 of file CoolBoardSensors\&.cpp\&.
.PP
References airDataActive, earthMoistureActive, envSensor, CoolBoardSensors::airActive::humidity, initReadI2C(), CoolBoardSensors::lightActive::ir, jsonSize, lightDataActive, lightSensor, CoolBoardSensors::airActive::pressure, readMoisture(), readVBat(), CoolBoardSensors::airActive::temperature, CoolBoardSensors::lightActive::uv, vbatActive, and CoolBoardSensors::lightActive::visible\&.
.PP
Referenced by CoolBoard::offLineMode(), and CoolBoard::onLineMode()\&.
.PP
.nf
124 {
125     String data;
126     DynamicJsonBuffer  jsonBuffer(jsonSize) ;
127     JsonObject& root = jsonBuffer\&.createObject();
128     
129     initReadI2C();
130     delay(100);
131     //light data
132     if(lightDataActive\&.visible)
133     {
134 
135         root["visibleLight"] =lightSensor\&.ReadVisible() ;
136     }
137     
138     if(lightDataActive\&.ir)
139     {
140         root["infraRed"] = lightSensor\&.ReadIR();
141     }
142 
143     if(lightDataActive\&.uv)
144     {
145         root["ultraViolet"] =lightSensor\&.ReadUV()/100 ;
146     }
147     
148     //BME280 data
149     if(airDataActive\&.pressure)   
150     {
151         root["Pressure"] =envSensor\&.readFloatPressure();
152     }
153     
154         
155     if(airDataActive\&.humidity)   
156     {   
157         root["Humidity"] =envSensor\&.readFloatHumidity() ;
158     }   
159     
160     if(airDataActive\&.temperature)
161     {
162         root["Temperature"]=envSensor\&.readTempC();
163     }
164     
165     //Vbat
166     if(vbatActive)  
167     {   
168         root["Vbat"]=this->readVBat();
169     }
170     
171     //earth Moisture
172     if(earthMoistureActive)
173     {   
174         root["soilMoisture"]=this->readMoisture();
175     }
176     
177     
178     root\&.printTo(data);
179     
180 
181 
182     return(data);
183     
184 
185 }
.fi
.SS "float CoolBoardSensors::readMoisture ()"
\fBCoolBoardSensors::readMoisture()\fP: This method is provided to red the Soil Moisture
.PP
\fBReturns:\fP
.RS 4
a float represnting the soil moisture 
.RE
.PP

.PP
Definition at line 443 of file CoolBoardSensors\&.cpp\&.
.PP
References AnMplex, and EnMoisture\&.
.PP
Referenced by read()\&.
.PP
.nf
444 {
445       digitalWrite(EnMoisture, LOW);                 //enable moisture sensor and waith a bit
446       
447       digitalWrite(AnMplex, HIGH);          //enable analog Switch to get the moisture
448       
449       delay(2000);
450       
451       int val = analogRead(A0);                       //read the value form the moisture sensor
452       
453       float result = (float)map(val, 0, 890, 0, 100);   
454 
455       digitalWrite(EnMoisture, HIGH);                  //disable moisture sensor for minimum wear
456       
457       return (result);
458 }
.fi
.SS "float CoolBoardSensors::readVBat ()"
\fBCoolBoardSensors::readVBat()\fP: This method is provided to read the Battery Voltage\&.
.PP
\fBReturns:\fP
.RS 4
a float representing the battery voltage 
.RE
.PP

.PP
Definition at line 422 of file CoolBoardSensors\&.cpp\&.
.PP
References AnMplex\&.
.PP
Referenced by read()\&.
.PP
.nf
423 {
424     digitalWrite(AnMplex, LOW);                                  //Enable Analog Switch to get the batterie tension
425     
426     delay(200);
427     
428     int raw = analogRead(A0);                                    //read in batterie tension
429     
430     float val = 6\&.04 / 1024 * raw;                               //convert it apprimatly right tension in volts
431 
432     return (val);   
433 }
.fi
.SS "void CoolBoardSensors::setEnvSensorSettings (uint8_t commInterface = \fCI2C_MODE\fP, uint8_t I2CAddress = \fC0x76\fP, uint8_t runMode = \fC3\fP, uint8_t tStandby = \fC0\fP, uint8_t filter = \fC0\fP, uint8_t tempOverSample = \fC1\fP, uint8_t pressOverSample = \fC1\fP, uint8_t humidOverSample = \fC1\fP)"
CoolBoardSensors::setEnvSensorSetting(): This method is provided to set the enviornment sensor settings , if argument is ommitted , default value will be assigned 
.PP
Definition at line 390 of file CoolBoardSensors\&.cpp\&.
.PP
References envSensor\&.
.PP
Referenced by begin()\&.
.PP
.nf
395 {
396   envSensor\&.settings\&.commInterface = commInterface;      
397   
398   envSensor\&.settings\&.I2CAddress = I2CAddress;
399   
400   envSensor\&.settings\&.runMode = runMode; 
401   
402   envSensor\&.settings\&.tStandby = tStandby; 
403   
404   envSensor\&.settings\&.filter = filter; 
405   
406   envSensor\&.settings\&.tempOverSample = tempOverSample;
407   
408   envSensor\&.settings\&.pressOverSample = pressOverSample;
409   
410   envSensor\&.settings\&.humidOverSample = humidOverSample;
411 
412 }
.fi
.SS "void CoolBoardSensors::setJsonSize (int jsonSize)"
CoolBoardSensors::setJsonSize( JSON size): This method is provided to set the sensor board answer size 
.PP
Definition at line 51 of file CoolBoardSensors\&.cpp\&.
.PP
References jsonSize\&.
.PP
.nf
52 {
53     this->jsonSize=jsonSize;
54 }
.fi
.SS "void CoolBoardSensors::stopReadI2C ()"
\fBCoolBoardSensors::stopReadI2C()\fP: This method is provided to disable the I2C Interface on the sensor board 
.PP
Definition at line 204 of file CoolBoardSensors\&.cpp\&.
.PP
References EnI2C\&.
.PP
.nf
205 {
206 
207     digitalWrite(EnI2C,LOW);//HIGH= I2C Enable
208 
209 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "struct \fBCoolBoardSensors::airActive\fP CoolBoardSensors::airDataActive\fC [private]\fP"

.PP
Referenced by allActive(), config(), printConf(), and read()\&.
.SS "const int CoolBoardSensors::AnMplex = 12\fC [private]\fP"

.PP
Definition at line 101 of file CoolBoardSensors\&.h\&.
.PP
Referenced by CoolBoardSensors(), readMoisture(), and readVBat()\&.
.SS "byte CoolBoardSensors::earthMoistureActive\fC [private]\fP"

.PP
Definition at line 105 of file CoolBoardSensors\&.h\&.
.PP
Referenced by allActive(), config(), printConf(), and read()\&.
.SS "const int CoolBoardSensors::EnI2C = 5\fC [private]\fP"

.PP
Definition at line 102 of file CoolBoardSensors\&.h\&.
.PP
Referenced by CoolBoardSensors(), initReadI2C(), and stopReadI2C()\&.
.SS "const int CoolBoardSensors::EnMoisture = 13\fC [private]\fP"

.PP
Definition at line 100 of file CoolBoardSensors\&.h\&.
.PP
Referenced by CoolBoardSensors(), and readMoisture()\&.
.SS "BME280 CoolBoardSensors::envSensor"

.PP
Definition at line 77 of file CoolBoardSensors\&.h\&.
.PP
Referenced by begin(), read(), and setEnvSensorSettings()\&.
.SS "int CoolBoardSensors::jsonSize\fC [private]\fP"

.PP
Definition at line 107 of file CoolBoardSensors\&.h\&.
.PP
Referenced by config(), getJsonSize(), printConf(), read(), and setJsonSize()\&.
.SS "struct \fBCoolBoardSensors::lightActive\fP CoolBoardSensors::lightDataActive\fC [private]\fP"

.PP
Referenced by allActive(), config(), printConf(), and read()\&.
.SS "SI114X CoolBoardSensors::lightSensor = SI114X()"

.PP
Definition at line 75 of file CoolBoardSensors\&.h\&.
.PP
Referenced by begin(), end(), and read()\&.
.SS "byte CoolBoardSensors::vbatActive\fC [private]\fP"

.PP
Definition at line 104 of file CoolBoardSensors\&.h\&.
.PP
Referenced by allActive(), config(), printConf(), and read()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolAPI from the source code\&.
