.TH "CoolMQTT" 3 "Mon Jul 3 2017" "CoolAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoolMQTT \- This class handles the mqtt client\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolMQTT\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBbegin\fP ()"
.br
.ti -1c
.RI "int \fBconnect\fP (uint16_t keepAlive)"
.br
.ti -1c
.RI "bool \fBpublish\fP (const char *data)"
.br
.ti -1c
.RI "bool \fBpublish\fP (const char *data, int logInterval)"
.br
.ti -1c
.RI "String \fBread\fP ()"
.br
.ti -1c
.RI "void \fBconfig\fP (const char \fBmqttServer\fP[], const char \fBinTopic\fP[], const char \fBoutTopic\fP[], const char \fBuser\fP[], int \fBbufferSize\fP)"
.br
.ti -1c
.RI "bool \fBconfig\fP ()"
.br
.ti -1c
.RI "void \fBcallback\fP (char *topic, byte *payload, unsigned int length)"
.br
.ti -1c
.RI "void \fBprintConf\fP ()"
.br
.ti -1c
.RI "int \fBstate\fP ()"
.br
.ti -1c
.RI "bool \fBmqttLoop\fP ()"
.br
.ti -1c
.RI "String \fBgetUser\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "char \fBmqttServer\fP [50]"
.br
.ti -1c
.RI "String \fBmsg\fP"
.br
.ti -1c
.RI "char \fBinTopic\fP [50]"
.br
.ti -1c
.RI "char \fBoutTopic\fP [50]"
.br
.ti -1c
.RI "char \fBuser\fP [50]"
.br
.ti -1c
.RI "int \fBbufferSize\fP"
.br
.ti -1c
.RI "WiFiClient \fBespClient\fP"
.br
.ti -1c
.RI "PubSubClient \fBclient\fP"
.br
.ti -1c
.RI "bool \fBnewMsg\fP"
.br
.ti -1c
.RI "unsigned long \fBpreviousLogTime\fP =0"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class handles the mqtt client\&. 
.PP
Definition at line 22 of file CoolMQTT\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "void CoolMQTT::begin ()"
\fBCoolMQTT::begin()\fP: This method is provided to set the mqtt client's parameters: -client -server -callback method -buffer size 
.PP
Definition at line 26 of file CoolMQTT\&.cpp\&.
.PP
References bufferSize, callback(), client, espClient, and mqttServer\&.
.PP
Referenced by CoolBoard::begin(), and CoolBoard::update()\&.
.PP
.nf
27 { 
28     client\&.setClient(espClient);
29     client\&.setServer(mqttServer, 1883);  
30     client\&.setCallback([this] (char* topic, byte* payload, unsigned int length) { this->callback(topic, payload, length); });
31     client\&.setBufferSize((unsigned short)bufferSize);
32 
33 }
.fi
.SS "void CoolMQTT::callback (char * topic, byte * payload, unsigned int length)"
CoolMQTT::callback(in topic, incoming message , message length): This method is provided to handle incoming messages from the subscribed inTopic\&.
.PP
Arguments are automatically assigned in client\&.setCallback() 
.PP
Definition at line 160 of file CoolMQTT\&.cpp\&.
.PP
References msg, newMsg, and temp\&.
.PP
Referenced by begin()\&.
.PP
.nf
161 {
162     char temp[length+1];
163 
164     for (int i = 0; i < length; i++) 
165     {
166         temp[i]=(char)payload[i]; 
167 
168     }
169 
170     this->newMsg=true;
171 
172     temp[length+1]='\0';
173 
174     msg=String(temp);
175     msg\&.remove(length,1);
176     Serial\&.println("received");
177     Serial\&.println(msg);
178 
179 }
.fi
.SS "void CoolMQTT::config (const char mqttServer[], const char inTopic[], const char outTopic[], const char user[], int bufferSize)"
CoolMQTT::config(server,in topic, out topic , user Id, buffer size): This method is provided to manually configure the mqtt client 
.PP
Definition at line 340 of file CoolMQTT\&.cpp\&.
.PP
References bufferSize\&.
.PP
Referenced by CoolBoard::begin(), and CoolBoard::update()\&.
.PP
.nf
341 {
342     for(int i =0;i< 50 ;i++)
343     {
344         this->mqttServer[i]=mqttServer[i];
345         this->inTopic[i]=inTopic[i];
346         this->outTopic[i]=outTopic[i];
347         this->user[i]=user[i];
348     }
349     this->bufferSize=bufferSize;
350 
351 }
.fi
.SS "bool CoolMQTT::config ()"
\fBCoolMQTT::config()\fP: This method is provided to configure the mqttClient : -server -inTopic -outTopic -client Id -buffer size
.PP
\fBReturns:\fP
.RS 4
true if successful,false otherwise 
.RE
.PP

.PP
Definition at line 208 of file CoolMQTT\&.cpp\&.
.PP
References bufferSize, inTopic, mqttServer, outTopic, and user\&.
.PP
.nf
209 {
210     //read config file
211     //update data
212     File configFile = SPIFFS\&.open("/mqttConfig\&.json", "r");
213 
214     if (!configFile) 
215     {
216         return(false);
217     }
218     else
219     {
220         size_t size = configFile\&.size();
221         // Allocate a buffer to store contents of the file\&.
222         std::unique_ptr<char[]> buf(new char[size]);
223 
224         configFile\&.readBytes(buf\&.get(), size);
225         DynamicJsonBuffer jsonBuffer;
226         JsonObject& json = jsonBuffer\&.parseObject(buf\&.get());
227         if (!json\&.success()) 
228         {
229               return(false);
230         } 
231         else
232         {               
233                 if(json["mqttServer"]\&.success() )
234                 {           
235                     const char* tempmqttServer = json["mqttServer"]; // "inTopic"
236                     for(int i =0;i< 50 ;i++)
237                     {
238                         mqttServer[i]=tempmqttServer[i];
239                     }
240                 }
241                 else
242                 {
243                     for(int i =0;i< 50 ;i++)
244                     {
245                         this->mqttServer[i]=this->mqttServer[i];
246                     }
247 
248                 }
249                 json["mqttServer"]=this->mqttServer;
250 
251                 
252                 if(json["inTopic"]\&.success() )
253                 {
254                     const char* tempInTopic = json["inTopic"]; // "inTopic"
255                     for(int i =0;i< 50;i++)
256                     {
257                         inTopic[i]=tempInTopic[i];
258                     }
259                 }
260                 else
261                 {
262                     String tempMAC = WiFi\&.macAddress();
263                     tempMAC\&.replace(":","");
264                     snprintf(inTopic, 50, "$aws/things/%s/shadow/update/delta", tempMAC\&.c_str());    
265                     Serial\&.print("Set Incomming MQTT Channel to : ");
266                     Serial\&.println(inTopic); 
267                 }
268                 json["inTopic"]=this->inTopic;
269                 
270                 
271                 if(json["outTopic"]\&.success() )
272                 {
273                     const char* tempOutTopic = json["outTopic"]; // "outTopic"
274                     for(int i =0;i<50;i++)
275                     {
276                         outTopic[i]=tempOutTopic[i];
277                     }
278                 }
279                 else
280                 {
281                     String tempMAC = WiFi\&.macAddress();
282                     tempMAC\&.replace(":","");
283                     snprintf(outTopic, 50, "$aws/things/%s/shadow/update", tempMAC\&.c_str());
284                     Serial\&.print("Set Outgoing MQTT Channel to : ");
285                     Serial\&.println(outTopic);
286                 }
287                 json["outTopic"]=this->outTopic;
288             
289                 
290                 if(json["user"]\&.success() )
291                 {               
292                     const char* tempUser = json["user"]; 
293                     for(int i =0;i<50;i++)
294                     {
295                         user[i]=tempUser[i];
296                     }
297                 }
298                 else
299                 {
300                     for(int i=0;i<50;i++)
301                     {
302                         this->user[i]=this->user[i];
303                     }               
304                 }
305                 json["user"]=this->user;
306                 
307                 if(json["bufferSize"]\&.success() )
308                 {
309                     int tempBufferSize = json["bufferSize"]; // 512
310                     bufferSize=tempBufferSize;
311                 }
312                 else
313                 {
314                     this->bufferSize=this->bufferSize;
315                 }
316                 json["bufferSize"]=this->bufferSize;
317 
318                 configFile\&.close();
319                 configFile = SPIFFS\&.open("/mqttConfig\&.json", "w");
320                 if(!configFile)
321                 {
322                     return(false);              
323                 }
324                 
325                 json\&.printTo(configFile);
326                 configFile\&.close();
327               
328               return(true); 
329         }
330     }   
331     
332 
333 }
.fi
.SS "int CoolMQTT::connect (uint16_t keepAlive)"
CoolMQTT::connect( time to keep the connection alive ): This method is provided to connect the client to the server, publish to the out topic , subscribe to the in topic and set the keepAlive time\&.
.PP
\fBReturns:\fP
.RS 4
mqtt client state 
.RE
.PP

.PP
Definition at line 64 of file CoolMQTT\&.cpp\&.
.PP
References client, inTopic, and user\&.
.PP
Referenced by CoolBoard::connect()\&.
.PP
.nf
65 {       
66     int i=0;
67     Serial\&.println("MQTT connecting\&.\&.\&.");
68     while ((!client\&.connected())&&(i<100)) 
69     {
70         // Attempt to connect
71         if (client\&.connect(user,keepAlive)) {
72             Serial\&.println("connected");
73             // Once connected, publish an announcement\&.\&.\&.
74             //client\&.publish(outTopic, "hello world by Ash");
75             // \&.\&.\&. and resubscribe
76             client\&.subscribe(inTopic);
77             Serial\&.println("published and subscribed , leavin ") ;
78             return(client\&.state());
79         }
80         else
81         {
82             Serial\&.println("not connected , leaving");
83             return(client\&.state());
84             
85         }
86     delay(5);
87     i++;
88     }
89     
90     return(1);
91 
92 }
.fi
.SS "String CoolMQTT::getUser ()"
\fBCoolMQTT::getUser()\fP: This method is provided to get the user name 
.PP
Definition at line 375 of file CoolMQTT\&.cpp\&.
.PP
References user\&.
.PP
Referenced by CoolBoard::userData()\&.
.PP
.nf
376 {
377     return String(user);
378 }
.fi
.SS "bool CoolMQTT::mqttLoop ()"
\fBCoolMQTT::mqttLoop()\fP: This method is provided to allow the client to process the data
.PP
\fBReturns:\fP
.RS 4
true if successful,false otherwise 
.RE
.PP

.PP
Definition at line 147 of file CoolMQTT\&.cpp\&.
.PP
References client\&.
.PP
Referenced by CoolBoard::onLineMode(), and CoolBoard::update()\&.
.PP
.nf
148 {
149     this->client\&.loop();
150     return(client\&.loop());
151 }
.fi
.SS "void CoolMQTT::printConf ()"
\fBCoolMQTT::printConf()\fP: This method is provided to print the configuration to the Serial Monitor 
.PP
Definition at line 358 of file CoolMQTT\&.cpp\&.
.PP
References bufferSize, inTopic, mqttServer, outTopic, and user\&.
.PP
Referenced by CoolBoard::begin()\&.
.PP
.nf
359 {
360     Serial\&.println("MQTT conf ");
361     Serial\&.println(mqttServer);
362     Serial\&.println(inTopic);
363     Serial\&.println(outTopic);
364     Serial\&.println(user);
365     Serial\&.println(bufferSize);
366     Serial\&.println(" ");
367 
368 
369 }
.fi
.SS "bool CoolMQTT::publish (const char * data)"
CoolMQTT::publish(data): This method is provided to publish data to the out topic
.PP
\fBReturns:\fP
.RS 4
true if publish successful, false otherwise 
.RE
.PP

.PP
Definition at line 102 of file CoolMQTT\&.cpp\&.
.PP
References client, and outTopic\&.
.PP
Referenced by CoolBoard::onLineMode(), publish(), and CoolBoard::update()\&.
.PP
.nf
103 {
104 
105     //data is in JSON, publish it directly
106 
107     Serial\&.println("data to publish");
108     Serial\&.println(data);
109     Serial\&.print("data size ");Serial\&.println(strlen(data));
110     bool pub=client\&.publish( outTopic, data,strlen(data) );
111 
112 
113     return( pub);
114 
115 }
.fi
.SS "bool CoolMQTT::publish (const char * data, int logInterval)"
CoolMQTT::publish(data): This method is provided to publish data to the out topic every logInterval ms
.PP
\fBReturns:\fP
.RS 4
true if publish successful, false otherwise 
.RE
.PP

.PP
Definition at line 125 of file CoolMQTT\&.cpp\&.
.PP
References previousLogTime, and publish()\&.
.PP
.nf
126 {
127     if( (millis()-this->previousLogTime) >=( logInterval ) )
128     {
129         this->publish(data);
130 
131         this->previousLogTime=millis();
132 
133         return(true);
134     }
135     
136     return(false);
137 }
.fi
.SS "String CoolMQTT::read ()"
\fBCoolMQTT::read()\fP: This method is provided to return the last read message\&. 
.PP
Definition at line 186 of file CoolMQTT\&.cpp\&.
.PP
References msg, and newMsg\&.
.PP
Referenced by CoolBoard::onLineMode()\&.
.PP
.nf
187 {   
188     if(this->newMsg==true)
189     {
190         return(this->msg);
191         this->newMsg=false;
192     }
193     return(" ");
194 
195 }
.fi
.SS "int CoolMQTT::state ()"
\fBCoolMQTT::state()\fP: This method is provided to return the mqtt client's state\&. 
.PP
\fBReturns:\fP
.RS 4
mqtt client state: -4 : MQTT_CONNECTION_TIMEOUT - the server didn't respond within the keepalive time -3 : MQTT_CONNECTION_LOST - the network connection was broken -2 : MQTT_CONNECT_FAILED - the network connection failed -1 : MQTT_DISCONNECTED - the client is disconnected cleanly 0 : MQTT_CONNECTED - the cient is connected 1 : MQTT_CONNECT_BAD_PROTOCOL - the server doesn't support the requested version of MQTT 2 : MQTT_CONNECT_BAD_CLIENT_ID - the server rejected the client identifier 3 : MQTT_CONNECT_UNAVAILABLE - the server was unable to accept the connection 4 : MQTT_CONNECT_BAD_CREDENTIALS - the username/password were rejected 5 : MQTT_CONNECT_UNAUTHORIZED - the client was not authorized to connect 
.RE
.PP

.PP
Definition at line 51 of file CoolMQTT\&.cpp\&.
.PP
References client\&.
.PP
Referenced by CoolBoard::connect()\&.
.PP
.nf
52 {
53     return(client\&.state());
54 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "int CoolMQTT::bufferSize\fC [private]\fP"

.PP
Definition at line 56 of file CoolMQTT\&.h\&.
.PP
Referenced by begin(), config(), and printConf()\&.
.SS "PubSubClient CoolMQTT::client\fC [private]\fP"

.PP
Definition at line 58 of file CoolMQTT\&.h\&.
.PP
Referenced by begin(), connect(), mqttLoop(), publish(), and state()\&.
.SS "WiFiClient CoolMQTT::espClient\fC [private]\fP"

.PP
Definition at line 57 of file CoolMQTT\&.h\&.
.PP
Referenced by begin()\&.
.SS "char CoolMQTT::inTopic[50]\fC [private]\fP"

.PP
Definition at line 53 of file CoolMQTT\&.h\&.
.PP
Referenced by config(), connect(), and printConf()\&.
.SS "char CoolMQTT::mqttServer[50]\fC [private]\fP"

.PP
Definition at line 51 of file CoolMQTT\&.h\&.
.PP
Referenced by begin(), config(), and printConf()\&.
.SS "String CoolMQTT::msg\fC [private]\fP"

.PP
Definition at line 52 of file CoolMQTT\&.h\&.
.PP
Referenced by callback(), and read()\&.
.SS "bool CoolMQTT::newMsg\fC [private]\fP"

.PP
Definition at line 59 of file CoolMQTT\&.h\&.
.PP
Referenced by callback(), and read()\&.
.SS "char CoolMQTT::outTopic[50]\fC [private]\fP"

.PP
Definition at line 54 of file CoolMQTT\&.h\&.
.PP
Referenced by config(), printConf(), and publish()\&.
.SS "unsigned long CoolMQTT::previousLogTime =0\fC [private]\fP"

.PP
Definition at line 60 of file CoolMQTT\&.h\&.
.PP
Referenced by publish()\&.
.SS "char CoolMQTT::user[50]\fC [private]\fP"

.PP
Definition at line 55 of file CoolMQTT\&.h\&.
.PP
Referenced by config(), connect(), getUser(), and printConf()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolAPI from the source code\&.
