.TH "CoolMQTT" 3 "Mon Jul 10 2017" "CoolAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoolMQTT \- This class handles the mqtt client\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolMQTT\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBbegin\fP ()"
.br
.ti -1c
.RI "int \fBconnect\fP (uint16_t keepAlive)"
.br
.ti -1c
.RI "bool \fBpublish\fP (const char *data)"
.br
.ti -1c
.RI "bool \fBpublish\fP (const char *data, int logInterval)"
.br
.ti -1c
.RI "String \fBread\fP ()"
.br
.ti -1c
.RI "void \fBconfig\fP (const char \fBmqttServer\fP[], const char \fBinTopic\fP[], const char \fBoutTopic\fP[], const char \fBuser\fP[], int \fBbufferSize\fP)"
.br
.ti -1c
.RI "bool \fBconfig\fP ()"
.br
.ti -1c
.RI "void \fBcallback\fP (char *topic, byte *payload, unsigned int length)"
.br
.ti -1c
.RI "void \fBprintConf\fP ()"
.br
.ti -1c
.RI "int \fBstate\fP ()"
.br
.ti -1c
.RI "bool \fBmqttLoop\fP ()"
.br
.ti -1c
.RI "String \fBgetUser\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "char \fBmqttServer\fP [50] ={'0'}"
.br
.ti -1c
.RI "String \fBmsg\fP =''"
.br
.ti -1c
.RI "char \fBinTopic\fP [50] ={'0'}"
.br
.ti -1c
.RI "char \fBoutTopic\fP [50] ={'0'}"
.br
.ti -1c
.RI "char \fBuser\fP [50] ={'0'}"
.br
.ti -1c
.RI "int \fBbufferSize\fP =3000"
.br
.ti -1c
.RI "WiFiClient \fBespClient\fP"
.br
.ti -1c
.RI "PubSubClient \fBclient\fP"
.br
.ti -1c
.RI "bool \fBnewMsg\fP =0"
.br
.ti -1c
.RI "unsigned long \fBpreviousLogTime\fP =0"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class handles the mqtt client\&. 
.PP
Definition at line 22 of file CoolMQTT\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "void CoolMQTT::begin ()"
\fBCoolMQTT::begin()\fP: This method is provided to set the mqtt client's parameters: -client -server -callback method -buffer size 
.PP
Definition at line 39 of file CoolMQTT\&.cpp\&.
.PP
References bufferSize, callback(), client, espClient, and mqttServer\&.
.PP
Referenced by CoolBoard::begin(), and CoolBoard::update()\&.
.PP
.nf
40 { 
41 
42 #if DEBUG == 1 
43 
44     Serial\&.println("Entering CoolMQTT\&.begin()");
45     Serial\&.println();
46 
47 #endif
48 
49     client\&.setClient(espClient);
50     client\&.setServer(mqttServer, 1883);  
51     client\&.setCallback([this] (char* topic, byte* payload, unsigned int length) { this->callback(topic, payload, length); });
52     client\&.setBufferSize((unsigned short)bufferSize);
53 
54 }
.fi
.SS "void CoolMQTT::callback (char * topic, byte * payload, unsigned int length)"
CoolMQTT::callback(in topic, incoming message , message length): This method is provided to handle incoming messages from the subscribed inTopic\&.
.PP
Arguments are automatically assigned in client\&.setCallback() 
.PP
Definition at line 282 of file CoolMQTT\&.cpp\&.
.PP
References msg, newMsg, and temp\&.
.PP
Referenced by begin()\&.
.PP
.nf
283 {
284 
285 #if DEBUG == 1
286 
287     Serial\&.println("Entering CoolMQTT\&.callback() ");
288     Serial\&.println();
289 
290 #endif 
291 
292     if(this->newMsg==false)
293     {
294         char temp[length+1];
295 
296     #if DEBUG == 1
297 
298         Serial\&.println("received temp msg : ");
299 
300     #endif
301         
302         for (int i = 0; i < length; i++) 
303         {
304             temp[i]=(char)payload[i];
305         
306         #if DEBUG == 1 
307 
308             Serial\&.print( (char)payload[i] );
309         
310         #endif
311 
312         }
313     
314     #if DEBUG == 1 
315 
316         Serial\&.println();
317         Serial\&.println("storing new message : ");
318         Serial\&.println();
319     
320     #endif
321 
322         this->newMsg=true;
323 
324         temp[length+1]='\0';
325 
326         this->msg=String(temp);
327         this->msg\&.remove(length,1);
328     
329     #if DEBUG == 1 
330 
331         Serial\&.println("stored message : ");
332         Serial\&.println(this->msg);
333     
334     #endif
335 
336     }
337     else
338     {
339     
340     #if DEBUG == 1
341 
342         Serial\&.println("did not read last message");
343     
344     #endif 
345         
346     }
347 
348 }
.fi
.SS "void CoolMQTT::config (const char mqttServer[], const char inTopic[], const char outTopic[], const char user[], int bufferSize)"
CoolMQTT::config(server,in topic, out topic , user Id, buffer size): This method is provided to manually configure the mqtt client 
.PP
Definition at line 588 of file CoolMQTT\&.cpp\&.
.PP
References bufferSize\&.
.PP
Referenced by CoolBoard::begin(), and CoolBoard::update()\&.
.PP
.nf
589 {
590 
591 #if DEBUG == 1
592 
593     Serial\&.println("Entering CoolMQTT\&.config() , no SPIFFS variant");
594     Serial\&.println();
595 
596 #endif
597 
598     for(int i =0;i< 50 ;i++)
599     {
600         this->mqttServer[i]=mqttServer[i];
601         this->inTopic[i]=inTopic[i];
602         this->outTopic[i]=outTopic[i];
603         this->user[i]=user[i];
604     }
605     this->bufferSize=bufferSize;
606     
607 
608 }
.fi
.SS "bool CoolMQTT::config ()"
\fBCoolMQTT::config()\fP: This method is provided to configure the mqttClient : -server -inTopic -outTopic -client Id -buffer size
.PP
\fBReturns:\fP
.RS 4
true if successful,false otherwise 
.RE
.PP

.PP
Definition at line 396 of file CoolMQTT\&.cpp\&.
.PP
References bufferSize, inTopic, mqttServer, outTopic, and user\&.
.PP
.nf
397 {
398 
399 #if DEBUG == 1 
400 
401     Serial\&.println("Entering CoolMQTT\&.config()");
402     Serial\&.println();
403 
404 #endif
405 
406     //read config file
407     //update data
408     File configFile = SPIFFS\&.open("/mqttConfig\&.json", "r");
409 
410     if (!configFile) 
411     {
412     
413     #if DEBUG == 1 
414 
415         Serial\&.println("failed to read /mqttConfig\&.json");
416         Serial\&.println();
417 
418     #endif
419 
420         return(false);
421     }
422     else
423     {
424         size_t size = configFile\&.size();
425         // Allocate a buffer to store contents of the file\&.
426         std::unique_ptr<char[]> buf(new char[size]);
427 
428         configFile\&.readBytes(buf\&.get(), size);
429         DynamicJsonBuffer jsonBuffer;
430         JsonObject& json = jsonBuffer\&.parseObject(buf\&.get());
431         if (!json\&.success()) 
432         {
433         
434         #if DEBUG == 1 
435 
436             Serial\&.println("failed to parse json ");
437             Serial\&.println();
438         
439         #endif
440             
441             return(false);
442         } 
443         else
444         {
445         
446         #if DEBUG == 1 
447         
448             Serial\&.println("configuration json is ");
449             json\&.printTo(Serial);
450             Serial\&.println();
451 
452         #endif
453 
454             if(json["mqttServer"]\&.success() )
455             {           
456                 const char* tempmqttServer = json["mqttServer"]; 
457                 for(int i =0;i< 50 ;i++)
458                 {
459                     mqttServer[i]=tempmqttServer[i];
460                 }
461             }
462             else
463             {
464                 for(int i =0;i< 50 ;i++)
465                 {
466                     this->mqttServer[i]=this->mqttServer[i];
467                 }
468 
469             }
470             json["mqttServer"]=this->mqttServer;
471 
472             
473             if(json["inTopic"]\&.success() )
474             {
475                 const char* tempInTopic = json["inTopic"]; 
476                 for(int i =0;i< 50;i++)
477                 {
478                     inTopic[i]=tempInTopic[i];
479                 }
480             }
481             else
482             {
483                 String tempMAC = WiFi\&.macAddress();
484                 tempMAC\&.replace(":","");
485                 snprintf(inTopic, 50, "$aws/things/%s/shadow/update/delta", tempMAC\&.c_str());    
486             
487             #if DEBUG == 1              
488                 
489                 Serial\&.print("Set Incomming MQTT Channel to : ");
490                 Serial\&.println(inTopic);
491             
492             #endif  
493 
494             }
495             json["inTopic"]=this->inTopic;
496             
497             
498             if(json["outTopic"]\&.success() )
499             {
500                 const char* tempOutTopic = json["outTopic"]; 
501                 for(int i =0;i<50;i++)
502                 {
503                     outTopic[i]=tempOutTopic[i];
504                 }
505             }
506             else
507             {
508                 String tempMAC = WiFi\&.macAddress();
509                 tempMAC\&.replace(":","");
510                 snprintf(outTopic, 50, "$aws/things/%s/shadow/update", tempMAC\&.c_str());
511             
512             #if DEBUG == 1 
513 
514                 Serial\&.print("Set Outgoing MQTT Channel to : ");
515                 Serial\&.println(outTopic);
516             
517             #endif
518 
519             }
520             json["outTopic"]=this->outTopic;
521         
522             
523             if(json["user"]\&.success() )
524             {               
525                 const char* tempUser = json["user"]; 
526                 for(int i =0;i<50;i++)
527                 {
528                     user[i]=tempUser[i];
529                 }
530             }
531             else
532             {
533                 for(int i=0;i<50;i++)
534                 {
535                     this->user[i]=this->user[i];
536                 }               
537             }
538             json["user"]=this->user;
539             
540             if(json["bufferSize"]\&.success() )
541             {
542                 int tempBufferSize = json["bufferSize"]; 
543                 bufferSize=tempBufferSize;
544             }
545             else
546             {
547                 this->bufferSize=this->bufferSize;
548             }
549             json["bufferSize"]=this->bufferSize;
550 
551             configFile\&.close();
552             configFile = SPIFFS\&.open("/mqttConfig\&.json", "w");
553             if(!configFile)
554             {
555             
556             #if DEBUG == 1 
557 
558                 Serial\&.println("failed to write to /mqttConfig\&.json");
559             
560             #endif
561 
562                 return(false);              
563             }
564             
565             json\&.printTo(configFile);
566             configFile\&.close();
567 
568         #if DEBUG == 1 
569 
570             Serial\&.println("saved configuration is :");
571             json\&.printTo(Serial);
572             Serial\&.println();
573         
574         #endif
575 
576             return(true); 
577         }
578     }   
579     
580 
581 }
.fi
.SS "int CoolMQTT::connect (uint16_t keepAlive)"
CoolMQTT::connect( time to keep the connection alive ): This method is provided to connect the client to the server, publish to the out topic , subscribe to the in topic and set the keepAlive time\&.
.PP
\fBReturns:\fP
.RS 4
mqtt client state 
.RE
.PP

.PP
Definition at line 95 of file CoolMQTT\&.cpp\&.
.PP
References client, inTopic, state(), and user\&.
.PP
Referenced by CoolBoard::connect()\&.
.PP
.nf
96 {       
97 
98     int i=0;
99 
100 #if DEBUG == 1 
101 
102     Serial\&.println("Entering CoolMQTT\&.connect()");
103     Serial\&.println("MQTT connecting\&.\&.\&.");
104 
105 #endif
106 
107     while( ( !this->client\&.connected() ) && ( i<100 ) ) 
108     {
109         // Attempt to connect
110         if( this->client\&.connect( this-> user, keepAlive ) )
111         {
112             client\&.subscribe( this->inTopic );
113 
114         #if DEBUG == 1 
115 
116             Serial\&.println("MQTT connected");
117             Serial\&.println(" subscribed , leavin ") ;
118         
119         #endif
120 
121             return( this->state() );
122         }
123 
124         else
125         {
126         
127         #if DEBUG == 1 
128 
129             Serial\&.println("not connected , retrying");
130         
131         #endif
132 
133             
134         }
135 
136     delay(5);
137     i++;
138     }
139     
140     return( this->state() );
141 
142 }
.fi
.SS "String CoolMQTT::getUser ()"
\fBCoolMQTT::getUser()\fP: This method is provided to get the user name 
.PP
Definition at line 651 of file CoolMQTT\&.cpp\&.
.PP
References user\&.
.PP
Referenced by CoolBoard::userData()\&.
.PP
.nf
652 {
653 
654 #if DEBUG == 1 
655     Serial\&.println("Entering CoolMQTT\&.getUser()");
656     Serial\&.println();
657     
658     Serial\&.print("user : ");
659     Serial\&.println(this->user);
660 
661 #endif
662 
663     return String(this->user);
664 }
.fi
.SS "bool CoolMQTT::mqttLoop ()"
\fBCoolMQTT::mqttLoop()\fP: This method is provided to allow the client to process the data
.PP
\fBReturns:\fP
.RS 4
true if successful,false otherwise 
.RE
.PP

.PP
Definition at line 247 of file CoolMQTT\&.cpp\&.
.PP
References client\&.
.PP
Referenced by CoolBoard::onLineMode(), and CoolBoard::update()\&.
.PP
.nf
248 {
249 
250     unsigned long lastTime=millis();
251 
252 #if DEBUG == 1
253 
254     Serial\&.println("Entering CoolMQTT\&.mqttLoop()");
255     Serial\&.println();
256 
257 #endif  
258 
259     while( ( millis() - lastTime ) < 5000)
260     {
261         this->client\&.loop(); 
262     }
263 
264 #if DEBUG == 1 
265     
266     Serial\&.print("loop result : ");
267     Serial\&.println( this->client\&.loop() );
268     Serial\&.println();
269 
270 #endif
271 
272     return( this->client\&.loop() );
273 }
.fi
.SS "void CoolMQTT::printConf ()"
\fBCoolMQTT::printConf()\fP: This method is provided to print the configuration to the Serial Monitor 
.PP
Definition at line 615 of file CoolMQTT\&.cpp\&.
.PP
References bufferSize, inTopic, mqttServer, outTopic, and user\&.
.PP
Referenced by CoolBoard::begin()\&.
.PP
.nf
616 {
617 
618 #if DEBUG == 1 
619 
620     Serial\&.println("Entering CoolMQTT\&.printConf()");
621     Serial\&.println();    
622 
623 #endif
624     
625     Serial\&.println("MQTT configuration ");
626 
627     Serial\&.print("mqttServer : ");
628     Serial\&.println(this->mqttServer);
629 
630     Serial\&.print("inTopic : ");
631     Serial\&.println(this->inTopic);
632 
633     Serial\&.print("outTopic : ");
634     Serial\&.println(this->outTopic);
635 
636     Serial\&.print("user : ");
637     Serial\&.println(this->user);
638 
639     Serial\&.print("bufferSize : ");
640     Serial\&.println(this->bufferSize);
641 
642     Serial\&.println();
643 
644 
645 }
.fi
.SS "bool CoolMQTT::publish (const char * data)"
CoolMQTT::publish(data): This method is provided to publish data to the out topic
.PP
\fBReturns:\fP
.RS 4
true if publish successful, false otherwise 
.RE
.PP

.PP
Definition at line 152 of file CoolMQTT\&.cpp\&.
.PP
References client, and outTopic\&.
.PP
Referenced by CoolBoard::onLineMode(), publish(), and CoolBoard::update()\&.
.PP
.nf
153 {
154 
155 #if DEBUG == 1 
156 
157     Serial\&.println("Entering CoolMQTT\&.publish()");
158     Serial\&.println();
159     //data is in JSON, publish it directly
160 
161     Serial\&.println("data to publish : ");
162     Serial\&.println(data);
163     Serial\&.print("data size : ");
164     Serial\&.println(strlen(data));
165 
166     Serial\&.println();
167 
168 #endif
169     
170 <<<<<<< HEAD
171     bool pub=client\&.publish( this->outTopic, data,strlen(data) );
172 
173 #if DEBUG == 1 
174 =======
175     bool pub=client\&.publish( this->outTopic, data,strlen(data));
176 >>>>>>> 022ecfccbd47fa628feca52fc7c1ee420c585e2b
177     
178     Serial\&.print("success : ");
179     Serial\&.println(pub); 
180 
181 #endif
182 
183     return(pub);
184 
185 }
.fi
.SS "bool CoolMQTT::publish (const char * data, int logInterval)"
CoolMQTT::publish(data): This method is provided to publish data to the out topic every logInterval ms
.PP
\fBReturns:\fP
.RS 4
true if publish successful, false otherwise 
.RE
.PP

.PP
Definition at line 195 of file CoolMQTT\&.cpp\&.
.PP
References previousLogTime, and publish()\&.
.PP
.nf
196 {
197 
198 #if DEBUG == 1 
199 
200     Serial\&.println("Entering CoolMQTT\&.publish() every logInterval ");
201     Serial\&.println();
202 
203 #endif 
204     
205     if( ( millis() - ( this->previousLogTime)  ) >=( logInterval ) )
206     {
207     
208     #if DEBUG == 1
209 
210         Serial\&.println("log Interval has passed ");
211         Serial\&.println();
212     
213     #endif
214 
215         this->publish(data);
216 
217         this->previousLogTime=millis();
218     
219     #if DEBUG == 1 
220 
221         Serial\&.print("last log time : ");
222         Serial\&.println(this->previousLogTime);
223 
224     #endif
225 
226         return(true);
227     }
228 
229 #if DEBUG == 1 
230 
231     Serial\&.println("log Interval still didn't pass ");   
232     Serial\&.println();
233 
234 #endif
235 
236     return(false);
237 }
.fi
.SS "String CoolMQTT::read ()"
\fBCoolMQTT::read()\fP: This method is provided to return the last read message\&. 
.PP
Definition at line 355 of file CoolMQTT\&.cpp\&.
.PP
References msg, and newMsg\&.
.PP
Referenced by CoolBoard::onLineMode()\&.
.PP
.nf
356 {   
357 
358 #if DEBUG == 1 
359 
360     Serial\&.println("Entering CoolMQTT\&.read()");
361     Serial\&.println();
362 
363 #endif 
364 
365     if(this->newMsg==true)
366     {
367         
368         this->newMsg=false;
369 
370 #if DEBUG == 1 
371         Serial\&.println("received new message");
372         Serial\&.println("message : ");
373         Serial\&.println(this->msg);
374         Serial\&.println();
375 
376 #endif
377 
378         return(this->msg);
379         
380     }
381     return("");
382 
383 }
.fi
.SS "int CoolMQTT::state ()"
\fBCoolMQTT::state()\fP: This method is provided to return the mqtt client's state\&. 
.PP
\fBReturns:\fP
.RS 4
mqtt client state: -4 : MQTT_CONNECTION_TIMEOUT - the server didn't respond within the keepalive time -3 : MQTT_CONNECTION_LOST - the network connection was broken -2 : MQTT_CONNECT_FAILED - the network connection failed -1 : MQTT_DISCONNECTED - the client is disconnected cleanly 0 : MQTT_CONNECTED - the cient is connected 1 : MQTT_CONNECT_BAD_PROTOCOL - the server doesn't support the requested version of MQTT 2 : MQTT_CONNECT_BAD_CLIENT_ID - the server rejected the client identifier 3 : MQTT_CONNECT_UNAVAILABLE - the server was unable to accept the connection 4 : MQTT_CONNECT_BAD_CREDENTIALS - the username/password were rejected 5 : MQTT_CONNECT_UNAUTHORIZED - the client was not authorized to connect 
.RE
.PP

.PP
Definition at line 72 of file CoolMQTT\&.cpp\&.
.PP
References client\&.
.PP
Referenced by connect(), and CoolBoard::connect()\&.
.PP
.nf
73 {
74 
75 #if DEBUG == 1 
76 
77     Serial\&.println("Entering CoolMQTT\&.state()");
78     Serial\&.println();    
79     Serial\&.print("state : ");
80     Serial\&.println( this->client\&.state() );
81 
82 #endif
83     
84     return( this->client\&.state() );
85 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "int CoolMQTT::bufferSize =3000\fC [private]\fP"

.PP
Definition at line 56 of file CoolMQTT\&.h\&.
.PP
Referenced by begin(), config(), and printConf()\&.
.SS "PubSubClient CoolMQTT::client\fC [private]\fP"

.PP
Definition at line 58 of file CoolMQTT\&.h\&.
.PP
Referenced by begin(), connect(), mqttLoop(), publish(), and state()\&.
.SS "WiFiClient CoolMQTT::espClient\fC [private]\fP"

.PP
Definition at line 57 of file CoolMQTT\&.h\&.
.PP
Referenced by begin()\&.
.SS "char CoolMQTT::inTopic[50] ={'0'}\fC [private]\fP"

.PP
Definition at line 53 of file CoolMQTT\&.h\&.
.PP
Referenced by config(), connect(), and printConf()\&.
.SS "char CoolMQTT::mqttServer[50] ={'0'}\fC [private]\fP"

.PP
Definition at line 51 of file CoolMQTT\&.h\&.
.PP
Referenced by begin(), config(), and printConf()\&.
.SS "String CoolMQTT::msg =''\fC [private]\fP"

.PP
Definition at line 52 of file CoolMQTT\&.h\&.
.PP
Referenced by callback(), and read()\&.
.SS "bool CoolMQTT::newMsg =0\fC [private]\fP"

.PP
Definition at line 59 of file CoolMQTT\&.h\&.
.PP
Referenced by callback(), and read()\&.
.SS "char CoolMQTT::outTopic[50] ={'0'}\fC [private]\fP"

.PP
Definition at line 54 of file CoolMQTT\&.h\&.
.PP
Referenced by config(), printConf(), and publish()\&.
.SS "unsigned long CoolMQTT::previousLogTime =0\fC [private]\fP"

.PP
Definition at line 60 of file CoolMQTT\&.h\&.
.PP
Referenced by publish()\&.
.SS "char CoolMQTT::user[50] ={'0'}\fC [private]\fP"

.PP
Definition at line 55 of file CoolMQTT\&.h\&.
.PP
Referenced by config(), connect(), getUser(), and printConf()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolAPI from the source code\&.
