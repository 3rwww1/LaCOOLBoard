.TH "CoolMQTT" 3 "Wed Aug 2 2017" "CoolAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoolMQTT \- This class handles the mqtt client\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolMQTT\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBbegin\fP ()"
.br
.ti -1c
.RI "int \fBconnect\fP (unsigned long keepAlive)"
.br
.ti -1c
.RI "bool \fBpublish\fP (const char *data)"
.br
.ti -1c
.RI "bool \fBpublish\fP (const char *data, unsigned long logInterval)"
.br
.ti -1c
.RI "String \fBread\fP ()"
.br
.ti -1c
.RI "void \fBconfig\fP (const char \fBmqttServer\fP[], const char \fBinTopic\fP[], const char \fBoutTopic\fP[], const char \fBuser\fP[], int \fBbufferSize\fP)"
.br
.ti -1c
.RI "bool \fBconfig\fP ()"
.br
.ti -1c
.RI "void \fBcallback\fP (char *topic, byte *payload, unsigned int length)"
.br
.ti -1c
.RI "void \fBprintConf\fP ()"
.br
.ti -1c
.RI "int \fBstate\fP ()"
.br
.ti -1c
.RI "bool \fBmqttLoop\fP ()"
.br
.ti -1c
.RI "String \fBgetUser\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "char \fBmqttServer\fP [50] ={'0'}"
.br
.ti -1c
.RI "String \fBmsg\fP =''"
.br
.ti -1c
.RI "char \fBinTopic\fP [50] ={'0'}"
.br
.ti -1c
.RI "char \fBoutTopic\fP [50] ={'0'}"
.br
.ti -1c
.RI "char \fBuser\fP [50] ={'0'}"
.br
.ti -1c
.RI "int \fBbufferSize\fP =3000"
.br
.ti -1c
.RI "WiFiClient \fBespClient\fP"
.br
.ti -1c
.RI "PubSubClient \fBclient\fP"
.br
.ti -1c
.RI "bool \fBnewMsg\fP =0"
.br
.ti -1c
.RI "unsigned long \fBpreviousLogTime\fP =0"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class handles the mqtt client\&. 
.PP
Definition at line 22 of file CoolMQTT\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "void CoolMQTT::begin ()"
\fBCoolMQTT::begin()\fP: This method is provided to set the mqtt client's parameters: -client -server -callback method -buffer size 
.PP
Definition at line 39 of file CoolMQTT\&.cpp\&.
.PP
References bufferSize, callback(), client, espClient, and mqttServer\&.
.PP
Referenced by CoolBoard::begin()\&.
.PP
.nf
40 { 
41 
42 #if DEBUG == 1 
43 
44     Serial\&.println( F("Entering CoolMQTT\&.begin()") );
45     Serial\&.println();
46 
47 #endif
48 
49     client\&.setClient(espClient);
50     client\&.setServer(mqttServer, 1883);  
51     client\&.setCallback([this] (char* topic, byte* payload, unsigned int length) { this->callback(topic, payload, length); });
52     client\&.setBufferSize((unsigned short)bufferSize);
53 
54 }
.fi
.SS "void CoolMQTT::callback (char * topic, byte * payload, unsigned int length)"
CoolMQTT::callback(in topic, incoming message , message length): This method is provided to handle incoming messages from the subscribed inTopic\&.
.PP
Arguments are automatically assigned in client\&.setCallback() 
.PP
Definition at line 281 of file CoolMQTT\&.cpp\&.
.PP
References msg, newMsg, and temp\&.
.PP
Referenced by begin()\&.
.PP
.nf
282 {
283 
284 #if DEBUG == 1
285 
286     Serial\&.println( F("Entering CoolMQTT\&.callback() ") );
287     Serial\&.println();
288 
289 #endif 
290 
291     if(this->newMsg==false)
292     {
293         char temp[length+1];
294 
295     #if DEBUG == 1
296 
297         Serial\&.println( F("received temp msg : ") );
298         
299     #endif
300         
301         for (unsigned int i = 0; i < length; i++) 
302         {
303             temp[i]=(char)payload[i];
304         
305         #if DEBUG == 1 
306 
307             Serial\&.print( (char)payload[i] );
308         
309         #endif
310 
311         }
312     
313     #if DEBUG == 1 
314 
315         Serial\&.println();
316         Serial\&.println( F("storing new message : ") );
317 
318         Serial\&.print(F("length : "));
319         Serial\&.println(length);
320         
321         Serial\&.print(F("size : "));
322         Serial\&.print(sizeof(payload));
323         Serial\&.println();
324     
325     #endif
326 
327         this->newMsg=true;
328 
329         temp[length+1]='\0';
330 
331         this->msg=String(temp);
332         this->msg\&.remove(length,1);
333     
334     #if DEBUG == 1 
335 
336         Serial\&.println( F("stored message : ") );
337         Serial\&.println(this->msg);
338     
339     #endif
340 
341     }
342     else
343     {
344     
345     #if DEBUG == 1
346 
347         Serial\&.println( F("did not read last message") );
348     
349     #endif 
350         
351     }
352 
353 }
.fi
.SS "void CoolMQTT::config (const char mqttServer[], const char inTopic[], const char outTopic[], const char user[], int bufferSize)"
CoolMQTT::config(server,in topic, out topic , user Id, buffer size): This method is provided to manually configure the mqtt client 
.PP
Definition at line 598 of file CoolMQTT\&.cpp\&.
.PP
References bufferSize\&.
.PP
Referenced by CoolBoard::begin()\&.
.PP
.nf
599 {
600 
601 #if DEBUG == 1
602 
603     Serial\&.println( F("Entering CoolMQTT\&.config() , no SPIFFS variant") );
604     Serial\&.println();
605 
606 #endif
607 
608     for(int i =0;i< 50 ;i++)
609     {
610         this->mqttServer[i]=mqttServer[i];
611         this->inTopic[i]=inTopic[i];
612         this->outTopic[i]=outTopic[i];
613         this->user[i]=user[i];
614     }
615     this->bufferSize=bufferSize;
616     
617 
618 }
.fi
.SS "bool CoolMQTT::config ()"
\fBCoolMQTT::config()\fP: This method is provided to configure the mqttClient : -server -inTopic -outTopic -client Id -buffer size
.PP
\fBReturns:\fP
.RS 4
true if successful,false otherwise 
.RE
.PP

.PP
Definition at line 401 of file CoolMQTT\&.cpp\&.
.PP
References bufferSize, inTopic, mqttServer, outTopic, and user\&.
.PP
.nf
402 {
403 
404 #if DEBUG == 1 
405 
406     Serial\&.println( F("Entering CoolMQTT\&.config()") );
407     Serial\&.println();
408 
409 #endif
410 
411     //read config file
412     //update data
413     File configFile = SPIFFS\&.open("/mqttConfig\&.json", "r");
414 
415     if (!configFile) 
416     {
417     
418     #if DEBUG == 1 
419 
420         Serial\&.println( F("failed to read /mqttConfig\&.json") );
421         Serial\&.println();
422 
423     #endif
424 
425         return(false);
426     }
427     else
428     {
429         size_t size = configFile\&.size();
430         // Allocate a buffer to store contents of the file\&.
431         std::unique_ptr<char[]> buf(new char[size]);
432 
433         configFile\&.readBytes(buf\&.get(), size);
434         DynamicJsonBuffer jsonBuffer;
435         JsonObject& json = jsonBuffer\&.parseObject(buf\&.get());
436         if (!json\&.success()) 
437         {
438         
439         #if DEBUG == 1 
440 
441             Serial\&.println( F("failed to parse json ") );
442             Serial\&.println();
443         
444         #endif
445             
446             return(false);
447         } 
448         else
449         {
450         
451         #if DEBUG == 1 
452         
453             Serial\&.println( F("configuration json is ") );
454             json\&.printTo(Serial);
455             Serial\&.println();
456 
457             Serial\&.print(F("jsonBuffer size: "));
458             Serial\&.println(jsonBuffer\&.size());
459             Serial\&.println();
460 
461 
462         #endif
463 
464             if(json["mqttServer"]\&.success() )
465             {           
466                 const char* tempmqttServer = json["mqttServer"]; 
467                 for(int i =0;i< 50 ;i++)
468                 {
469                     mqttServer[i]=tempmqttServer[i];
470                 }
471             }
472             else
473             {
474                 for(int i =0;i< 50 ;i++)
475                 {
476                     this->mqttServer[i]=this->mqttServer[i];
477                 }
478 
479             }
480             json["mqttServer"]=this->mqttServer;
481 
482             
483             if(json["inTopic"]\&.success() )
484             {
485                 const char* tempInTopic = json["inTopic"]; 
486                 for(int i =0;i< 50;i++)
487                 {
488                     inTopic[i]=tempInTopic[i];
489                 }
490             }
491             else
492             {
493                 String tempMAC = WiFi\&.macAddress();
494                 tempMAC\&.replace(":","");
495                 snprintf(inTopic, 50, "$aws/things/%s/shadow/update/delta", tempMAC\&.c_str());    
496             
497             #if DEBUG == 1              
498                 
499                 Serial\&.print( F("Set Incomming MQTT Channel to : ") );
500                 Serial\&.println(inTopic);
501             
502             #endif  
503 
504             }
505             json["inTopic"]=this->inTopic;
506             
507             
508             if(json["outTopic"]\&.success() )
509             {
510                 const char* tempOutTopic = json["outTopic"]; 
511                 for(int i =0;i<50;i++)
512                 {
513                     outTopic[i]=tempOutTopic[i];
514                 }
515             }
516             else
517             {
518                 String tempMAC = WiFi\&.macAddress();
519                 tempMAC\&.replace(":","");
520                 snprintf(outTopic, 50, "$aws/things/%s/shadow/update", tempMAC\&.c_str());
521             
522             #if DEBUG == 1 
523 
524                 Serial\&.print( F("Set Outgoing MQTT Channel to : ") );
525                 Serial\&.println(outTopic);
526             
527             #endif
528 
529             }
530             json["outTopic"]=this->outTopic;
531         
532             
533             if(json["user"]\&.success() )
534             {               
535                 const char* tempUser = json["user"]; 
536                 for(int i =0;i<50;i++)
537                 {
538                     user[i]=tempUser[i];
539                 }
540             }
541             else
542             {
543                 for(int i=0;i<50;i++)
544                 {
545                     this->user[i]=this->user[i];
546                 }               
547             }
548             json["user"]=this->user;
549             
550             if(json["bufferSize"]\&.success() )
551             {
552                 int tempBufferSize = json["bufferSize"]; 
553                 bufferSize=tempBufferSize;
554             }
555             else
556             {
557                 this->bufferSize=this->bufferSize;
558             }
559             json["bufferSize"]=this->bufferSize;
560 
561             configFile\&.close();
562             configFile = SPIFFS\&.open("/mqttConfig\&.json", "w");
563             if(!configFile)
564             {
565             
566             #if DEBUG == 1 
567 
568                 Serial\&.println( F("failed to write to /mqttConfig\&.json") );
569             
570             #endif
571 
572                 return(false);              
573             }
574             
575             json\&.printTo(configFile);
576             configFile\&.close();
577 
578         #if DEBUG == 1 
579 
580             Serial\&.println( F("saved configuration is :") );
581             json\&.printTo(Serial);
582             Serial\&.println();
583         
584         #endif
585 
586             return(true); 
587         }
588     }   
589     
590 
591 }
.fi
.SS "int CoolMQTT::connect (unsigned long keepAlive)"
CoolMQTT::connect( time to keep the connection alive ): This method is provided to connect the client to the server, publish to the out topic , subscribe to the in topic and set the keepAlive time\&.
.PP
\fBReturns:\fP
.RS 4
mqtt client state 
.RE
.PP

.PP
Definition at line 95 of file CoolMQTT\&.cpp\&.
.PP
References client, inTopic, state(), and user\&.
.PP
Referenced by CoolBoard::connect()\&.
.PP
.nf
96 {       
97 
98     int i=0;
99 
100     uint16_t keepAliveSeconds = keepAlive/1000;
101 
102 #if DEBUG == 1 
103 
104     Serial\&.println( F("Entering CoolMQTT\&.connect()") );
105     Serial\&.println( F("MQTT connecting\&.\&.\&.") );
106 
107 #endif
108     
109     while( ( !this->client\&.connected() ) && ( i<100 ) ) 
110     {
111         // Attempt to connect
112         if( this->client\&.connect( this-> user,keepAliveSeconds  ) )
113         {
114             client\&.subscribe( this->inTopic );
115 
116         #if DEBUG == 1 
117 
118             Serial\&.println( F("MQTT connected") );
119             Serial\&.println( F(" subscribed , leavin ") ) ;
120         
121         #endif
122 
123             return( this->state() );
124         }
125 
126         else
127         {
128         
129         #if DEBUG == 1 
130 
131             Serial\&.println( F("not connected , retrying") );
132         
133         #endif
134 
135             
136         }
137 
138     delay(5);
139     i++;
140     }
141     
142     return( this->state() );
143 
144 }
.fi
.SS "String CoolMQTT::getUser ()"
\fBCoolMQTT::getUser()\fP: This method is provided to get the user name 
.PP
Definition at line 661 of file CoolMQTT\&.cpp\&.
.PP
References user\&.
.PP
Referenced by CoolBoard::userData()\&.
.PP
.nf
662 {
663 
664 #if DEBUG == 1 
665     Serial\&.println( F("Entering CoolMQTT\&.getUser()") );
666     Serial\&.println();
667     
668     Serial\&.print( F("user : ") );
669     Serial\&.println(this->user);
670 
671 #endif
672 
673     return String(this->user);
674 }
.fi
.SS "bool CoolMQTT::mqttLoop ()"
\fBCoolMQTT::mqttLoop()\fP: This method is provided to allow the client to process the data
.PP
\fBReturns:\fP
.RS 4
true if successful,false otherwise 
.RE
.PP

.PP
Definition at line 246 of file CoolMQTT\&.cpp\&.
.PP
References client\&.
.PP
Referenced by CoolBoard::onLineMode(), and CoolBoard::update()\&.
.PP
.nf
247 {
248 
249     unsigned long lastTime=millis();
250 
251 #if DEBUG == 1
252 
253     Serial\&.println( F("Entering CoolMQTT\&.mqttLoop()") );
254     Serial\&.println();
255 
256 #endif  
257 
258     while( ( millis() - lastTime ) < 5000)
259     {
260         this->client\&.loop(); 
261     }
262 
263 #if DEBUG == 1 
264     
265     Serial\&.print( F("loop result : ") );
266     Serial\&.println( this->client\&.loop() );
267     Serial\&.println();
268 
269 #endif
270 
271     return( this->client\&.loop() );
272 }
.fi
.SS "void CoolMQTT::printConf ()"
\fBCoolMQTT::printConf()\fP: This method is provided to print the configuration to the Serial Monitor 
.PP
Definition at line 625 of file CoolMQTT\&.cpp\&.
.PP
References bufferSize, inTopic, mqttServer, outTopic, and user\&.
.PP
Referenced by CoolBoard::begin()\&.
.PP
.nf
626 {
627 
628 #if DEBUG == 1 
629 
630     Serial\&.println( F("Entering CoolMQTT\&.printConf()") );
631     Serial\&.println();    
632 
633 #endif
634     
635     Serial\&.println("MQTT configuration ");
636 
637     Serial\&.print("mqttServer : ");
638     Serial\&.println(this->mqttServer);
639 
640     Serial\&.print("inTopic : ");
641     Serial\&.println(this->inTopic);
642 
643     Serial\&.print("outTopic : ");
644     Serial\&.println(this->outTopic);
645 
646     Serial\&.print("user : ");
647     Serial\&.println(this->user);
648 
649     Serial\&.print("bufferSize : ");
650     Serial\&.println(this->bufferSize);
651 
652     Serial\&.println();
653 
654 
655 }
.fi
.SS "bool CoolMQTT::publish (const char * data)"
CoolMQTT::publish(data): This method is provided to publish data to the out topic
.PP
\fBReturns:\fP
.RS 4
true if publish successful, false otherwise 
.RE
.PP

.PP
Definition at line 154 of file CoolMQTT\&.cpp\&.
.PP
References client, and outTopic\&.
.PP
Referenced by CoolBoard::onLineMode(), publish(), and CoolBoard::update()\&.
.PP
.nf
155 {
156 
157 #if DEBUG == 1 
158 
159     Serial\&.println( F("Entering CoolMQTT\&.publish()") );
160     Serial\&.println();
161     //data is in JSON, publish it directly
162 
163     Serial\&.println( F("data to publish : ") );
164     Serial\&.println(data);
165     Serial\&.print( F("data size : ") );
166     Serial\&.println(strlen(data));
167 
168     Serial\&.println();
169 
170 #endif
171     
172 
173     bool pub=client\&.publish( this->outTopic,(byte*) data,strlen(data),false  );
174 
175 #if DEBUG == 1 
176 
177     Serial\&.print( F("success : ") );
178     Serial\&.println(pub); 
179 
180 #endif
181 
182     return(pub);
183 
184 }
.fi
.SS "bool CoolMQTT::publish (const char * data, unsigned long logInterval)"
CoolMQTT::publish(data): This method is provided to publish data to the out topic every logInterval ms
.PP
\fBReturns:\fP
.RS 4
true if publish successful, false otherwise 
.RE
.PP

.PP
Definition at line 194 of file CoolMQTT\&.cpp\&.
.PP
References previousLogTime, and publish()\&.
.PP
.nf
195 {
196 
197 #if DEBUG == 1 
198 
199     Serial\&.println( F("Entering CoolMQTT\&.publish() every logInterval ") );
200     Serial\&.println();
201 
202 #endif 
203     
204     if( ( millis() - ( this->previousLogTime)  ) >=( logInterval ) )
205     {
206     
207     #if DEBUG == 1
208 
209         Serial\&.println( F("log Interval has passed ") );
210         Serial\&.println();
211     
212     #endif
213 
214         this->publish(data);
215 
216         this->previousLogTime=millis();
217     
218     #if DEBUG == 1 
219 
220         Serial\&.print( F("last log time : ") );
221         Serial\&.println(this->previousLogTime);
222 
223     #endif
224 
225         return(true);
226     }
227 
228 #if DEBUG == 1 
229 
230     Serial\&.println( F("log Interval still didn't pass ") );  
231     Serial\&.println();
232 
233 #endif
234 
235     return(false);
236 }
.fi
.SS "String CoolMQTT::read ()"
\fBCoolMQTT::read()\fP: This method is provided to return the last read message\&. 
.PP
Definition at line 360 of file CoolMQTT\&.cpp\&.
.PP
References msg, and newMsg\&.
.PP
Referenced by CoolBoard::onLineMode()\&.
.PP
.nf
361 {   
362 
363 #if DEBUG == 1 
364 
365     Serial\&.println( F("Entering CoolMQTT\&.read()") );
366     Serial\&.println();
367 
368 #endif 
369 
370     if(this->newMsg==true)
371     {
372         
373         this->newMsg=false;
374 
375 #if DEBUG == 1 
376         Serial\&.println( F("received new message") );
377         Serial\&.println( F("message : ") );
378         Serial\&.println(this->msg);
379         Serial\&.println();
380 
381 #endif
382 
383         return(this->msg);
384         
385     }
386     return("");
387 
388 }
.fi
.SS "int CoolMQTT::state ()"
\fBCoolMQTT::state()\fP: This method is provided to return the mqtt client's state\&. 
.PP
\fBReturns:\fP
.RS 4
mqtt client state: -4 : MQTT_CONNECTION_TIMEOUT - the server didn't respond within the keepalive time -3 : MQTT_CONNECTION_LOST - the network connection was broken -2 : MQTT_CONNECT_FAILED - the network connection failed -1 : MQTT_DISCONNECTED - the client is disconnected cleanly 0 : MQTT_CONNECTED - the cient is connected 1 : MQTT_CONNECT_BAD_PROTOCOL - the server doesn't support the requested version of MQTT 2 : MQTT_CONNECT_BAD_CLIENT_ID - the server rejected the client identifier 3 : MQTT_CONNECT_UNAVAILABLE - the server was unable to accept the connection 4 : MQTT_CONNECT_BAD_CREDENTIALS - the username/password were rejected 5 : MQTT_CONNECT_UNAUTHORIZED - the client was not authorized to connect 
.RE
.PP

.PP
Definition at line 72 of file CoolMQTT\&.cpp\&.
.PP
References client\&.
.PP
Referenced by connect(), and CoolBoard::connect()\&.
.PP
.nf
73 {
74 
75 #if DEBUG == 1 
76 
77     Serial\&.println( F("Entering CoolMQTT\&.state()") );
78     Serial\&.println();    
79     Serial\&.print( F("state : ") );
80     Serial\&.println( this->client\&.state() );
81 
82 #endif
83     
84     return( this->client\&.state() );
85 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "int CoolMQTT::bufferSize =3000\fC [private]\fP"

.PP
Definition at line 63 of file CoolMQTT\&.h\&.
.PP
Referenced by begin(), config(), and printConf()\&.
.SS "PubSubClient CoolMQTT::client\fC [private]\fP"

.PP
Definition at line 67 of file CoolMQTT\&.h\&.
.PP
Referenced by begin(), connect(), mqttLoop(), publish(), and state()\&.
.SS "WiFiClient CoolMQTT::espClient\fC [private]\fP"

.PP
Definition at line 65 of file CoolMQTT\&.h\&.
.PP
Referenced by begin()\&.
.SS "char CoolMQTT::inTopic[50] ={'0'}\fC [private]\fP"

.PP
Definition at line 57 of file CoolMQTT\&.h\&.
.PP
Referenced by config(), connect(), and printConf()\&.
.SS "char CoolMQTT::mqttServer[50] ={'0'}\fC [private]\fP"

.PP
Definition at line 53 of file CoolMQTT\&.h\&.
.PP
Referenced by begin(), config(), and printConf()\&.
.SS "String CoolMQTT::msg =''\fC [private]\fP"

.PP
Definition at line 55 of file CoolMQTT\&.h\&.
.PP
Referenced by callback(), and read()\&.
.SS "bool CoolMQTT::newMsg =0\fC [private]\fP"

.PP
Definition at line 69 of file CoolMQTT\&.h\&.
.PP
Referenced by callback(), and read()\&.
.SS "char CoolMQTT::outTopic[50] ={'0'}\fC [private]\fP"

.PP
Definition at line 59 of file CoolMQTT\&.h\&.
.PP
Referenced by config(), printConf(), and publish()\&.
.SS "unsigned long CoolMQTT::previousLogTime =0\fC [private]\fP"

.PP
Definition at line 71 of file CoolMQTT\&.h\&.
.PP
Referenced by publish()\&.
.SS "char CoolMQTT::user[50] ={'0'}\fC [private]\fP"

.PP
Definition at line 61 of file CoolMQTT\&.h\&.
.PP
Referenced by config(), connect(), getUser(), and printConf()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolAPI from the source code\&.
