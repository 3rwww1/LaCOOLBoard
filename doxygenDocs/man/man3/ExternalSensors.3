.TH "ExternalSensors" 3 "Wed Jul 5 2017" "CoolAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ExternalSensors \- This class handles the external sensors run time defintion , configuartion and actions\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <ExternalSensors\&.h>\fP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBsensor\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBbegin\fP ()"
.br
.ti -1c
.RI "String \fBread\fP ()"
.br
.ti -1c
.RI "bool \fBconfig\fP ()"
.br
.ti -1c
.RI "int \fBgetJsonSize\fP ()"
.br
.ti -1c
.RI "void \fBprintConf\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "struct \fBExternalSensors::sensor\fP \fBsensors\fP [50]"
.br
.ti -1c
.RI "int \fBsensorsNumber\fP =0"
.br
.ti -1c
.RI "int \fBjsonSize\fP =100"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class handles the external sensors run time defintion , configuartion and actions\&. 
.PP
Definition at line 26 of file ExternalSensors\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "void ExternalSensors::begin (void)"
\fBExternalSensors::begin()\fP: This method is provided to initialise the external sensors\&. 
.PP
Definition at line 30 of file ExternalSensors\&.cpp\&.
.PP
References BaseExternalSensor::begin(), ExternalSensors::sensor::exSensor, sensors, and sensorsNumber\&.
.PP
Referenced by CoolBoard::begin()\&.
.PP
.nf
31 {
32     Serial\&.println("Enter ExternalSensors\&.begin()");
33     Serial\&.println();
34 
35     for(int i=0;i< this->sensorsNumber ; i++)
36     {
37         if( (sensors[i]\&.reference) == "NDIR_I2C" )
38         {   
39             std::unique_ptr< ExternalSensor<NDIR_I2C> > sensorCO2(new ExternalSensor<NDIR_I2C> (77));
40 
41 
42             sensors[i]\&.exSensor= sensorCO2\&.release();                       // using std::move;
43             sensors[i]\&.exSensor->begin();
44 
45         }
46         if( (sensors[i]\&.reference) == "DallasTemperature")
47         {
48             OneWire oneWire(0);
49             std::unique_ptr< ExternalSensor<DallasTemperature> > dallasTemp(new ExternalSensor<DallasTemperature> ());
50              ;
51             sensors[i]\&.exSensor=dallasTemp\&.release();
52             sensors[i]\&.exSensor->begin();
53             
54         }
55         
56         
57     }
58 }
.fi
.SS "bool ExternalSensors::config ()"
\fBExternalSensors::config()\fP: This method is provided to configure the externalSensors through a configuration file
.PP
\fBReturns:\fP
.RS 4
true if successful,false otherwise 
.RE
.PP

.PP
Definition at line 133 of file ExternalSensors\&.cpp\&.
.PP
References ExternalSensors::sensor::address, ExternalSensors::sensor::connection, ExternalSensors::sensor::dataSize, jsonSize, ExternalSensors::sensor::reference, sensors, sensorsNumber, and ExternalSensors::sensor::type\&.
.PP
Referenced by CoolBoard::begin(), and CoolBoard::update()\&.
.PP
.nf
134 {
135     //read config file
136     //update data
137     File externalSensorsConfig = SPIFFS\&.open("/externalSensorsConfig\&.json", "r");
138 
139     if (!externalSensorsConfig) 
140     {
141         Serial\&.println("failed to read /externalSensorsConfig\&.json");
142         Serial\&.println();
143         
144         return(false);
145     }
146     else
147     {
148         size_t size = externalSensorsConfig\&.size();
149         // Allocate a buffer to store contents of the file\&.
150         std::unique_ptr<char[]> buf(new char[size]);
151 
152         externalSensorsConfig\&.readBytes(buf\&.get(), size);
153         DynamicJsonBuffer jsonBuffer;
154         JsonObject& json = jsonBuffer\&.parseObject(buf\&.get());
155 
156         if (!json\&.success()) 
157         {
158             Serial\&.println("failed to parse json");
159             Serial\&.println();
160 
161             return(false);
162         } 
163         else
164         {   
165             Serial\&.println("read configuration json : ");
166             json\&.printTo(Serial);
167             Serial\&.println();
168 
169             if(json["jsonSize"]!=NULL )
170             {           
171                 this->jsonSize=json["jsonSize"];
172             }
173             else
174             {
175                 this->jsonSize=this->jsonSize;
176             }
177             json["jsonSize"]=this->jsonSize;            
178 
179             
180             if(json["sensorsNumber"]!=NULL)
181             {
182                 this->sensorsNumber = json["sensorsNumber"];
183                 
184                 
185 
186                 for(int i=0;i<sensorsNumber;i++)
187                 {   String name="sensor"+String(i);
188                     
189                     if(json[name]\&.success())
190                     {  
191                         JsonObject& sensorJson=json[name];
192                         
193                         if(sensorJson["reference"]\&.success() )
194                         {  
195                             this->sensors[i]\&.reference =sensorJson["reference"]\&.as<String>();
196                         }
197                         else
198                         {
199                             this->sensors[i]\&.reference=this->sensors[i]\&.reference;                            
200                             Serial\&.println("Not Found Name " );      
201                         }
202                         sensorJson["reference"]=this->sensors[i]\&.reference;
203 
204                     
205                         if(sensorJson["type"]\&.success() )
206                         {                   
207                             this->sensors[i]\&.type=sensorJson["type"]\&.as<String>();
208                         }
209                         else
210                         {
211                             this->sensors[i]\&.type=this->sensors[i]\&.type;
212                             Serial\&.println("Not Found Name " ) ;                     
213                         }
214                         sensorJson["type"]=this->sensors[i]\&.type;
215                     
216                     
217                         if(sensorJson["connection"]\&.success() )
218                         {
219                             this->sensors[i]\&.connection=sensorJson["connection"]\&.as<String>();
220                         }
221                         else
222                         {
223                             this->sensors[i]\&.connection=this->sensors[i]\&.connection;
224                             Serial\&.println("Not Found Name " ) ;                     
225                         }
226                         sensorJson["connection"]=this->sensors[i]\&.connection;
227 
228                     
229                         if(sensorJson["dataSize"]\&.success() )
230                         {               
231                             this->sensors[i]\&.dataSize=sensorJson["dataSize"];
232                         }
233                         else
234                         {
235                             this->sensors[i]\&.dataSize=this->sensors[i]\&.dataSize;
236                             Serial\&.println("Not Found Name " ) ;                     
237                         }
238                         sensorJson["dataSize"]=this->sensors[i]\&.dataSize;
239 
240                     
241                         if(sensorJson["address"]\&.success() )
242                         {                   
243                             this->sensors[i]\&.address=sensorJson["address"];
244                         }
245                         else
246                         {   
247                             this->sensors[i]\&.address=this->sensors[i]\&.address;
248                             Serial\&.println("Not Found Name " ) ;                     
249                         }
250                         sensorJson["address"]=this->sensors[i]\&.address;
251                     
252     
253                     }
254                     else
255                     {
256                         this->sensors[i]=this->sensors[i];                  
257                     }
258                                             
259                     json[name]["reference"]=this->sensors[i]\&.reference;
260                     json[name]["type"]=this->sensors[i]\&.type;
261                     json[name]["connection"]=this->sensors[i]\&.connection;
262                     json[name]["dataSize"]=this->sensors[i]\&.dataSize;
263                     json[name]["address"]=this->sensors[i]\&.address;
264                 }
265  
266             }
267             else
268             {
269                 this->sensorsNumber=this->sensorsNumber;
270             }
271             json["sensorsNumber"]=this->sensorsNumber;
272 
273             externalSensorsConfig\&.close();
274             externalSensorsConfig = SPIFFS\&.open("/externalSensorsConfig\&.json", "w");
275 
276             if(!externalSensorsConfig)
277             {
278                 Serial\&.println("failed to write to /externalSensorsConfig\&.json");
279                 Serial\&.println();
280 
281                 return(false);
282             }
283             
284             json\&.printTo(externalSensorsConfig);
285             externalSensorsConfig\&.close();
286             
287             Serial\&.println("saved configuration is : ");
288             json\&.printTo(Serial);
289             Serial\&.println();
290 
291             return(true); 
292         }
293     }   
294     
295 
296 
297 
298 }
.fi
.SS "int ExternalSensors::getJsonSize ()"
\fBExternalSensors::getJsonSize()\fP: This method is provided to return the size of the json data as a way to control memory usage
.PP
\fBReturns:\fP
.RS 4
the json data size 
.RE
.PP

.PP
Definition at line 113 of file ExternalSensors\&.cpp\&.
.PP
References jsonSize\&.
.PP
.nf
114 {
115     Serial\&.println("Enter ExternalSensors\&.getJsonSize");
116     Serial\&.println();
117     
118     Serial\&.print("jsonSize : ");
119     Serial\&.println(this->jsonSize);
120     Serial\&.println();
121 
122     return(this->jsonSize );
123 }
.fi
.SS "void ExternalSensors::printConf ()"
\fBExternalSensors::printConf()\fP: This method is provided to print the configuration to the Serial Monitor 
.PP
Definition at line 305 of file ExternalSensors\&.cpp\&.
.PP
References jsonSize, sensors, and sensorsNumber\&.
.PP
Referenced by CoolBoard::begin()\&.
.PP
.nf
306 {
307     Serial\&.println("Entering ExternalSensors\&.printConf()");
308     Serial\&.println();
309 
310     Serial\&.println("External Sensors configuration ");
311 
312     Serial\&.print("sensorsNumber : ");
313     Serial\&.println(sensorsNumber);
314 
315     Serial\&.println("jsonSize : ");
316     Serial\&.println(jsonSize);
317 
318     for(int i=0;i<sensorsNumber;i++)
319     {
320         Serial\&.print("sensor ");
321         Serial\&.print(i);
322         Serial\&.print(" reference : ");
323         Serial\&.println(this->sensors[i]\&.reference);
324 
325         Serial\&.print("sensor ");
326         Serial\&.print(i);
327         Serial\&.print(" type : ");
328         Serial\&.println(this->sensors[i]\&.type);
329 
330         Serial\&.print("sensor ");
331         Serial\&.print(i);
332         Serial\&.print(" connection : ");
333         Serial\&.println(this->sensors[i]\&.connection);
334         
335         Serial\&.print("sensor ");
336         Serial\&.print(i);
337         Serial\&.print(" dataSize : ");
338         Serial\&.println(this->sensors[i]\&.dataSize);
339         
340         Serial\&.print("sensor ");
341         Serial\&.print(i);
342         Serial\&.print(" address : ");
343         Serial\&.println(this->sensors[i]\&.address);
344     
345     }
346 }
.fi
.SS "String ExternalSensors::read (void)"
\fBExternalSensors::read()\fP: This method is provided to read the data from the external sensors
.PP
\fBReturns:\fP
.RS 4
json string that contains the sensors data 
.RE
.PP

.PP
Definition at line 68 of file ExternalSensors\&.cpp\&.
.PP
References jsonSize, sensors, sensorsNumber, and ExternalSensors::sensor::type\&.
.PP
Referenced by CoolBoard::readSensors()\&.
.PP
.nf
69 {
70 
71     Serial\&.println("Entering ExternalSensors\&.read()");
72     Serial\&.println();
73 
74     String data;
75     DynamicJsonBuffer  jsonBuffer(jsonSize) ;
76     JsonObject& root = jsonBuffer\&.createObject();
77 
78     if(!root\&.success() )
79     {
80         Serial\&.println("failed to create json ");
81         return("00");
82     }
83     else
84     {
85         if(sensorsNumber>0)
86         {
87             for(int i=0;i<sensorsNumber;i++)
88             {
89             
90                 root[sensors[i]\&.type]=sensors[i]\&.exSensor->read();        
91             }
92         }   
93         
94         root\&.printTo(data);
95 
96         Serial\&.println("sensors data :");
97         Serial\&.println(data);
98         Serial\&.println();
99     
100         return(data);
101     }
102 
103 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "int ExternalSensors::jsonSize =100\fC [private]\fP"

.PP
Definition at line 52 of file ExternalSensors\&.h\&.
.PP
Referenced by config(), getJsonSize(), printConf(), and read()\&.
.SS "struct \fBExternalSensors::sensor\fP ExternalSensors::sensors[50]\fC [private]\fP"

.PP
Referenced by begin(), config(), printConf(), and read()\&.
.SS "int ExternalSensors::sensorsNumber =0\fC [private]\fP"

.PP
Definition at line 51 of file ExternalSensors\&.h\&.
.PP
Referenced by begin(), config(), printConf(), and read()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolAPI from the source code\&.
