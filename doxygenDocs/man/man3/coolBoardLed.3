.TH "CoolBoardLed" 3 "Mon Jul 3 2017" "CoolAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoolBoardLed \- This class handles the led in the Sensor Board\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolBoardLed\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBbegin\fP ()"
.br
.ti -1c
.RI "void \fBwrite\fP (int R, int G, int B)"
.br
.ti -1c
.RI "void \fBend\fP ()"
.br
.ti -1c
.RI "bool \fBconfig\fP ()"
.br
.ti -1c
.RI "void \fBprintConf\fP ()"
.br
.ti -1c
.RI "void \fBcolorFade\fP (int R, int G, int B, int T)"
.br
.ti -1c
.RI "void \fBblink\fP (int R, int G, int B, int T)"
.br
.ti -1c
.RI "void \fBfadeIn\fP (int R, int G, int B, int T)"
.br
.ti -1c
.RI "void \fBfadeOut\fP (int R, int G, int B, int T)"
.br
.ti -1c
.RI "void \fBstrobe\fP (int R, int G, int B, int T)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "NeoPixelBus< NeoGrbFeature, Neo800KbpsMethod > * \fBneoPixelLed\fP = NULL"
.br
.ti -1c
.RI "byte \fBledActive\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class handles the led in the Sensor Board\&. 
.PP
Definition at line 20 of file CoolBoardLed\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "void CoolBoardLed::begin ()"
\fBCoolBoardLed::begin()\fP: This method is provided to start the Led Object by setting the correct pin and creating a dynamic neoPixelBus 
.PP
Definition at line 113 of file CoolBoardLed\&.cpp\&.
.PP
References neoPixelLed\&.
.PP
Referenced by CoolBoard::begin()\&.
.PP
.nf
114 {
115     pinMode(5,OUTPUT);
116     digitalWrite(5,HIGH);
117     neoPixelLed = new NeoPixelBus<NeoGrbFeature, Neo800KbpsMethod>(1,2); 
118     neoPixelLed->Begin();
119     neoPixelLed->Show();
120 } 
.fi
.SS "void CoolBoardLed::blink (int R, int G, int B, int T)"
CoolBoardLed::blink( Red , Green , Blue , Time in seconds ): Blink animation: Led On for T seconds Led off 
.PP
Definition at line 43 of file CoolBoardLed\&.cpp\&.
.PP
References neoPixelLed\&.
.PP
.nf
44 {
45     neoPixelLed->SetPixelColor(0, RgbColor(R, G, B));
46     neoPixelLed->Show();
47     delay(T);
48     neoPixelLed->SetPixelColor(0, RgbColor(0, 0, 0));
49     neoPixelLed->Show();
50 }
.fi
.SS "void CoolBoardLed::colorFade (int R, int G, int B, int T)"
\fBCoolBoardLed::colorFade\fP ( Red , Green , Blue, Time in seconds ): colorFade animation: Fade In over T(seconds) Fade Out over T(seconds) 
.PP
Definition at line 22 of file CoolBoardLed\&.cpp\&.
.PP
References neoPixelLed\&.
.PP
.nf
23 {
24     for (int k = 0; k < 1000; k++) 
25     {
26         neoPixelLed->SetPixelColor(0, RgbColor(k * R / 1000, k * G / 1000, k * B / 1000));
27         neoPixelLed->Show();
28         delay(T);
29     }
30     for (int k = 1000; k >= 0; k--) 
31     {
32         neoPixelLed->SetPixelColor(0, RgbColor(k * R / 1000, k * G / 1000, k * B / 1000));
33         neoPixelLed->Show();
34         delay(T);
35     }
36 }
.fi
.SS "bool CoolBoardLed::config ()"
\fBCoolBoardLed::config()\fP: This method is provided to configure the Led Object : -ledActive=0 : deactivated -ledActive=1 : activated 
.PP
\fBReturns:\fP
.RS 4
true if the configuration done, false otherwise 
.RE
.PP

.PP
Definition at line 141 of file CoolBoardLed\&.cpp\&.
.PP
References ledActive\&.
.PP
Referenced by CoolBoard::begin(), and CoolBoard::update()\&.
.PP
.nf
142 {
143     File coolBoardLedConfig = SPIFFS\&.open("/coolBoardLedConfig\&.json", "r");
144 
145     if (!coolBoardLedConfig) 
146     {
147         return(false);
148     }
149     else
150     {
151         size_t size = coolBoardLedConfig\&.size();
152         // Allocate a buffer to store contents of the file\&.
153         std::unique_ptr<char[]> buf(new char[size]);
154 
155         coolBoardLedConfig\&.readBytes(buf\&.get(), size);
156         DynamicJsonBuffer jsonBuffer;
157         JsonObject& json = jsonBuffer\&.parseObject(buf\&.get());
158         if (!json\&.success()) 
159         {
160               return(false);
161         } 
162         else
163         {     
164             if(json["ledActive"]\&.success() )
165             {
166                 this->ledActive = json["ledActive"]; 
167             }
168             else
169             {
170                 this->ledActive=this->ledActive;            
171             }
172             
173             json["ledActive"]=this->ledActive;
174             coolBoardLedConfig\&.close();
175             
176             coolBoardLedConfig = SPIFFS\&.open("/coolBoardLedConfig\&.json", "w");
177             if(!coolBoardLedConfig)
178             {
179                 return(false);          
180             }
181 
182             json\&.printTo(coolBoardLedConfig);
183             coolBoardLedConfig\&.close();
184 
185               return(true); 
186         }
187     }   
188 
189 }               
.fi
.SS "void CoolBoardLed::end ()"
\fBCoolBoardLed::end()\fP : this method is provided to delete the dynamically created neoPixelLed 
.PP
Definition at line 101 of file CoolBoardLed\&.cpp\&.
.PP
References neoPixelLed\&.
.PP
.nf
102 {
103     delete neoPixelLed;
104 }
.fi
.SS "void CoolBoardLed::fadeIn (int R, int G, int B, int T)"
CoolBoardLed::fadeIn(Red , Green , Blue , Time in seconds) Fade In animation: gradual increase over T(seconds) 
.PP
Definition at line 56 of file CoolBoardLed\&.cpp\&.
.PP
References neoPixelLed\&.
.PP
.nf
57 {
58     for (int k = 0; k < 1000; k++) 
59     {
60         neoPixelLed->SetPixelColor(0, RgbColor(k * R / 1000, k * G / 1000, k * B / 1000));
61         neoPixelLed->Show();
62         delay(T);
63     }
64 }
.fi
.SS "void CoolBoardLed::fadeOut (int R, int G, int B, int T)"
CoolBoardLed::fadeOut( Red , Green , Blue , Time in seconds) Fade Out animation: gradual decrease over T(seconds) 
.PP
Definition at line 70 of file CoolBoardLed\&.cpp\&.
.PP
References neoPixelLed\&.
.PP
.nf
71 {
72     for (int k = 1000; k >= 0; k--) 
73     {
74         neoPixelLed->SetPixelColor(0, RgbColor(k * R / 1000, k * G / 1000, k * B / 1000));
75         neoPixelLed->Show();
76         delay(T);
77     }
78 }
.fi
.SS "void CoolBoardLed::printConf ()"
\fBCoolBoardLed::printConf()\fP: This method is provided to print the Led Object Configuration to the Serial Monitor 
.PP
Definition at line 197 of file CoolBoardLed\&.cpp\&.
.PP
References ledActive\&.
.PP
Referenced by CoolBoard::begin()\&.
.PP
.nf
198 {
199     Serial\&.println("Led Conf");
200     Serial\&.println(ledActive);
201     Serial\&.println(" "); 
202 }
.fi
.SS "void CoolBoardLed::strobe (int R, int G, int B, int T)"
CoolBoardLed::strobe(Red , Green , Blue , Time in seconds) Strobe animation: blinks over T(seconds) 
.PP
Definition at line 84 of file CoolBoardLed\&.cpp\&.
.PP
References neoPixelLed\&.
.PP
.nf
85 {
86     for (int k = 1000; k >= 0; k--) 
87     {
88         neoPixelLed->SetPixelColor(0, RgbColor(R, G, B));
89         neoPixelLed->Show();
90         delay(T);
91         neoPixelLed->SetPixelColor(0, RgbColor(0, 0, 0));
92         neoPixelLed->Show();
93         delay(T);
94     }
95 }
.fi
.SS "void CoolBoardLed::write (int R, int G, int B)"
CoolBoardLed::write(Red,Green,Blue): This method is provided to set the Color of the Led 
.PP
Definition at line 127 of file CoolBoardLed\&.cpp\&.
.PP
References neoPixelLed\&.
.PP
.nf
128 {
129     neoPixelLed->SetPixelColor(0, RgbColor(R, G, B));
130     neoPixelLed->Show();
131 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "byte CoolBoardLed::ledActive\fC [private]\fP"

.PP
Definition at line 54 of file CoolBoardLed\&.h\&.
.PP
Referenced by config(), and printConf()\&.
.SS "NeoPixelBus<NeoGrbFeature, Neo800KbpsMethod>* CoolBoardLed::neoPixelLed = NULL\fC [private]\fP"

.PP
Definition at line 52 of file CoolBoardLed\&.h\&.
.PP
Referenced by begin(), blink(), colorFade(), end(), fadeIn(), fadeOut(), strobe(), and write()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolAPI from the source code\&.
