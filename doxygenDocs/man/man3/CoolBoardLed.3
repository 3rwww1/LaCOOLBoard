.TH "CoolBoardLed" 3 "Mon Jul 10 2017" "CoolAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoolBoardLed \- This class handles the led in the Sensor Board\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolBoardLed\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBbegin\fP ()"
.br
.ti -1c
.RI "void \fBwrite\fP (int R, int G, int B)"
.br
.ti -1c
.RI "void \fBend\fP ()"
.br
.ti -1c
.RI "bool \fBconfig\fP ()"
.br
.ti -1c
.RI "void \fBprintConf\fP ()"
.br
.ti -1c
.RI "void \fBcolorFade\fP (int R, int G, int B, int T)"
.br
.ti -1c
.RI "void \fBblink\fP (int R, int G, int B, int T)"
.br
.ti -1c
.RI "void \fBfadeIn\fP (int R, int G, int B, int T)"
.br
.ti -1c
.RI "void \fBfadeOut\fP (int R, int G, int B, int T)"
.br
.ti -1c
.RI "void \fBstrobe\fP (int R, int G, int B, int T)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "NeoPixelBus< NeoGrbFeature, Neo800KbpsMethod > * \fBneoPixelLed\fP = NULL"
.br
.ti -1c
.RI "byte \fBledActive\fP =0"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class handles the led in the Sensor Board\&. 
.PP
Definition at line 20 of file CoolBoardLed\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "void CoolBoardLed::begin ()"
\fBCoolBoardLed::begin()\fP: This method is provided to start the Led Object by setting the correct pin and creating a dynamic neoPixelBus 
.PP
Definition at line 218 of file CoolBoardLed\&.cpp\&.
.PP
References neoPixelLed\&.
.PP
Referenced by CoolBoard::begin()\&.
.PP
.nf
219 {
220 
221 #if DEBUG == 1
222 
223     Serial\&.println( F("Entering CoolBoardLed\&.begin() ") );
224 
225 #endif
226 
227     pinMode(5,OUTPUT);
228     digitalWrite(5,HIGH);
229     neoPixelLed = new NeoPixelBus<NeoGrbFeature, Neo800KbpsMethod>(1,2); 
230     neoPixelLed->Begin();
231     neoPixelLed->Show();
232 } 
.fi
.SS "void CoolBoardLed::blink (int R, int G, int B, int T)"
CoolBoardLed::blink( Red , Green , Blue , Time in seconds ): Blink animation: Led On for T seconds Led off 
.PP
Definition at line 71 of file CoolBoardLed\&.cpp\&.
.PP
References neoPixelLed\&.
.PP
.nf
72 {
73 
74 #if DEBUG == 1
75 
76     Serial\&.println( F("Entering CoolBoardLed\&.blink()"));
77     Serial\&.println();
78     Serial\&.print( F("R : "));
79     Serial\&.println(R);
80     Serial\&.print( F("G : ") );
81     Serial\&.println(G);
82     Serial\&.print( F("B : ") );
83     Serial\&.println(B);
84     Serial\&.print( F("Time :") );
85     Serial\&.println(T);
86     Serial\&.println();
87 
88 #endif  
89 
90     neoPixelLed->SetPixelColor(0, RgbColor(R, G, B));
91     neoPixelLed->Show();
92     delay(T);
93     neoPixelLed->SetPixelColor(0, RgbColor(0, 0, 0));
94     neoPixelLed->Show();
95 }
.fi
.SS "void CoolBoardLed::colorFade (int R, int G, int B, int T)"
\fBCoolBoardLed::colorFade\fP ( Red , Green , Blue, Time in seconds ): colorFade animation: Fade In over T(seconds) Fade Out over T(seconds) 
.PP
Definition at line 33 of file CoolBoardLed\&.cpp\&.
.PP
References neoPixelLed\&.
.PP
.nf
34 {
35 
36 #if DEBUG == 1
37 
38     Serial\&.println( F("Entering CoolBoardLed\&.colorFade()") );
39     Serial\&.println();
40     Serial\&.print( F("R : ") );
41     Serial\&.println(R);
42     Serial\&.print( F("G : ") );
43     Serial\&.println(G);
44     Serial\&.print( F("B : ") );
45     Serial\&.println(B);
46     Serial\&.print( F("Time : ") );
47     Serial\&.println(T);
48     Serial\&.println();
49 
50 #endif  
51 
52     for (int k = 0; k < 1000; k++) 
53     {
54         neoPixelLed->SetPixelColor(0, RgbColor(k * R / 1000, k * G / 1000, k * B / 1000));
55         neoPixelLed->Show();
56         delay(T);
57     }
58     for (int k = 1000; k >= 0; k--) 
59     {
60         neoPixelLed->SetPixelColor(0, RgbColor(k * R / 1000, k * G / 1000, k * B / 1000));
61         neoPixelLed->Show();
62         delay(T);
63     }
64 }
.fi
.SS "bool CoolBoardLed::config ()"
\fBCoolBoardLed::config()\fP: This method is provided to configure the Led Object : -ledActive=0 : deactivated -ledActive=1 : activated 
.PP
\fBReturns:\fP
.RS 4
true if the configuration done, false otherwise 
.RE
.PP

.PP
Definition at line 268 of file CoolBoardLed\&.cpp\&.
.PP
References ledActive\&.
.PP
Referenced by CoolBoard::begin(), and CoolBoard::update()\&.
.PP
.nf
269 {
270 
271 #if DEBUG == 1 
272         
273     Serial\&.println( F("Entering CoolBoardLed\&.config()") );
274     Serial\&.println();
275 
276 #endif
277     
278     File coolBoardLedConfig = SPIFFS\&.open("/coolBoardLedConfig\&.json", "r");
279 
280     if (!coolBoardLedConfig) 
281     {
282     
283     #if DEBUG == 1
284 
285         Serial\&.println( F("failed to read /coolBoardLedConfig\&.json") );
286         Serial\&.println();
287 
288     #endif
289 
290         return(false);
291     }
292     else
293     {
294         size_t size = coolBoardLedConfig\&.size();
295         // Allocate a buffer to store contents of the file\&.
296         std::unique_ptr<char[]> buf(new char[size]);
297 
298         coolBoardLedConfig\&.readBytes(buf\&.get(), size);
299         DynamicJsonBuffer jsonBuffer;
300         JsonObject& json = jsonBuffer\&.parseObject(buf\&.get());
301         if (!json\&.success()) 
302         {
303         
304         #if DEBUG == 1
305 
306             Serial\&.println( F("failed to parse json") );
307             Serial\&.println();
308         
309         #endif
310 
311             return(false);
312         } 
313         else
314         {
315         
316         #if DEBUG == 1
317     
318             Serial\&.println( F("read configuration file : ") );
319             json\&.printTo(Serial);
320             Serial\&.println();
321         
322         #endif
323   
324             if(json["ledActive"]\&.success() )
325             {
326                 this->ledActive = json["ledActive"]; 
327             }
328             else
329             {
330                 this->ledActive=this->ledActive;            
331             }
332             
333             json["ledActive"]=this->ledActive;
334             coolBoardLedConfig\&.close();
335             
336             coolBoardLedConfig = SPIFFS\&.open("/coolBoardLedConfig\&.json", "w");
337             if(!coolBoardLedConfig)
338             {
339             
340             #if DEBUG == 1 
341 
342                 Serial\&.println( F("failed to write to /coolBoardLedConfig\&.json") );
343                 Serial\&.println();
344 
345             #endif
346 
347                 return(false);          
348             }
349 
350             json\&.printTo(coolBoardLedConfig);
351             coolBoardLedConfig\&.close();
352 
353         #if DEBUG == 1
354     
355             Serial\&.println( F("saved Led Config is : ") );
356             json\&.printTo(Serial);
357             Serial\&.println();
358 
359         #endif
360 
361             return(true); 
362         }
363     }   
364 
365 }               
.fi
.SS "void CoolBoardLed::end ()"
\fBCoolBoardLed::end()\fP : this method is provided to delete the dynamically created neoPixelLed 
.PP
Definition at line 199 of file CoolBoardLed\&.cpp\&.
.PP
References neoPixelLed\&.
.PP
.nf
200 {
201 
202 #if DEBUG == 1 
203     
204     Serial\&.println( F("Entering CoolBoardLed\&.end()") );
205 
206 #endif
207 
208     delete neoPixelLed;
209 }
.fi
.SS "void CoolBoardLed::fadeIn (int R, int G, int B, int T)"
CoolBoardLed::fadeIn(Red , Green , Blue , Time in seconds) Fade In animation: gradual increase over T(seconds) 
.PP
Definition at line 101 of file CoolBoardLed\&.cpp\&.
.PP
References neoPixelLed\&.
.PP
.nf
102 {
103 
104 #if DEBUG == 1
105 
106     Serial\&.println( F("Entering CoolBoardLed\&.fadeIn()") );
107     Serial\&.println();
108     Serial\&.print( F("R : ") );
109     Serial\&.println(R);
110     Serial\&.print( F("G : ") );
111     Serial\&.println(G);
112     Serial\&.print( F("B : ") );
113     Serial\&.println(B);
114     Serial\&.print( F("Time :") );
115     Serial\&.println(T);
116     Serial\&.println();
117 
118 #endif  
119 
120     for (int k = 0; k < 1000; k++) 
121     {
122         neoPixelLed->SetPixelColor(0, RgbColor(k * R / 1000, k * G / 1000, k * B / 1000));
123         neoPixelLed->Show();
124         delay(T);
125     }
126 }
.fi
.SS "void CoolBoardLed::fadeOut (int R, int G, int B, int T)"
CoolBoardLed::fadeOut( Red , Green , Blue , Time in seconds) Fade Out animation: gradual decrease over T(seconds) 
.PP
Definition at line 132 of file CoolBoardLed\&.cpp\&.
.PP
References neoPixelLed\&.
.PP
.nf
133 {
134 
135 #if DEBUG == 1 
136 
137     Serial\&.println( F("Entering CoolBoardLed\&.fadeOut()" ) );
138     Serial\&.println();
139     Serial\&.print( F("R : ") );
140     Serial\&.println(R);
141     Serial\&.print( F("G : ") );
142     Serial\&.println(G);
143     Serial\&.print( F("B : ") );
144     Serial\&.println(B);
145     Serial\&.print( F("Time :") );
146     Serial\&.println(T);
147     Serial\&.println();
148 
149 #endif  
150 
151 
152     for (int k = 1000; k >= 0; k--) 
153     {
154         neoPixelLed->SetPixelColor(0, RgbColor(k * R / 1000, k * G / 1000, k * B / 1000));
155         neoPixelLed->Show();
156         delay(T);
157     }
158 }
.fi
.SS "void CoolBoardLed::printConf ()"
\fBCoolBoardLed::printConf()\fP: This method is provided to print the Led Object Configuration to the Serial Monitor 
.PP
Definition at line 373 of file CoolBoardLed\&.cpp\&.
.PP
References ledActive\&.
.PP
Referenced by CoolBoard::begin()\&.
.PP
.nf
374 {
375 
376 #if DEBUG == 1 
377 
378     Serial\&.println( F("Entering CoolBoardLed\&.printConf()") );
379     Serial\&.println();
380 
381 #endif
382 
383     Serial\&.println("Led Configuration");
384 
385     Serial\&.print("ledActive : ");
386     Serial\&.println(ledActive);
387 
388     Serial\&.println();    
389 }
.fi
.SS "void CoolBoardLed::strobe (int R, int G, int B, int T)"
CoolBoardLed::strobe(Red , Green , Blue , Time in seconds) Strobe animation: blinks over T(seconds) 
.PP
Definition at line 164 of file CoolBoardLed\&.cpp\&.
.PP
References neoPixelLed\&.
.PP
.nf
165 {
166 
167 #if DEBUG == 1
168 
169     Serial\&.println( F("Entering CoolBoardLed\&.strobe()") );
170     Serial\&.println();
171     Serial\&.print( F("R : ") );
172     Serial\&.println(R);
173     Serial\&.print( F("G: ") );
174     Serial\&.println(G);
175     Serial\&.print( F("B : ") );
176     Serial\&.println(B);
177     Serial\&.print( F("Time :") );
178     Serial\&.println(T);
179     Serial\&.println();
180 
181 #endif  
182 
183     
184     for (int k = 1000; k >= 0; k--) 
185     {
186         neoPixelLed->SetPixelColor(0, RgbColor(R, G, B));
187         neoPixelLed->Show();
188         delay(T);
189         neoPixelLed->SetPixelColor(0, RgbColor(0, 0, 0));
190         neoPixelLed->Show();
191         delay(T);
192     }
193 }
.fi
.SS "void CoolBoardLed::write (int R, int G, int B)"
CoolBoardLed::write(Red,Green,Blue): This method is provided to set the Color of the Led 
.PP
Definition at line 239 of file CoolBoardLed\&.cpp\&.
.PP
References neoPixelLed\&.
.PP
.nf
240 {
241 
242 #if DEBUG == 1
243 
244     Serial\&.println( F("Entering CoolBoardLed\&.write()") );
245     Serial\&.println();
246     Serial\&.print( F("R : ") );
247     Serial\&.println(R);
248     Serial\&.print( F("G : ") );
249     Serial\&.println(G);
250     Serial\&.print( F("B : ") );
251     Serial\&.println(B);
252     Serial\&.println();    
253 
254 #endif
255 
256     neoPixelLed->SetPixelColor(0, RgbColor(R, G, B));
257     neoPixelLed->Show();
258 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "byte CoolBoardLed::ledActive =0\fC [private]\fP"

.PP
Definition at line 54 of file CoolBoardLed\&.h\&.
.PP
Referenced by config(), and printConf()\&.
.SS "NeoPixelBus<NeoGrbFeature, Neo800KbpsMethod>* CoolBoardLed::neoPixelLed = NULL\fC [private]\fP"

.PP
Definition at line 52 of file CoolBoardLed\&.h\&.
.PP
Referenced by begin(), blink(), colorFade(), end(), fadeIn(), fadeOut(), strobe(), and write()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolAPI from the source code\&.
