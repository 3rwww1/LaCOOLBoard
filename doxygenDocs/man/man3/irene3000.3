.TH "Irene3000" 3 "Mon Jul 31 2017" "CoolAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Irene3000 \- This class is provided to manage the \fBIrene3000\fP Ph/Temperature Shield\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Irene3000\&.h>\fP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBparameters_T\fP"
.br
.ti -1c
.RI "struct \fBstate\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBbegin\fP ()"
.br
.ti -1c
.RI "bool \fBconfig\fP ()"
.br
.ti -1c
.RI "void \fBprintConf\fP ()"
.br
.ti -1c
.RI "String \fBread\fP ()"
.br
.ti -1c
.RI "int \fBreadButton\fP (adsGain_t gain)"
.br
.ti -1c
.RI "void \fBsetGain\fP (adsGain_t gain)"
.br
.ti -1c
.RI "int \fBreadADSChannel2\fP (adsGain_t gain)"
.br
.ti -1c
.RI "float \fBreadPh\fP (adsGain_t gain)"
.br
.ti -1c
.RI "double \fBreadTemp\fP (adsGain_t gain)"
.br
.ti -1c
.RI "void \fBresetParams\fP (void)"
.br
.ti -1c
.RI "void \fBcalibratepH7\fP (adsGain_t gain)"
.br
.ti -1c
.RI "void \fBcalibratepH4\fP (adsGain_t gain)"
.br
.ti -1c
.RI "void \fBcalcpHSlope\fP ()"
.br
.ti -1c
.RI "adsGain_t \fBgainConvert\fP (uint16_t tempGain)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "Adafruit_ADS1115 \fBads\fP"
.br
.ti -1c
.RI "struct \fBIrene3000::parameters_T\fP \fBparams\fP"
.br
.ti -1c
.RI "struct \fBIrene3000::state\fP \fBwaterTemp\fP"
.br
.ti -1c
.RI "struct \fBIrene3000::state\fP \fBphProbe\fP"
.br
.ti -1c
.RI "struct \fBIrene3000::state\fP \fBadc2\fP"
.br
.ti -1c
.RI "const float \fBvRef\fP = 1\&.024"
.br
.ti -1c
.RI "const float \fBopampGain\fP = 5\&.25"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class is provided to manage the \fBIrene3000\fP Ph/Temperature Shield\&. 
.PP
Definition at line 35 of file Irene3000\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "void Irene3000::begin (void)"
\fBIrene3000::begin()\fP: This method is provided to start the \fBIrene3000\fP ADS chip 
.PP
Definition at line 38 of file irene3000\&.cpp\&.
.PP
References ads\&.
.PP
Referenced by CoolBoard::begin()\&.
.PP
.nf
39 {
40 
41 #if DEBUG == 1 
42 
43     Serial\&.println( F("Entering Irene3000\&.begin()") );
44     Serial\&.println();
45 
46 #endif
47 
48     this->ads\&.begin();
49 }
.fi
.SS "void Irene3000::calcpHSlope ()"
Irene3000::calcpHSlop(): This method is provided to calculate th PH slope 
.PP
Definition at line 585 of file irene3000\&.cpp\&.
.PP
References opampGain, params, Irene3000::parameters_T::pH4Cal, Irene3000::parameters_T::pH7Cal, Irene3000::parameters_T::pHStep, and vRef\&.
.PP
Referenced by calibratepH4(), and calibratepH7()\&.
.PP
.nf
586 {
587 
588 #if DEBUG == 1 
589 
590     Serial\&.println( F("Entering Irene3000\&.calcpHSlope()") );
591     Serial\&.println();
592 
593 #endif 
594 
595     params\&.pHStep = ((((vRef * (float)(params\&.pH7Cal - params\&.pH4Cal)) / 32767) * 1000) / opampGain) / 3;
596 
597  
598 }
.fi
.SS "void Irene3000::calibratepH4 (adsGain_t gain)"
Irene3000::calibratepH4(gain): This method is provided to calibrate the PH probe to 4 
.PP
Definition at line 560 of file irene3000\&.cpp\&.
.PP
References ads, calcpHSlope(), params, ph, Irene3000::parameters_T::pH4Cal, and setGain()\&.
.PP
.nf
561 {
562 
563 #if DEBUG == 1 
564 
565     Serial\&.println( F("Entering Irene3000\&.calibraph4()") );
566     Serial\&.println();
567 
568 #endif 
569     
570     this->setGain(gain);
571 
572     this->params\&.pH4Cal =  ads\&.readADC_SingleEnded(ph);
573 
574     this->calcpHSlope();
575 
576 
577 
578 }
.fi
.SS "void Irene3000::calibratepH7 (adsGain_t gain)"
Irene3000::calibratepH7(gain): This method is provided to calibrate the PH probe to 7 
.PP
Definition at line 536 of file irene3000\&.cpp\&.
.PP
References ads, calcpHSlope(), params, ph, Irene3000::parameters_T::pH7Cal, and setGain()\&.
.PP
.nf
537 {
538 
539 #if DEBUG == 1 
540 
541     Serial\&.println( F("Entering Irene3000\&.calibratepH7() ") );
542     Serial\&.println();
543 
544 #endif 
545 
546     this->setGain(gain);
547         
548     this->params\&.pH7Cal = ads\&.readADC_SingleEnded(ph);
549  
550     this->calcpHSlope();
551 
552 
553 }
.fi
.SS "bool Irene3000::config ()"
\fBIrene3000::config()\fP: This method is provided to configure the \fBIrene3000\fP shield through a configuration file
.PP
\fBReturns:\fP
.RS 4
true if successful,false otherwise 
.RE
.PP

.PP
Definition at line 129 of file irene3000\&.cpp\&.
.PP
References Irene3000::state::active, adc2, Irene3000::state::gain, gainConvert(), phProbe, Irene3000::state::type, and waterTemp\&.
.PP
Referenced by CoolBoard::begin()\&.
.PP
.nf
130 {
131 
132 #if DEBUG == 1 
133 
134     Serial\&.println( F("Entering Irene3000\&.config()") );
135     Serial\&.println();
136 
137 #endif
138 
139     File irene3000Config = SPIFFS\&.open("/irene3000Config\&.json", "r");
140 
141     if (!irene3000Config) 
142     {
143     
144     #if DEBUG == 1 
145 
146         Serial\&.println( F("failed to read /irene3000Config\&.json") );
147         Serial\&.println();
148     
149     #endif
150 
151         return(false);
152     }
153     else
154     {
155         size_t size = irene3000Config\&.size();
156         // Allocate a buffer to store contents of the file\&.
157         std::unique_ptr<char[]> buf(new char[size]);
158             uint16_t tempGain;
159         irene3000Config\&.readBytes(buf\&.get(), size);
160         DynamicJsonBuffer jsonBuffer;
161         JsonObject& json = jsonBuffer\&.parseObject(buf\&.get());
162         if (!json\&.success()) 
163         {
164         
165         #if DEBUG == 1 
166 
167             Serial\&.println( F("failed to parse json ") );
168             Serial\&.println();
169         
170         #endif
171             
172             return(false);
173         } 
174         else
175         {
176         
177         #if DEBUG == 1 
178     
179             Serial\&.println( F("read configuration file ") );
180             json\&.printTo(Serial);
181             Serial\&.println();
182 
183             Serial\&.print(F("jsonBuffer size: "));
184             Serial\&.println(jsonBuffer\&.size());
185             Serial\&.println();
186 
187         
188 
189         #endif          
190             if(json["waterTemp"]["active"]\&.success() )
191             {           
192                 this->waterTemp\&.active = json["waterTemp"]["active"]; 
193             }
194             else
195             {
196                 this->waterTemp\&.active=this->waterTemp\&.active;
197             }
198             json["waterTemp"]["active"]=this->waterTemp\&.active;
199 
200             
201             if(json["waterTemp"]["gain"]\&.success() )
202             {           
203                 tempGain = json["waterTemp"]["gain"]; 
204                 this->waterTemp\&.gain=this->gainConvert(tempGain);
205             }
206             else
207             {
208                 this->waterTemp\&.gain=this->waterTemp\&.gain;
209             }
210             json["waterTemp"]["gain"]=this->waterTemp\&.gain;
211 
212             
213             if(json["phProbe"]["active"]\&.success())
214             {
215                 this->phProbe\&.active=json["phProbe"]["active"];
216             }
217             else
218             {
219                 this->phProbe\&.active=this->phProbe\&.active;
220             }
221             json["phProbe"]["active"]=this->phProbe\&.active;
222     
223             
224             if(json["phProbe"]["gain"]\&.success() )
225             {       
226                 tempGain=json["phProbe"]["gain"];
227                 this->phProbe\&.gain=this->gainConvert(tempGain);          
228             }
229             else
230             {
231                 this->phProbe\&.gain=this->phProbe\&.gain;
232             }
233             json["phProbe"]["gain"]=this->phProbe\&.gain;
234 
235             
236             if(json["adc2"]["active"]\&.success() )
237             {
238                 this->adc2\&.active=json["adc2"]["active"];
239             }
240             else
241             {
242                 this->adc2\&.active=this->adc2\&.active;
243             }
244             json["adc2"]["active"]=this->adc2\&.active;
245 
246             
247             if(json["adc2"]["gain"]\&.success() )
248             {           
249                 tempGain=json["adc2"]["gain"];
250                 this->adc2\&.gain=this->gainConvert(tempGain);
251             }
252             else
253             {
254                 this->adc2\&.gain=this->adc2\&.gain;
255             }
256             json["adc2"]["gain"]=this->adc2\&.gain;
257 
258             
259             if(json["adc2"]["type"]\&.success() )
260             {
261                 this->adc2\&.type=json["adc2"]["type"]\&.as<String>(); 
262             }
263             else
264             {
265                 this->adc2\&.type=this->adc2\&.type;
266             }
267             json["adc2"]["type"]=this->adc2\&.type;
268 
269             irene3000Config\&.close();
270             irene3000Config = SPIFFS\&.open("/irene3000Config\&.json", "w");
271 
272             if(!irene3000Config)
273             {
274             
275             #if DEBUG == 1
276 
277                 Serial\&.println( F("failed to write to /irene3000Config\&.json") );
278                 Serial\&.println();
279             
280             #endif 
281 
282                 return(false);
283             }
284 
285             json\&.printTo(irene3000Config);
286             irene3000Config\&.close();
287             
288         #if DEBUG == 1 
289 
290             Serial\&.println( F("saved configuration file :")  );
291             json\&.printTo(Serial);
292             Serial\&.println();
293         
294         #endif
295 
296             return(true); 
297         }
298     }   
299 
300 }
.fi
.SS "adsGain_t Irene3000::gainConvert (uint16_t tempGain)"
\fBIrene3000::gainConvert\fP( gain : { 2/3,1,2,4,8,16 } ) This method is provided to convert the gain to Internal Constants
.PP
\fBReturns:\fP
.RS 4
internal representation of the ADS gain 
.RE
.PP

.PP
Definition at line 632 of file irene3000\&.cpp\&.
.PP
Referenced by config()\&.
.PP
.nf
633 {
634 
635 #if DEBUG == 1 
636 
637     Serial\&.println( F("Entering Irene3000\&.gainConvert()") );
638     Serial\&.println();
639 
640 #endif 
641     
642     switch(tempGain)
643     {
644         case(2/3): return(GAIN_TWOTHIRDS);
645         case(1): return (GAIN_ONE);
646         case(2) : return(GAIN_TWO);
647         case(4): return(GAIN_FOUR) ;   
648         case(8):return(GAIN_EIGHT)  ;  
649         case(16):return(GAIN_SIXTEEN);  
650     }
651 
652 
653 
654 }
.fi
.SS "void Irene3000::printConf ()"
\fBIrene3000::printConf()\fP: This method is provided to print the configuration to the Serial Monitor 
.PP
Definition at line 307 of file irene3000\&.cpp\&.
.PP
References Irene3000::state::active, adc2, Irene3000::state::gain, phProbe, Irene3000::state::type, and waterTemp\&.
.PP
Referenced by CoolBoard::begin()\&.
.PP
.nf
308 {
309 
310 #if DEBUG == 1 
311 
312     Serial\&.println( F("Entering Irene3000\&.printConf()") );
313     Serial\&.println();
314 
315 #endif 
316 
317     Serial\&.println("Irene Configuration ");
318 
319     Serial\&.print("waterTemp\&.active : ");
320     Serial\&.println(waterTemp\&.active);
321 
322     Serial\&.print("waterTemp\&.gain : ");
323     Serial\&.println(waterTemp\&.gain,HEX);   
324 
325     Serial\&.print("phProbe\&.active : ");
326     Serial\&.println(phProbe\&.active);
327 
328     Serial\&.print("phProbe\&.gain : ");
329     Serial\&.println(phProbe\&.gain,HEX);
330     
331     Serial\&.print("adc2\&.active : ");
332     Serial\&.println(adc2\&.active);
333 
334     Serial\&.print("adc2\&.gain : ");
335     Serial\&.println(adc2\&.gain,HEX);
336 
337     Serial\&.print("adc2\&.type : ");
338     Serial\&.println(adc2\&.type);
339 
340     Serial\&.println();
341 }
.fi
.SS "String Irene3000::read (void)"
\fBIrene3000\fP:\fBread()\fP: This method is provided to read the \fBIrene3000\fP sensors data
.PP
\fBReturns:\fP
.RS 4
json string of the sensors data 
.RE
.PP

.PP
Definition at line 59 of file irene3000\&.cpp\&.
.PP
References Irene3000::state::active, adc2, Irene3000::state::gain, phProbe, readADSChannel2(), readPh(), readTemp(), Irene3000::state::type, and waterTemp\&.
.PP
Referenced by CoolBoard::readSensors()\&.
.PP
.nf
60 {
61 
62 #if DEBUG == 1 
63     
64     Serial\&.println( F("Entering Irene3000\&.read()") );
65     Serial\&.println();
66 
67 #endif 
68 
69     String data;
70     DynamicJsonBuffer jsonBuffer;
71     JsonObject& root = jsonBuffer\&.createObject();
72     if( !( root\&.success()) )
73     {
74     
75     #if DEBUG == 1 
76 
77         Serial\&.println( F("failed to create json") );
78     
79     #endif 
80 
81         return("");
82     }
83 
84         
85     if(waterTemp\&.active)
86     {
87         root["waterTemp"] = this->readTemp(waterTemp\&.gain);
88 
89         if(phProbe\&.active)
90         {
91             root["ph"] =this->readPh(phProbe\&.gain) ;
92         }
93 
94     }
95 
96     if(adc2\&.active)
97     {
98         root[adc2\&.type] =this->readADSChannel2(adc2\&.gain);
99     }
100     
101     root\&.printTo(data);
102     
103 #if DEBUG == 1 
104 
105     Serial\&.println( F("Irene data : ") );
106     Serial\&.println(data);
107     Serial\&.println();
108 
109     Serial\&.print(F("jsonBuffer size: "));
110     Serial\&.println(jsonBuffer\&.size());
111     Serial\&.println();
112 
113 
114 #endif
115     
116     return(data);
117     
118     
119 
120 }
.fi
.SS "int Irene3000::readADSChannel2 (adsGain_t gain)"
Irene3000::readADSChannel2(gain): This method is provided to read from the ADS channel 2 \&. ADS Channel 2 is free and the user can connect another analog sensor to it\&.
.PP
\fBReturns:\fP
.RS 4
the ADS Channel 2 value 
.RE
.PP

.PP
Definition at line 400 of file irene3000\&.cpp\&.
.PP
References ads, freeAdc, and setGain()\&.
.PP
Referenced by read()\&.
.PP
.nf
401 {  
402 
403 #if DEBUG == 1 
404     
405     Serial\&.println( F("Entering Irene3000\&.readADSChannel2()") );
406     Serial\&.println();
407 
408 #endif
409 
410     this->setGain(gain);
411 
412 #if DEBUG == 1 
413     
414     Serial\&.println( F("adc2 value : ") );
415     Serial\&.println(this->ads\&.readADC_SingleEnded(freeAdc) );
416     Serial\&.println();
417 
418 #endif
419 
420     return( this->ads\&.readADC_SingleEnded(freeAdc) ) ;
421 }
.fi
.SS "int Irene3000::readButton (adsGain_t gain)"
Irene3000::readButton(gain): This method is provided to read the \fBIrene3000\fP button
.PP
\fBReturns:\fP
.RS 4
the button value 
.RE
.PP

.PP
Definition at line 350 of file irene3000\&.cpp\&.
.PP
References ads, button, and setGain()\&.
.PP
.nf
351 {
352 
353 #if DEBUG == 1 
354 
355     Serial\&.println( F("Entering Irene3000\&.readButton()" ) );
356     Serial\&.println();
357 
358 #endif 
359 
360     this->setGain(gain);
361 
362 #if DEBUG == 1
363     
364     Serial\&.println( F("button value : ") );
365     Serial\&.println(this->ads\&.readADC_SingleEnded(button) );
366 
367 #endif 
368 
369     return( this->ads\&.readADC_SingleEnded(button) );
370     
371 }
.fi
.SS "float Irene3000::readPh (adsGain_t gain)"
Irene3000::readPh(gain): This method is provided to read the PH probe note that for the best results, PH must be correlated to Temperature\&.
.PP
\fBReturns:\fP
.RS 4
the PH probe value 
.RE
.PP

.PP
Definition at line 431 of file irene3000\&.cpp\&.
.PP
References ADC_MAXIMUM_VALUE, ads, opampGain, params, ph, Irene3000::parameters_T::pH7Cal, Irene3000::parameters_T::pHStep, setGain(), and vRef\&.
.PP
Referenced by read()\&.
.PP
.nf
432 {
433 
434 #if DEBUG == 1 
435 
436     Serial\&.println( F("Entering Irene3000\&.readPh()") );
437     Serial\&.println();
438 
439 #endif 
440 
441     this->setGain(gain);
442 
443     double Voltage =  gain * ( ads\&.readADC_SingleEnded(ph) ) / ADC_MAXIMUM_VALUE;
444 
445     float miliVolts = Voltage * 1000;
446     float temporary = ((((vRef * (float)params\&.pH7Cal) / 32767) * 1000) - miliVolts) / opampGain;
447 
448 #if DEBUG == 1 
449 
450     Serial\&.println( F("ph is : ") );
451     Serial\&.println( 7 - (temporary / params\&.pHStep) ) ;
452 
453 #endif 
454 
455     return( 7 - (temporary / params\&.pHStep) );
456 
457 }
.fi
.SS "double Irene3000::readTemp (adsGain_t gain)"
Irene3000::readTemp(gain): This method is provided to read the Temeperature probe
.PP
\fBReturns:\fP
.RS 4
the Temperature probe value 
.RE
.PP

.PP
Definition at line 466 of file irene3000\&.cpp\&.
.PP
References ads, setGain(), temp, and V_GAIN_8\&.
.PP
Referenced by read()\&.
.PP
.nf
467 {
468 
469 #if DEBUG == 1 
470 
471     Serial\&.println( F("Entering Irene3000\&.readTemp()") );
472     Serial\&.println();
473 
474 #endif
475 
476     const double A = 3\&.9083E-3;
477     const double B = -5\&.775E-7;
478     double T;
479 
480     this->setGain(gain);
481     double adc0 = ads\&.readADC_SingleEnded(temp);
482 
483 
484     double R = ( ( adc0 * V_GAIN_8 ) / 0\&.095 ) / 1000 ;
485 
486     T = 0\&.0 - A;
487     T += sqrt((A * A) - 4\&.0 * B * (1\&.0 - R));
488     T /= (2\&.0 * B);
489 
490     if (T > 0 && T < 200) 
491     {
492 
493     #if DEBUG == 1 
494 
495         Serial\&.print( F(" temperature : ") );
496         Serial\&.println(T);
497         Serial\&.println();
498     
499     #endif 
500         if(isnan(T))
501         {
502             return(-300);           
503         }
504 
505         return T;
506     }
507     else 
508     {
509         T = 0\&.0 - A;
510         T -= sqrt((A * A) - 4\&.0 * B * (1\&.0 - R));
511         T /= (2\&.0 * B);
512     
513     #if DEBUG == 1 
514     
515         Serial\&.println( F("temperature : ") );
516         Serial\&.println(T);
517         Serial\&.println();
518     
519     #endif
520         if(isnan(T))
521         {
522             return(-400);           
523         }
524 
525         return T;
526     }
527 
528 }
.fi
.SS "void Irene3000::resetParams (void)"
\fBIrene3000::resetParams()\fP: This method is provided to reset the PH configuration, assuming Ideal configuration 
.PP
Definition at line 606 of file irene3000\&.cpp\&.
.PP
References params, Irene3000::parameters_T::pH4Cal, Irene3000::parameters_T::pH7Cal, Irene3000::parameters_T::pHStep, Write_Check, and Irene3000::parameters_T::WriteCheck\&.
.PP
.nf
607 {
608 
609 #if DEBUG == 1 
610 
611     Serial\&.println( F("Entering Irene3000\&.resetParams()") );
612     Serial\&.println();
613 
614 #endif 
615 
616     //Restore to default set of parameters!
617     params\&.WriteCheck = Write_Check;
618     params\&.pH7Cal = 16384; //assume ideal probe and amp conditions 1/2 of 4096
619     params\&.pH4Cal = 8192; //using ideal probe slope we end up this many 12bit units away on the 4 scale
620     params\&.pHStep = 59\&.16;//ideal probe slope
621 
622 
623 }
.fi
.SS "void Irene3000::setGain (adsGain_t gain)"
Irene3000::setGain(gain): This method is provided to set the ADS chip gain 
.PP
Definition at line 378 of file irene3000\&.cpp\&.
.PP
References ads\&.
.PP
Referenced by calibratepH4(), calibratepH7(), readADSChannel2(), readButton(), readPh(), and readTemp()\&.
.PP
.nf
379 {
380 
381 #if DEBUG == 1  
382 
383     Serial\&.println( F("Entering Irene3000\&.setGain()") );
384     Serial\&.println();
385 
386 #endif
387 
388     this->ads\&.setGain(gain);
389 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "struct \fBIrene3000::state\fP Irene3000::adc2\fC [private]\fP"

.PP
Referenced by config(), printConf(), and read()\&.
.SS "Adafruit_ADS1115 Irene3000::ads\fC [private]\fP"

.PP
Definition at line 70 of file Irene3000\&.h\&.
.PP
Referenced by begin(), calibratepH4(), calibratepH7(), readADSChannel2(), readButton(), readPh(), readTemp(), and setGain()\&.
.SS "const float Irene3000::opampGain = 5\&.25\fC [private]\fP"

.PP
Definition at line 89 of file Irene3000\&.h\&.
.PP
Referenced by calcpHSlope(), and readPh()\&.
.SS "struct \fBIrene3000::parameters_T\fP Irene3000::params\fC [private]\fP"

.PP
Referenced by calcpHSlope(), calibratepH4(), calibratepH7(), readPh(), and resetParams()\&.
.SS "struct \fBIrene3000::state\fP  Irene3000::phProbe\fC [private]\fP"

.PP
Referenced by config(), printConf(), and read()\&.
.SS "const float Irene3000::vRef = 1\&.024\fC [private]\fP"

.PP
Definition at line 87 of file Irene3000\&.h\&.
.PP
Referenced by calcpHSlope(), and readPh()\&.
.SS "struct \fBIrene3000::state\fP  Irene3000::waterTemp\fC [private]\fP"

.PP
Referenced by config(), printConf(), and read()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolAPI from the source code\&.
