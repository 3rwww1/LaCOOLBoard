.TH "CoolBoard" 3 "Mon Jul 31 2017" "CoolAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoolBoard \- This class manages the \fBCoolBoard\fP and all of Its functions\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolBoard\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBbegin\fP ()"
.br
.ti -1c
.RI "bool \fBconfig\fP ()"
.br
.ti -1c
.RI "void \fBupdate\fP (const char *\fBanswer\fP)"
.br
.ti -1c
.RI "void \fBoffLineMode\fP ()"
.br
.ti -1c
.RI "void \fBonLineMode\fP ()"
.br
.ti -1c
.RI "int \fBconnect\fP ()"
.br
.ti -1c
.RI "uint16_t \fBgetLogInterval\fP ()"
.br
.ti -1c
.RI "void \fBprintConf\fP ()"
.br
.ti -1c
.RI "void \fBsleep\fP (int interval)"
.br
.ti -1c
.RI "String \fBreadSensors\fP ()"
.br
.ti -1c
.RI "String \fBuserData\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBCoolFileSystem\fP \fBfileSystem\fP"
.br
.ti -1c
.RI "\fBCoolBoardSensors\fP \fBcoolBoardSensors\fP"
.br
.ti -1c
.RI "\fBCoolBoardLed\fP \fBcoolBoardLed\fP"
.br
.ti -1c
.RI "\fBCoolTime\fP \fBrtc\fP"
.br
.ti -1c
.RI "\fBCoolWifi\fP \fBwifiManager\fP"
.br
.ti -1c
.RI "\fBCoolMQTT\fP \fBmqtt\fP"
.br
.ti -1c
.RI "\fBJetpack\fP \fBjetPack\fP"
.br
.ti -1c
.RI "\fBIrene3000\fP \fBirene3000\fP"
.br
.ti -1c
.RI "\fBExternalSensors\fP \fBexternalSensors\fP"
.br
.ti -1c
.RI "bool \fBuserActive\fP =0"
.br
.ti -1c
.RI "bool \fBireneActive\fP =0"
.br
.ti -1c
.RI "bool \fBjetpackActive\fP =0"
.br
.ti -1c
.RI "bool \fBexternalSensorsActive\fP =0"
.br
.ti -1c
.RI "bool \fBsleepActive\fP =0"
.br
.ti -1c
.RI "uint16_t \fBlogInterval\fP =1000"
.br
.ti -1c
.RI "int \fBserverTimeOut\fP =180"
.br
.ti -1c
.RI "String \fBdata\fP =''"
.br
.ti -1c
.RI "String \fBanswer\fP =''"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class manages the \fBCoolBoard\fP and all of Its functions\&. 
.PP
Definition at line 33 of file CoolBoard\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "void CoolBoard::begin ()"
\fBCoolBoard::begin()\fP: This method is provided to configure and start the used CoolKit Parts\&. It also starts the first connection try If Serial is enabled,it prints the configuration of the used parts\&. 
.PP
Definition at line 37 of file CoolBoard\&.cpp\&.
.PP
References Jetpack::begin(), CoolMQTT::begin(), ExternalSensors::begin(), CoolWifi::begin(), CoolBoardSensors::begin(), CoolTime::begin(), Irene3000::begin(), CoolBoardLed::blink(), Jetpack::config(), ExternalSensors::config(), CoolWifi::config(), CoolMQTT::config(), CoolTime::config(), Irene3000::config(), CoolBoardSensors::config(), connect(), coolBoardLed, coolBoardSensors, externalSensors, externalSensorsActive, CoolBoardLed::fadeOut(), irene3000, ireneActive, jetPack, jetpackActive, mqtt, CoolBoardLed::printConf(), Jetpack::printConf(), ExternalSensors::printConf(), CoolMQTT::printConf(), CoolWifi::printConf(), CoolTime::printConf(), Irene3000::printConf(), CoolBoardSensors::printConf(), rtc, wifiManager, and CoolBoardLed::write()\&.
.PP
.nf
38 {
39 
40 #if DEBUG == 1
41 
42     Serial\&.println( F("Starting the CoolBoard  ")  );
43     Serial\&.println( F("Entering CoolBoard\&.begin() ")  );
44     Serial\&.println();
45 #endif  
46     coolBoardLed\&.printConf();
47     delay(100);
48     
49     coolBoardLed\&.write(255,128,0);//orange
50     
51     coolBoardSensors\&.config();
52     coolBoardSensors\&.begin();
53     coolBoardSensors\&.printConf();
54     delay(100);
55     
56     wifiManager\&.config();
57     wifiManager\&.begin();
58     wifiManager\&.printConf();
59     delay(100);
60 
61     mqtt\&.config();
62     mqtt\&.begin();
63     mqtt\&.printConf();
64     delay(100);
65 
66     if (jetpackActive)
67     {
68         jetPack\&.config();
69         jetPack\&.begin();
70         jetPack\&.printConf();
71         delay(100);
72     }
73 
74     if (ireneActive)
75     {
76         irene3000\&.config();
77         irene3000\&.begin();
78         irene3000\&.printConf();
79         delay(100);
80     }
81 
82     if (externalSensorsActive)
83     {
84         externalSensors\&.config();
85         externalSensors\&.begin();
86         externalSensors\&.printConf();
87         delay(100);
88     }
89     
90     coolBoardLed\&.fadeOut(255,128,0,0\&.5);//orange
91 
92     this->connect();
93     delay(100);
94 
95     rtc\&.config();
96     rtc\&.begin();
97     rtc\&.printConf();
98     delay(100);
99     
100     coolBoardLed\&.blink(0,255,0,0\&.5);//green
101 
102 }
.fi
.SS "bool CoolBoard::config ()"
\fBCoolBoard::config()\fP: This method is provided to configure the \fBCoolBoard\fP : -log interval -irene3000 activated/deactivated -jetpack activated/deactivated -external Sensors activated/deactivated -mqtt server timeout
.PP
\fBReturns:\fP
.RS 4
true if configuration is done, false otherwise 
.RE
.PP

.PP
Definition at line 473 of file CoolBoard\&.cpp\&.
.PP
References CoolFileSystem::begin(), CoolBoardLed::begin(), CoolBoardLed::blink(), CoolBoardLed::config(), coolBoardLed, externalSensorsActive, CoolBoardLed::fadeIn(), CoolBoardLed::fadeOut(), fileSystem, ireneActive, jetpackActive, logInterval, serverTimeOut, sleepActive, CoolBoardLed::strobe(), and userActive\&.
.PP
.nf
474 {
475 
476 #if DEBUG == 1
477 
478     Serial\&.println( F("Entering CoolBoard\&.config() ") );
479     Serial\&.println();
480 
481 #endif
482 
483     //open file system
484     fileSystem\&.begin();
485     
486     //start the led
487     coolBoardLed\&.config();
488     coolBoardLed\&.begin();
489     coolBoardLed\&.fadeIn(243,171,46,0\&.5);//shade of orange     
490 
491     
492     //open configuration file
493     File configFile = SPIFFS\&.open("/coolBoardConfig\&.json", "r");
494     
495     if (!configFile)
496 
497     {
498     
499     #if DEBUG == 1
500 
501         Serial\&.println( F("failed to read /coolBoardConfig\&.json  ") );
502 
503     #endif
504         coolBoardLed\&.blink(255,0,0,0\&.5);//shade of red        
505         return(false);
506     }
507 
508     else
509     {
510         size_t size = configFile\&.size();
511 
512         // Allocate a buffer to store contents of the file\&.
513         std::unique_ptr < char[] > buf(new char[size]);
514 
515         configFile\&.readBytes(buf\&.get(), size);
516 
517         DynamicJsonBuffer jsonBuffer;
518 
519         JsonObject & json = jsonBuffer\&.parseObject(buf\&.get());
520 
521         if (!json\&.success())
522         {
523         
524         #if DEBUG == 1
525 
526             Serial\&.println( F("failed to parse CoolBoard Config json object ") );
527     
528         #endif
529             coolBoardLed\&.blink(255,0,0,0\&.5);//shade of red        
530             return(false);
531         }
532 
533         else
534         {   
535         
536         #if DEBUG == 1
537             
538             Serial\&.println( F("configuration json : ") );
539             json\&.printTo(Serial);
540             Serial\&.println();
541             
542             Serial\&.print(F("jsonBuffer size : "));
543             Serial\&.print(jsonBuffer\&.size());
544             Serial\&.println();
545 
546         #endif
547             
548             //parsing userActive Key
549             if (json["userActive"]\&.success())
550             {
551                 this -> userActive = json["userActive"];
552             }
553 
554             else
555             {
556                 this -> userActive = this -> userActive;
557             }
558             json["userActive"] = this -> userActive;
559 
560             //parsing logInterval key
561             if (json["logInterval"]\&.success())
562             {
563                 this -> logInterval = json["logInterval"];
564             }
565             else
566             {
567                 this -> logInterval = this -> logInterval;
568             }
569             json["logInterval"] = this -> logInterval;
570             
571             //parsing ireneActive key           
572             if (json["ireneActive"]\&.success())
573             {
574                 this -> ireneActive = json["ireneActive"];
575             }
576             else
577             {
578                 this -> ireneActive = this -> ireneActive;
579             }
580             json["ireneActive"] = this -> ireneActive;
581             
582             //parsing jetpackActive key
583             if (json["jetpackActive"]\&.success())
584             {
585                 this -> jetpackActive = json["jetpackActive"];
586             }
587             else
588             {
589                 this -> jetpackActive = this -> jetpackActive;
590             }
591             json["jetpackActive"] = this -> jetpackActive;
592 
593             //parsing externalSensorsActive key
594             if (json["externalSensorsActive"]\&.success())
595             {
596                 this -> externalSensorsActive = json["externalSensorsActive"];
597             }
598             else
599             {
600                 this -> externalSensorsActive = this -> externalSensorsActive;
601             }
602             json["externalSensorsActive"] = this -> externalSensorsActive;
603 
604             //parsing serverTimeOut key
605             if (json["serverTimeOut"]\&.success())
606             {
607                 this -> serverTimeOut = json["serverTimeOut"];
608             }
609             else
610             {
611                 this -> serverTimeOut = this -> serverTimeOut;
612             }
613             json["serverTimeOut"] = this -> serverTimeOut;
614             
615             //parsing sleepActive key
616             if (json["sleepActive"]\&.success())
617             {
618                 this -> sleepActive = json["sleepActive"];
619             }
620             else
621             {
622                 this -> sleepActive = this -> sleepActive;
623             }
624             json["sleepActive"] = this -> sleepActive;
625 
626             //saving the current/correct configuration
627             configFile\&.close();
628             configFile = SPIFFS\&.open("/coolBoardConfig\&.json", "w");
629             if (!configFile)
630             {
631             
632             #if DEBUG == 1
633 
634                 Serial\&.println( F("failed to write to /coolBoardConfig\&.json") );
635                 Serial\&.println();
636             
637             #endif
638                 coolBoardLed\&.blink(255,0,0,0\&.5);//shade of red        
639                 return(false);
640             }
641 
642             json\&.printTo(configFile);
643             configFile\&.close();
644             return(true);
645         }
646     }
647 
648     coolBoardLed\&.strobe(243,171,46,0\&.5);//shade of orange
649     
650     coolBoardLed\&.fadeOut(243,171,46,0\&.5);//shade of orange                
651 }
.fi
.SS "int CoolBoard::connect ()"
\fBCoolBoard::connect()\fP: This method is provided to manage the network connection and the mqtt connection\&.
.PP
\fBReturns:\fP
.RS 4
mqtt client state 
.RE
.PP

.PP
Definition at line 111 of file CoolBoard\&.cpp\&.
.PP
References CoolBoardLed::blink(), CoolMQTT::connect(), CoolWifi::connect(), coolBoardLed, getLogInterval(), mqtt, CoolWifi::state(), CoolMQTT::state(), wifiManager, and CoolBoardLed::write()\&.
.PP
Referenced by begin()\&.
.PP
.nf
112 {
113 
114 #if DEBUG == 1  
115 
116     Serial\&.println( F("Entering CoolBoard\&.connect ") );
117     Serial\&.println();
118     Serial\&.println( F("Connecting the CoolBoard  ") );
119     delay(100);
120 
121 #endif
122     coolBoardLed\&.write(0,0,255);//blue
123 
124     if (wifiManager\&.state() != WL_CONNECTED)
125     {       
126     
127     #if DEBUG == 1      
128 
129         Serial\&.println( F("CoolBoard not connected to WiFi ") );
130         Serial\&.println( F("Launching CoolWifi") );
131         Serial\&.println();
132 
133     #endif
134         wifiManager\&.connect();
135         delay(100);
136     }
137 
138 
139     
140     if (mqtt\&.state() != 0)
141     {   
142     
143     #if DEBUG == 1  
144     
145         Serial\&.println( F("CoolBoard not connected to MQTT ") );
146         Serial\&.println( F("Launching mqtt\&.connect()") );
147         Serial\&.println();
148 
149     #endif  
150     
151         mqtt\&.connect(this -> getLogInterval());
152         delay(100);
153         
154     }
155     
156 #if DEBUG == 1
157 
158     Serial\&.println( F("mqtt state is :") );
159     Serial\&.println(mqtt\&.state());
160     Serial\&.println();
161     delay(100);
162 
163 #endif
164 
165     coolBoardLed\&.blink(0,0,255,0\&.5);//blue
166 
167     return(mqtt\&.state());
168 }
.fi
.SS "uint16_t CoolBoard::getLogInterval ()"
\fBCoolBoard::getLogInterval()\fP: This method is provided to get the log interval
.PP
\fBReturns:\fP
.RS 4
interval value in ms 
.RE
.PP

.PP
Definition at line 851 of file CoolBoard\&.cpp\&.
.PP
References logInterval\&.
.PP
Referenced by connect(), and onLineMode()\&.
.PP
.nf
852 {
853 
854 #if DEBUG == 1
855 
856     Serial\&.println( F("Entering CoolBoard\&.getLogInterval() ") );
857     Serial\&.println();
858     Serial\&.println( F("log Interval is :") );
859     Serial\&.println(logInterval);
860     Serial\&.println();
861 
862 #endif
863 
864     return(this -> logInterval);
865 }
.fi
.SS "void CoolBoard::offLineMode ()"
CoolBoard::offlineMode(): This method is provided to manage the offLine mode: -read sensors -do actions -save data in the file system 
.PP
Definition at line 368 of file CoolBoard\&.cpp\&.
.PP
References CoolBoardLed::blink(), coolBoardLed, data, Jetpack::doAction(), CoolBoardLed::fade(), CoolBoardLed::fadeIn(), CoolBoardLed::fadeOut(), fileSystem, jetPack, jetpackActive, readSensors(), CoolFileSystem::saveSensorData(), userActive, and userData()\&.
.PP
.nf
369 {
370     coolBoardLed\&.fade(51,100,50,0\&.5);//dark shade of green    
371 #if DEBUG == 1  
372     
373     Serial\&.println( F("Entering off line mode ") );  
374     
375 #endif
376 
377     //read user data if user is active
378     if(userActive)
379     {
380 
381         coolBoardLed\&.fadeIn(245,237,27,0\&.5);//shade of yellow
382 
383     #if DEBUG == 1
384         
385         Serial\&.println( F("User is Active") );
386         Serial\&.println( F("Collecting User's data ( mac,username,timeStamp )") );
387         Serial\&.println();
388 
389     #endif
390 
391         coolBoardLed\&.blink(245,237,27,0\&.5);//shade of yellow  
392 
393         //reading user data
394         data=this->userData();//{"":"","":"","",""}
395 
396         //formatting json 
397         data\&.setCharAt( data\&.lastIndexOf('}') , ',');//{"":"","":"","","",
398         
399                 
400         //read sensors data
401     #if DEBUG == 1
402 
403         Serial\&.println( F("Collecting sensors data ") );
404         Serial\&.println();
405 
406     #endif
407 
408         data+=this->readSensors();//{"":"","":"","","",{\&.\&.\&.\&.\&.\&.\&.}
409 
410         
411 
412         //formatting json correctly
413         data\&.remove(data\&.lastIndexOf('{'), 1);//{"":"","":"","","",\&.\&.\&.\&.\&.\&.\&.}
414 
415         coolBoardLed\&.fadeOut(245,237,27,0\&.5);//shade of yellow
416                 
417     }   
418     else
419     {
420         //read sensors data
421     #if DEBUG == 1
422 
423         Serial\&.println( F("Collecting sensors data ") );
424         Serial\&.println();
425 
426     #endif
427 
428         coolBoardLed\&.fade(190,100,150,0\&.5);//shade of violet      
429 
430         data=this->readSensors();//{\&.\&.,\&.\&.,\&.\&.}
431     }
432 
433     coolBoardLed\&.fade(51,100,50,0\&.5);//dark shade of green    
434 
435     //do action
436     if (jetpackActive)
437     {
438 
439     #if DEBUG == 1
440 
441         Serial\&.println( F("jetpack is Active ") );
442         Serial\&.println( F("jetpack doing action ") );
443         Serial\&.println();
444     
445     #endif
446         coolBoardLed\&.fade(100,100,150,0\&.5);//dark shade of blue   
447     
448         jetPack\&.doAction( data\&.c_str() );
449     }
450     
451     coolBoardLed\&.fade(51,100,50,0\&.5);//dark shade of green    
452     
453     //saving data in the file system
454     
455     fileSystem\&.saveSensorData( data\&.c_str() );
456 
457     coolBoardLed\&.fadeOut(51,100,50,0\&.5);//dark shade of green 
458 
459 }
.fi
.SS "void CoolBoard::onLineMode ()"
\fBCoolBoard::onLineMode()\fP: This method is provided to manage the online mode: -update clock -read sensor -do actions -publish data -read answer -update config 
.PP
Definition at line 180 of file CoolBoard\&.cpp\&.
.PP
References answer, CoolBoardLed::blink(), coolBoardLed, data, Jetpack::doAction(), CoolBoardLed::fade(), CoolBoardLed::fadeIn(), CoolBoardLed::fadeOut(), fileSystem, getLogInterval(), CoolFileSystem::getSensorSavedData(), CoolFileSystem::isDataSaved(), jetPack, jetpackActive, mqtt, CoolMQTT::mqttLoop(), CoolMQTT::publish(), CoolMQTT::read(), readSensors(), rtc, sleep(), sleepActive, CoolBoardLed::strobe(), CoolTime::update(), update(), userActive, and userData()\&.
.PP
.nf
181 {
182 
183     coolBoardLed\&.fadeIn(128,255,50,0\&.5);//shade of green
184 
185 #if DEBUG == 1
186 
187     Serial\&.println( F("Entering CoolBoard\&.onLineMode() ") );
188     Serial\&.println();
189 
190 #endif
191 
192     data="";
193     answer="";
194 
195     //send saved data if any
196     if(fileSystem\&.isDataSaved())
197     {
198 
199         coolBoardLed\&.fadeIn(128,128,255,0\&.5);//shade of blue
200 
201     #if DEBUG == 1
202 
203         Serial\&.println( F("There is data saved on the File System") );
204         Serial\&.println( F("Sending saved data over MQTT ") );
205         Serial\&.println();
206     
207     #endif  
208         coolBoardLed\&.strobe(128,128,255,0\&.5);//shade of blue 
209 
210         mqtt\&.publish("sending saved data");
211         mqtt\&.mqttLoop();
212 
213         data+=fileSystem\&.getSensorSavedData();//{\&.\&.,\&.\&.,\&.\&.}
214 
215         //formatting data:
216         String jsonData = "{\"state\":{\"reported\":";
217         jsonData += data; // {"state":{"reported":{\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}
218         jsonData += " } }"; // {"state":{"reported":{\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}  } }
219         
220         coolBoardLed\&.strobe(128,128,255,0\&.5);//shade of blue
221         
222         mqtt\&.publish( data\&.c_str() );
223         mqtt\&.mqttLoop();
224         
225         coolBoardLed\&.fadeOut(128,128,255,0\&.5);//shade of blue     
226     
227     #if DEBUG == 1
228 
229         Serial\&.println( F("Saved data sent ") );
230         Serial\&.println();
231     
232     #endif
233 
234     }
235 
236     coolBoardLed\&.blink(128,255,50,0\&.5);//shade of green
237 
238     //clock update
239     rtc\&.update();
240 
241     //read user data if user is active
242     if(userActive)
243     {
244         coolBoardLed\&.fadeIn(245,237,27,0\&.5);//shade of yellow
245     
246     #if DEBUG == 1
247 
248         Serial\&.println( F("User is Active") );
249         Serial\&.println( F("Collecting User's data ( mac,username,timeStamp )") );
250         Serial\&.println();
251     
252     #endif  
253         coolBoardLed\&.blink(245,237,27,0\&.5);//shade of yellow  
254 
255         //reading user data
256         data=this->userData();//{"":"","":"","",""}
257 
258         //formatting json 
259         data\&.setCharAt( data\&.lastIndexOf('}') , ',');//{"":"","":"","","",
260                 
261         //read sensors data
262     #if DEBUG == 1
263 
264         Serial\&.println( F("Collecting sensors data ") );
265         Serial\&.println();
266     
267     #endif
268 
269         data+=this->readSensors();//{"":"","":"","","",{\&.\&.\&.\&.\&.\&.\&.}       
270 
271         //formatting json correctly
272         data\&.remove(data\&.lastIndexOf('{'), 1);//{"":"","":"","","",\&.\&.\&.\&.\&.\&.\&.}
273         
274         coolBoardLed\&.fadeOut(245,237,27,0\&.5);//shade of yellow
275                 
276     }   
277     else
278     {
279         //read sensors data
280     #if DEBUG == 1
281 
282         Serial\&.println( F("Collecting sensors data ") );
283         Serial\&.println();
284     
285     #endif
286         coolBoardLed\&.fade(190,100,150,0\&.5);//shade of violet      
287         data=this->readSensors();//{\&.\&.,\&.\&.,\&.\&.}
288     }
289     
290     //do action
291     if (jetpackActive)
292     {
293     
294     #if DEBUG ==1
295 
296         Serial\&.println( F("jetpack is Active ") );
297         Serial\&.println( F("jetpack doing action ") );
298         Serial\&.println();
299 
300     #endif
301         coolBoardLed\&.fade(100,100,150,0\&.5);//dark shade of blue       
302         jetPack\&.doAction(data\&.c_str());
303     }
304     
305     coolBoardLed\&.fadeIn(128,255,50,0\&.5);//shade of green
306 
307     //formatting data:
308     String jsonData = "{\"state\":{\"reported\":";
309     jsonData += data; // {"state":{"reported":{\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}
310     jsonData += " } }"; // {"state":{"reported":{\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}  } }
311     
312     //mqtt client loop to allow data handling
313     mqtt\&.mqttLoop();
314 
315     coolBoardLed\&.blink(128,255,50,0\&.5);//shade of green   
316 
317     //read mqtt answer
318     answer = mqtt\&.read();
319 
320 #if DEBUG == 1 
321 
322     Serial\&.println( F("checking if there's an MQTT message ")  );
323     Serial\&.println( F("answer is : ") ); 
324     Serial\&.println(answer);  
325     Serial\&.println();
326 
327 #endif  
328 
329     coolBoardLed\&.fadeOut(128,255,50,0\&.5);//shade of green 
330 
331     //check if the configuration needs update 
332     //and update it if needed 
333     this -> update(answer\&.c_str());
334     
335     coolBoardLed\&.fadeIn(128,255,50,0\&.5);//shade of green  
336 
337     //publishing data   
338     if( this->sleepActive==0)   
339     {   
340         coolBoardLed\&.strobe(255,0,230,0\&.5);//shade of pink
341     
342         mqtt\&.publish( jsonData\&.c_str(), this->getLogInterval() );
343         mqtt\&.mqttLoop();
344     
345     }
346     else
347     {
348         coolBoardLed\&.strobe(230,255,0,0\&.5);//shade of yellow  
349 
350         mqtt\&.publish(jsonData\&.c_str());       
351         this->sleep( this->getLogInterval() ) ;
352         mqtt\&.mqttLoop();
353     }
354 
355     coolBoardLed\&.fadeOut(128,255,50,0\&.5);//shade of green     
356         
357         
358 }
.fi
.SS "void CoolBoard::printConf ()"
\fBCoolBoard::printConf()\fP: This method is provided to print the configuration to the Serial Monitor\&. 
.PP
Definition at line 660 of file CoolBoard\&.cpp\&.
.PP
References externalSensorsActive, ireneActive, jetpackActive, logInterval, serverTimeOut, sleepActive, and userActive\&.
.PP
.nf
661 {
662 
663 #if DEBUG == 1
664     
665     Serial\&.println( F("Entering CoolBoard\&.printConf() ") );
666     Serial\&.println();
667 
668 #endif
669 
670     Serial\&.println("Printing Cool Board Configuration ");
671     Serial\&.print("log interval       : ");
672     Serial\&.println(this->logInterval);
673 
674     Serial\&.print("irene active       : ");
675     Serial\&.println(this->ireneActive);
676 
677     Serial\&.print("jetpack active     : ");
678     Serial\&.println(this->jetpackActive);
679 
680     Serial\&.print("external sensors active    : ");
681     Serial\&.println(this->externalSensorsActive);
682 
683     Serial\&.print("access point timeOut   : ");
684     Serial\&.println(this->serverTimeOut);
685 
686     Serial\&.print("sleept active      : ");
687     Serial\&.println(this->sleepActive);
688 
689     Serial\&.print("user active        : ");
690     Serial\&.println(this->userActive);
691 
692     Serial\&.println();
693 
694 
695 
696 
697 }
.fi
.SS "String CoolBoard::readSensors ()"
\fBCoolBoard::readSensors()\fP: This method is provided to read and format all the sensors data in a single json\&.
.PP
\fBReturns:\fP
.RS 4
json string of all the sensors read\&. 
.RE
.PP

.PP
Definition at line 875 of file CoolBoard\&.cpp\&.
.PP
References coolBoardLed, coolBoardSensors, externalSensors, externalSensorsActive, CoolBoardLed::fadeIn(), CoolBoardLed::fadeOut(), CoolTime::getTimeDate(), irene3000, ireneActive, ExternalSensors::read(), CoolBoardSensors::read(), Irene3000::read(), rtc, and CoolBoardLed::strobe()\&.
.PP
Referenced by offLineMode(), and onLineMode()\&.
.PP
.nf
876 {
877 
878     coolBoardLed\&.fadeIn(128,255,0,0\&.5);//light shade of green
879                 
880 #if DEBUG == 1
881 
882     Serial\&.println( F("Entering CoolBoard\&.readSensors()") );
883     Serial\&.println();
884 
885 #endif
886     coolBoardLed\&.strobe(128,255,0,0\&.5);//light shade of green
887 
888     String sensorsData;
889 
890     sensorsData = coolBoardSensors\&.read(); // {\&.\&.,\&.\&.,\&.\&.}
891     
892     if (externalSensorsActive)
893     {
894         sensorsData += externalSensors\&.read(); // {\&.\&.,\&.\&.,\&.\&.}{\&.\&.,\&.\&.}
895 
896         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf('}'), ','); // {\&.\&.,\&.\&.,\&.\&.}{\&.\&.,\&.\&.,
897         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf('{'), ','); // {\&.\&.,\&.\&.,\&.\&.},\&.\&.,\&.\&.,
898         sensorsData\&.remove(sensorsData\&.lastIndexOf('}'), 1); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,
899         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf(','), '}'); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}
900 
901     }
902     if (ireneActive)
903     {
904         sensorsData += irene3000\&.read(); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}{\&.\&.,\&.\&.,\&.\&.}
905 
906         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf('}'), ','); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}{\&.\&.,\&.\&.,\&.\&.,
907         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf('{'), ','); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.},\&.\&.,\&.\&.,\&.\&.,
908         sensorsData\&.remove(sensorsData\&.lastIndexOf('}'), 1); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,
909         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf(','), '}'); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}        
910         
911         
912     }
913 
914     //getting Hour:
915     tmElements_t tm;
916     tm=rtc\&.getTimeDate();
917     
918     //adding Hour
919     sensorsData\&.remove(sensorsData\&.lastIndexOf('}'), 1); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&., 
920     sensorsData+=",\"hour\":";  
921     sensorsData+=tm\&.Hour;
922     sensorsData+="}";
923     
924 #if DEBUG == 1
925     Serial\&.println();
926     Serial\&.println( F("sensors data is ") );
927     Serial\&.println(sensorsData);
928     Serial\&.println();
929 
930 #endif
931     coolBoardLed\&.fadeOut(128,255,0,0\&.5);//light shade of green
932 
933     return(sensorsData);
934 
935 }
.fi
.SS "void CoolBoard::sleep (int interval)"
\fBCoolBoard::sleep(int interval)\fP: This method is provided to allow the board to enter deepSleep mode for a period of time equal to interval in ms 
.PP
Definition at line 991 of file CoolBoard\&.cpp\&.
.PP
Referenced by onLineMode()\&.
.PP
.nf
992 {
993 
994 #if DEBUG == 1
995 
996     Serial\&.println( F("Entering CoolBoard\&.sleep() ") );
997     Serial\&.print( F("going to sleep for ") );
998     Serial\&.print(interval);
999     Serial\&.println(F("ms") );
1000     Serial\&.println();
1001 
1002 #endif
1003 
1004     ESP\&.deepSleep ( ( interval * 1000 ), WAKE_RF_DEFAULT) ;
1005 }
.fi
.SS "void CoolBoard::update (const char * answer)"
CoolBoard::update(mqtt answer): This method is provided to handle the configuration update of the different parts 
.PP
Definition at line 704 of file CoolBoard\&.cpp\&.
.PP
References coolBoardLed, CoolBoardLed::fadeIn(), CoolBoardLed::fadeOut(), fileSystem, mqtt, CoolMQTT::mqttLoop(), CoolMQTT::publish(), CoolBoardLed::strobe(), and CoolFileSystem::updateConfigFiles()\&.
.PP
Referenced by onLineMode()\&.
.PP
.nf
705 {
706     coolBoardLed\&.fadeIn(153,76,0,0\&.5);//shade of brown        
707 
708 #if DEBUG == 1
709 
710     Serial\&.println( F("Entering CoolBoard\&.update() ") );
711     Serial\&.println();
712     Serial\&.println( F("message is : ") );
713     Serial\&.println(answer);
714     Serial\&.println();
715 
716 #endif
717 
718     DynamicJsonBuffer jsonBuffer;
719     JsonObject & root = jsonBuffer\&.parseObject(answer);
720     JsonObject & stateDesired = root["state"];
721 
722 #if DEBUG == 1
723 
724     Serial\&.println( F("root json : ") );
725     root\&.printTo(Serial);
726     Serial\&.println();
727 
728     Serial\&.println(F("stateDesired json : "));
729     stateDesired\&.printTo(Serial);
730     Serial\&.println();
731     
732     Serial\&.print(F("jsonBuffer size : "));
733     Serial\&.println(jsonBuffer\&.size());
734 
735 #endif
736 
737     if (stateDesired\&.success())
738     {
739     
740     #if DEBUG == 1
741 
742         Serial\&.println( F("update message parsing : success") );
743         Serial\&.println();
744     
745     #endif
746 
747             String answerDesired;
748         
749             stateDesired\&.printTo(answerDesired);
750             
751         #if DEBUG == 1      
752         
753             Serial\&.println( F("update is ok ") );
754             Serial\&.println( F("desired update is : ") );         
755             Serial\&.println(answerDesired);
756             Serial\&.println("json size is : ");
757             Serial\&.println(jsonBuffer\&.size() ) ;              
758             Serial\&.println();
759 
760         
761         #endif
762             //saving the new configuration
763             fileSystem\&.updateConfigFiles(answerDesired);
764 
765             //applying the configuration    
766             /*this -> config();
767 
768             coolBoardSensors\&.config();
769 
770             rtc\&.config();
771 
772             coolBoardLed\&.config();
773             
774             wifiManager\&.config();
775 
776             mqtt\&.config();
777 
778             if (jetpackActive)
779             {
780                 jetPack\&.config();
781             }
782 
783             if (ireneActive)
784             {
785                 irene3000\&.config();
786             }
787 
788             if (externalSensorsActive)
789             {
790                 externalSensors\&.config();
791             }
792 
793             delay(10);
794             wifiManager\&.begin();
795             delay(100);
796             mqtt\&.begin();*/
797 
798                 //answering the update msg:
799             //reported = received configuration
800             //desired=null
801         
802             String updateAnswer;
803             String tempString;
804             
805             stateDesired\&.printTo(tempString);
806             updateAnswer="{\"state\":{\"reported\":";
807             updateAnswer+=tempString;
808             updateAnswer+=",\"desired\":null}}";
809 
810         #if DEBUG == 1
811 
812             Serial\&.println( F("preparing answer message ") );
813             Serial\&.println();
814             Serial\&.println( F("updateAnswer : ") );
815             Serial\&.println(updateAnswer);
816         
817         #endif  
818 
819             mqtt\&.publish(updateAnswer\&.c_str());
820             
821             mqtt\&.mqttLoop();
822 
823             delay(10);
824             
825             //restart the esp to apply the config
826             ESP\&.restart();
827     }
828     else
829     {
830     
831     #if DEBUG == 1
832 
833         Serial\&.println( F("Failed to parse update message( OR no message received )") );
834         Serial\&.println();
835     
836     #endif
837     
838     }
839 
840     coolBoardLed\&.strobe(153,76,0,0\&.5);//shade of brown
841     coolBoardLed\&.fadeOut(153,76,0,0\&.5);//shade of brown                               
842 }
.fi
.SS "String CoolBoard::userData ()"
\fBCoolBoard::userData()\fP: This method is provided to return the user's data\&.
.PP
\fBReturns:\fP
.RS 4
json string of the user's data 
.RE
.PP

.PP
Definition at line 944 of file CoolBoard\&.cpp\&.
.PP
References CoolTime::getESDate(), CoolMQTT::getUser(), mqtt, and rtc\&.
.PP
Referenced by offLineMode(), and onLineMode()\&.
.PP
.nf
945 {
946 
947 #if DEBUG == 1
948 
949     Serial\&.println( F("Entering CoolBoard\&.userData() ") );
950     Serial\&.println();
951 
952 #endif
953 
954     String tempMAC = WiFi\&.macAddress();
955 
956     tempMAC\&.replace(":", "");
957 
958     String userJson = "{\"user\":\"";
959 
960     userJson += mqtt\&.getUser();
961 
962     userJson += "\",\"timestamp\":\"";
963 
964     userJson += rtc\&.getESDate(); // "timestamp":"20yy-mm-ddThh:mm:ssZ"
965 
966     userJson += "\",\"mac\":\"";
967 
968     userJson += tempMAC;
969 
970     userJson += "\"}";
971 
972 #if DEBUG == 1
973 
974     Serial\&.println( F("userData is : ") );
975     Serial\&.println(userJson);
976     Serial\&.println();
977 
978 #endif  
979     
980     return(userJson);
981     
982 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "String CoolBoard::answer =''\fC [private]\fP"

.PP
Definition at line 97 of file CoolBoard\&.h\&.
.PP
Referenced by onLineMode()\&.
.SS "\fBCoolBoardLed\fP CoolBoard::coolBoardLed\fC [private]\fP"

.PP
Definition at line 67 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), config(), connect(), offLineMode(), onLineMode(), readSensors(), and update()\&.
.SS "\fBCoolBoardSensors\fP CoolBoard::coolBoardSensors\fC [private]\fP"

.PP
Definition at line 65 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), and readSensors()\&.
.SS "String CoolBoard::data =''\fC [private]\fP"

.PP
Definition at line 95 of file CoolBoard\&.h\&.
.PP
Referenced by offLineMode(), and onLineMode()\&.
.SS "\fBExternalSensors\fP CoolBoard::externalSensors\fC [private]\fP"

.PP
Definition at line 79 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), and readSensors()\&.
.SS "bool CoolBoard::externalSensorsActive =0\fC [private]\fP"

.PP
Definition at line 87 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), config(), printConf(), and readSensors()\&.
.SS "\fBCoolFileSystem\fP CoolBoard::fileSystem\fC [private]\fP"

.PP
Definition at line 63 of file CoolBoard\&.h\&.
.PP
Referenced by config(), offLineMode(), onLineMode(), and update()\&.
.SS "\fBIrene3000\fP CoolBoard::irene3000\fC [private]\fP"

.PP
Definition at line 77 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), and readSensors()\&.
.SS "bool CoolBoard::ireneActive =0\fC [private]\fP"

.PP
Definition at line 83 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), config(), printConf(), and readSensors()\&.
.SS "\fBJetpack\fP CoolBoard::jetPack\fC [private]\fP"

.PP
Definition at line 75 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), offLineMode(), and onLineMode()\&.
.SS "bool CoolBoard::jetpackActive =0\fC [private]\fP"

.PP
Definition at line 85 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), config(), offLineMode(), onLineMode(), and printConf()\&.
.SS "uint16_t CoolBoard::logInterval =1000\fC [private]\fP"

.PP
Definition at line 91 of file CoolBoard\&.h\&.
.PP
Referenced by config(), getLogInterval(), and printConf()\&.
.SS "\fBCoolMQTT\fP CoolBoard::mqtt\fC [private]\fP"

.PP
Definition at line 73 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), connect(), onLineMode(), update(), and userData()\&.
.SS "\fBCoolTime\fP CoolBoard::rtc\fC [private]\fP"

.PP
Definition at line 69 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), onLineMode(), readSensors(), and userData()\&.
.SS "int CoolBoard::serverTimeOut =180\fC [private]\fP"

.PP
Definition at line 93 of file CoolBoard\&.h\&.
.PP
Referenced by config(), and printConf()\&.
.SS "bool CoolBoard::sleepActive =0\fC [private]\fP"

.PP
Definition at line 89 of file CoolBoard\&.h\&.
.PP
Referenced by config(), onLineMode(), and printConf()\&.
.SS "bool CoolBoard::userActive =0\fC [private]\fP"

.PP
Definition at line 81 of file CoolBoard\&.h\&.
.PP
Referenced by config(), offLineMode(), onLineMode(), and printConf()\&.
.SS "\fBCoolWifi\fP CoolBoard::wifiManager\fC [private]\fP"

.PP
Definition at line 71 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), and connect()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolAPI from the source code\&.
