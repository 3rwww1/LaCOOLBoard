.TH "CoolBoard" 3 "Wed Jul 12 2017" "CoolAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoolBoard \- This class manages the \fBCoolBoard\fP and all of Its functions\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolBoard\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBbegin\fP ()"
.br
.ti -1c
.RI "bool \fBconfig\fP ()"
.br
.ti -1c
.RI "void \fBupdate\fP (const char *\fBanswer\fP)"
.br
.ti -1c
.RI "void \fBoffLineMode\fP ()"
.br
.ti -1c
.RI "void \fBonLineMode\fP ()"
.br
.ti -1c
.RI "int \fBconnect\fP ()"
.br
.ti -1c
.RI "uint16_t \fBgetLogInterval\fP ()"
.br
.ti -1c
.RI "void \fBprintConf\fP ()"
.br
.ti -1c
.RI "void \fBsleep\fP (int interval)"
.br
.ti -1c
.RI "String \fBreadSensors\fP ()"
.br
.ti -1c
.RI "String \fBuserData\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBCoolFileSystem\fP \fBfileSystem\fP"
.br
.ti -1c
.RI "\fBCoolBoardSensors\fP \fBcoolBoardSensors\fP"
.br
.ti -1c
.RI "\fBCoolBoardLed\fP \fBcoolBoardLed\fP"
.br
.ti -1c
.RI "\fBCoolTime\fP \fBrtc\fP"
.br
.ti -1c
.RI "\fBCoolWifi\fP \fBwifiManager\fP"
.br
.ti -1c
.RI "\fBCoolMQTT\fP \fBmqtt\fP"
.br
.ti -1c
.RI "\fBJetpack\fP \fBjetPack\fP"
.br
.ti -1c
.RI "\fBIrene3000\fP \fBirene3000\fP"
.br
.ti -1c
.RI "\fBExternalSensors\fP \fBexternalSensors\fP"
.br
.ti -1c
.RI "bool \fBuserActive\fP =0"
.br
.ti -1c
.RI "bool \fBireneActive\fP =0"
.br
.ti -1c
.RI "bool \fBjetpackActive\fP =0"
.br
.ti -1c
.RI "bool \fBexternalSensorsActive\fP =0"
.br
.ti -1c
.RI "bool \fBsleepActive\fP =0"
.br
.ti -1c
.RI "uint16_t \fBlogInterval\fP =1000"
.br
.ti -1c
.RI "int \fBanswerJsonSize\fP =3000"
.br
.ti -1c
.RI "int \fBsensorJsonSize\fP =1000"
.br
.ti -1c
.RI "int \fBserverTimeOut\fP =180"
.br
.ti -1c
.RI "String \fBdata\fP =''"
.br
.ti -1c
.RI "String \fBanswer\fP =''"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class manages the \fBCoolBoard\fP and all of Its functions\&. 
.PP
Definition at line 33 of file CoolBoard\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "void CoolBoard::begin ()"
\fBCoolBoard::begin()\fP: This method is provided to configure and start the used CoolKit Parts\&. It also starts the first connection try If Serial is enabled,it prints the configuration of the used parts\&. 
.PP
Definition at line 37 of file CoolBoard\&.cpp\&.
.PP
References Jetpack::begin(), CoolFileSystem::begin(), CoolBoardLed::begin(), CoolMQTT::begin(), ExternalSensors::begin(), CoolWifi::begin(), CoolBoardSensors::begin(), CoolTime::begin(), Irene3000::begin(), CoolBoardLed::config(), Jetpack::config(), CoolWifi::config(), ExternalSensors::config(), CoolMQTT::config(), CoolTime::config(), Irene3000::config(), CoolBoardSensors::config(), connect(), coolBoardLed, coolBoardSensors, externalSensors, externalSensorsActive, fileSystem, irene3000, ireneActive, jetPack, jetpackActive, mqtt, CoolBoardLed::printConf(), Jetpack::printConf(), ExternalSensors::printConf(), CoolMQTT::printConf(), Irene3000::printConf(), CoolTime::printConf(), CoolWifi::printConf(), CoolBoardSensors::printConf(), rtc, and wifiManager\&.
.PP
.nf
38 {
39 
40 #if DEBUG == 1
41 
42     Serial\&.println( F("Starting the CoolBoard  ")  );
43     Serial\&.println( F("Entering CoolBoard\&.begin() ")  );
44     Serial\&.println();
45 #endif
46     
47     fileSystem\&.begin();
48     delay(100);
49     
50     coolBoardSensors\&.config();
51     coolBoardSensors\&.begin();
52     coolBoardSensors\&.printConf();
53     delay(100);
54 
55     coolBoardLed\&.config();
56     coolBoardLed\&.begin();
57     coolBoardLed\&.printConf();
58     delay(100);
59     
60     wifiManager\&.config();
61     wifiManager\&.begin();
62     wifiManager\&.printConf();
63     delay(100);
64 
65     mqtt\&.config();
66     mqtt\&.begin();
67     mqtt\&.printConf();
68     delay(100);
69 
70     if (jetpackActive)
71     {
72         jetPack\&.config();
73         jetPack\&.begin();
74         jetPack\&.printConf();
75         delay(100);
76     }
77 
78     if (ireneActive)
79     {
80         irene3000\&.config();
81         irene3000\&.begin();
82         irene3000\&.printConf();
83         delay(100);
84     }
85 
86     if (externalSensorsActive)
87     {
88         externalSensors\&.config();
89         externalSensors\&.begin();
90         externalSensors\&.printConf();
91         delay(100);
92     }
93     
94     this->connect();
95     delay(100);
96 
97     rtc\&.config();
98     rtc\&.begin();
99     rtc\&.printConf();
100     delay(100);
101 
102 }
.fi
.SS "bool CoolBoard::config ()"
\fBCoolBoard::config()\fP: This method is provided to configure the \fBCoolBoard\fP : -log interval -Size of the data to write -Size of the data to read -irene3000 activated/deactivated -jetpack activated/deactivated -external Sensors activated/deactivated -mqtt server timeout
.PP
\fBReturns:\fP
.RS 4
true if configuration is done, false otherwise 
.RE
.PP

.PP
Definition at line 434 of file CoolBoard\&.cpp\&.
.PP
References answerJsonSize, CoolFileSystem::begin(), externalSensorsActive, fileSystem, ireneActive, jetpackActive, logInterval, sensorJsonSize, serverTimeOut, sleepActive, and userActive\&.
.PP
Referenced by update()\&.
.PP
.nf
435 {
436 
437 #if DEBUG == 1
438 
439     Serial\&.println( F("Entering CoolBoard\&.config() ") );
440     Serial\&.println();
441 
442 #endif
443 
444     //open file system
445     fileSystem\&.begin();
446     
447     //open configuration file
448     File configFile = SPIFFS\&.open("/coolBoardConfig\&.json", "r");
449     
450     if (!configFile)
451 
452     {
453     
454     #if DEBUG == 1
455 
456         Serial\&.println( F("failed to read /coolBoardConfig\&.json  ") );
457 
458     #endif
459     
460         return(false);
461     }
462 
463     else
464     {
465         size_t size = configFile\&.size();
466 
467         // Allocate a buffer to store contents of the file\&.
468         std::unique_ptr < char[] > buf(new char[size]);
469 
470         configFile\&.readBytes(buf\&.get(), size);
471 
472         DynamicJsonBuffer jsonBuffer;
473 
474         JsonObject & json = jsonBuffer\&.parseObject(buf\&.get());
475 
476         if (!json\&.success())
477         {
478         
479         #if DEBUG == 1
480 
481             Serial\&.println( F("failed to parse CoolBoard Config json object ") );
482     
483         #endif
484 
485             return(false);
486         }
487 
488         else
489         {   
490         
491         #if DEBUG == 1
492             
493             Serial\&.println( F("configuration json : ") );
494             json\&.printTo(Serial);
495             Serial\&.println();
496         
497         #endif
498             
499             //parsing userActive Key
500             if (json["userActive"]\&.success())
501             {
502                 this -> userActive = json["userActive"];
503             }
504 
505             else
506             {
507                 this -> userActive = this -> userActive;
508             }
509             json["userActive"] = this -> userActive;
510 
511             //parsing logInterval key
512             if (json["logInterval"]\&.success())
513             {
514                 this -> logInterval = json["logInterval"];
515             }
516             else
517             {
518                 this -> logInterval = this -> logInterval;
519             }
520             json["logInterval"] = this -> logInterval;
521 
522             //parsing sensorJsonSize key
523             if (json["sensorJsonSize"]\&.success())
524             {
525                 this -> sensorJsonSize = json["sensorJsonSize"];
526             }
527             else
528             {
529                 this -> sensorJsonSize = this -> sensorJsonSize;
530             }
531             json["sensorJsonSize"] = this -> sensorJsonSize;
532             
533             //parsing answerJsonSize key            
534             if (json["answerJsonSize"]\&.success())
535             {
536                 this -> answerJsonSize = json["answerJsonSize"];
537             }
538             else
539             {
540                 this -> answerJsonSize = this -> answerJsonSize;
541             }
542             json["answerJsonSize"] = this -> answerJsonSize;
543             
544             //parsing ireneActive key           
545             if (json["ireneActive"]\&.success())
546             {
547                 this -> ireneActive = json["ireneActive"];
548             }
549             else
550             {
551                 this -> ireneActive = this -> ireneActive;
552             }
553             json["ireneActive"] = this -> ireneActive;
554             
555             //parsing jetpackActive key
556             if (json["jetpackActive"]\&.success())
557             {
558                 this -> jetpackActive = json["jetpackActive"];
559             }
560             else
561             {
562                 this -> jetpackActive = this -> jetpackActive;
563             }
564             json["jetpackActive"] = this -> jetpackActive;
565 
566             //parsing externalSensorsActive key
567             if (json["externalSensorsActive"]\&.success())
568             {
569                 this -> externalSensorsActive = json["externalSensorsActive"];
570             }
571             else
572             {
573                 this -> externalSensorsActive = this -> externalSensorsActive;
574             }
575             json["externalSensorsActive"] = this -> externalSensorsActive;
576 
577             //parsing serverTimeOut key
578             if (json["serverTimeOut"]\&.success())
579             {
580                 this -> serverTimeOut = json["serverTimeOut"];
581             }
582             else
583             {
584                 this -> serverTimeOut = this -> serverTimeOut;
585             }
586             json["serverTimeOut"] = this -> serverTimeOut;
587             
588             //parsing sleepActive key
589             if (json["sleepActive"]\&.success())
590             {
591                 this -> sleepActive = json["sleepActive"];
592             }
593             else
594             {
595                 this -> sleepActive = this -> sleepActive;
596             }
597             json["sleepActive"] = this -> sleepActive;
598 
599             //saving the current/correct configuration
600             configFile\&.close();
601             configFile = SPIFFS\&.open("/coolBoardConfig\&.json", "w");
602             if (!configFile)
603             {
604             
605             #if DEBUG == 1
606 
607                 Serial\&.println( F("failed to write to /coolBoardConfig\&.json") );
608                 Serial\&.println();
609             
610             #endif
611  
612                 return(false);
613             }
614 
615             json\&.printTo(configFile);
616             configFile\&.close();
617             return(true);
618         }
619     }
620 }
.fi
.SS "int CoolBoard::connect ()"
\fBCoolBoard::connect()\fP: This method is provided to manage the network connection and the mqtt connection\&.
.PP
\fBReturns:\fP
.RS 4
mqtt client state 
.RE
.PP

.PP
Definition at line 111 of file CoolBoard\&.cpp\&.
.PP
References CoolMQTT::connect(), CoolWifi::connect(), getLogInterval(), mqtt, CoolWifi::state(), CoolMQTT::state(), and wifiManager\&.
.PP
Referenced by begin()\&.
.PP
.nf
112 {
113 
114 #if DEBUG == 1  
115 
116     Serial\&.println( F("Entering CoolBoard\&.connect ") );
117     Serial\&.println();
118     Serial\&.println( F("Connecting the CoolBoard  ") );
119     delay(100);
120 
121 #endif
122 
123     if (wifiManager\&.state() != WL_CONNECTED)
124     {       
125     
126     #if DEBUG == 1      
127 
128         Serial\&.println( F("CoolBoard not connected to WiFi ") );
129         Serial\&.println( F("Launching CoolWifi") );
130         Serial\&.println();
131 
132     #endif
133         wifiManager\&.connect();
134         delay(100);
135     }
136 
137 
138     
139     if (mqtt\&.state() != 0)
140     {   
141     
142     #if DEBUG == 1  
143     
144         Serial\&.println( F("CoolBoard not connected to MQTT ") );
145         Serial\&.println( F("Launching mqtt\&.connect()") );
146         Serial\&.println();
147 
148     #endif  
149     
150         mqtt\&.connect(this -> getLogInterval());
151         delay(100);
152         
153     }
154     
155 #if DEBUG == 1
156 
157     Serial\&.println( F("mqtt state is :") );
158     Serial\&.println(mqtt\&.state());
159     Serial\&.println();
160     delay(100);
161 
162 #endif
163 
164     return(mqtt\&.state());
165 }
.fi
.SS "uint16_t CoolBoard::getLogInterval ()"
\fBCoolBoard::getLogInterval()\fP: This method is provided to get the log interval
.PP
\fBReturns:\fP
.RS 4
interval value in ms 
.RE
.PP

.PP
Definition at line 814 of file CoolBoard\&.cpp\&.
.PP
References logInterval\&.
.PP
Referenced by connect(), and onLineMode()\&.
.PP
.nf
815 {
816 
817 #if DEBUG == 1
818 
819     Serial\&.println( F("Entering CoolBoard\&.getLogInterval() ") );
820     Serial\&.println();
821     Serial\&.println( F("log Interval is :") );
822     Serial\&.println(logInterval);
823     Serial\&.println();
824 
825 #endif
826 
827     return(this -> logInterval);
828 }
.fi
.SS "void CoolBoard::offLineMode ()"
CoolBoard::offlineMode(): This method is provided to manage the offLine mode: -read sensors -do actions -save data in the file system 
.PP
Definition at line 342 of file CoolBoard\&.cpp\&.
.PP
References data, Jetpack::doAction(), fileSystem, jetPack, jetpackActive, readSensors(), CoolFileSystem::saveSensorData(), sensorJsonSize, userActive, and userData()\&.
.PP
.nf
343 {
344 
345 #if DEBUG == 1  
346     
347     Serial\&.println( F("Entering off line mode ") );  
348     
349 #endif
350 
351     //read user data if user is active
352     if(userActive)
353     {
354 
355     #if DEBUG == 1
356         
357         Serial\&.println( F("User is Active") );
358         Serial\&.println( F("Collecting User's data ( mac,username,timeStamp )") );
359         Serial\&.println();
360 
361     #endif
362 
363         //reading user data
364         data=this->userData();//{"":"","":"","",""}
365 
366         //formatting json 
367         data\&.setCharAt( data\&.lastIndexOf('}') , ',');//{"":"","":"","","",
368         
369                 
370         //read sensors data
371     #if DEBUG == 1
372 
373         Serial\&.println( F("Collecting sensors data ") );
374         Serial\&.println();
375 
376     #endif
377 
378         data+=this->readSensors();//{"":"","":"","","",{\&.\&.\&.\&.\&.\&.\&.}
379 
380         
381 
382         //formatting json correctly
383         data\&.remove(data\&.lastIndexOf('{'), 1);//{"":"","":"","","",\&.\&.\&.\&.\&.\&.\&.}
384                 
385     }   
386     else
387     {
388         //read sensors data
389     #if DEBUG == 1
390 
391         Serial\&.println( F("Collecting sensors data ") );
392         Serial\&.println();
393 
394     #endif
395 
396         data=this->readSensors();//{\&.\&.,\&.\&.,\&.\&.}
397     }
398 
399     //do action
400     if (jetpackActive)
401     {
402 
403     #if DEBUG == 1
404 
405         Serial\&.println( F("jetpack is Active ") );
406         Serial\&.println( F("jetpack doing action ") );
407         Serial\&.println();
408     
409     #endif
410 
411         jetPack\&.doAction(data\&.c_str(), sensorJsonSize);
412     }
413     
414     
415     //saving data in the file system
416     
417     fileSystem\&.saveSensorData(data\&.c_str(), sensorJsonSize);
418 }
.fi
.SS "void CoolBoard::onLineMode ()"
\fBCoolBoard::onLineMode()\fP: This method is provided to manage the online mode: -update clock -read sensor -do actions -publish data -read answer -update config 
.PP
Definition at line 177 of file CoolBoard\&.cpp\&.
.PP
References answer, data, Jetpack::doAction(), fileSystem, getLogInterval(), CoolFileSystem::getSensorSavedData(), CoolFileSystem::isDataSaved(), jetPack, jetpackActive, mqtt, CoolMQTT::mqttLoop(), CoolMQTT::publish(), CoolMQTT::read(), readSensors(), rtc, sensorJsonSize, sleep(), sleepActive, CoolTime::update(), update(), userActive, and userData()\&.
.PP
.nf
178 {
179 
180 #if DEBUG == 1
181 
182     Serial\&.println( F("Entering CoolBoard\&.onLineMode() ") );
183     Serial\&.println();
184 
185 #endif
186 
187     data="";
188     answer="";
189 
190     //send saved data if any
191     if(fileSystem\&.isDataSaved())
192     {
193     
194     #if DEBUG == 1
195 
196         Serial\&.println( F("There is data saved on the File System") );
197         Serial\&.println( F("Sending saved data over MQTT ") );
198         Serial\&.println();
199     
200     #endif  
201     
202         mqtt\&.publish("sending saved data");
203         mqtt\&.mqttLoop();
204 
205         data+=fileSystem\&.getSensorSavedData();//{\&.\&.,\&.\&.,\&.\&.}
206 
207         //formatting data:
208         String jsonData = "{\"state\":{\"reported\":";
209         jsonData += data; // {"state":{"reported":{\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}
210         jsonData += " } }"; // {"state":{"reported":{\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}  } }
211 
212         mqtt\&.publish( data\&.c_str() );
213         mqtt\&.mqttLoop();
214     
215     #if DEBUG == 1
216 
217         Serial\&.println( F("Saved data sent ") );
218         Serial\&.println();
219     
220     #endif
221 
222     }
223 
224     //clock update
225     rtc\&.update();
226 
227     //read user data if user is active
228     if(userActive)
229     {
230     
231     #if DEBUG == 1
232 
233         Serial\&.println( F("User is Active") );
234         Serial\&.println( F("Collecting User's data ( mac,username,timeStamp )") );
235         Serial\&.println();
236     
237     #endif  
238     
239         //reading user data
240         data=this->userData();//{"":"","":"","",""}
241 
242         //formatting json 
243         data\&.setCharAt( data\&.lastIndexOf('}') , ',');//{"":"","":"","","",
244                 
245         //read sensors data
246     #if DEBUG == 1
247 
248         Serial\&.println( F("Collecting sensors data ") );
249         Serial\&.println();
250     
251     #endif
252 
253         data+=this->readSensors();//{"":"","":"","","",{\&.\&.\&.\&.\&.\&.\&.}       
254 
255         //formatting json correctly
256         data\&.remove(data\&.lastIndexOf('{'), 1);//{"":"","":"","","",\&.\&.\&.\&.\&.\&.\&.}
257                 
258     }   
259     else
260     {
261         //read sensors data
262     #if DEBUG == 1
263 
264         Serial\&.println( F("Collecting sensors data ") );
265         Serial\&.println();
266     
267     #endif
268 
269         data=this->readSensors();//{\&.\&.,\&.\&.,\&.\&.}
270     }
271     
272     //do action
273     if (jetpackActive)
274     {
275     
276     #if DEBUG ==1
277 
278         Serial\&.println( F("jetpack is Active ") );
279         Serial\&.println( F("jetpack doing action ") );
280         Serial\&.println();
281 
282     #endif
283 
284         jetPack\&.doAction(data\&.c_str(), sensorJsonSize);
285     }
286     
287     //formatting data:
288     String jsonData = "{\"state\":{\"reported\":";
289     jsonData += data; // {"state":{"reported":{\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}
290     jsonData += " } }"; // {"state":{"reported":{\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}  } }
291     
292     //mqtt client loop to allow data handling
293     mqtt\&.mqttLoop();
294 
295     //read mqtt answer
296     
297     answer = mqtt\&.read();
298 
299 #if DEBUG == 1 
300 
301     Serial\&.println( F("checking if there's an MQTT message ")  );
302     Serial\&.println( F("answer is : ") ); 
303     Serial\&.println(answer);  
304     Serial\&.println();
305 
306 #endif  
307 
308 
309     //check if the configuration needs update 
310     //and update it if needed 
311     this -> update(answer\&.c_str());
312     
313 
314     //publishing data   
315     if( this->sleepActive==0)   
316     {   
317         
318         mqtt\&.publish( jsonData\&.c_str(), this->getLogInterval() );
319         mqtt\&.mqttLoop();
320     
321     }
322     else
323     {
324         mqtt\&.publish(jsonData\&.c_str());       
325         this->sleep( this->getLogInterval() ) ;
326         mqtt\&.mqttLoop();
327     }
328 
329     
330         
331         
332 }
.fi
.SS "void CoolBoard::printConf ()"
\fBCoolBoard::printConf()\fP: This method is provided to print the configuration to the Serial Monitor\&. 
.PP
Definition at line 629 of file CoolBoard\&.cpp\&.
.PP
References answerJsonSize, externalSensorsActive, ireneActive, jetpackActive, logInterval, sensorJsonSize, serverTimeOut, sleepActive, and userActive\&.
.PP
.nf
630 {
631 
632 #if DEBUG == 1
633     
634     Serial\&.println( F("Entering CoolBoard\&.printConf() ") );
635     Serial\&.println();
636 
637 #endif
638 
639     Serial\&.println("Printing Cool Board Configuration ");
640     Serial\&.print("log interval       : ");
641     Serial\&.println(this->logInterval);
642 
643     Serial\&.print("sensor json size       : ");
644     Serial\&.println(this->sensorJsonSize);
645 
646     Serial\&.print("answer json size       : ");
647     Serial\&.println(this->answerJsonSize);
648 
649     Serial\&.print("irene active       : ");
650     Serial\&.println(this->ireneActive);
651 
652     Serial\&.print("jetpack active     : ");
653     Serial\&.println(this->jetpackActive);
654 
655     Serial\&.print("external sensors active    : ");
656     Serial\&.println(this->externalSensorsActive);
657 
658     Serial\&.print("access point timeOut   : ");
659     Serial\&.println(this->serverTimeOut);
660 
661     Serial\&.print("sleept active      : ");
662     Serial\&.println(this->sleepActive);
663 
664     Serial\&.print("user active        : ");
665     Serial\&.println(this->userActive);
666 
667     Serial\&.println();
668 
669 
670 
671 
672 }
.fi
.SS "String CoolBoard::readSensors ()"
\fBCoolBoard::readSensors()\fP: This method is provided to read and format all the sensors data in a single json\&.
.PP
\fBReturns:\fP
.RS 4
json string of all the sensors read\&. 
.RE
.PP

.PP
Definition at line 838 of file CoolBoard\&.cpp\&.
.PP
References coolBoardSensors, externalSensors, externalSensorsActive, irene3000, ireneActive, ExternalSensors::read(), CoolBoardSensors::read(), and Irene3000::read()\&.
.PP
Referenced by offLineMode(), and onLineMode()\&.
.PP
.nf
839 {
840 
841 #if DEBUG == 1
842 
843     Serial\&.println( F("Entering CoolBoard\&.readSensors()") );
844     Serial\&.println();
845 
846 #endif
847 
848     String sensorsData;
849 
850     sensorsData = coolBoardSensors\&.read(); // {\&.\&.,\&.\&.,\&.\&.}
851     
852     if (externalSensorsActive)
853     {
854         sensorsData += externalSensors\&.read(); // {\&.\&.,\&.\&.,\&.\&.}{\&.\&.,\&.\&.}
855 
856         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf('}'), ','); // {\&.\&.,\&.\&.,\&.\&.}{\&.\&.,\&.\&.,
857         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf('{'), ','); // {\&.\&.,\&.\&.,\&.\&.},\&.\&.,\&.\&.,
858         sensorsData\&.remove(sensorsData\&.lastIndexOf('}'), 1); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,
859         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf(','), '}'); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}
860 
861     }
862     if (ireneActive)
863     {
864         sensorsData += irene3000\&.read(); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}{\&.\&.,\&.\&.,\&.\&.}
865 
866         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf('}'), ','); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.{\&.\&.,\&.\&.,\&.\&.,
867         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf('{'), ','); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.},\&.\&.,\&.\&.,\&.\&.,
868         sensorsData\&.remove(sensorsData\&.lastIndexOf('}'), 1); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,
869         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf(','), '}'); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}
870         
871     }
872     
873 #if DEBUG == 1
874 
875     Serial\&.println( F("sensors data is ") );
876     Serial\&.println(sensorsData);
877     Serial\&.println();
878 
879 #endif
880 
881     return(sensorsData);
882 
883 }
.fi
.SS "void CoolBoard::sleep (int interval)"
\fBCoolBoard::sleep(int interval)\fP: This method is provided to allow the board to enter deepSleep mode for a period of time equal to interval in ms 
.PP
Definition at line 939 of file CoolBoard\&.cpp\&.
.PP
Referenced by onLineMode()\&.
.PP
.nf
940 {
941 
942 #if DEBUG == 1
943 
944     Serial\&.println( F("Entering CoolBoard\&.sleep() ") );
945     Serial\&.print( F("going to sleep for ") );
946     Serial\&.print(interval);
947     Serial\&.println(F("ms") );
948     Serial\&.println();
949 
950 #endif
951 
952     ESP\&.deepSleep ( ( interval * 1000 ), WAKE_RF_DEFAULT) ;
953 }
.fi
.SS "void CoolBoard::update (const char * answer)"
CoolBoard::update(mqtt answer): This method is provided to handle the configuration update of the different parts 
.PP
Definition at line 679 of file CoolBoard\&.cpp\&.
.PP
References answerJsonSize, CoolMQTT::begin(), CoolBoardLed::config(), Jetpack::config(), ExternalSensors::config(), CoolMQTT::config(), CoolTime::config(), config(), Irene3000::config(), CoolBoardSensors::config(), coolBoardLed, coolBoardSensors, externalSensors, externalSensorsActive, fileSystem, irene3000, ireneActive, jetPack, jetpackActive, mqtt, CoolMQTT::mqttLoop(), CoolMQTT::publish(), rtc, and CoolFileSystem::updateConfigFiles()\&.
.PP
Referenced by onLineMode()\&.
.PP
.nf
680 {
681 
682 #if DEBUG == 1
683 
684     Serial\&.println( F("Entering CoolBoard\&.update() ") );
685     Serial\&.println();
686     Serial\&.println( F("message is : ") );
687     Serial\&.println(answer);
688     Serial\&.println();
689 
690 #endif
691 
692     DynamicJsonBuffer jsonBuffer(answerJsonSize);
693     JsonObject & root = jsonBuffer\&.parseObject(answer);
694     JsonObject & stateDesired = root["state"];
695     if (stateDesired\&.success())
696     {
697     
698     #if DEBUG == 1
699 
700         Serial\&.println( F("update message parsing : success") );
701         Serial\&.println();
702     
703     #endif
704 
705         if (stateDesired["update"] == 1)
706         {
707             String answerDesired;
708         
709             stateDesired\&.printTo(answerDesired);
710             
711         #if DEBUG == 1      
712         
713             Serial\&.println( F("update is 1 ") );
714             Serial\&.println( F("desired update is : ") );         
715             Serial\&.println(answerDesired);
716             Serial\&.println();
717         
718         #endif
719             
720             fileSystem\&.updateConfigFiles(answerDesired, answerJsonSize);
721 
722             //applying the configuration    
723             this -> config();
724 
725             coolBoardSensors\&.config();
726 
727             rtc\&.config();
728 
729             coolBoardLed\&.config();
730 
731             mqtt\&.config();
732 
733             if (jetpackActive)
734             {
735                 jetPack\&.config();
736             }
737 
738             if (ireneActive)
739             {
740                 irene3000\&.config();
741             }
742 
743             if (externalSensorsActive)
744             {
745                 externalSensors\&.config();
746             }
747 
748             delay(10);
749             mqtt\&.begin();
750 
751                 //answering the update msg:
752             //reported = received configuration
753             //desired=null
754         
755             String updateAnswer;
756             String tempString;
757             
758             stateDesired\&.printTo(tempString);
759             updateAnswer="{\"state\":{\"reported\":";
760             updateAnswer+=tempString;
761             updateAnswer+=",\"desired\":null}}";
762 
763         #if DEBUG == 1
764 
765             Serial\&.println( F("preparing answer message ") );
766             Serial\&.println();
767             Serial\&.println( F("updateAnswer : ") );
768             Serial\&.println(updateAnswer);
769         
770         #endif  
771 
772             mqtt\&.publish(updateAnswer\&.c_str());
773             
774             mqtt\&.mqttLoop();
775 
776             delay(10);
777             
778             //restart the esp
779             ESP\&.restart();
780                 
781         }
782         else
783         {
784         
785         #if DEBUG == 1 
786 
787             Serial\&.println( F("update is not 1 ") );
788             Serial\&.println();
789         
790         #endif
791 
792         }
793     }
794     else
795     {
796     
797     #if DEBUG == 1
798 
799         Serial\&.println( F("Failed to parse update message( OR no message received )") );
800         Serial\&.println();
801     
802     #endif
803     
804     }       
805 }
.fi
.SS "String CoolBoard::userData ()"
\fBCoolBoard::userData()\fP: This method is provided to return the user's data\&.
.PP
\fBReturns:\fP
.RS 4
json string of the user's data 
.RE
.PP

.PP
Definition at line 892 of file CoolBoard\&.cpp\&.
.PP
References CoolTime::getESDate(), CoolMQTT::getUser(), mqtt, and rtc\&.
.PP
Referenced by offLineMode(), and onLineMode()\&.
.PP
.nf
893 {
894 
895 #if DEBUG == 1
896 
897     Serial\&.println( F("Entering CoolBoard\&.userData() ") );
898     Serial\&.println();
899 
900 #endif
901 
902     String tempMAC = WiFi\&.macAddress();
903 
904     tempMAC\&.replace(":", "");
905 
906     String userJson = "{\"user\":\"";
907 
908     userJson += mqtt\&.getUser();
909 
910     userJson += "\",\"timestamp\":\"";
911 
912     userJson += rtc\&.getESDate(); // "timestamp":"20yy-mm-ddThh:mm:ssZ"
913 
914     userJson += "\",\"mac\":\"";
915 
916     userJson += tempMAC;
917 
918     userJson += "\"}";
919 
920 #if DEBUG == 1
921 
922     Serial\&.println( F("userData is : ") );
923     Serial\&.println(userJson);
924     Serial\&.println();
925 
926 #endif  
927     
928     return(userJson);
929     
930 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "String CoolBoard::answer =''\fC [private]\fP"

.PP
Definition at line 101 of file CoolBoard\&.h\&.
.PP
Referenced by onLineMode()\&.
.SS "int CoolBoard::answerJsonSize =3000\fC [private]\fP"

.PP
Definition at line 93 of file CoolBoard\&.h\&.
.PP
Referenced by config(), printConf(), and update()\&.
.SS "\fBCoolBoardLed\fP CoolBoard::coolBoardLed\fC [private]\fP"

.PP
Definition at line 67 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), and update()\&.
.SS "\fBCoolBoardSensors\fP CoolBoard::coolBoardSensors\fC [private]\fP"

.PP
Definition at line 65 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), readSensors(), and update()\&.
.SS "String CoolBoard::data =''\fC [private]\fP"

.PP
Definition at line 99 of file CoolBoard\&.h\&.
.PP
Referenced by offLineMode(), and onLineMode()\&.
.SS "\fBExternalSensors\fP CoolBoard::externalSensors\fC [private]\fP"

.PP
Definition at line 79 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), readSensors(), and update()\&.
.SS "bool CoolBoard::externalSensorsActive =0\fC [private]\fP"

.PP
Definition at line 87 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), config(), printConf(), readSensors(), and update()\&.
.SS "\fBCoolFileSystem\fP CoolBoard::fileSystem\fC [private]\fP"

.PP
Definition at line 63 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), config(), offLineMode(), onLineMode(), and update()\&.
.SS "\fBIrene3000\fP CoolBoard::irene3000\fC [private]\fP"

.PP
Definition at line 77 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), readSensors(), and update()\&.
.SS "bool CoolBoard::ireneActive =0\fC [private]\fP"

.PP
Definition at line 83 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), config(), printConf(), readSensors(), and update()\&.
.SS "\fBJetpack\fP CoolBoard::jetPack\fC [private]\fP"

.PP
Definition at line 75 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), offLineMode(), onLineMode(), and update()\&.
.SS "bool CoolBoard::jetpackActive =0\fC [private]\fP"

.PP
Definition at line 85 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), config(), offLineMode(), onLineMode(), printConf(), and update()\&.
.SS "uint16_t CoolBoard::logInterval =1000\fC [private]\fP"

.PP
Definition at line 91 of file CoolBoard\&.h\&.
.PP
Referenced by config(), getLogInterval(), and printConf()\&.
.SS "\fBCoolMQTT\fP CoolBoard::mqtt\fC [private]\fP"

.PP
Definition at line 73 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), connect(), onLineMode(), update(), and userData()\&.
.SS "\fBCoolTime\fP CoolBoard::rtc\fC [private]\fP"

.PP
Definition at line 69 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), onLineMode(), update(), and userData()\&.
.SS "int CoolBoard::sensorJsonSize =1000\fC [private]\fP"

.PP
Definition at line 95 of file CoolBoard\&.h\&.
.PP
Referenced by config(), offLineMode(), onLineMode(), and printConf()\&.
.SS "int CoolBoard::serverTimeOut =180\fC [private]\fP"

.PP
Definition at line 97 of file CoolBoard\&.h\&.
.PP
Referenced by config(), and printConf()\&.
.SS "bool CoolBoard::sleepActive =0\fC [private]\fP"

.PP
Definition at line 89 of file CoolBoard\&.h\&.
.PP
Referenced by config(), onLineMode(), and printConf()\&.
.SS "bool CoolBoard::userActive =0\fC [private]\fP"

.PP
Definition at line 81 of file CoolBoard\&.h\&.
.PP
Referenced by config(), offLineMode(), onLineMode(), and printConf()\&.
.SS "\fBCoolWifi\fP CoolBoard::wifiManager\fC [private]\fP"

.PP
Definition at line 71 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), and connect()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolAPI from the source code\&.
