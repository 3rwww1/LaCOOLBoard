.TH "CoolBoard" 3 "Wed Jul 5 2017" "CoolAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoolBoard \- This class manages the \fBCoolBoard\fP and all of Its functions\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolBoard\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBbegin\fP ()"
.br
.ti -1c
.RI "bool \fBconfig\fP ()"
.br
.ti -1c
.RI "void \fBupdate\fP (const char *\fBanswer\fP)"
.br
.ti -1c
.RI "void \fBoffLineMode\fP ()"
.br
.ti -1c
.RI "void \fBonLineMode\fP ()"
.br
.ti -1c
.RI "int \fBconnect\fP ()"
.br
.ti -1c
.RI "uint16_t \fBgetLogInterval\fP ()"
.br
.ti -1c
.RI "void \fBprintConf\fP ()"
.br
.ti -1c
.RI "void \fBsleep\fP (int interval)"
.br
.ti -1c
.RI "String \fBreadSensors\fP ()"
.br
.ti -1c
.RI "String \fBuserData\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBCoolFileSystem\fP \fBfileSystem\fP"
.br
.ti -1c
.RI "\fBCoolBoardSensors\fP \fBcoolBoardSensors\fP"
.br
.ti -1c
.RI "\fBCoolBoardLed\fP \fBcoolBoardLed\fP"
.br
.ti -1c
.RI "\fBCoolTime\fP \fBrtc\fP"
.br
.ti -1c
.RI "WiFiManager \fBwifiManager\fP"
.br
.ti -1c
.RI "\fBCoolMQTT\fP \fBmqtt\fP"
.br
.ti -1c
.RI "\fBJetpack\fP \fBjetPack\fP"
.br
.ti -1c
.RI "\fBIrene3000\fP \fBirene3000\fP"
.br
.ti -1c
.RI "\fBExternalSensors\fP \fBexternalSensors\fP"
.br
.ti -1c
.RI "bool \fBuserActive\fP =0"
.br
.ti -1c
.RI "bool \fBireneActive\fP =0"
.br
.ti -1c
.RI "bool \fBjetpackActive\fP =0"
.br
.ti -1c
.RI "bool \fBexternalSensorsActive\fP =0"
.br
.ti -1c
.RI "bool \fBsleepActive\fP =0"
.br
.ti -1c
.RI "uint16_t \fBlogInterval\fP =1000"
.br
.ti -1c
.RI "int \fBanswerJsonSize\fP =3000"
.br
.ti -1c
.RI "int \fBsensorJsonSize\fP =1000"
.br
.ti -1c
.RI "int \fBserverTimeOut\fP =180"
.br
.ti -1c
.RI "String \fBdata\fP =''"
.br
.ti -1c
.RI "String \fBanswer\fP =''"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class manages the \fBCoolBoard\fP and all of Its functions\&. 
.PP
Definition at line 37 of file CoolBoard\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "void CoolBoard::begin ()"
\fBCoolBoard::begin()\fP: This method is provided to configure, begin the used CoolKit Parts\&. If Serial is enabled,it prints the configuration of the used parts\&. 
.PP
Definition at line 21 of file CoolBoard\&.cpp\&.
.PP
References Jetpack::begin(), CoolFileSystem::begin(), CoolBoardLed::begin(), CoolMQTT::begin(), ExternalSensors::begin(), CoolBoardSensors::begin(), CoolTime::begin(), Irene3000::begin(), CoolBoardLed::config(), Jetpack::config(), ExternalSensors::config(), CoolMQTT::config(), CoolTime::config(), Irene3000::config(), CoolBoardSensors::config(), coolBoardLed, coolBoardSensors, externalSensors, externalSensorsActive, fileSystem, irene3000, ireneActive, jetPack, jetpackActive, mqtt, CoolBoardLed::printConf(), Jetpack::printConf(), ExternalSensors::printConf(), CoolMQTT::printConf(), Irene3000::printConf(), CoolTime::printConf(), CoolBoardSensors::printConf(), and rtc\&.
.PP
.nf
22 {
23     Serial\&.println("Starting the CoolBoard  " );
24     Serial\&.println("Entering CoolBoard\&.begin() " );
25     Serial\&.println();
26 
27     fileSystem\&.begin();
28     delay(100);
29     
30     coolBoardSensors\&.config();
31     coolBoardSensors\&.begin();
32     coolBoardSensors\&.printConf();
33     delay(100);
34 
35     rtc\&.config();
36     rtc\&.begin();
37     rtc\&.printConf();
38     delay(100);
39 
40     coolBoardLed\&.config();
41     coolBoardLed\&.begin();
42     coolBoardLed\&.printConf();
43     delay(100);
44 
45     mqtt\&.config();
46     mqtt\&.begin();
47     mqtt\&.printConf();
48     delay(100);
49 
50     if (jetpackActive)
51     {
52         jetPack\&.config();
53         jetPack\&.begin();
54         jetPack\&.printConf();
55         delay(100);
56     }
57 
58     if (ireneActive)
59     {
60         irene3000\&.config();
61         irene3000\&.begin();
62         irene3000\&.printConf();
63         delay(100);
64     }
65 
66     if (externalSensorsActive)
67     {
68         externalSensors\&.config();
69         externalSensors\&.begin();
70         externalSensors\&.printConf();
71         delay(100);
72     }
73 
74 }
.fi
.SS "bool CoolBoard::config ()"
\fBCoolBoard::config()\fP: This method is provided to configure the \fBCoolBoard\fP : -log interval -Size of the data to write -Size of the data to read -irene3000 activated/deactivated -jetpack activated/deactivated -external Sensors activated/deactivated -mqtt server timeout
.PP
\fBReturns:\fP
.RS 4
true if configuration is done, false otherwise 
.RE
.PP

.PP
Definition at line 340 of file CoolBoard\&.cpp\&.
.PP
References answerJsonSize, CoolFileSystem::begin(), externalSensorsActive, fileSystem, ireneActive, jetpackActive, logInterval, sensorJsonSize, serverTimeOut, sleepActive, and userActive\&.
.PP
Referenced by update()\&.
.PP
.nf
341 {
342     Serial\&.println("Entering CoolBoard\&.config() ");
343     Serial\&.println();
344 
345     //open file system
346     fileSystem\&.begin();
347     
348     //open configuration file
349     File configFile = SPIFFS\&.open("/coolBoardConfig\&.json", "r");
350     
351     if (!configFile)
352 
353     {
354         Serial\&.println("failed to read /coolBoardConfig\&.json  ");
355         return(false);
356     }
357 
358     else
359     {
360         size_t size = configFile\&.size();
361 
362         // Allocate a buffer to store contents of the file\&.
363         std::unique_ptr < char[] > buf(new char[size]);
364 
365         configFile\&.readBytes(buf\&.get(), size);
366 
367         DynamicJsonBuffer jsonBuffer;
368 
369         JsonObject & json = jsonBuffer\&.parseObject(buf\&.get());
370 
371         if (!json\&.success())
372         {
373             Serial\&.println("failed to parse CoolBoard Config json object ");
374             return(false);
375         }
376 
377         else
378         {   
379             Serial\&.println("configuration json : ");
380             json\&.printTo(Serial);
381             Serial\&.println();
382             
383             //parsing userActive Key
384             if (json["userActive"]\&.success())
385             {
386                 this -> userActive = json["userActive"];
387             }
388 
389             else
390             {
391                 this -> userActive = this -> userActive;
392             }
393             json["userActive"] = this -> userActive;
394 
395             //parsing logInterval key
396             if (json["logInterval"]\&.success())
397             {
398                 this -> logInterval = json["logInterval"];
399             }
400             else
401             {
402                 this -> logInterval = this -> logInterval;
403             }
404             json["logInterval"] = this -> logInterval;
405 
406             //parsing sensorJsonSize key
407             if (json["sensorJsonSize"]\&.success())
408             {
409                 this -> sensorJsonSize = json["sensorJsonSize"];
410             }
411             else
412             {
413                 this -> sensorJsonSize = this -> sensorJsonSize;
414             }
415             json["sensorJsonSize"] = this -> sensorJsonSize;
416             
417             //parsing answerJsonSize key            
418             if (json["answerJsonSize"]\&.success())
419             {
420                 this -> answerJsonSize = json["answerJsonSize"];
421             }
422             else
423             {
424                 this -> answerJsonSize = this -> answerJsonSize;
425             }
426             json["answerJsonSize"] = this -> answerJsonSize;
427             
428             //parsing ireneActive key           
429             if (json["ireneActive"]\&.success())
430             {
431                 this -> ireneActive = json["ireneActive"];
432             }
433             else
434             {
435                 this -> ireneActive = this -> ireneActive;
436             }
437             json["ireneActive"] = this -> ireneActive;
438             
439             //parsing jetpackActive key
440             if (json["jetpackActive"]\&.success())
441             {
442                 this -> jetpackActive = json["jetpackActive"];
443             }
444             else
445             {
446                 this -> jetpackActive = this -> jetpackActive;
447             }
448             json["jetpackActive"] = this -> jetpackActive;
449 
450             //parsing externalSensorsActive key
451             if (json["externalSensorsActive"]\&.success())
452             {
453                 this -> externalSensorsActive = json["externalSensorsActive"];
454             }
455             else
456             {
457                 this -> externalSensorsActive = this -> externalSensorsActive;
458             }
459             json["externalSensorsActive"] = this -> externalSensorsActive;
460 
461             //parsing serverTimeOut key
462             if (json["serverTimeOut"]\&.success())
463             {
464                 this -> serverTimeOut = json["serverTimeOut"];
465             }
466             else
467             {
468                 this -> serverTimeOut = this -> serverTimeOut;
469             }
470             json["serverTimeOut"] = this -> serverTimeOut;
471             
472             //parsing sleepActive key
473             if (json["sleepActive"]\&.success())
474             {
475                 this -> sleepActive = json["sleepActive"];
476             }
477             else
478             {
479                 this -> sleepActive = this -> sleepActive;
480             }
481             json["sleepActive"] = this -> sleepActive;
482 
483             //saving the current/correct configuration
484             configFile\&.close();
485             configFile = SPIFFS\&.open("/coolBoardConfig\&.json", "w");
486             if (!configFile)
487             {
488                 Serial\&.println("failed to write to /coolBoardConfig\&.json");
489                 Serial\&.println();
490  
491                 return(false);
492             }
493             json\&.printTo(configFile);
494             configFile\&.close();
495             return(true);
496         }
497     }
498 }
.fi
.SS "int CoolBoard::connect ()"
\fBCoolBoard::connect()\fP: This method is provided to manage the network connection and the mqtt connection\&.
.PP
\fBReturns:\fP
.RS 4
mqtt client state 
.RE
.PP

.PP
Definition at line 83 of file CoolBoard\&.cpp\&.
.PP
References CoolMQTT::connect(), getLogInterval(), mqtt, serverTimeOut, CoolMQTT::state(), and wifiManager\&.
.PP
.nf
84 {
85     
86     Serial\&.println("Entering CoolBoard\&.connect " );
87 
88     Serial\&.println();
89     Serial\&.println("Connecting the CoolBoard  " );
90     delay(100);
91 
92     if (WiFi\&.status() != WL_CONNECTED)
93     {       
94         Serial\&.println("CoolBoard not connected to WiFi " );
95         Serial\&.println("Launching WiFiManager" );
96         Serial\&.println();
97         wifiManager\&.setConfigPortalTimeout(this -> serverTimeOut);
98         wifiManager\&.autoConnect("CoolBoard");
99         delay(100);
100 
101     }
102 
103 
104     
105     if (mqtt\&.state() != 0)
106     {   
107             
108         Serial\&.println("CoolBoard not connected to MQTT " );
109         Serial\&.println("Launching mqtt\&.connect()" );
110         Serial\&.println();
111         mqtt\&.connect(this -> getLogInterval());
112         delay(100);
113         
114     }
115 
116     Serial\&.println("mqtt state is :");
117     Serial\&.println(mqtt\&.state());
118     Serial\&.println();
119     delay(100);
120 
121     return(mqtt\&.state());
122 }
.fi
.SS "uint16_t CoolBoard::getLogInterval ()"
\fBCoolBoard::getLogInterval()\fP: This method is provided to get the log interval
.PP
\fBReturns:\fP
.RS 4
interval value in ms 
.RE
.PP

.PP
Definition at line 644 of file CoolBoard\&.cpp\&.
.PP
References logInterval\&.
.PP
Referenced by connect(), and onLineMode()\&.
.PP
.nf
645 {
646     Serial\&.println("Entering CoolBoard\&.getLogInterval() ");
647     Serial\&.println();
648 
649     Serial\&.println("log Interval is :");
650     Serial\&.println(logInterval);
651     Serial\&.println();
652 
653     return(this -> logInterval);
654 }
.fi
.SS "void CoolBoard::offLineMode ()"
CoolBoard::offlineMode(): This method is provided to manage the offLine mode: -read sensors -do actions -save data in the file system 
.PP
Definition at line 269 of file CoolBoard\&.cpp\&.
.PP
References data, Jetpack::doAction(), fileSystem, jetPack, jetpackActive, readSensors(), CoolFileSystem::saveSensorData(), sensorJsonSize, userActive, and userData()\&.
.PP
.nf
270 {
271     Serial\&.println("Entering off line mode ");   
272     
273     //clock update
274     //rtc\&.update(); this is done over ntp so it's usless in offLineMode
275     
276     //read user data if user is active
277     if(userActive)
278     {
279         Serial\&.println("User is Active");
280         Serial\&.println("Collecting User's data ( mac,username,timeStamp )");
281         Serial\&.println();
282         //reading user data
283         data=this->userData();//{"":"","":"","",""}
284 
285         //formatting json 
286         data\&.setCharAt( data\&.lastIndexOf('}') , ',');//{"":"","":"","","",
287         
288                 
289         //read sensors data
290         Serial\&.println("Collecting sensors data " );
291         Serial\&.println();
292 
293         data+=this->readSensors();//{"":"","":"","","",{\&.\&.\&.\&.\&.\&.\&.}
294 
295         
296 
297         //formatting json correctly
298         data\&.remove(data\&.lastIndexOf('{'), 1);//{"":"","":"","","",\&.\&.\&.\&.\&.\&.\&.}
299                 
300     }   
301     else
302     {
303         //read sensors data
304         Serial\&.println("Collecting sensors data " );
305         Serial\&.println();
306 
307         data=this->readSensors();//{\&.\&.,\&.\&.,\&.\&.}
308     }
309 
310     //do action
311     if (jetpackActive)
312     {
313         Serial\&.println("jetpack is Active ");
314         Serial\&.println("jetpack doing action ");
315         Serial\&.println();
316 
317         jetPack\&.doAction(data\&.c_str(), sensorJsonSize);
318     }
319     
320     
321     //saving data in the file system
322     
323     fileSystem\&.saveSensorData(data\&.c_str(), sensorJsonSize);
324 }
.fi
.SS "void CoolBoard::onLineMode ()"
\fBCoolBoard::onLineMode()\fP: This method is provided to manage the online mode: -update clock -read sensor -do actions -publish data -read answer -update config 
.PP
Definition at line 134 of file CoolBoard\&.cpp\&.
.PP
References answer, data, Jetpack::doAction(), fileSystem, getLogInterval(), CoolFileSystem::getSensorSavedData(), CoolFileSystem::isDataSaved(), jetPack, jetpackActive, mqtt, CoolMQTT::mqttLoop(), CoolMQTT::publish(), CoolMQTT::read(), readSensors(), rtc, sensorJsonSize, sleep(), sleepActive, CoolTime::update(), update(), userActive, and userData()\&.
.PP
.nf
135 {
136     Serial\&.println("Entering CoolBoard\&.onLineMode() " );
137     Serial\&.println();
138 
139     data="";
140     answer="";
141 
142     //send saved data if any
143     if(fileSystem\&.isDataSaved())
144     {
145         Serial\&.println("There is data saved on the File System");
146         Serial\&.println("Sending saved data over MQTT ");
147         Serial\&.println();
148 
149         mqtt\&.publish("sending saved data");
150         mqtt\&.mqttLoop();
151 
152         data+=fileSystem\&.getSensorSavedData();//{\&.\&.,\&.\&.,\&.\&.}
153 
154         //formatting data:
155         String jsonData = "{\"state\":{\"reported\":";
156         jsonData += data; // {"state":{"reported":{\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}
157         jsonData += " } }"; // {"state":{"reported":{\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}  } }
158 
159         mqtt\&.publish( data\&.c_str() );
160         mqtt\&.mqttLoop();
161         
162         Serial\&.println("Saved data sent " );
163         Serial\&.println();
164     }
165 
166     //clock update
167     rtc\&.update();
168 
169     //read user data if user is active
170     if(userActive)
171     {
172         Serial\&.println("User is Active");
173         Serial\&.println("Collecting User's data ( mac,username,timeStamp )");
174         Serial\&.println();
175         //reading user data
176         data=this->userData();//{"":"","":"","",""}
177 
178         //formatting json 
179         data\&.setCharAt( data\&.lastIndexOf('}') , ',');//{"":"","":"","","",
180         
181                 
182         //read sensors data
183         Serial\&.println("Collecting sensors data " );
184         Serial\&.println();
185 
186         data+=this->readSensors();//{"":"","":"","","",{\&.\&.\&.\&.\&.\&.\&.}
187 
188         
189 
190         //formatting json correctly
191         data\&.remove(data\&.lastIndexOf('{'), 1);//{"":"","":"","","",\&.\&.\&.\&.\&.\&.\&.}
192                 
193     }   
194     else
195     {
196         //read sensors data
197         Serial\&.println("Collecting sensors data " );
198         Serial\&.println();
199 
200         data=this->readSensors();//{\&.\&.,\&.\&.,\&.\&.}
201     }
202     
203     //do action
204     if (jetpackActive)
205     {
206         Serial\&.println("jetpack is Active ");
207         Serial\&.println("jetpack doing action ");
208         Serial\&.println();
209 
210         jetPack\&.doAction(data\&.c_str(), sensorJsonSize);
211     }
212     
213     //formatting data:
214     String jsonData = "{\"state\":{\"reported\":";
215     jsonData += data; // {"state":{"reported":{\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}
216     jsonData += " } }"; // {"state":{"reported":{\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}  } }
217     
218     //mqtt client loop to allow data handling
219     mqtt\&.mqttLoop();
220 
221     //read mqtt answer
222     
223     answer = mqtt\&.read();
224 
225     Serial\&.println("checking if there's an MQTT message " );
226     Serial\&.println("answer is : ");  
227     Serial\&.println(answer);  
228     Serial\&.println();
229     
230 
231 
232     //check if the configuration needs update 
233     //and update it if needed 
234     this -> update(answer\&.c_str());
235     
236 
237     //publishing data
238 
239     
240     Serial\&.println();
241     
242     if( this->sleepActive==0)   
243     {   
244         
245         mqtt\&.publish( jsonData\&.c_str(), this->getLogInterval() );
246         mqtt\&.mqttLoop();
247     
248     }
249     else
250     {
251         mqtt\&.publish(jsonData\&.c_str());       
252         this->sleep( this->getLogInterval() ) ;
253         mqtt\&.mqttLoop();
254     }
255 
256     
257         
258         
259 }
.fi
.SS "void CoolBoard::printConf ()"
\fBCoolBoard::printConf()\fP: This method is provided to print the configuration to the Serial Monitor\&. 
.PP
Definition at line 507 of file CoolBoard\&.cpp\&.
.PP
References answerJsonSize, externalSensorsActive, ireneActive, jetpackActive, logInterval, sensorJsonSize, serverTimeOut, sleepActive, and userActive\&.
.PP
.nf
508 {
509     Serial\&.println("Entering CoolBoard\&.printConf() ");
510     Serial\&.println();
511 
512     Serial\&.println("Printing Cool Board Configuration ");
513     Serial\&.print("log interval       : ");Serial\&.println(this->logInterval);
514     Serial\&.print("sensor json size       : ");Serial\&.println(this->sensorJsonSize);
515     Serial\&.print("answer json size       : ");Serial\&.println(this->answerJsonSize);
516     Serial\&.print("irene active       : ");Serial\&.println(this->ireneActive);
517     Serial\&.print("jetpack active     : ");Serial\&.println(this->jetpackActive);
518     Serial\&.print("external sensors active    : ");Serial\&.println(this->externalSensorsActive);
519     Serial\&.print("access point timeOut   : ");Serial\&.println(this->serverTimeOut);
520     Serial\&.print("sleept active      : ");Serial\&.println(this->sleepActive);
521     Serial\&.print("user active        : ");Serial\&.println(this->userActive);
522     Serial\&.println();
523 
524 
525 
526 
527 }
.fi
.SS "String CoolBoard::readSensors ()"
\fBCoolBoard::readSensors()\fP: This method is provided to read and format all the sensors data in a single json\&.
.PP
\fBReturns:\fP
.RS 4
json string of all the sensors read\&. 
.RE
.PP

.PP
Definition at line 664 of file CoolBoard\&.cpp\&.
.PP
References coolBoardSensors, externalSensors, externalSensorsActive, irene3000, ireneActive, ExternalSensors::read(), CoolBoardSensors::read(), and Irene3000::read()\&.
.PP
Referenced by offLineMode(), and onLineMode()\&.
.PP
.nf
665 {
666     Serial\&.println("Entering CoolBoard\&.readSensors()");
667     Serial\&.println();
668 
669     String sensorsData;
670 
671     sensorsData = coolBoardSensors\&.read(); // {\&.\&.,\&.\&.,\&.\&.}
672     
673     if (externalSensorsActive)
674     {
675         sensorsData += externalSensors\&.read(); // {\&.\&.,\&.\&.,\&.\&.}{\&.\&.,\&.\&.}
676 
677         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf('}'), ','); // {\&.\&.,\&.\&.,\&.\&.}{\&.\&.,\&.\&.,
678         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf('{'), ','); // {\&.\&.,\&.\&.,\&.\&.},\&.\&.,\&.\&.,
679         sensorsData\&.remove(sensorsData\&.lastIndexOf('}'), 1); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,
680         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf(','), '}'); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}
681 
682     }
683     if (ireneActive)
684     {
685         sensorsData += irene3000\&.read(); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}{\&.\&.,\&.\&.,\&.\&.}
686 
687         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf('}'), ','); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.{\&.\&.,\&.\&.,\&.\&.,
688         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf('{'), ','); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.},\&.\&.,\&.\&.,\&.\&.,
689         sensorsData\&.remove(sensorsData\&.lastIndexOf('}'), 1); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,
690         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf(','), '}'); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}
691         
692     }
693     
694     Serial\&.println("sensors data is ");
695     Serial\&.println(sensorsData);
696     Serial\&.println();
697 
698     return(sensorsData);
699 
700 }
.fi
.SS "void CoolBoard::sleep (int interval)"
\fBCoolBoard::sleep(int interval)\fP: This method is provided to allow the board to enter deepSleep mode for a period of time equal to interval in ms 
.PP
Definition at line 747 of file CoolBoard\&.cpp\&.
.PP
Referenced by onLineMode()\&.
.PP
.nf
748 {
749     Serial\&.println("Entering CoolBoard\&.sleep() ");
750     Serial\&.print("going to sleep for ");Serial\&.print(interval);Serial\&.println("ms");
751     Serial\&.println();
752 
753     ESP\&.deepSleep ( ( interval * 1000 ), WAKE_RF_DEFAULT) ;
754 }
.fi
.SS "void CoolBoard::update (const char * answer)"
CoolBoard::update(mqtt answer): This method is provided to handle the configuration update of the different parts 
.PP
Definition at line 534 of file CoolBoard\&.cpp\&.
.PP
References answerJsonSize, CoolMQTT::begin(), CoolBoardLed::config(), Jetpack::config(), ExternalSensors::config(), CoolMQTT::config(), CoolTime::config(), Irene3000::config(), config(), CoolBoardSensors::config(), coolBoardLed, coolBoardSensors, externalSensors, externalSensorsActive, fileSystem, irene3000, ireneActive, jetPack, jetpackActive, mqtt, CoolMQTT::mqttLoop(), CoolMQTT::publish(), rtc, and CoolFileSystem::updateConfigFiles()\&.
.PP
Referenced by onLineMode()\&.
.PP
.nf
535 {
536     Serial\&.println("Entering CoolBoard\&.update() ");
537     Serial\&.println();
538 
539     Serial\&.println("message is : ");
540     Serial\&.println(answer);
541     Serial\&.println();
542 
543     DynamicJsonBuffer jsonBuffer(answerJsonSize);
544     JsonObject & root = jsonBuffer\&.parseObject(answer);
545     JsonObject & stateDesired = root["state"];
546     if (stateDesired\&.success())
547     {
548         Serial\&.println("update message parsing : success");
549         Serial\&.println();
550 
551         if (stateDesired["update"] == 1)
552         {
553             String answerDesired;
554 
555             Serial\&.println("update is 1 ");
556             Serial\&.println("desired update is : ");
557             
558             stateDesired\&.printTo(answerDesired);
559             
560             Serial\&.println(answerDesired);
561             Serial\&.println();
562             
563             fileSystem\&.updateConfigFiles(answerDesired, answerJsonSize);
564 
565             //applying the configuration    
566             this -> config();
567 
568             coolBoardSensors\&.config();
569 
570             rtc\&.config();
571 
572             coolBoardLed\&.config();
573 
574             mqtt\&.config();
575 
576             if (jetpackActive)
577             {
578                 jetPack\&.config();
579             }
580 
581             if (ireneActive)
582             {
583                 irene3000\&.config();
584             }
585 
586             if (externalSensorsActive)
587             {
588                 externalSensors\&.config();
589             }
590 
591             delay(10);
592             mqtt\&.begin();
593 
594                 //answering the update msg:
595             //reported = received configuration
596             //desired=null
597             //probably this is the bug
598             //probably this is a fix:
599 
600             Serial\&.println("preparing answer message ");
601             Serial\&.println();
602             
603             String updateAnswer;
604             String tempString;
605             
606             stateDesired\&.printTo(tempString);
607             updateAnswer="{\"state\":{\"reported\":";
608             updateAnswer+=tempString;
609             updateAnswer+=",\"desired\":null}}";
610 
611             Serial\&.println("updateAnswer : ");
612             Serial\&.println(updateAnswer);
613 
614             mqtt\&.publish(updateAnswer\&.c_str());
615             
616             mqtt\&.mqttLoop();
617 
618             delay(10);
619             
620             //restart the esp
621             ESP\&.restart();
622                 
623         }
624         else
625         {
626             Serial\&.println("update is not 1 ");
627             Serial\&.println();
628         }
629     }
630     else
631     {
632         Serial\&.println("Failed to parse update message( OR no message received )");
633         Serial\&.println();    
634     }       
635 }
.fi
.SS "String CoolBoard::userData ()"
\fBCoolBoard::userData()\fP: This method is provided to return the user's data\&.
.PP
\fBReturns:\fP
.RS 4
json string of the user's data 
.RE
.PP

.PP
Definition at line 709 of file CoolBoard\&.cpp\&.
.PP
References CoolTime::getESDate(), CoolMQTT::getUser(), mqtt, and rtc\&.
.PP
Referenced by offLineMode(), and onLineMode()\&.
.PP
.nf
710 {
711     Serial\&.println("Entering CoolBoard\&.userData() ");
712     Serial\&.println();
713 
714     String tempMAC = WiFi\&.macAddress();
715 
716     tempMAC\&.replace(":", "");
717 
718     String userJson = "{\"user\":\"";
719 
720     userJson += mqtt\&.getUser();
721 
722     userJson += "\",\"timestamp\":\"";
723 
724     userJson += rtc\&.getESDate(); // "timestamp":"20yy-mm-ddThh:mm:ssZ"
725 
726     userJson += "\",\"mac\":\"";
727 
728     userJson += tempMAC;
729 
730     userJson += "\"}";
731     
732     Serial\&.println("userData is : ");
733     Serial\&.println(userJson);
734     Serial\&.println();    
735     
736     return(userJson);
737     
738 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "String CoolBoard::answer =''\fC [private]\fP"

.PP
Definition at line 107 of file CoolBoard\&.h\&.
.PP
Referenced by onLineMode()\&.
.SS "int CoolBoard::answerJsonSize =3000\fC [private]\fP"

.PP
Definition at line 99 of file CoolBoard\&.h\&.
.PP
Referenced by config(), printConf(), and update()\&.
.SS "\fBCoolBoardLed\fP CoolBoard::coolBoardLed\fC [private]\fP"

.PP
Definition at line 73 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), and update()\&.
.SS "\fBCoolBoardSensors\fP CoolBoard::coolBoardSensors\fC [private]\fP"

.PP
Definition at line 71 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), readSensors(), and update()\&.
.SS "String CoolBoard::data =''\fC [private]\fP"

.PP
Definition at line 105 of file CoolBoard\&.h\&.
.PP
Referenced by offLineMode(), and onLineMode()\&.
.SS "\fBExternalSensors\fP CoolBoard::externalSensors\fC [private]\fP"

.PP
Definition at line 85 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), readSensors(), and update()\&.
.SS "bool CoolBoard::externalSensorsActive =0\fC [private]\fP"

.PP
Definition at line 93 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), config(), printConf(), readSensors(), and update()\&.
.SS "\fBCoolFileSystem\fP CoolBoard::fileSystem\fC [private]\fP"

.PP
Definition at line 69 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), config(), offLineMode(), onLineMode(), and update()\&.
.SS "\fBIrene3000\fP CoolBoard::irene3000\fC [private]\fP"

.PP
Definition at line 83 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), readSensors(), and update()\&.
.SS "bool CoolBoard::ireneActive =0\fC [private]\fP"

.PP
Definition at line 89 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), config(), printConf(), readSensors(), and update()\&.
.SS "\fBJetpack\fP CoolBoard::jetPack\fC [private]\fP"

.PP
Definition at line 81 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), offLineMode(), onLineMode(), and update()\&.
.SS "bool CoolBoard::jetpackActive =0\fC [private]\fP"

.PP
Definition at line 91 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), config(), offLineMode(), onLineMode(), printConf(), and update()\&.
.SS "uint16_t CoolBoard::logInterval =1000\fC [private]\fP"

.PP
Definition at line 97 of file CoolBoard\&.h\&.
.PP
Referenced by config(), getLogInterval(), and printConf()\&.
.SS "\fBCoolMQTT\fP CoolBoard::mqtt\fC [private]\fP"

.PP
Definition at line 79 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), connect(), onLineMode(), update(), and userData()\&.
.SS "\fBCoolTime\fP CoolBoard::rtc\fC [private]\fP"

.PP
Definition at line 75 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), onLineMode(), update(), and userData()\&.
.SS "int CoolBoard::sensorJsonSize =1000\fC [private]\fP"

.PP
Definition at line 101 of file CoolBoard\&.h\&.
.PP
Referenced by config(), offLineMode(), onLineMode(), and printConf()\&.
.SS "int CoolBoard::serverTimeOut =180\fC [private]\fP"

.PP
Definition at line 103 of file CoolBoard\&.h\&.
.PP
Referenced by config(), connect(), and printConf()\&.
.SS "bool CoolBoard::sleepActive =0\fC [private]\fP"

.PP
Definition at line 95 of file CoolBoard\&.h\&.
.PP
Referenced by config(), onLineMode(), and printConf()\&.
.SS "bool CoolBoard::userActive =0\fC [private]\fP"

.PP
Definition at line 87 of file CoolBoard\&.h\&.
.PP
Referenced by config(), offLineMode(), onLineMode(), and printConf()\&.
.SS "WiFiManager CoolBoard::wifiManager\fC [private]\fP"

.PP
Definition at line 77 of file CoolBoard\&.h\&.
.PP
Referenced by connect()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolAPI from the source code\&.
