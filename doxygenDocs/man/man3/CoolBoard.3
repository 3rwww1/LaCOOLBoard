.TH "CoolBoard" 3 "Thu Jul 13 2017" "CoolAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoolBoard \- This class manages the \fBCoolBoard\fP and all of Its functions\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolBoard\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBbegin\fP ()"
.br
.ti -1c
.RI "bool \fBconfig\fP ()"
.br
.ti -1c
.RI "void \fBupdate\fP (const char *\fBanswer\fP)"
.br
.ti -1c
.RI "void \fBoffLineMode\fP ()"
.br
.ti -1c
.RI "void \fBonLineMode\fP ()"
.br
.ti -1c
.RI "int \fBconnect\fP ()"
.br
.ti -1c
.RI "uint16_t \fBgetLogInterval\fP ()"
.br
.ti -1c
.RI "void \fBprintConf\fP ()"
.br
.ti -1c
.RI "void \fBsleep\fP (int interval)"
.br
.ti -1c
.RI "String \fBreadSensors\fP ()"
.br
.ti -1c
.RI "String \fBuserData\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBCoolFileSystem\fP \fBfileSystem\fP"
.br
.ti -1c
.RI "\fBCoolBoardSensors\fP \fBcoolBoardSensors\fP"
.br
.ti -1c
.RI "\fBCoolBoardLed\fP \fBcoolBoardLed\fP"
.br
.ti -1c
.RI "\fBCoolTime\fP \fBrtc\fP"
.br
.ti -1c
.RI "\fBCoolWifi\fP \fBwifiManager\fP"
.br
.ti -1c
.RI "\fBCoolMQTT\fP \fBmqtt\fP"
.br
.ti -1c
.RI "\fBJetpack\fP \fBjetPack\fP"
.br
.ti -1c
.RI "\fBIrene3000\fP \fBirene3000\fP"
.br
.ti -1c
.RI "\fBExternalSensors\fP \fBexternalSensors\fP"
.br
.ti -1c
.RI "bool \fBuserActive\fP =0"
.br
.ti -1c
.RI "bool \fBireneActive\fP =0"
.br
.ti -1c
.RI "bool \fBjetpackActive\fP =0"
.br
.ti -1c
.RI "bool \fBexternalSensorsActive\fP =0"
.br
.ti -1c
.RI "bool \fBsleepActive\fP =0"
.br
.ti -1c
.RI "uint16_t \fBlogInterval\fP =1000"
.br
.ti -1c
.RI "int \fBanswerJsonSize\fP =3000"
.br
.ti -1c
.RI "int \fBsensorJsonSize\fP =1000"
.br
.ti -1c
.RI "int \fBserverTimeOut\fP =180"
.br
.ti -1c
.RI "String \fBdata\fP =''"
.br
.ti -1c
.RI "String \fBanswer\fP =''"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class manages the \fBCoolBoard\fP and all of Its functions\&. 
.PP
Definition at line 33 of file CoolBoard\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "void CoolBoard::begin ()"
\fBCoolBoard::begin()\fP: This method is provided to configure and start the used CoolKit Parts\&. It also starts the first connection try If Serial is enabled,it prints the configuration of the used parts\&. 
.PP
Definition at line 37 of file CoolBoard\&.cpp\&.
.PP
References Jetpack::begin(), CoolFileSystem::begin(), CoolBoardLed::begin(), CoolMQTT::begin(), ExternalSensors::begin(), CoolWifi::begin(), CoolBoardSensors::begin(), CoolTime::begin(), Irene3000::begin(), CoolBoardLed::blink(), CoolBoardLed::config(), Jetpack::config(), ExternalSensors::config(), CoolWifi::config(), CoolMQTT::config(), CoolTime::config(), Irene3000::config(), CoolBoardSensors::config(), connect(), coolBoardLed, coolBoardSensors, externalSensors, externalSensorsActive, CoolBoardLed::fadeOut(), fileSystem, irene3000, ireneActive, jetPack, jetpackActive, mqtt, CoolBoardLed::printConf(), Jetpack::printConf(), ExternalSensors::printConf(), CoolMQTT::printConf(), Irene3000::printConf(), CoolWifi::printConf(), CoolTime::printConf(), CoolBoardSensors::printConf(), rtc, wifiManager, and CoolBoardLed::write()\&.
.PP
.nf
38 {
39 
40 #if DEBUG == 1
41 
42     Serial\&.println( F("Starting the CoolBoard  ")  );
43     Serial\&.println( F("Entering CoolBoard\&.begin() ")  );
44     Serial\&.println();
45 #endif
46     
47     fileSystem\&.begin();
48     delay(100);
49     
50     coolBoardLed\&.config();
51     coolBoardLed\&.begin();
52     coolBoardLed\&.printConf();
53     delay(100);
54     
55     coolBoardLed\&.write(255,128,0);//orange
56     
57     coolBoardSensors\&.config();
58     coolBoardSensors\&.begin();
59     coolBoardSensors\&.printConf();
60     delay(100);
61     
62     wifiManager\&.config();
63     wifiManager\&.begin();
64     wifiManager\&.printConf();
65     delay(100);
66 
67     mqtt\&.config();
68     mqtt\&.begin();
69     mqtt\&.printConf();
70     delay(100);
71 
72     if (jetpackActive)
73     {
74         jetPack\&.config();
75         jetPack\&.begin();
76         jetPack\&.printConf();
77         delay(100);
78     }
79 
80     if (ireneActive)
81     {
82         irene3000\&.config();
83         irene3000\&.begin();
84         irene3000\&.printConf();
85         delay(100);
86     }
87 
88     if (externalSensorsActive)
89     {
90         externalSensors\&.config();
91         externalSensors\&.begin();
92         externalSensors\&.printConf();
93         delay(100);
94     }
95     
96     coolBoardLed\&.fadeOut(255,128,0,0\&.5);//orange
97 
98     this->connect();
99     delay(100);
100 
101     rtc\&.config();
102     rtc\&.begin();
103     rtc\&.printConf();
104     delay(100);
105     
106     coolBoardLed\&.blink(0,255,0,0\&.5);//green
107 
108 }
.fi
.SS "bool CoolBoard::config ()"
\fBCoolBoard::config()\fP: This method is provided to configure the \fBCoolBoard\fP : -log interval -Size of the data to write -Size of the data to read -irene3000 activated/deactivated -jetpack activated/deactivated -external Sensors activated/deactivated -mqtt server timeout
.PP
\fBReturns:\fP
.RS 4
true if configuration is done, false otherwise 
.RE
.PP

.PP
Definition at line 481 of file CoolBoard\&.cpp\&.
.PP
References answerJsonSize, CoolFileSystem::begin(), CoolBoardLed::begin(), CoolBoardLed::blink(), CoolBoardLed::config(), coolBoardLed, externalSensorsActive, CoolBoardLed::fadeIn(), CoolBoardLed::fadeOut(), fileSystem, ireneActive, jetpackActive, logInterval, sensorJsonSize, serverTimeOut, sleepActive, CoolBoardLed::strobe(), and userActive\&.
.PP
Referenced by update()\&.
.PP
.nf
482 {
483 
484 #if DEBUG == 1
485 
486     Serial\&.println( F("Entering CoolBoard\&.config() ") );
487     Serial\&.println();
488 
489 #endif
490 
491     //open file system
492     fileSystem\&.begin();
493 
494     coolBoardLed\&.config();
495     coolBoardLed\&.begin();
496     coolBoardLed\&.fadeIn(243,171,46,0\&.5);//shade of orange     
497 
498     
499     //open configuration file
500     File configFile = SPIFFS\&.open("/coolBoardConfig\&.json", "r");
501     
502     if (!configFile)
503 
504     {
505     
506     #if DEBUG == 1
507 
508         Serial\&.println( F("failed to read /coolBoardConfig\&.json  ") );
509 
510     #endif
511         coolBoardLed\&.blink(255,0,0,0\&.5);//shade of red        
512         return(false);
513     }
514 
515     else
516     {
517         size_t size = configFile\&.size();
518 
519         // Allocate a buffer to store contents of the file\&.
520         std::unique_ptr < char[] > buf(new char[size]);
521 
522         configFile\&.readBytes(buf\&.get(), size);
523 
524         DynamicJsonBuffer jsonBuffer;
525 
526         JsonObject & json = jsonBuffer\&.parseObject(buf\&.get());
527 
528         if (!json\&.success())
529         {
530         
531         #if DEBUG == 1
532 
533             Serial\&.println( F("failed to parse CoolBoard Config json object ") );
534     
535         #endif
536             coolBoardLed\&.blink(255,0,0,0\&.5);//shade of red        
537             return(false);
538         }
539 
540         else
541         {   
542         
543         #if DEBUG == 1
544             
545             Serial\&.println( F("configuration json : ") );
546             json\&.printTo(Serial);
547             Serial\&.println();
548         
549         #endif
550             
551             //parsing userActive Key
552             if (json["userActive"]\&.success())
553             {
554                 this -> userActive = json["userActive"];
555             }
556 
557             else
558             {
559                 this -> userActive = this -> userActive;
560             }
561             json["userActive"] = this -> userActive;
562 
563             //parsing logInterval key
564             if (json["logInterval"]\&.success())
565             {
566                 this -> logInterval = json["logInterval"];
567             }
568             else
569             {
570                 this -> logInterval = this -> logInterval;
571             }
572             json["logInterval"] = this -> logInterval;
573 
574             //parsing sensorJsonSize key
575             if (json["sensorJsonSize"]\&.success())
576             {
577                 this -> sensorJsonSize = json["sensorJsonSize"];
578             }
579             else
580             {
581                 this -> sensorJsonSize = this -> sensorJsonSize;
582             }
583             json["sensorJsonSize"] = this -> sensorJsonSize;
584             
585             //parsing answerJsonSize key            
586             if (json["answerJsonSize"]\&.success())
587             {
588                 this -> answerJsonSize = json["answerJsonSize"];
589             }
590             else
591             {
592                 this -> answerJsonSize = this -> answerJsonSize;
593             }
594             json["answerJsonSize"] = this -> answerJsonSize;
595             
596             //parsing ireneActive key           
597             if (json["ireneActive"]\&.success())
598             {
599                 this -> ireneActive = json["ireneActive"];
600             }
601             else
602             {
603                 this -> ireneActive = this -> ireneActive;
604             }
605             json["ireneActive"] = this -> ireneActive;
606             
607             //parsing jetpackActive key
608             if (json["jetpackActive"]\&.success())
609             {
610                 this -> jetpackActive = json["jetpackActive"];
611             }
612             else
613             {
614                 this -> jetpackActive = this -> jetpackActive;
615             }
616             json["jetpackActive"] = this -> jetpackActive;
617 
618             //parsing externalSensorsActive key
619             if (json["externalSensorsActive"]\&.success())
620             {
621                 this -> externalSensorsActive = json["externalSensorsActive"];
622             }
623             else
624             {
625                 this -> externalSensorsActive = this -> externalSensorsActive;
626             }
627             json["externalSensorsActive"] = this -> externalSensorsActive;
628 
629             //parsing serverTimeOut key
630             if (json["serverTimeOut"]\&.success())
631             {
632                 this -> serverTimeOut = json["serverTimeOut"];
633             }
634             else
635             {
636                 this -> serverTimeOut = this -> serverTimeOut;
637             }
638             json["serverTimeOut"] = this -> serverTimeOut;
639             
640             //parsing sleepActive key
641             if (json["sleepActive"]\&.success())
642             {
643                 this -> sleepActive = json["sleepActive"];
644             }
645             else
646             {
647                 this -> sleepActive = this -> sleepActive;
648             }
649             json["sleepActive"] = this -> sleepActive;
650 
651             //saving the current/correct configuration
652             configFile\&.close();
653             configFile = SPIFFS\&.open("/coolBoardConfig\&.json", "w");
654             if (!configFile)
655             {
656             
657             #if DEBUG == 1
658 
659                 Serial\&.println( F("failed to write to /coolBoardConfig\&.json") );
660                 Serial\&.println();
661             
662             #endif
663                 coolBoardLed\&.blink(255,0,0,0\&.5);//shade of red        
664                 return(false);
665             }
666 
667             json\&.printTo(configFile);
668             configFile\&.close();
669             return(true);
670         }
671     }
672 
673     coolBoardLed\&.strobe(243,171,46,0\&.5);//shade of orange
674     
675     coolBoardLed\&.fadeOut(243,171,46,0\&.5);//shade of orange                
676 }
.fi
.SS "int CoolBoard::connect ()"
\fBCoolBoard::connect()\fP: This method is provided to manage the network connection and the mqtt connection\&.
.PP
\fBReturns:\fP
.RS 4
mqtt client state 
.RE
.PP

.PP
Definition at line 117 of file CoolBoard\&.cpp\&.
.PP
References CoolBoardLed::blink(), CoolMQTT::connect(), CoolWifi::connect(), coolBoardLed, getLogInterval(), mqtt, CoolWifi::state(), CoolMQTT::state(), wifiManager, and CoolBoardLed::write()\&.
.PP
Referenced by begin()\&.
.PP
.nf
118 {
119 
120 #if DEBUG == 1  
121 
122     Serial\&.println( F("Entering CoolBoard\&.connect ") );
123     Serial\&.println();
124     Serial\&.println( F("Connecting the CoolBoard  ") );
125     delay(100);
126 
127 #endif
128     coolBoardLed\&.write(0,0,255);//blue
129 
130     if (wifiManager\&.state() != WL_CONNECTED)
131     {       
132     
133     #if DEBUG == 1      
134 
135         Serial\&.println( F("CoolBoard not connected to WiFi ") );
136         Serial\&.println( F("Launching CoolWifi") );
137         Serial\&.println();
138 
139     #endif
140         wifiManager\&.connect();
141         delay(100);
142     }
143 
144 
145     
146     if (mqtt\&.state() != 0)
147     {   
148     
149     #if DEBUG == 1  
150     
151         Serial\&.println( F("CoolBoard not connected to MQTT ") );
152         Serial\&.println( F("Launching mqtt\&.connect()") );
153         Serial\&.println();
154 
155     #endif  
156     
157         mqtt\&.connect(this -> getLogInterval());
158         delay(100);
159         
160     }
161     
162 #if DEBUG == 1
163 
164     Serial\&.println( F("mqtt state is :") );
165     Serial\&.println(mqtt\&.state());
166     Serial\&.println();
167     delay(100);
168 
169 #endif
170 
171     coolBoardLed\&.blink(0,0,255,0\&.5);//blue
172 
173     return(mqtt\&.state());
174 }
.fi
.SS "uint16_t CoolBoard::getLogInterval ()"
\fBCoolBoard::getLogInterval()\fP: This method is provided to get the log interval
.PP
\fBReturns:\fP
.RS 4
interval value in ms 
.RE
.PP

.PP
Definition at line 874 of file CoolBoard\&.cpp\&.
.PP
References logInterval\&.
.PP
Referenced by connect(), and onLineMode()\&.
.PP
.nf
875 {
876 
877 #if DEBUG == 1
878 
879     Serial\&.println( F("Entering CoolBoard\&.getLogInterval() ") );
880     Serial\&.println();
881     Serial\&.println( F("log Interval is :") );
882     Serial\&.println(logInterval);
883     Serial\&.println();
884 
885 #endif
886 
887     return(this -> logInterval);
888 }
.fi
.SS "void CoolBoard::offLineMode ()"
CoolBoard::offlineMode(): This method is provided to manage the offLine mode: -read sensors -do actions -save data in the file system 
.PP
Definition at line 374 of file CoolBoard\&.cpp\&.
.PP
References CoolBoardLed::blink(), coolBoardLed, data, Jetpack::doAction(), CoolBoardLed::fade(), CoolBoardLed::fadeIn(), CoolBoardLed::fadeOut(), fileSystem, jetPack, jetpackActive, readSensors(), CoolFileSystem::saveSensorData(), sensorJsonSize, userActive, and userData()\&.
.PP
.nf
375 {
376     coolBoardLed\&.fade(51,100,50,0\&.5);//dark shade of green    
377 #if DEBUG == 1  
378     
379     Serial\&.println( F("Entering off line mode ") );  
380     
381 #endif
382 
383     //read user data if user is active
384     if(userActive)
385     {
386 
387         coolBoardLed\&.fadeIn(245,237,27,0\&.5);//shade of yellow
388 
389     #if DEBUG == 1
390         
391         Serial\&.println( F("User is Active") );
392         Serial\&.println( F("Collecting User's data ( mac,username,timeStamp )") );
393         Serial\&.println();
394 
395     #endif
396 
397         coolBoardLed\&.blink(245,237,27,0\&.5);//shade of yellow  
398 
399         //reading user data
400         data=this->userData();//{"":"","":"","",""}
401 
402         //formatting json 
403         data\&.setCharAt( data\&.lastIndexOf('}') , ',');//{"":"","":"","","",
404         
405                 
406         //read sensors data
407     #if DEBUG == 1
408 
409         Serial\&.println( F("Collecting sensors data ") );
410         Serial\&.println();
411 
412     #endif
413 
414         data+=this->readSensors();//{"":"","":"","","",{\&.\&.\&.\&.\&.\&.\&.}
415 
416         
417 
418         //formatting json correctly
419         data\&.remove(data\&.lastIndexOf('{'), 1);//{"":"","":"","","",\&.\&.\&.\&.\&.\&.\&.}
420 
421         coolBoardLed\&.fadeOut(245,237,27,0\&.5);//shade of yellow
422                 
423     }   
424     else
425     {
426         //read sensors data
427     #if DEBUG == 1
428 
429         Serial\&.println( F("Collecting sensors data ") );
430         Serial\&.println();
431 
432     #endif
433 
434         coolBoardLed\&.fade(190,100,150,0\&.5);//shade of violet      
435 
436         data=this->readSensors();//{\&.\&.,\&.\&.,\&.\&.}
437     }
438 
439     coolBoardLed\&.fade(51,100,50,0\&.5);//dark shade of green    
440 
441     //do action
442     if (jetpackActive)
443     {
444 
445     #if DEBUG == 1
446 
447         Serial\&.println( F("jetpack is Active ") );
448         Serial\&.println( F("jetpack doing action ") );
449         Serial\&.println();
450     
451     #endif
452         coolBoardLed\&.fade(100,100,150,0\&.5);//dark shade of blue   
453     
454         jetPack\&.doAction(data\&.c_str(), sensorJsonSize);
455     }
456     
457     coolBoardLed\&.fade(51,100,50,0\&.5);//dark shade of green    
458     
459     //saving data in the file system
460     
461     fileSystem\&.saveSensorData(data\&.c_str(), sensorJsonSize);
462 
463     coolBoardLed\&.fadeOut(51,100,50,0\&.5);//dark shade of green 
464 
465 }
.fi
.SS "void CoolBoard::onLineMode ()"
\fBCoolBoard::onLineMode()\fP: This method is provided to manage the online mode: -update clock -read sensor -do actions -publish data -read answer -update config 
.PP
Definition at line 186 of file CoolBoard\&.cpp\&.
.PP
References answer, CoolBoardLed::blink(), coolBoardLed, data, Jetpack::doAction(), CoolBoardLed::fade(), CoolBoardLed::fadeIn(), CoolBoardLed::fadeOut(), fileSystem, getLogInterval(), CoolFileSystem::getSensorSavedData(), CoolFileSystem::isDataSaved(), jetPack, jetpackActive, mqtt, CoolMQTT::mqttLoop(), CoolMQTT::publish(), CoolMQTT::read(), readSensors(), rtc, sensorJsonSize, sleep(), sleepActive, CoolBoardLed::strobe(), CoolTime::update(), update(), userActive, and userData()\&.
.PP
.nf
187 {
188 
189     coolBoardLed\&.fadeIn(128,255,50,0\&.5);//shade of green
190 
191 #if DEBUG == 1
192 
193     Serial\&.println( F("Entering CoolBoard\&.onLineMode() ") );
194     Serial\&.println();
195 
196 #endif
197 
198     data="";
199     answer="";
200 
201     //send saved data if any
202     if(fileSystem\&.isDataSaved())
203     {
204 
205         coolBoardLed\&.fadeIn(128,128,255,0\&.5);//shade of blue
206 
207     #if DEBUG == 1
208 
209         Serial\&.println( F("There is data saved on the File System") );
210         Serial\&.println( F("Sending saved data over MQTT ") );
211         Serial\&.println();
212     
213     #endif  
214         coolBoardLed\&.strobe(128,128,255,0\&.5);//shade of blue 
215 
216         mqtt\&.publish("sending saved data");
217         mqtt\&.mqttLoop();
218 
219         data+=fileSystem\&.getSensorSavedData();//{\&.\&.,\&.\&.,\&.\&.}
220 
221         //formatting data:
222         String jsonData = "{\"state\":{\"reported\":";
223         jsonData += data; // {"state":{"reported":{\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}
224         jsonData += " } }"; // {"state":{"reported":{\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}  } }
225         
226         coolBoardLed\&.strobe(128,128,255,0\&.5);//shade of blue
227         
228         mqtt\&.publish( data\&.c_str() );
229         mqtt\&.mqttLoop();
230         
231         coolBoardLed\&.fadeOut(128,128,255,0\&.5);//shade of blue     
232     
233     #if DEBUG == 1
234 
235         Serial\&.println( F("Saved data sent ") );
236         Serial\&.println();
237     
238     #endif
239 
240     }
241 
242     coolBoardLed\&.blink(128,255,50,0\&.5);//shade of green
243 
244     //clock update
245     rtc\&.update();
246 
247     //read user data if user is active
248     if(userActive)
249     {
250         coolBoardLed\&.fadeIn(245,237,27,0\&.5);//shade of yellow
251     
252     #if DEBUG == 1
253 
254         Serial\&.println( F("User is Active") );
255         Serial\&.println( F("Collecting User's data ( mac,username,timeStamp )") );
256         Serial\&.println();
257     
258     #endif  
259         coolBoardLed\&.blink(245,237,27,0\&.5);//shade of yellow  
260 
261         //reading user data
262         data=this->userData();//{"":"","":"","",""}
263 
264         //formatting json 
265         data\&.setCharAt( data\&.lastIndexOf('}') , ',');//{"":"","":"","","",
266                 
267         //read sensors data
268     #if DEBUG == 1
269 
270         Serial\&.println( F("Collecting sensors data ") );
271         Serial\&.println();
272     
273     #endif
274 
275         data+=this->readSensors();//{"":"","":"","","",{\&.\&.\&.\&.\&.\&.\&.}       
276 
277         //formatting json correctly
278         data\&.remove(data\&.lastIndexOf('{'), 1);//{"":"","":"","","",\&.\&.\&.\&.\&.\&.\&.}
279         
280         coolBoardLed\&.fadeOut(245,237,27,0\&.5);//shade of yellow
281                 
282     }   
283     else
284     {
285         //read sensors data
286     #if DEBUG == 1
287 
288         Serial\&.println( F("Collecting sensors data ") );
289         Serial\&.println();
290     
291     #endif
292         coolBoardLed\&.fade(190,100,150,0\&.5);//shade of violet      
293         data=this->readSensors();//{\&.\&.,\&.\&.,\&.\&.}
294     }
295     
296     //do action
297     if (jetpackActive)
298     {
299     
300     #if DEBUG ==1
301 
302         Serial\&.println( F("jetpack is Active ") );
303         Serial\&.println( F("jetpack doing action ") );
304         Serial\&.println();
305 
306     #endif
307         coolBoardLed\&.fade(100,100,150,0\&.5);//dark shade of blue       
308         jetPack\&.doAction(data\&.c_str(), sensorJsonSize);
309     }
310     
311     coolBoardLed\&.fadeIn(128,255,50,0\&.5);//shade of green
312 
313     //formatting data:
314     String jsonData = "{\"state\":{\"reported\":";
315     jsonData += data; // {"state":{"reported":{\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}
316     jsonData += " } }"; // {"state":{"reported":{\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}  } }
317     
318     //mqtt client loop to allow data handling
319     mqtt\&.mqttLoop();
320 
321     coolBoardLed\&.blink(128,255,50,0\&.5);//shade of green   
322 
323     //read mqtt answer
324     answer = mqtt\&.read();
325 
326 #if DEBUG == 1 
327 
328     Serial\&.println( F("checking if there's an MQTT message ")  );
329     Serial\&.println( F("answer is : ") ); 
330     Serial\&.println(answer);  
331     Serial\&.println();
332 
333 #endif  
334 
335     coolBoardLed\&.fadeOut(128,255,50,0\&.5);//shade of green 
336 
337     //check if the configuration needs update 
338     //and update it if needed 
339     this -> update(answer\&.c_str());
340     
341     coolBoardLed\&.fadeIn(128,255,50,0\&.5);//shade of green  
342 
343     //publishing data   
344     if( this->sleepActive==0)   
345     {   
346         coolBoardLed\&.strobe(255,0,230,0\&.5);//shade of pink
347     
348         mqtt\&.publish( jsonData\&.c_str(), this->getLogInterval() );
349         mqtt\&.mqttLoop();
350     
351     }
352     else
353     {
354         coolBoardLed\&.strobe(230,255,0,0\&.5);//shade of yellow  
355 
356         mqtt\&.publish(jsonData\&.c_str());       
357         this->sleep( this->getLogInterval() ) ;
358         mqtt\&.mqttLoop();
359     }
360 
361     coolBoardLed\&.fadeOut(128,255,50,0\&.5);//shade of green     
362         
363         
364 }
.fi
.SS "void CoolBoard::printConf ()"
\fBCoolBoard::printConf()\fP: This method is provided to print the configuration to the Serial Monitor\&. 
.PP
Definition at line 685 of file CoolBoard\&.cpp\&.
.PP
References answerJsonSize, externalSensorsActive, ireneActive, jetpackActive, logInterval, sensorJsonSize, serverTimeOut, sleepActive, and userActive\&.
.PP
.nf
686 {
687 
688 #if DEBUG == 1
689     
690     Serial\&.println( F("Entering CoolBoard\&.printConf() ") );
691     Serial\&.println();
692 
693 #endif
694 
695     Serial\&.println("Printing Cool Board Configuration ");
696     Serial\&.print("log interval       : ");
697     Serial\&.println(this->logInterval);
698 
699     Serial\&.print("sensor json size       : ");
700     Serial\&.println(this->sensorJsonSize);
701 
702     Serial\&.print("answer json size       : ");
703     Serial\&.println(this->answerJsonSize);
704 
705     Serial\&.print("irene active       : ");
706     Serial\&.println(this->ireneActive);
707 
708     Serial\&.print("jetpack active     : ");
709     Serial\&.println(this->jetpackActive);
710 
711     Serial\&.print("external sensors active    : ");
712     Serial\&.println(this->externalSensorsActive);
713 
714     Serial\&.print("access point timeOut   : ");
715     Serial\&.println(this->serverTimeOut);
716 
717     Serial\&.print("sleept active      : ");
718     Serial\&.println(this->sleepActive);
719 
720     Serial\&.print("user active        : ");
721     Serial\&.println(this->userActive);
722 
723     Serial\&.println();
724 
725 
726 
727 
728 }
.fi
.SS "String CoolBoard::readSensors ()"
\fBCoolBoard::readSensors()\fP: This method is provided to read and format all the sensors data in a single json\&.
.PP
\fBReturns:\fP
.RS 4
json string of all the sensors read\&. 
.RE
.PP

.PP
Definition at line 898 of file CoolBoard\&.cpp\&.
.PP
References coolBoardLed, coolBoardSensors, externalSensors, externalSensorsActive, CoolBoardLed::fadeIn(), CoolBoardLed::fadeOut(), CoolTime::getTimeDate(), irene3000, ireneActive, ExternalSensors::read(), CoolBoardSensors::read(), Irene3000::read(), rtc, and CoolBoardLed::strobe()\&.
.PP
Referenced by offLineMode(), and onLineMode()\&.
.PP
.nf
899 {
900 
901     coolBoardLed\&.fadeIn(128,255,0,0\&.5);//light shade of green
902                 
903 #if DEBUG == 1
904 
905     Serial\&.println( F("Entering CoolBoard\&.readSensors()") );
906     Serial\&.println();
907 
908 #endif
909     coolBoardLed\&.strobe(128,255,0,0\&.5);//light shade of green
910 
911     String sensorsData;
912 
913     sensorsData = coolBoardSensors\&.read(); // {\&.\&.,\&.\&.,\&.\&.}
914     
915     if (externalSensorsActive)
916     {
917         sensorsData += externalSensors\&.read(); // {\&.\&.,\&.\&.,\&.\&.}{\&.\&.,\&.\&.}
918 
919         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf('}'), ','); // {\&.\&.,\&.\&.,\&.\&.}{\&.\&.,\&.\&.,
920         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf('{'), ','); // {\&.\&.,\&.\&.,\&.\&.},\&.\&.,\&.\&.,
921         sensorsData\&.remove(sensorsData\&.lastIndexOf('}'), 1); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,
922         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf(','), '}'); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}
923 
924     }
925     if (ireneActive)
926     {
927         sensorsData += irene3000\&.read(); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}{\&.\&.,\&.\&.,\&.\&.}
928 
929         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf('}'), ','); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.{\&.\&.,\&.\&.,\&.\&.,
930         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf('{'), ','); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.},\&.\&.,\&.\&.,\&.\&.,
931         sensorsData\&.remove(sensorsData\&.lastIndexOf('}'), 1); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,
932         
933         
934     }
935 
936     //getting Hour:
937     tmElements_t tm;
938     tm=rtc\&.getTimeDate();
939     
940     //adding Hour
941     sensorsData+="\"hour\":";   
942     sensorsData+=tm\&.Hour;
943     sensorsData+="}";
944     
945 #if DEBUG == 1
946     Serial\&.println();
947     Serial\&.println( F("sensors data is ") );
948     Serial\&.println(sensorsData);
949     Serial\&.println();
950 
951 #endif
952     coolBoardLed\&.fadeOut(128,255,0,0\&.5);//light shade of green
953 
954     return(sensorsData);
955 
956 }
.fi
.SS "void CoolBoard::sleep (int interval)"
\fBCoolBoard::sleep(int interval)\fP: This method is provided to allow the board to enter deepSleep mode for a period of time equal to interval in ms 
.PP
Definition at line 1012 of file CoolBoard\&.cpp\&.
.PP
Referenced by onLineMode()\&.
.PP
.nf
1013 {
1014 
1015 #if DEBUG == 1
1016 
1017     Serial\&.println( F("Entering CoolBoard\&.sleep() ") );
1018     Serial\&.print( F("going to sleep for ") );
1019     Serial\&.print(interval);
1020     Serial\&.println(F("ms") );
1021     Serial\&.println();
1022 
1023 #endif
1024 
1025     ESP\&.deepSleep ( ( interval * 1000 ), WAKE_RF_DEFAULT) ;
1026 }
.fi
.SS "void CoolBoard::update (const char * answer)"
CoolBoard::update(mqtt answer): This method is provided to handle the configuration update of the different parts 
.PP
Definition at line 735 of file CoolBoard\&.cpp\&.
.PP
References answerJsonSize, CoolMQTT::begin(), CoolWifi::begin(), CoolBoardLed::config(), Jetpack::config(), ExternalSensors::config(), CoolWifi::config(), CoolMQTT::config(), CoolTime::config(), config(), Irene3000::config(), CoolBoardSensors::config(), coolBoardLed, coolBoardSensors, externalSensors, externalSensorsActive, CoolBoardLed::fadeIn(), CoolBoardLed::fadeOut(), fileSystem, irene3000, ireneActive, jetPack, jetpackActive, mqtt, CoolMQTT::mqttLoop(), CoolMQTT::publish(), rtc, CoolBoardLed::strobe(), CoolFileSystem::updateConfigFiles(), and wifiManager\&.
.PP
Referenced by onLineMode()\&.
.PP
.nf
736 {
737     coolBoardLed\&.fadeIn(153,76,0,0\&.5);//shade of brown        
738 
739 #if DEBUG == 1
740 
741     Serial\&.println( F("Entering CoolBoard\&.update() ") );
742     Serial\&.println();
743     Serial\&.println( F("message is : ") );
744     Serial\&.println(answer);
745     Serial\&.println();
746 
747 #endif
748 
749     DynamicJsonBuffer jsonBuffer(answerJsonSize);
750     JsonObject & root = jsonBuffer\&.parseObject(answer);
751     JsonObject & stateDesired = root["state"];
752 
753 #if DEBUG == 1
754     
755     root\&.printTo(Serial);
756     stateDesired\&.printTo(Serial);
757 
758 #endif
759 
760     if (stateDesired\&.success())
761     {
762     
763     #if DEBUG == 1
764 
765         Serial\&.println( F("update message parsing : success") );
766         Serial\&.println();
767     
768     #endif
769 
770             String answerDesired;
771         
772             stateDesired\&.printTo(answerDesired);
773             
774         #if DEBUG == 1      
775         
776             Serial\&.println( F("update is ok ") );
777             Serial\&.println( F("desired update is : ") );         
778             Serial\&.println(answerDesired);
779             Serial\&.println("json size is : ");
780             Serial\&.println(jsonBuffer\&.size() ) ;              
781             Serial\&.println();
782 
783         
784         #endif
785             
786             fileSystem\&.updateConfigFiles(answerDesired, answerJsonSize);
787 
788             //applying the configuration    
789             this -> config();
790 
791             coolBoardSensors\&.config();
792 
793             rtc\&.config();
794 
795             coolBoardLed\&.config();
796             
797             wifiManager\&.config();
798 
799             mqtt\&.config();
800 
801             if (jetpackActive)
802             {
803                 jetPack\&.config();
804             }
805 
806             if (ireneActive)
807             {
808                 irene3000\&.config();
809             }
810 
811             if (externalSensorsActive)
812             {
813                 externalSensors\&.config();
814             }
815 
816             delay(10);
817             wifiManager\&.begin();
818             delay(100);
819             mqtt\&.begin();
820 
821                 //answering the update msg:
822             //reported = received configuration
823             //desired=null
824         
825             String updateAnswer;
826             String tempString;
827             
828             stateDesired\&.printTo(tempString);
829             updateAnswer="{\"state\":{\"reported\":";
830             updateAnswer+=tempString;
831             updateAnswer+=",\"desired\":null}}";
832 
833         #if DEBUG == 1
834 
835             Serial\&.println( F("preparing answer message ") );
836             Serial\&.println();
837             Serial\&.println( F("updateAnswer : ") );
838             Serial\&.println(updateAnswer);
839         
840         #endif  
841 
842             mqtt\&.publish(updateAnswer\&.c_str());
843             
844             mqtt\&.mqttLoop();
845 
846             delay(10);
847             
848             //restart the esp
849             ESP\&.restart();
850     }
851     else
852     {
853     
854     #if DEBUG == 1
855 
856         Serial\&.println( F("Failed to parse update message( OR no message received )") );
857         Serial\&.println();
858     
859     #endif
860     
861     }
862 
863     coolBoardLed\&.strobe(153,76,0,0\&.5);//shade of brown
864     coolBoardLed\&.fadeOut(153,76,0,0\&.5);//shade of brown                               
865 }
.fi
.SS "String CoolBoard::userData ()"
\fBCoolBoard::userData()\fP: This method is provided to return the user's data\&.
.PP
\fBReturns:\fP
.RS 4
json string of the user's data 
.RE
.PP

.PP
Definition at line 965 of file CoolBoard\&.cpp\&.
.PP
References CoolTime::getESDate(), CoolMQTT::getUser(), mqtt, and rtc\&.
.PP
Referenced by offLineMode(), and onLineMode()\&.
.PP
.nf
966 {
967 
968 #if DEBUG == 1
969 
970     Serial\&.println( F("Entering CoolBoard\&.userData() ") );
971     Serial\&.println();
972 
973 #endif
974 
975     String tempMAC = WiFi\&.macAddress();
976 
977     tempMAC\&.replace(":", "");
978 
979     String userJson = "{\"user\":\"";
980 
981     userJson += mqtt\&.getUser();
982 
983     userJson += "\",\"timestamp\":\"";
984 
985     userJson += rtc\&.getESDate(); // "timestamp":"20yy-mm-ddThh:mm:ssZ"
986 
987     userJson += "\",\"mac\":\"";
988 
989     userJson += tempMAC;
990 
991     userJson += "\"}";
992 
993 #if DEBUG == 1
994 
995     Serial\&.println( F("userData is : ") );
996     Serial\&.println(userJson);
997     Serial\&.println();
998 
999 #endif  
1000     
1001     return(userJson);
1002     
1003 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "String CoolBoard::answer =''\fC [private]\fP"

.PP
Definition at line 101 of file CoolBoard\&.h\&.
.PP
Referenced by onLineMode()\&.
.SS "int CoolBoard::answerJsonSize =3000\fC [private]\fP"

.PP
Definition at line 93 of file CoolBoard\&.h\&.
.PP
Referenced by config(), printConf(), and update()\&.
.SS "\fBCoolBoardLed\fP CoolBoard::coolBoardLed\fC [private]\fP"

.PP
Definition at line 67 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), config(), connect(), offLineMode(), onLineMode(), readSensors(), and update()\&.
.SS "\fBCoolBoardSensors\fP CoolBoard::coolBoardSensors\fC [private]\fP"

.PP
Definition at line 65 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), readSensors(), and update()\&.
.SS "String CoolBoard::data =''\fC [private]\fP"

.PP
Definition at line 99 of file CoolBoard\&.h\&.
.PP
Referenced by offLineMode(), and onLineMode()\&.
.SS "\fBExternalSensors\fP CoolBoard::externalSensors\fC [private]\fP"

.PP
Definition at line 79 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), readSensors(), and update()\&.
.SS "bool CoolBoard::externalSensorsActive =0\fC [private]\fP"

.PP
Definition at line 87 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), config(), printConf(), readSensors(), and update()\&.
.SS "\fBCoolFileSystem\fP CoolBoard::fileSystem\fC [private]\fP"

.PP
Definition at line 63 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), config(), offLineMode(), onLineMode(), and update()\&.
.SS "\fBIrene3000\fP CoolBoard::irene3000\fC [private]\fP"

.PP
Definition at line 77 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), readSensors(), and update()\&.
.SS "bool CoolBoard::ireneActive =0\fC [private]\fP"

.PP
Definition at line 83 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), config(), printConf(), readSensors(), and update()\&.
.SS "\fBJetpack\fP CoolBoard::jetPack\fC [private]\fP"

.PP
Definition at line 75 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), offLineMode(), onLineMode(), and update()\&.
.SS "bool CoolBoard::jetpackActive =0\fC [private]\fP"

.PP
Definition at line 85 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), config(), offLineMode(), onLineMode(), printConf(), and update()\&.
.SS "uint16_t CoolBoard::logInterval =1000\fC [private]\fP"

.PP
Definition at line 91 of file CoolBoard\&.h\&.
.PP
Referenced by config(), getLogInterval(), and printConf()\&.
.SS "\fBCoolMQTT\fP CoolBoard::mqtt\fC [private]\fP"

.PP
Definition at line 73 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), connect(), onLineMode(), update(), and userData()\&.
.SS "\fBCoolTime\fP CoolBoard::rtc\fC [private]\fP"

.PP
Definition at line 69 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), onLineMode(), readSensors(), update(), and userData()\&.
.SS "int CoolBoard::sensorJsonSize =1000\fC [private]\fP"

.PP
Definition at line 95 of file CoolBoard\&.h\&.
.PP
Referenced by config(), offLineMode(), onLineMode(), and printConf()\&.
.SS "int CoolBoard::serverTimeOut =180\fC [private]\fP"

.PP
Definition at line 97 of file CoolBoard\&.h\&.
.PP
Referenced by config(), and printConf()\&.
.SS "bool CoolBoard::sleepActive =0\fC [private]\fP"

.PP
Definition at line 89 of file CoolBoard\&.h\&.
.PP
Referenced by config(), onLineMode(), and printConf()\&.
.SS "bool CoolBoard::userActive =0\fC [private]\fP"

.PP
Definition at line 81 of file CoolBoard\&.h\&.
.PP
Referenced by config(), offLineMode(), onLineMode(), and printConf()\&.
.SS "\fBCoolWifi\fP CoolBoard::wifiManager\fC [private]\fP"

.PP
Definition at line 71 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), connect(), and update()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolAPI from the source code\&.
