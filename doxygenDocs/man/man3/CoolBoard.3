.TH "CoolBoard" 3 "Mon Jul 10 2017" "CoolAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoolBoard \- This class manages the \fBCoolBoard\fP and all of Its functions\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolBoard\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBbegin\fP ()"
.br
.ti -1c
.RI "bool \fBconfig\fP ()"
.br
.ti -1c
.RI "void \fBupdate\fP (const char *\fBanswer\fP)"
.br
.ti -1c
.RI "void \fBoffLineMode\fP ()"
.br
.ti -1c
.RI "void \fBonLineMode\fP ()"
.br
.ti -1c
.RI "int \fBconnect\fP ()"
.br
.ti -1c
.RI "uint16_t \fBgetLogInterval\fP ()"
.br
.ti -1c
.RI "void \fBprintConf\fP ()"
.br
.ti -1c
.RI "void \fBsleep\fP (int interval)"
.br
.ti -1c
.RI "String \fBreadSensors\fP ()"
.br
.ti -1c
.RI "String \fBuserData\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBCoolFileSystem\fP \fBfileSystem\fP"
.br
.ti -1c
.RI "\fBCoolBoardSensors\fP \fBcoolBoardSensors\fP"
.br
.ti -1c
.RI "\fBCoolBoardLed\fP \fBcoolBoardLed\fP"
.br
.ti -1c
.RI "\fBCoolTime\fP \fBrtc\fP"
.br
.ti -1c
.RI "WiFiManager \fBwifiManager\fP"
.br
.ti -1c
.RI "\fBCoolMQTT\fP \fBmqtt\fP"
.br
.ti -1c
.RI "\fBJetpack\fP \fBjetPack\fP"
.br
.ti -1c
.RI "\fBIrene3000\fP \fBirene3000\fP"
.br
.ti -1c
.RI "\fBExternalSensors\fP \fBexternalSensors\fP"
.br
.ti -1c
.RI "bool \fBuserActive\fP =0"
.br
.ti -1c
.RI "bool \fBireneActive\fP =0"
.br
.ti -1c
.RI "bool \fBjetpackActive\fP =0"
.br
.ti -1c
.RI "bool \fBexternalSensorsActive\fP =0"
.br
.ti -1c
.RI "bool \fBsleepActive\fP =0"
.br
.ti -1c
.RI "uint16_t \fBlogInterval\fP =1000"
.br
.ti -1c
.RI "int \fBanswerJsonSize\fP =3000"
.br
.ti -1c
.RI "int \fBsensorJsonSize\fP =1000"
.br
.ti -1c
.RI "int \fBserverTimeOut\fP =180"
.br
.ti -1c
.RI "String \fBdata\fP =''"
.br
.ti -1c
.RI "String \fBanswer\fP =''"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class manages the \fBCoolBoard\fP and all of Its functions\&. 
.PP
Definition at line 37 of file CoolBoard\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "void CoolBoard::begin ()"
\fBCoolBoard::begin()\fP: This method is provided to configure and start the used CoolKit Parts\&. It also starts the first connection try If Serial is enabled,it prints the configuration of the used parts\&. 
.PP
Definition at line 37 of file CoolBoard\&.cpp\&.
.PP
References Jetpack::begin(), CoolFileSystem::begin(), CoolBoardLed::begin(), CoolMQTT::begin(), ExternalSensors::begin(), CoolBoardSensors::begin(), CoolTime::begin(), Irene3000::begin(), CoolBoardLed::config(), Jetpack::config(), ExternalSensors::config(), CoolMQTT::config(), CoolTime::config(), Irene3000::config(), CoolBoardSensors::config(), connect(), coolBoardLed, coolBoardSensors, externalSensors, externalSensorsActive, fileSystem, irene3000, ireneActive, jetPack, jetpackActive, mqtt, CoolBoardLed::printConf(), Jetpack::printConf(), ExternalSensors::printConf(), CoolMQTT::printConf(), Irene3000::printConf(), CoolTime::printConf(), CoolBoardSensors::printConf(), and rtc\&.
.PP
.nf
38 {
39 
40 #if DEBUG == 1
41 
42     Serial\&.println( F("Starting the CoolBoard  ")  );
43     Serial\&.println( F("Entering CoolBoard\&.begin() ")  );
44     Serial\&.println();
45 #endif
46     
47     fileSystem\&.begin();
48     delay(100);
49     
50     coolBoardSensors\&.config();
51     coolBoardSensors\&.begin();
52     coolBoardSensors\&.printConf();
53     delay(100);
54 
55     coolBoardLed\&.config();
56     coolBoardLed\&.begin();
57     coolBoardLed\&.printConf();
58     delay(100);
59 
60     mqtt\&.config();
61     mqtt\&.begin();
62     mqtt\&.printConf();
63     delay(100);
64 
65     if (jetpackActive)
66     {
67         jetPack\&.config();
68         jetPack\&.begin();
69         jetPack\&.printConf();
70         delay(100);
71     }
72 
73     if (ireneActive)
74     {
75         irene3000\&.config();
76         irene3000\&.begin();
77         irene3000\&.printConf();
78         delay(100);
79     }
80 
81     if (externalSensorsActive)
82     {
83         externalSensors\&.config();
84         externalSensors\&.begin();
85         externalSensors\&.printConf();
86         delay(100);
87     }
88     
89     this->connect();
90     delay(100);
91 
92     rtc\&.config();
93     rtc\&.begin();
94     rtc\&.printConf();
95     delay(100);
96 
97 
98     this->connect();
99 
100     rtc\&.config();
101     rtc\&.begin();
102     rtc\&.printConf();
103     delay(100);
104 
105 
106 }
.fi
.SS "bool CoolBoard::config ()"
\fBCoolBoard::config()\fP: This method is provided to configure the \fBCoolBoard\fP : -log interval -Size of the data to write -Size of the data to read -irene3000 activated/deactivated -jetpack activated/deactivated -external Sensors activated/deactivated -mqtt server timeout
.PP
\fBReturns:\fP
.RS 4
true if configuration is done, false otherwise 
.RE
.PP

.PP
Definition at line 441 of file CoolBoard\&.cpp\&.
.PP
References answerJsonSize, CoolFileSystem::begin(), externalSensorsActive, fileSystem, ireneActive, jetpackActive, logInterval, sensorJsonSize, serverTimeOut, sleepActive, and userActive\&.
.PP
Referenced by update()\&.
.PP
.nf
442 {
443 
444 #if DEBUG == 1
445 
446     Serial\&.println( F("Entering CoolBoard\&.config() ") );
447     Serial\&.println();
448 
449 #endif
450 
451     //open file system
452     fileSystem\&.begin();
453     
454     //open configuration file
455     File configFile = SPIFFS\&.open("/coolBoardConfig\&.json", "r");
456     
457     if (!configFile)
458 
459     {
460     
461     #if DEBUG == 1
462 
463         Serial\&.println( F("failed to read /coolBoardConfig\&.json  ") );
464 
465     #endif
466     
467         return(false);
468     }
469 
470     else
471     {
472         size_t size = configFile\&.size();
473 
474         // Allocate a buffer to store contents of the file\&.
475         std::unique_ptr < char[] > buf(new char[size]);
476 
477         configFile\&.readBytes(buf\&.get(), size);
478 
479         DynamicJsonBuffer jsonBuffer;
480 
481         JsonObject & json = jsonBuffer\&.parseObject(buf\&.get());
482 
483         if (!json\&.success())
484         {
485         
486         #if DEBUG == 1
487 
488             Serial\&.println( F("failed to parse CoolBoard Config json object ") );
489     
490         #endif
491 
492             return(false);
493         }
494 
495         else
496         {   
497         
498         #if DEBUG == 1
499             
500             Serial\&.println( F("configuration json : ") );
501             json\&.printTo(Serial);
502             Serial\&.println();
503         
504         #endif
505             
506             //parsing userActive Key
507             if (json["userActive"]\&.success())
508             {
509                 this -> userActive = json["userActive"];
510             }
511 
512             else
513             {
514                 this -> userActive = this -> userActive;
515             }
516             json["userActive"] = this -> userActive;
517 
518             //parsing logInterval key
519             if (json["logInterval"]\&.success())
520             {
521                 this -> logInterval = json["logInterval"];
522             }
523             else
524             {
525                 this -> logInterval = this -> logInterval;
526             }
527             json["logInterval"] = this -> logInterval;
528 
529             //parsing sensorJsonSize key
530             if (json["sensorJsonSize"]\&.success())
531             {
532                 this -> sensorJsonSize = json["sensorJsonSize"];
533             }
534             else
535             {
536                 this -> sensorJsonSize = this -> sensorJsonSize;
537             }
538             json["sensorJsonSize"] = this -> sensorJsonSize;
539             
540             //parsing answerJsonSize key            
541             if (json["answerJsonSize"]\&.success())
542             {
543                 this -> answerJsonSize = json["answerJsonSize"];
544             }
545             else
546             {
547                 this -> answerJsonSize = this -> answerJsonSize;
548             }
549             json["answerJsonSize"] = this -> answerJsonSize;
550             
551             //parsing ireneActive key           
552             if (json["ireneActive"]\&.success())
553             {
554                 this -> ireneActive = json["ireneActive"];
555             }
556             else
557             {
558                 this -> ireneActive = this -> ireneActive;
559             }
560             json["ireneActive"] = this -> ireneActive;
561             
562             //parsing jetpackActive key
563             if (json["jetpackActive"]\&.success())
564             {
565                 this -> jetpackActive = json["jetpackActive"];
566             }
567             else
568             {
569                 this -> jetpackActive = this -> jetpackActive;
570             }
571             json["jetpackActive"] = this -> jetpackActive;
572 
573             //parsing externalSensorsActive key
574             if (json["externalSensorsActive"]\&.success())
575             {
576                 this -> externalSensorsActive = json["externalSensorsActive"];
577             }
578             else
579             {
580                 this -> externalSensorsActive = this -> externalSensorsActive;
581             }
582             json["externalSensorsActive"] = this -> externalSensorsActive;
583 
584             //parsing serverTimeOut key
585             if (json["serverTimeOut"]\&.success())
586             {
587                 this -> serverTimeOut = json["serverTimeOut"];
588             }
589             else
590             {
591                 this -> serverTimeOut = this -> serverTimeOut;
592             }
593             json["serverTimeOut"] = this -> serverTimeOut;
594             
595             //parsing sleepActive key
596             if (json["sleepActive"]\&.success())
597             {
598                 this -> sleepActive = json["sleepActive"];
599             }
600             else
601             {
602                 this -> sleepActive = this -> sleepActive;
603             }
604             json["sleepActive"] = this -> sleepActive;
605 
606             //saving the current/correct configuration
607             configFile\&.close();
608             configFile = SPIFFS\&.open("/coolBoardConfig\&.json", "w");
609             if (!configFile)
610             {
611             
612             #if DEBUG == 1
613 
614                 Serial\&.println( F("failed to write to /coolBoardConfig\&.json") );
615                 Serial\&.println();
616             
617             #endif
618  
619                 return(false);
620             }
621 
622             json\&.printTo(configFile);
623             configFile\&.close();
624             return(true);
625         }
626     }
627 }
.fi
.SS "int CoolBoard::connect ()"
\fBCoolBoard::connect()\fP: This method is provided to manage the network connection and the mqtt connection\&.
.PP
\fBReturns:\fP
.RS 4
mqtt client state 
.RE
.PP

.PP
Definition at line 115 of file CoolBoard\&.cpp\&.
.PP
References CoolMQTT::connect(), getLogInterval(), mqtt, serverTimeOut, CoolMQTT::state(), and wifiManager\&.
.PP
Referenced by begin()\&.
.PP
.nf
116 {
117 
118 #if DEBUG == 1  
119 
120     Serial\&.println( F("Entering CoolBoard\&.connect ") );
121     Serial\&.println();
122     Serial\&.println( F("Connecting the CoolBoard  ") );
123     delay(100);
124 
125 #endif
126 
127     if (WiFi\&.status() != WL_CONNECTED)
128     {       
129     
130     #if DEBUG == 1      
131 
132         Serial\&.println( F("CoolBoard not connected to WiFi ") );
133         Serial\&.println( F("Launching WiFiManager") );
134         Serial\&.println();
135 
136     #endif
137     
138         wifiManager\&.setConfigPortalTimeout(this -> serverTimeOut);
139         wifiManager\&.autoConnect("CoolBoard");
140         delay(100);
141 
142     }
143 
144 
145     
146     if (mqtt\&.state() != 0)
147     {   
148     
149     #if DEBUG == 1  
150     
151         Serial\&.println( F("CoolBoard not connected to MQTT ") );
152         Serial\&.println( F("Launching mqtt\&.connect()") );
153         Serial\&.println();
154 
155     #endif  
156     
157         mqtt\&.connect(this -> getLogInterval());
158         delay(100);
159         
160     }
161     
162 #if DEBUG == 1
163 
164     Serial\&.println( F("mqtt state is :") );
165     Serial\&.println(mqtt\&.state());
166     Serial\&.println();
167     delay(100);
168 
169 #endif
170 
171     return(mqtt\&.state());
172 }
.fi
.SS "uint16_t CoolBoard::getLogInterval ()"
\fBCoolBoard::getLogInterval()\fP: This method is provided to get the log interval
.PP
\fBReturns:\fP
.RS 4
interval value in ms 
.RE
.PP

.PP
Definition at line 821 of file CoolBoard\&.cpp\&.
.PP
References logInterval\&.
.PP
Referenced by connect(), and onLineMode()\&.
.PP
.nf
822 {
823 
824 #if DEBUG == 1
825 
826     Serial\&.println( F("Entering CoolBoard\&.getLogInterval() ") );
827     Serial\&.println();
828     Serial\&.println( F("log Interval is :") );
829     Serial\&.println(logInterval);
830     Serial\&.println();
831 
832 #endif
833 
834     return(this -> logInterval);
835 }
.fi
.SS "void CoolBoard::offLineMode ()"
CoolBoard::offlineMode(): This method is provided to manage the offLine mode: -read sensors -do actions -save data in the file system 
.PP
Definition at line 349 of file CoolBoard\&.cpp\&.
.PP
References data, Jetpack::doAction(), fileSystem, jetPack, jetpackActive, readSensors(), CoolFileSystem::saveSensorData(), sensorJsonSize, userActive, and userData()\&.
.PP
.nf
350 {
351 
352 #if DEBUG == 1  
353     
354     Serial\&.println( F("Entering off line mode ") );  
355     
356 #endif
357 
358     //read user data if user is active
359     if(userActive)
360     {
361 
362     #if DEBUG == 1
363         
364         Serial\&.println( F("User is Active") );
365         Serial\&.println( F("Collecting User's data ( mac,username,timeStamp )") );
366         Serial\&.println();
367 
368     #endif
369 
370         //reading user data
371         data=this->userData();//{"":"","":"","",""}
372 
373         //formatting json 
374         data\&.setCharAt( data\&.lastIndexOf('}') , ',');//{"":"","":"","","",
375         
376                 
377         //read sensors data
378     #if DEBUG == 1
379 
380         Serial\&.println( F("Collecting sensors data ") );
381         Serial\&.println();
382 
383     #endif
384 
385         data+=this->readSensors();//{"":"","":"","","",{\&.\&.\&.\&.\&.\&.\&.}
386 
387         
388 
389         //formatting json correctly
390         data\&.remove(data\&.lastIndexOf('{'), 1);//{"":"","":"","","",\&.\&.\&.\&.\&.\&.\&.}
391                 
392     }   
393     else
394     {
395         //read sensors data
396     #if DEBUG == 1
397 
398         Serial\&.println( F("Collecting sensors data ") );
399         Serial\&.println();
400 
401     #endif
402 
403         data=this->readSensors();//{\&.\&.,\&.\&.,\&.\&.}
404     }
405 
406     //do action
407     if (jetpackActive)
408     {
409 
410     #if DEBUG == 1
411 
412         Serial\&.println( F("jetpack is Active ") );
413         Serial\&.println( F("jetpack doing action ") );
414         Serial\&.println();
415     
416     #endif
417 
418         jetPack\&.doAction(data\&.c_str(), sensorJsonSize);
419     }
420     
421     
422     //saving data in the file system
423     
424     fileSystem\&.saveSensorData(data\&.c_str(), sensorJsonSize);
425 }
.fi
.SS "void CoolBoard::onLineMode ()"
\fBCoolBoard::onLineMode()\fP: This method is provided to manage the online mode: -update clock -read sensor -do actions -publish data -read answer -update config 
.PP
Definition at line 184 of file CoolBoard\&.cpp\&.
.PP
References answer, data, Jetpack::doAction(), fileSystem, getLogInterval(), CoolFileSystem::getSensorSavedData(), CoolFileSystem::isDataSaved(), jetPack, jetpackActive, mqtt, CoolMQTT::mqttLoop(), CoolMQTT::publish(), CoolMQTT::read(), readSensors(), rtc, sensorJsonSize, sleep(), sleepActive, CoolTime::update(), update(), userActive, and userData()\&.
.PP
.nf
185 {
186 
187 #if DEBUG == 1
188 
189     Serial\&.println( F("Entering CoolBoard\&.onLineMode() ") );
190     Serial\&.println();
191 
192 #endif
193 
194     data="";
195     answer="";
196 
197     //send saved data if any
198     if(fileSystem\&.isDataSaved())
199     {
200     
201     #if DEBUG == 1
202 
203         Serial\&.println( F("There is data saved on the File System") );
204         Serial\&.println( F("Sending saved data over MQTT ") );
205         Serial\&.println();
206     
207     #endif  
208     
209         mqtt\&.publish("sending saved data");
210         mqtt\&.mqttLoop();
211 
212         data+=fileSystem\&.getSensorSavedData();//{\&.\&.,\&.\&.,\&.\&.}
213 
214         //formatting data:
215         String jsonData = "{\"state\":{\"reported\":";
216         jsonData += data; // {"state":{"reported":{\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}
217         jsonData += " } }"; // {"state":{"reported":{\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}  } }
218 
219         mqtt\&.publish( data\&.c_str() );
220         mqtt\&.mqttLoop();
221     
222     #if DEBUG == 1
223 
224         Serial\&.println( F("Saved data sent ") );
225         Serial\&.println();
226     
227     #endif
228 
229     }
230 
231     //clock update
232     rtc\&.update();
233 
234     //read user data if user is active
235     if(userActive)
236     {
237     
238     #if DEBUG == 1
239 
240         Serial\&.println( F("User is Active") );
241         Serial\&.println( F("Collecting User's data ( mac,username,timeStamp )") );
242         Serial\&.println();
243     
244     #endif  
245     
246         //reading user data
247         data=this->userData();//{"":"","":"","",""}
248 
249         //formatting json 
250         data\&.setCharAt( data\&.lastIndexOf('}') , ',');//{"":"","":"","","",
251                 
252         //read sensors data
253     #if DEBUG == 1
254 
255         Serial\&.println( F("Collecting sensors data ") );
256         Serial\&.println();
257     
258     #endif
259 
260         data+=this->readSensors();//{"":"","":"","","",{\&.\&.\&.\&.\&.\&.\&.}       
261 
262         //formatting json correctly
263         data\&.remove(data\&.lastIndexOf('{'), 1);//{"":"","":"","","",\&.\&.\&.\&.\&.\&.\&.}
264                 
265     }   
266     else
267     {
268         //read sensors data
269     #if DEBUG == 1
270 
271         Serial\&.println( F("Collecting sensors data ") );
272         Serial\&.println();
273     
274     #endif
275 
276         data=this->readSensors();//{\&.\&.,\&.\&.,\&.\&.}
277     }
278     
279     //do action
280     if (jetpackActive)
281     {
282     
283     #if DEBUG ==1
284 
285         Serial\&.println( F("jetpack is Active ") );
286         Serial\&.println( F("jetpack doing action ") );
287         Serial\&.println();
288 
289     #endif
290 
291         jetPack\&.doAction(data\&.c_str(), sensorJsonSize);
292     }
293     
294     //formatting data:
295     String jsonData = "{\"state\":{\"reported\":";
296     jsonData += data; // {"state":{"reported":{\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}
297     jsonData += " } }"; // {"state":{"reported":{\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}  } }
298     
299     //mqtt client loop to allow data handling
300     mqtt\&.mqttLoop();
301 
302     //read mqtt answer
303     
304     answer = mqtt\&.read();
305 
306 #if DEBUG == 1 
307 
308     Serial\&.println( F("checking if there's an MQTT message ")  );
309     Serial\&.println( F("answer is : ") ); 
310     Serial\&.println(answer);  
311     Serial\&.println();
312 
313 #endif  
314 
315 
316     //check if the configuration needs update 
317     //and update it if needed 
318     this -> update(answer\&.c_str());
319     
320 
321     //publishing data   
322     if( this->sleepActive==0)   
323     {   
324         
325         mqtt\&.publish( jsonData\&.c_str(), this->getLogInterval() );
326         mqtt\&.mqttLoop();
327     
328     }
329     else
330     {
331         mqtt\&.publish(jsonData\&.c_str());       
332         this->sleep( this->getLogInterval() ) ;
333         mqtt\&.mqttLoop();
334     }
335 
336     
337         
338         
339 }
.fi
.SS "void CoolBoard::printConf ()"
\fBCoolBoard::printConf()\fP: This method is provided to print the configuration to the Serial Monitor\&. 
.PP
Definition at line 636 of file CoolBoard\&.cpp\&.
.PP
References answerJsonSize, externalSensorsActive, ireneActive, jetpackActive, logInterval, sensorJsonSize, serverTimeOut, sleepActive, and userActive\&.
.PP
.nf
637 {
638 
639 #if DEBUG == 1
640     
641     Serial\&.println( F("Entering CoolBoard\&.printConf() ") );
642     Serial\&.println();
643 
644 #endif
645 
646     Serial\&.println("Printing Cool Board Configuration ");
647     Serial\&.print("log interval       : ");
648     Serial\&.println(this->logInterval);
649 
650     Serial\&.print("sensor json size       : ");
651     Serial\&.println(this->sensorJsonSize);
652 
653     Serial\&.print("answer json size       : ");
654     Serial\&.println(this->answerJsonSize);
655 
656     Serial\&.print("irene active       : ");
657     Serial\&.println(this->ireneActive);
658 
659     Serial\&.print("jetpack active     : ");
660     Serial\&.println(this->jetpackActive);
661 
662     Serial\&.print("external sensors active    : ");
663     Serial\&.println(this->externalSensorsActive);
664 
665     Serial\&.print("access point timeOut   : ");
666     Serial\&.println(this->serverTimeOut);
667 
668     Serial\&.print("sleept active      : ");
669     Serial\&.println(this->sleepActive);
670 
671     Serial\&.print("user active        : ");
672     Serial\&.println(this->userActive);
673 
674     Serial\&.println();
675 
676 
677 
678 
679 }
.fi
.SS "String CoolBoard::readSensors ()"
\fBCoolBoard::readSensors()\fP: This method is provided to read and format all the sensors data in a single json\&.
.PP
\fBReturns:\fP
.RS 4
json string of all the sensors read\&. 
.RE
.PP

.PP
Definition at line 845 of file CoolBoard\&.cpp\&.
.PP
References coolBoardSensors, externalSensors, externalSensorsActive, irene3000, ireneActive, ExternalSensors::read(), CoolBoardSensors::read(), and Irene3000::read()\&.
.PP
Referenced by offLineMode(), and onLineMode()\&.
.PP
.nf
846 {
847 
848 #if DEBUG == 1
849 
850     Serial\&.println( F("Entering CoolBoard\&.readSensors()") );
851     Serial\&.println();
852 
853 #endif
854 
855     String sensorsData;
856 
857     sensorsData = coolBoardSensors\&.read(); // {\&.\&.,\&.\&.,\&.\&.}
858     
859     if (externalSensorsActive)
860     {
861         sensorsData += externalSensors\&.read(); // {\&.\&.,\&.\&.,\&.\&.}{\&.\&.,\&.\&.}
862 
863         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf('}'), ','); // {\&.\&.,\&.\&.,\&.\&.}{\&.\&.,\&.\&.,
864         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf('{'), ','); // {\&.\&.,\&.\&.,\&.\&.},\&.\&.,\&.\&.,
865         sensorsData\&.remove(sensorsData\&.lastIndexOf('}'), 1); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,
866         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf(','), '}'); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}
867 
868     }
869     if (ireneActive)
870     {
871         sensorsData += irene3000\&.read(); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}{\&.\&.,\&.\&.,\&.\&.}
872 
873         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf('}'), ','); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.{\&.\&.,\&.\&.,\&.\&.,
874         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf('{'), ','); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.},\&.\&.,\&.\&.,\&.\&.,
875         sensorsData\&.remove(sensorsData\&.lastIndexOf('}'), 1); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,
876         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf(','), '}'); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}
877         
878     }
879     
880 #if DEBUG == 1
881 
882     Serial\&.println( F("sensors data is ") );
883     Serial\&.println(sensorsData);
884     Serial\&.println();
885 
886 #endif
887 
888     return(sensorsData);
889 
890 }
.fi
.SS "void CoolBoard::sleep (int interval)"
\fBCoolBoard::sleep(int interval)\fP: This method is provided to allow the board to enter deepSleep mode for a period of time equal to interval in ms 
.PP
Definition at line 946 of file CoolBoard\&.cpp\&.
.PP
Referenced by onLineMode()\&.
.PP
.nf
947 {
948 
949 #if DEBUG == 1
950 
951     Serial\&.println( F("Entering CoolBoard\&.sleep() ") );
952     Serial\&.print( F("going to sleep for ") );
953     Serial\&.print(interval);
954     Serial\&.println(F("ms") );
955     Serial\&.println();
956 
957 #endif
958 
959     ESP\&.deepSleep ( ( interval * 1000 ), WAKE_RF_DEFAULT) ;
960 }
.fi
.SS "void CoolBoard::update (const char * answer)"
CoolBoard::update(mqtt answer): This method is provided to handle the configuration update of the different parts 
.PP
Definition at line 686 of file CoolBoard\&.cpp\&.
.PP
References answerJsonSize, CoolMQTT::begin(), CoolBoardLed::config(), Jetpack::config(), ExternalSensors::config(), CoolMQTT::config(), CoolTime::config(), Irene3000::config(), config(), CoolBoardSensors::config(), coolBoardLed, coolBoardSensors, externalSensors, externalSensorsActive, fileSystem, irene3000, ireneActive, jetPack, jetpackActive, mqtt, CoolMQTT::mqttLoop(), CoolMQTT::publish(), rtc, and CoolFileSystem::updateConfigFiles()\&.
.PP
Referenced by onLineMode()\&.
.PP
.nf
687 {
688 
689 #if DEBUG == 1
690 
691     Serial\&.println( F("Entering CoolBoard\&.update() ") );
692     Serial\&.println();
693     Serial\&.println( F("message is : ") );
694     Serial\&.println(answer);
695     Serial\&.println();
696 
697 #endif
698 
699     DynamicJsonBuffer jsonBuffer(answerJsonSize);
700     JsonObject & root = jsonBuffer\&.parseObject(answer);
701     JsonObject & stateDesired = root["state"];
702     if (stateDesired\&.success())
703     {
704     
705     #if DEBUG == 1
706 
707         Serial\&.println( F("update message parsing : success") );
708         Serial\&.println();
709     
710     #endif
711 
712         if (stateDesired["update"] == 1)
713         {
714             String answerDesired;
715         
716             stateDesired\&.printTo(answerDesired);
717             
718         #if DEBUG == 1      
719         
720             Serial\&.println( F("update is 1 ") );
721             Serial\&.println( F("desired update is : ") );         
722             Serial\&.println(answerDesired);
723             Serial\&.println();
724         
725         #endif
726             
727             fileSystem\&.updateConfigFiles(answerDesired, answerJsonSize);
728 
729             //applying the configuration    
730             this -> config();
731 
732             coolBoardSensors\&.config();
733 
734             rtc\&.config();
735 
736             coolBoardLed\&.config();
737 
738             mqtt\&.config();
739 
740             if (jetpackActive)
741             {
742                 jetPack\&.config();
743             }
744 
745             if (ireneActive)
746             {
747                 irene3000\&.config();
748             }
749 
750             if (externalSensorsActive)
751             {
752                 externalSensors\&.config();
753             }
754 
755             delay(10);
756             mqtt\&.begin();
757 
758                 //answering the update msg:
759             //reported = received configuration
760             //desired=null
761         
762             String updateAnswer;
763             String tempString;
764             
765             stateDesired\&.printTo(tempString);
766             updateAnswer="{\"state\":{\"reported\":";
767             updateAnswer+=tempString;
768             updateAnswer+=",\"desired\":null}}";
769 
770         #if DEBUG == 1
771 
772             Serial\&.println( F("preparing answer message ") );
773             Serial\&.println();
774             Serial\&.println( F("updateAnswer : ") );
775             Serial\&.println(updateAnswer);
776         
777         #endif  
778 
779             mqtt\&.publish(updateAnswer\&.c_str());
780             
781             mqtt\&.mqttLoop();
782 
783             delay(10);
784             
785             //restart the esp
786             ESP\&.restart();
787                 
788         }
789         else
790         {
791         
792         #if DEBUG == 1 
793 
794             Serial\&.println( F("update is not 1 ") );
795             Serial\&.println();
796         
797         #endif
798 
799         }
800     }
801     else
802     {
803     
804     #if DEBUG == 1
805 
806         Serial\&.println( F("Failed to parse update message( OR no message received )") );
807         Serial\&.println();
808     
809     #endif
810     
811     }       
812 }
.fi
.SS "String CoolBoard::userData ()"
\fBCoolBoard::userData()\fP: This method is provided to return the user's data\&.
.PP
\fBReturns:\fP
.RS 4
json string of the user's data 
.RE
.PP

.PP
Definition at line 899 of file CoolBoard\&.cpp\&.
.PP
References CoolTime::getESDate(), CoolMQTT::getUser(), mqtt, and rtc\&.
.PP
Referenced by offLineMode(), and onLineMode()\&.
.PP
.nf
900 {
901 
902 #if DEBUG == 1
903 
904     Serial\&.println( F("Entering CoolBoard\&.userData() ") );
905     Serial\&.println();
906 
907 #endif
908 
909     String tempMAC = WiFi\&.macAddress();
910 
911     tempMAC\&.replace(":", "");
912 
913     String userJson = "{\"user\":\"";
914 
915     userJson += mqtt\&.getUser();
916 
917     userJson += "\",\"timestamp\":\"";
918 
919     userJson += rtc\&.getESDate(); // "timestamp":"20yy-mm-ddThh:mm:ssZ"
920 
921     userJson += "\",\"mac\":\"";
922 
923     userJson += tempMAC;
924 
925     userJson += "\"}";
926 
927 #if DEBUG == 1
928 
929     Serial\&.println( F("userData is : ") );
930     Serial\&.println(userJson);
931     Serial\&.println();
932 
933 #endif  
934     
935     return(userJson);
936     
937 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "String CoolBoard::answer =''\fC [private]\fP"

.PP
Definition at line 107 of file CoolBoard\&.h\&.
.PP
Referenced by onLineMode()\&.
.SS "int CoolBoard::answerJsonSize =3000\fC [private]\fP"

.PP
Definition at line 99 of file CoolBoard\&.h\&.
.PP
Referenced by config(), printConf(), and update()\&.
.SS "\fBCoolBoardLed\fP CoolBoard::coolBoardLed\fC [private]\fP"

.PP
Definition at line 73 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), and update()\&.
.SS "\fBCoolBoardSensors\fP CoolBoard::coolBoardSensors\fC [private]\fP"

.PP
Definition at line 71 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), readSensors(), and update()\&.
.SS "String CoolBoard::data =''\fC [private]\fP"

.PP
Definition at line 105 of file CoolBoard\&.h\&.
.PP
Referenced by offLineMode(), and onLineMode()\&.
.SS "\fBExternalSensors\fP CoolBoard::externalSensors\fC [private]\fP"

.PP
Definition at line 85 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), readSensors(), and update()\&.
.SS "bool CoolBoard::externalSensorsActive =0\fC [private]\fP"

.PP
Definition at line 93 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), config(), printConf(), readSensors(), and update()\&.
.SS "\fBCoolFileSystem\fP CoolBoard::fileSystem\fC [private]\fP"

.PP
Definition at line 69 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), config(), offLineMode(), onLineMode(), and update()\&.
.SS "\fBIrene3000\fP CoolBoard::irene3000\fC [private]\fP"

.PP
Definition at line 83 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), readSensors(), and update()\&.
.SS "bool CoolBoard::ireneActive =0\fC [private]\fP"

.PP
Definition at line 89 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), config(), printConf(), readSensors(), and update()\&.
.SS "\fBJetpack\fP CoolBoard::jetPack\fC [private]\fP"

.PP
Definition at line 81 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), offLineMode(), onLineMode(), and update()\&.
.SS "bool CoolBoard::jetpackActive =0\fC [private]\fP"

.PP
Definition at line 91 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), config(), offLineMode(), onLineMode(), printConf(), and update()\&.
.SS "uint16_t CoolBoard::logInterval =1000\fC [private]\fP"

.PP
Definition at line 97 of file CoolBoard\&.h\&.
.PP
Referenced by config(), getLogInterval(), and printConf()\&.
.SS "\fBCoolMQTT\fP CoolBoard::mqtt\fC [private]\fP"

.PP
Definition at line 79 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), connect(), onLineMode(), update(), and userData()\&.
.SS "\fBCoolTime\fP CoolBoard::rtc\fC [private]\fP"

.PP
Definition at line 75 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), onLineMode(), update(), and userData()\&.
.SS "int CoolBoard::sensorJsonSize =1000\fC [private]\fP"

.PP
Definition at line 101 of file CoolBoard\&.h\&.
.PP
Referenced by config(), offLineMode(), onLineMode(), and printConf()\&.
.SS "int CoolBoard::serverTimeOut =180\fC [private]\fP"

.PP
Definition at line 103 of file CoolBoard\&.h\&.
.PP
Referenced by config(), connect(), and printConf()\&.
.SS "bool CoolBoard::sleepActive =0\fC [private]\fP"

.PP
Definition at line 95 of file CoolBoard\&.h\&.
.PP
Referenced by config(), onLineMode(), and printConf()\&.
.SS "bool CoolBoard::userActive =0\fC [private]\fP"

.PP
Definition at line 87 of file CoolBoard\&.h\&.
.PP
Referenced by config(), offLineMode(), onLineMode(), and printConf()\&.
.SS "WiFiManager CoolBoard::wifiManager\fC [private]\fP"

.PP
Definition at line 77 of file CoolBoard\&.h\&.
.PP
Referenced by connect()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolAPI from the source code\&.
