.TH "CoolBoard" 3 "Wed Aug 2 2017" "CoolAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoolBoard \- This class manages the \fBCoolBoard\fP and all of Its functions\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolBoard\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBbegin\fP ()"
.br
.ti -1c
.RI "bool \fBconfig\fP ()"
.br
.ti -1c
.RI "void \fBupdate\fP (const char *\fBanswer\fP)"
.br
.ti -1c
.RI "void \fBoffLineMode\fP ()"
.br
.ti -1c
.RI "void \fBonLineMode\fP ()"
.br
.ti -1c
.RI "int \fBconnect\fP ()"
.br
.ti -1c
.RI "unsigned long \fBgetLogInterval\fP ()"
.br
.ti -1c
.RI "void \fBprintConf\fP ()"
.br
.ti -1c
.RI "void \fBsleep\fP (unsigned long interval)"
.br
.ti -1c
.RI "String \fBreadSensors\fP ()"
.br
.ti -1c
.RI "String \fBuserData\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBCoolFileSystem\fP \fBfileSystem\fP"
.br
.ti -1c
.RI "\fBCoolBoardSensors\fP \fBcoolBoardSensors\fP"
.br
.ti -1c
.RI "\fBCoolBoardLed\fP \fBcoolBoardLed\fP"
.br
.ti -1c
.RI "\fBCoolTime\fP \fBrtc\fP"
.br
.ti -1c
.RI "\fBCoolWifi\fP \fBwifiManager\fP"
.br
.ti -1c
.RI "\fBCoolMQTT\fP \fBmqtt\fP"
.br
.ti -1c
.RI "\fBJetpack\fP \fBjetPack\fP"
.br
.ti -1c
.RI "\fBIrene3000\fP \fBirene3000\fP"
.br
.ti -1c
.RI "\fBExternalSensors\fP \fBexternalSensors\fP"
.br
.ti -1c
.RI "bool \fBuserActive\fP =0"
.br
.ti -1c
.RI "bool \fBireneActive\fP =0"
.br
.ti -1c
.RI "bool \fBjetpackActive\fP =0"
.br
.ti -1c
.RI "bool \fBexternalSensorsActive\fP =0"
.br
.ti -1c
.RI "bool \fBsleepActive\fP =0"
.br
.ti -1c
.RI "unsigned long \fBlogInterval\fP =1"
.br
.ti -1c
.RI "int \fBserverTimeOut\fP =180"
.br
.ti -1c
.RI "String \fBdata\fP =''"
.br
.ti -1c
.RI "String \fBanswer\fP =''"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class manages the \fBCoolBoard\fP and all of Its functions\&. 
.PP
Definition at line 33 of file CoolBoard\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "void CoolBoard::begin ()"
\fBCoolBoard::begin()\fP: This method is provided to configure and start the used CoolKit Parts\&. It also starts the first connection try If Serial is enabled,it prints the configuration of the used parts\&. 
.PP
Definition at line 37 of file CoolBoard\&.cpp\&.
.PP
References Jetpack::begin(), CoolMQTT::begin(), ExternalSensors::begin(), CoolWifi::begin(), CoolBoardSensors::begin(), CoolTime::begin(), Irene3000::begin(), CoolBoardLed::blink(), Jetpack::config(), ExternalSensors::config(), CoolWifi::config(), CoolMQTT::config(), CoolTime::config(), Irene3000::config(), CoolBoardSensors::config(), connect(), coolBoardLed, coolBoardSensors, externalSensors, externalSensorsActive, CoolBoardLed::fadeOut(), irene3000, ireneActive, jetPack, jetpackActive, mqtt, CoolBoardLed::printConf(), Jetpack::printConf(), ExternalSensors::printConf(), CoolMQTT::printConf(), CoolWifi::printConf(), CoolTime::printConf(), Irene3000::printConf(), CoolBoardSensors::printConf(), rtc, wifiManager, and CoolBoardLed::write()\&.
.PP
.nf
38 {
39 
40 #if DEBUG == 1
41 
42     Serial\&.println( F("Starting the CoolBoard  ")  );
43     Serial\&.println( F("Entering CoolBoard\&.begin() ")  );
44     Serial\&.println();
45 #endif  
46     coolBoardLed\&.printConf();
47     delay(100);
48     
49     coolBoardLed\&.write(255,128,0);//orange
50     
51     coolBoardSensors\&.config();
52     coolBoardSensors\&.begin();
53     coolBoardSensors\&.printConf();
54     delay(100);
55     
56     wifiManager\&.config();
57     wifiManager\&.begin();
58     wifiManager\&.printConf();
59     delay(100);
60 
61     mqtt\&.config();
62     mqtt\&.begin();
63     mqtt\&.printConf();
64     delay(100);
65 
66     if (jetpackActive)
67     {
68         jetPack\&.config();
69         jetPack\&.begin();
70         jetPack\&.printConf();
71         delay(100);
72     }
73 
74     if (ireneActive)
75     {
76         irene3000\&.config();
77         irene3000\&.begin();
78         irene3000\&.printConf();
79         delay(100);
80     }
81 
82     if (externalSensorsActive)
83     {
84         externalSensors\&.config();
85         externalSensors\&.begin();
86         externalSensors\&.printConf();
87         delay(100);
88     }
89     
90     coolBoardLed\&.fadeOut(255,128,0,0\&.5);//orange
91 
92     this->connect();
93     delay(100);
94 
95     rtc\&.config();
96     rtc\&.begin();
97     rtc\&.printConf();
98     delay(100);
99     
100     coolBoardLed\&.blink(0,255,0,0\&.5);//green
101 
102 }
.fi
.SS "bool CoolBoard::config ()"
\fBCoolBoard::config()\fP: This method is provided to configure the \fBCoolBoard\fP : -log interval -irene3000 activated/deactivated -jetpack activated/deactivated -external Sensors activated/deactivated -mqtt server timeout
.PP
\fBReturns:\fP
.RS 4
true if configuration is done, false otherwise 
.RE
.PP

.PP
Definition at line 486 of file CoolBoard\&.cpp\&.
.PP
References CoolFileSystem::begin(), CoolBoardLed::begin(), CoolBoardLed::blink(), CoolBoardLed::config(), coolBoardLed, externalSensorsActive, CoolBoardLed::fadeIn(), CoolBoardLed::fadeOut(), fileSystem, ireneActive, jetpackActive, logInterval, serverTimeOut, sleepActive, CoolBoardLed::strobe(), and userActive\&.
.PP
.nf
487 {
488 
489 #if DEBUG == 1
490 
491     Serial\&.println( F("Entering CoolBoard\&.config() ") );
492     Serial\&.println();
493 
494 #endif
495 
496     //open file system
497     fileSystem\&.begin();
498     
499     //start the led
500     coolBoardLed\&.config();
501     coolBoardLed\&.begin();
502     coolBoardLed\&.fadeIn(243,171,46,0\&.5);//shade of orange     
503 
504     
505     //open configuration file
506     File configFile = SPIFFS\&.open("/coolBoardConfig\&.json", "r");
507     
508     if (!configFile)
509 
510     {
511     
512     #if DEBUG == 1
513 
514         Serial\&.println( F("failed to read /coolBoardConfig\&.json  ") );
515 
516     #endif
517         coolBoardLed\&.blink(255,0,0,0\&.5);//shade of red        
518         return(false);
519     }
520 
521     else
522     {
523         size_t size = configFile\&.size();
524 
525         // Allocate a buffer to store contents of the file\&.
526         std::unique_ptr < char[] > buf(new char[size]);
527 
528         configFile\&.readBytes(buf\&.get(), size);
529 
530         DynamicJsonBuffer jsonBuffer;
531 
532         JsonObject & json = jsonBuffer\&.parseObject(buf\&.get());
533 
534         if (!json\&.success())
535         {
536         
537         #if DEBUG == 1
538 
539             Serial\&.println( F("failed to parse CoolBoard Config json object ") );
540     
541         #endif
542             coolBoardLed\&.blink(255,0,0,0\&.5);//shade of red        
543             return(false);
544         }
545 
546         else
547         {   
548         
549         #if DEBUG == 1
550             
551             Serial\&.println( F("configuration json : ") );
552             json\&.printTo(Serial);
553             Serial\&.println();
554             
555             Serial\&.print(F("jsonBuffer size : "));
556             Serial\&.print(jsonBuffer\&.size());
557             Serial\&.println();
558 
559         #endif
560             
561             //parsing userActive Key
562             if (json["userActive"]\&.success())
563             {
564                 this -> userActive = json["userActive"];
565             }
566 
567             else
568             {
569                 this -> userActive = this -> userActive;
570             }
571             json["userActive"] = this -> userActive;
572 
573             //parsing logInterval key
574             if (json["logInterval"]\&.success())
575             {
576                 this -> logInterval = json["logInterval"];
577             }
578             else
579             {
580                 this -> logInterval = this -> logInterval;
581             }
582             json["logInterval"] = this -> logInterval;
583             
584             //parsing ireneActive key           
585             if (json["ireneActive"]\&.success())
586             {
587                 this -> ireneActive = json["ireneActive"];
588             }
589             else
590             {
591                 this -> ireneActive = this -> ireneActive;
592             }
593             json["ireneActive"] = this -> ireneActive;
594             
595             //parsing jetpackActive key
596             if (json["jetpackActive"]\&.success())
597             {
598                 this -> jetpackActive = json["jetpackActive"];
599             }
600             else
601             {
602                 this -> jetpackActive = this -> jetpackActive;
603             }
604             json["jetpackActive"] = this -> jetpackActive;
605 
606             //parsing externalSensorsActive key
607             if (json["externalSensorsActive"]\&.success())
608             {
609                 this -> externalSensorsActive = json["externalSensorsActive"];
610             }
611             else
612             {
613                 this -> externalSensorsActive = this -> externalSensorsActive;
614             }
615             json["externalSensorsActive"] = this -> externalSensorsActive;
616 
617             //parsing serverTimeOut key
618             if (json["serverTimeOut"]\&.success())
619             {
620                 this -> serverTimeOut = json["serverTimeOut"];
621             }
622             else
623             {
624                 this -> serverTimeOut = this -> serverTimeOut;
625             }
626             json["serverTimeOut"] = this -> serverTimeOut;
627             
628             //parsing sleepActive key
629             if (json["sleepActive"]\&.success())
630             {
631                 this -> sleepActive = json["sleepActive"];
632             }
633             else
634             {
635                 this -> sleepActive = this -> sleepActive;
636             }
637             json["sleepActive"] = this -> sleepActive;
638 
639             //saving the current/correct configuration
640             configFile\&.close();
641             configFile = SPIFFS\&.open("/coolBoardConfig\&.json", "w");
642             if (!configFile)
643             {
644             
645             #if DEBUG == 1
646 
647                 Serial\&.println( F("failed to write to /coolBoardConfig\&.json") );
648                 Serial\&.println();
649             
650             #endif
651                 coolBoardLed\&.blink(255,0,0,0\&.5);//shade of red        
652                 return(false);
653             }
654 
655             json\&.printTo(configFile);
656             configFile\&.close();
657             return(true);
658         }
659     }
660 
661     coolBoardLed\&.strobe(243,171,46,0\&.5);//shade of orange
662     
663     coolBoardLed\&.fadeOut(243,171,46,0\&.5);//shade of orange                
664 }
.fi
.SS "int CoolBoard::connect ()"
\fBCoolBoard::connect()\fP: This method is provided to manage the network connection and the mqtt connection\&.
.PP
\fBReturns:\fP
.RS 4
mqtt client state 
.RE
.PP

.PP
Definition at line 111 of file CoolBoard\&.cpp\&.
.PP
References CoolBoardLed::blink(), CoolMQTT::connect(), CoolWifi::connect(), coolBoardLed, getLogInterval(), mqtt, CoolWifi::state(), CoolMQTT::state(), wifiManager, and CoolBoardLed::write()\&.
.PP
Referenced by begin()\&.
.PP
.nf
112 {
113 
114 #if DEBUG == 1  
115 
116     Serial\&.println( F("Entering CoolBoard\&.connect ") );
117     Serial\&.println();
118     Serial\&.println( F("Connecting the CoolBoard  ") );
119     delay(100);
120 
121 #endif
122     coolBoardLed\&.write(0,0,255);//blue
123 
124     if (wifiManager\&.state() != WL_CONNECTED)
125     {       
126     
127     #if DEBUG == 1      
128 
129         Serial\&.println( F("CoolBoard not connected to WiFi ") );
130         Serial\&.println( F("Launching CoolWifi") );
131         Serial\&.println();
132 
133     #endif
134         wifiManager\&.connect();
135         delay(100);
136     }
137 
138 
139     
140     if (mqtt\&.state() != 0)
141     {   
142     
143     #if DEBUG == 1  
144     
145         Serial\&.println( F("CoolBoard not connected to MQTT ") );
146         Serial\&.println( F("Launching mqtt\&.connect()") );
147         Serial\&.println();
148 
149     #endif  
150         //logInterval in seconds
151         mqtt\&.connect(this -> getLogInterval());
152         delay(100);
153         
154     }
155     
156 #if DEBUG == 1
157 
158     Serial\&.println( F("mqtt state is :") );
159     Serial\&.println(mqtt\&.state());
160     Serial\&.println();
161     delay(100);
162 
163 #endif
164 
165     coolBoardLed\&.blink(0,0,255,0\&.5);//blue
166 
167     return(mqtt\&.state());
168 }
.fi
.SS "unsigned long CoolBoard::getLogInterval ()"
\fBCoolBoard::getLogInterval()\fP: This method is provided to get the log interval
.PP
\fBReturns:\fP
.RS 4
interval value in s 
.RE
.PP

.PP
Definition at line 864 of file CoolBoard\&.cpp\&.
.PP
References logInterval\&.
.PP
Referenced by connect(), and onLineMode()\&.
.PP
.nf
865 {
866 
867 #if DEBUG == 1
868 
869     Serial\&.println( F("Entering CoolBoard\&.getLogInterval() ") );
870     Serial\&.println();
871     Serial\&.println( F("log Interval is :") );
872     Serial\&.println(logInterval);
873     Serial\&.println();
874 
875 #endif
876 
877     return(this -> logInterval);
878 }
.fi
.SS "void CoolBoard::offLineMode ()"
CoolBoard::offlineMode(): This method is provided to manage the offLine mode: -read sensors -do actions -save data in the file system 
.PP
Definition at line 381 of file CoolBoard\&.cpp\&.
.PP
References CoolBoardLed::blink(), coolBoardLed, data, Jetpack::doAction(), CoolBoardLed::fade(), CoolBoardLed::fadeIn(), CoolBoardLed::fadeOut(), fileSystem, jetPack, jetpackActive, readSensors(), CoolFileSystem::saveSensorData(), userActive, and userData()\&.
.PP
.nf
382 {
383     coolBoardLed\&.fade(51,100,50,0\&.5);//dark shade of green    
384 #if DEBUG == 1  
385     
386     Serial\&.println( F("Entering off line mode ") );  
387     
388 #endif
389 
390     //read user data if user is active
391     if(userActive)
392     {
393 
394         coolBoardLed\&.fadeIn(245,237,27,0\&.5);//shade of yellow
395 
396     #if DEBUG == 1
397         
398         Serial\&.println( F("User is Active") );
399         Serial\&.println( F("Collecting User's data ( mac,username,timeStamp )") );
400         Serial\&.println();
401 
402     #endif
403 
404         coolBoardLed\&.blink(245,237,27,0\&.5);//shade of yellow  
405 
406         //reading user data
407         data=this->userData();//{"":"","":"","",""}
408 
409         //formatting json 
410         data\&.setCharAt( data\&.lastIndexOf('}') , ',');//{"":"","":"","","",
411         
412                 
413         //read sensors data
414     #if DEBUG == 1
415 
416         Serial\&.println( F("Collecting sensors data ") );
417         Serial\&.println();
418 
419     #endif
420 
421         data+=this->readSensors();//{"":"","":"","","",{\&.\&.\&.\&.\&.\&.\&.}
422 
423         
424 
425         //formatting json correctly
426         data\&.remove(data\&.lastIndexOf('{'), 1);//{"":"","":"","","",\&.\&.\&.\&.\&.\&.\&.}
427 
428         coolBoardLed\&.fadeOut(245,237,27,0\&.5);//shade of yellow
429                 
430     }   
431     else
432     {
433         //read sensors data
434     #if DEBUG == 1
435 
436         Serial\&.println( F("Collecting sensors data ") );
437         Serial\&.println();
438 
439     #endif
440 
441         coolBoardLed\&.fade(190,100,150,0\&.5);//shade of violet      
442 
443         data=this->readSensors();//{\&.\&.,\&.\&.,\&.\&.}
444     }
445 
446     coolBoardLed\&.fade(51,100,50,0\&.5);//dark shade of green    
447 
448     //do action
449     if (jetpackActive)
450     {
451 
452     #if DEBUG == 1
453 
454         Serial\&.println( F("jetpack is Active ") );
455         Serial\&.println( F("jetpack doing action ") );
456         Serial\&.println();
457     
458     #endif
459         coolBoardLed\&.fade(100,100,150,0\&.5);//dark shade of blue   
460     
461         jetPack\&.doAction( data\&.c_str() );
462     }
463     
464     coolBoardLed\&.fade(51,100,50,0\&.5);//dark shade of green    
465     
466     //saving data in the file system
467     
468     fileSystem\&.saveSensorData( data\&.c_str() );
469 
470     coolBoardLed\&.fadeOut(51,100,50,0\&.5);//dark shade of green 
471 
472 }
.fi
.SS "void CoolBoard::onLineMode ()"
\fBCoolBoard::onLineMode()\fP: This method is provided to manage the online mode: -update clock -read sensor -do actions -publish data -read answer -update config 
.PP
Definition at line 180 of file CoolBoard\&.cpp\&.
.PP
References answer, CoolBoardLed::blink(), coolBoardLed, data, Jetpack::doAction(), CoolBoardLed::fade(), CoolBoardLed::fadeIn(), CoolBoardLed::fadeOut(), fileSystem, getLogInterval(), CoolFileSystem::getSensorSavedData(), CoolFileSystem::isDataSaved(), jetPack, jetpackActive, mqtt, CoolMQTT::mqttLoop(), CoolMQTT::publish(), CoolMQTT::read(), readSensors(), rtc, sleep(), sleepActive, CoolBoardLed::strobe(), CoolTime::update(), update(), userActive, and userData()\&.
.PP
.nf
181 {
182 
183     coolBoardLed\&.fadeIn(128,255,50,0\&.5);//shade of green
184 
185 #if DEBUG == 1
186 
187     Serial\&.println( F("Entering CoolBoard\&.onLineMode() ") );
188     Serial\&.println();
189 
190 #endif
191 
192     data="";
193     answer="";
194 
195     //send saved data if any
196     if(fileSystem\&.isDataSaved())
197     {
198 
199         coolBoardLed\&.fadeIn(128,128,255,0\&.5);//shade of blue
200 
201     #if DEBUG == 1
202 
203         Serial\&.println( F("There is data saved on the File System") );
204         Serial\&.println( F("Sending saved data over MQTT ") );
205         Serial\&.println();
206     
207     #endif  
208         coolBoardLed\&.strobe(128,128,255,0\&.5);//shade of blue 
209 
210         mqtt\&.publish("sending saved data");
211         mqtt\&.mqttLoop();
212 
213         data+=fileSystem\&.getSensorSavedData();//{\&.\&.,\&.\&.,\&.\&.}
214 
215         //formatting data:
216         String jsonData = "{\"state\":{\"reported\":";
217         jsonData += data; // {"state":{"reported":{\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}
218         jsonData += " } }"; // {"state":{"reported":{\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}  } }
219         
220         coolBoardLed\&.strobe(128,128,255,0\&.5);//shade of blue
221         
222         mqtt\&.publish( data\&.c_str() );
223         mqtt\&.mqttLoop();
224         
225         coolBoardLed\&.fadeOut(128,128,255,0\&.5);//shade of blue     
226     
227     #if DEBUG == 1
228 
229         Serial\&.println( F("Saved data sent ") );
230         Serial\&.println();
231     
232     #endif
233 
234     }
235 
236     coolBoardLed\&.blink(128,255,50,0\&.5);//shade of green
237 
238     //clock update
239     rtc\&.update();
240 
241     //read user data if user is active
242     if(userActive)
243     {
244         coolBoardLed\&.fadeIn(245,237,27,0\&.5);//shade of yellow
245     
246     #if DEBUG == 1
247 
248         Serial\&.println( F("User is Active") );
249         Serial\&.println( F("Collecting User's data ( mac,username,timeStamp )") );
250         Serial\&.println();
251     
252     #endif  
253         coolBoardLed\&.blink(245,237,27,0\&.5);//shade of yellow  
254 
255         //reading user data
256         data=this->userData();//{"":"","":"","",""}
257 
258         //formatting json 
259         data\&.setCharAt( data\&.lastIndexOf('}') , ',');//{"":"","":"","","",
260                 
261         //read sensors data
262     #if DEBUG == 1
263 
264         Serial\&.println( F("Collecting sensors data ") );
265         Serial\&.println();
266     
267     #endif
268 
269         data+=this->readSensors();//{"":"","":"","","",{\&.\&.\&.\&.\&.\&.\&.}       
270 
271         //formatting json correctly
272         data\&.remove(data\&.lastIndexOf('{'), 1);//{"":"","":"","","",\&.\&.\&.\&.\&.\&.\&.}
273         
274         coolBoardLed\&.fadeOut(245,237,27,0\&.5);//shade of yellow
275                 
276     }   
277     else
278     {
279         //read sensors data
280     #if DEBUG == 1
281 
282         Serial\&.println( F("Collecting sensors data ") );
283         Serial\&.println();
284     
285     #endif
286         coolBoardLed\&.fade(190,100,150,0\&.5);//shade of violet      
287         data=this->readSensors();//{\&.\&.,\&.\&.,\&.\&.}
288     }
289     
290     //do action
291     if (jetpackActive)
292     {
293     
294     #if DEBUG ==1
295 
296         Serial\&.println( F("jetpack is Active ") );
297         Serial\&.println( F("jetpack doing action ") );
298         Serial\&.println();
299 
300     #endif
301         coolBoardLed\&.fade(100,100,150,0\&.5);//dark shade of blue       
302         jetPack\&.doAction(data\&.c_str());
303     }
304     
305     coolBoardLed\&.fadeIn(128,255,50,0\&.5);//shade of green
306 
307     //formatting data:
308     String jsonData = "{\"state\":{\"reported\":";
309     jsonData += data; // {"state":{"reported":{\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}
310     jsonData += " } }"; // {"state":{"reported":{\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}  } }
311     
312     //mqtt client loop to allow data handling
313     mqtt\&.mqttLoop();
314 
315     coolBoardLed\&.blink(128,255,50,0\&.5);//shade of green   
316 
317     //read mqtt answer
318     answer = mqtt\&.read();
319 
320 #if DEBUG == 1 
321 
322     Serial\&.println( F("checking if there's an MQTT message ")  );
323     Serial\&.println( F("answer is : ") ); 
324     Serial\&.println(answer);  
325     Serial\&.println();
326 
327 #endif  
328 
329     coolBoardLed\&.fadeOut(128,255,50,0\&.5);//shade of green 
330 
331     //check if the configuration needs update 
332     //and update it if needed 
333     this -> update(answer\&.c_str());
334     
335     coolBoardLed\&.fadeIn(128,255,50,0\&.5);//shade of green  
336 
337     //publishing data   
338     if( this->sleepActive==0)   
339     {   
340         coolBoardLed\&.strobe(255,0,230,0\&.5);//shade of pink
341         
342         //logInterval in seconds
343         mqtt\&.publish( jsonData\&.c_str(), this->getLogInterval() );
344         mqtt\&.mqttLoop();
345     
346     }
347     else
348     {
349         coolBoardLed\&.strobe(230,255,0,0\&.5);//shade of yellow  
350 
351         mqtt\&.publish(jsonData\&.c_str());       
352         mqtt\&.mqttLoop();
353         answer = mqtt\&.read();
354         this ->update(answer\&.c_str());
355 
356         //logInterval in seconds
357         this->sleep( this->getLogInterval() ) ;
358     }
359 
360     coolBoardLed\&.fadeOut(128,255,50,0\&.5);//shade of green     
361 
362     mqtt\&.mqttLoop();
363 
364     //read mqtt answer
365     answer = mqtt\&.read();
366     this -> update(answer\&.c_str());  
367 
368     coolBoardLed\&.blink(128,255,50,0\&.5);//shade of green   
369 
370 
371 }
.fi
.SS "void CoolBoard::printConf ()"
\fBCoolBoard::printConf()\fP: This method is provided to print the configuration to the Serial Monitor\&. 
.PP
Definition at line 673 of file CoolBoard\&.cpp\&.
.PP
References externalSensorsActive, ireneActive, jetpackActive, logInterval, serverTimeOut, sleepActive, and userActive\&.
.PP
.nf
674 {
675 
676 #if DEBUG == 1
677     
678     Serial\&.println( F("Entering CoolBoard\&.printConf() ") );
679     Serial\&.println();
680 
681 #endif
682 
683     Serial\&.println("Printing Cool Board Configuration ");
684     Serial\&.print("log interval       : ");
685     Serial\&.println(this->logInterval);
686 
687     Serial\&.print("irene active       : ");
688     Serial\&.println(this->ireneActive);
689 
690     Serial\&.print("jetpack active     : ");
691     Serial\&.println(this->jetpackActive);
692 
693     Serial\&.print("external sensors active    : ");
694     Serial\&.println(this->externalSensorsActive);
695 
696     Serial\&.print("access point timeOut   : ");
697     Serial\&.println(this->serverTimeOut);
698 
699     Serial\&.print("sleept active      : ");
700     Serial\&.println(this->sleepActive);
701 
702     Serial\&.print("user active        : ");
703     Serial\&.println(this->userActive);
704 
705     Serial\&.println();
706 
707 
708 
709 
710 }
.fi
.SS "String CoolBoard::readSensors ()"
\fBCoolBoard::readSensors()\fP: This method is provided to read and format all the sensors data in a single json\&.
.PP
\fBReturns:\fP
.RS 4
json string of all the sensors read\&. 
.RE
.PP

.PP
Definition at line 888 of file CoolBoard\&.cpp\&.
.PP
References coolBoardLed, coolBoardSensors, externalSensors, externalSensorsActive, CoolBoardLed::fadeIn(), CoolBoardLed::fadeOut(), CoolTime::getTimeDate(), irene3000, ireneActive, ExternalSensors::read(), CoolBoardSensors::read(), Irene3000::read(), rtc, and CoolBoardLed::strobe()\&.
.PP
Referenced by offLineMode(), and onLineMode()\&.
.PP
.nf
889 {
890 
891     coolBoardLed\&.fadeIn(128,255,0,0\&.5);//light shade of green
892                 
893 #if DEBUG == 1
894 
895     Serial\&.println( F("Entering CoolBoard\&.readSensors()") );
896     Serial\&.println();
897 
898 #endif
899     coolBoardLed\&.strobe(128,255,0,0\&.5);//light shade of green
900 
901     String sensorsData;
902 
903     sensorsData = coolBoardSensors\&.read(); // {\&.\&.,\&.\&.,\&.\&.}
904     
905     if (externalSensorsActive)
906     {
907         sensorsData += externalSensors\&.read(); // {\&.\&.,\&.\&.,\&.\&.}{\&.\&.,\&.\&.}
908 
909         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf('}'), ','); // {\&.\&.,\&.\&.,\&.\&.}{\&.\&.,\&.\&.,
910         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf('{'), ','); // {\&.\&.,\&.\&.,\&.\&.},\&.\&.,\&.\&.,
911         sensorsData\&.remove(sensorsData\&.lastIndexOf('}'), 1); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,
912         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf(','), '}'); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}
913 
914     }
915     if (ireneActive)
916     {
917         sensorsData += irene3000\&.read(); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}{\&.\&.,\&.\&.,\&.\&.}
918 
919         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf('}'), ','); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}{\&.\&.,\&.\&.,\&.\&.,
920         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf('{'), ','); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.},\&.\&.,\&.\&.,\&.\&.,
921         sensorsData\&.remove(sensorsData\&.lastIndexOf('}'), 1); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,
922         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf(','), '}'); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}        
923         
924         
925     }
926 
927     //getting Hour:
928     tmElements_t tm;
929     tm=rtc\&.getTimeDate();
930     
931     //adding Hour
932     sensorsData\&.remove(sensorsData\&.lastIndexOf('}'), 1); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&., 
933     sensorsData+=",\"hour\":";  
934     sensorsData+=tm\&.Hour;
935     sensorsData+="}";
936     
937 #if DEBUG == 1
938     Serial\&.println();
939     Serial\&.println( F("sensors data is ") );
940     Serial\&.println(sensorsData);
941     Serial\&.println();
942 
943 #endif
944     coolBoardLed\&.fadeOut(128,255,0,0\&.5);//light shade of green
945 
946     return(sensorsData);
947 
948 }
.fi
.SS "void CoolBoard::sleep (unsigned long interval)"
CoolBoard::sleep(int interval): This method is provided to allow the board to enter deepSleep mode for a period of time equal to interval in s 
.PP
Definition at line 1004 of file CoolBoard\&.cpp\&.
.PP
Referenced by onLineMode()\&.
.PP
.nf
1005 {
1006 
1007 #if DEBUG == 1
1008 
1009     Serial\&.println( F("Entering CoolBoard\&.sleep() ") );
1010     Serial\&.print( F("going to sleep for ") );
1011     Serial\&.print(interval);
1012     Serial\&.println(F("s") );
1013     Serial\&.println();
1014 
1015 #endif
1016     //interval is in seconds , interval*1000*1000 in µS
1017     ESP\&.deepSleep ( ( interval * 1000 * 1000 ), WAKE_RF_DEFAULT) ;
1018 }
.fi
.SS "void CoolBoard::update (const char * answer)"
CoolBoard::update(mqtt answer): This method is provided to handle the configuration update of the different parts 
.PP
Definition at line 717 of file CoolBoard\&.cpp\&.
.PP
References coolBoardLed, CoolBoardLed::fadeIn(), CoolBoardLed::fadeOut(), fileSystem, mqtt, CoolMQTT::mqttLoop(), CoolMQTT::publish(), CoolBoardLed::strobe(), and CoolFileSystem::updateConfigFiles()\&.
.PP
Referenced by onLineMode()\&.
.PP
.nf
718 {
719     coolBoardLed\&.fadeIn(153,76,0,0\&.5);//shade of brown        
720 
721 #if DEBUG == 1
722 
723     Serial\&.println( F("Entering CoolBoard\&.update() ") );
724     Serial\&.println();
725     Serial\&.println( F("message is : ") );
726     Serial\&.println(answer);
727     Serial\&.println();
728 
729 #endif
730 
731     DynamicJsonBuffer jsonBuffer;
732     JsonObject & root = jsonBuffer\&.parseObject(answer);
733     JsonObject & stateDesired = root["state"];
734 
735 #if DEBUG == 1
736 
737     Serial\&.println( F("root json : ") );
738     root\&.printTo(Serial);
739     Serial\&.println();
740 
741     Serial\&.println(F("stateDesired json : "));
742     stateDesired\&.printTo(Serial);
743     Serial\&.println();
744     
745     Serial\&.print(F("jsonBuffer size : "));
746     Serial\&.println(jsonBuffer\&.size());
747 
748 #endif
749 
750     if (stateDesired\&.success())
751     {
752     
753     #if DEBUG == 1
754 
755         Serial\&.println( F("update message parsing : success") );
756         Serial\&.println();
757     
758     #endif
759 
760             String answerDesired;
761         
762             stateDesired\&.printTo(answerDesired);
763             
764         #if DEBUG == 1      
765         
766             Serial\&.println( F("update is ok ") );
767             Serial\&.println( F("desired update is : ") );         
768             Serial\&.println(answerDesired);
769             Serial\&.println("json size is : ");
770             Serial\&.println(jsonBuffer\&.size() ) ;              
771             Serial\&.println();
772 
773         
774         #endif
775             //saving the new configuration
776             fileSystem\&.updateConfigFiles(answerDesired);
777 
778             //applying the configuration    
779             /*this -> config();
780 
781             coolBoardSensors\&.config();
782 
783             rtc\&.config();
784 
785             coolBoardLed\&.config();
786             
787             wifiManager\&.config();
788 
789             mqtt\&.config();
790 
791             if (jetpackActive)
792             {
793                 jetPack\&.config();
794             }
795 
796             if (ireneActive)
797             {
798                 irene3000\&.config();
799             }
800 
801             if (externalSensorsActive)
802             {
803                 externalSensors\&.config();
804             }
805 
806             delay(10);
807             wifiManager\&.begin();
808             delay(100);
809             mqtt\&.begin();*/
810 
811                 //answering the update msg:
812             //reported = received configuration
813             //desired=null
814         
815             String updateAnswer;
816             String tempString;
817             
818             stateDesired\&.printTo(tempString);
819             updateAnswer="{\"state\":{\"reported\":";
820             updateAnswer+=tempString;
821             updateAnswer+=",\"desired\":null}}";
822 
823         #if DEBUG == 1
824 
825             Serial\&.println( F("preparing answer message ") );
826             Serial\&.println();
827             Serial\&.println( F("updateAnswer : ") );
828             Serial\&.println(updateAnswer);
829         
830         #endif  
831 
832             mqtt\&.publish(updateAnswer\&.c_str());
833             
834             mqtt\&.mqttLoop();
835 
836             delay(10);
837             
838             //restart the esp to apply the config
839             ESP\&.restart();
840     }
841     else
842     {
843     
844     #if DEBUG == 1
845 
846         Serial\&.println( F("Failed to parse update message( OR no message received )") );
847         Serial\&.println();
848     
849     #endif
850     
851     }
852 
853     coolBoardLed\&.strobe(153,76,0,0\&.5);//shade of brown
854     coolBoardLed\&.fadeOut(153,76,0,0\&.5);//shade of brown                               
855 }
.fi
.SS "String CoolBoard::userData ()"
\fBCoolBoard::userData()\fP: This method is provided to return the user's data\&.
.PP
\fBReturns:\fP
.RS 4
json string of the user's data 
.RE
.PP

.PP
Definition at line 957 of file CoolBoard\&.cpp\&.
.PP
References CoolTime::getESDate(), CoolMQTT::getUser(), mqtt, and rtc\&.
.PP
Referenced by offLineMode(), and onLineMode()\&.
.PP
.nf
958 {
959 
960 #if DEBUG == 1
961 
962     Serial\&.println( F("Entering CoolBoard\&.userData() ") );
963     Serial\&.println();
964 
965 #endif
966 
967     String tempMAC = WiFi\&.macAddress();
968 
969     tempMAC\&.replace(":", "");
970 
971     String userJson = "{\"user\":\"";
972 
973     userJson += mqtt\&.getUser();
974 
975     userJson += "\",\"timestamp\":\"";
976 
977     userJson += rtc\&.getESDate(); // "timestamp":"20yy-mm-ddThh:mm:ssZ"
978 
979     userJson += "\",\"mac\":\"";
980 
981     userJson += tempMAC;
982 
983     userJson += "\"}";
984 
985 #if DEBUG == 1
986 
987     Serial\&.println( F("userData is : ") );
988     Serial\&.println(userJson);
989     Serial\&.println();
990 
991 #endif  
992     
993     return(userJson);
994     
995 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "String CoolBoard::answer =''\fC [private]\fP"

.PP
Definition at line 97 of file CoolBoard\&.h\&.
.PP
Referenced by onLineMode()\&.
.SS "\fBCoolBoardLed\fP CoolBoard::coolBoardLed\fC [private]\fP"

.PP
Definition at line 67 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), config(), connect(), offLineMode(), onLineMode(), readSensors(), and update()\&.
.SS "\fBCoolBoardSensors\fP CoolBoard::coolBoardSensors\fC [private]\fP"

.PP
Definition at line 65 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), and readSensors()\&.
.SS "String CoolBoard::data =''\fC [private]\fP"

.PP
Definition at line 95 of file CoolBoard\&.h\&.
.PP
Referenced by offLineMode(), and onLineMode()\&.
.SS "\fBExternalSensors\fP CoolBoard::externalSensors\fC [private]\fP"

.PP
Definition at line 79 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), and readSensors()\&.
.SS "bool CoolBoard::externalSensorsActive =0\fC [private]\fP"

.PP
Definition at line 87 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), config(), printConf(), and readSensors()\&.
.SS "\fBCoolFileSystem\fP CoolBoard::fileSystem\fC [private]\fP"

.PP
Definition at line 63 of file CoolBoard\&.h\&.
.PP
Referenced by config(), offLineMode(), onLineMode(), and update()\&.
.SS "\fBIrene3000\fP CoolBoard::irene3000\fC [private]\fP"

.PP
Definition at line 77 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), and readSensors()\&.
.SS "bool CoolBoard::ireneActive =0\fC [private]\fP"

.PP
Definition at line 83 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), config(), printConf(), and readSensors()\&.
.SS "\fBJetpack\fP CoolBoard::jetPack\fC [private]\fP"

.PP
Definition at line 75 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), offLineMode(), and onLineMode()\&.
.SS "bool CoolBoard::jetpackActive =0\fC [private]\fP"

.PP
Definition at line 85 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), config(), offLineMode(), onLineMode(), and printConf()\&.
.SS "unsigned long CoolBoard::logInterval =1\fC [private]\fP"

.PP
Definition at line 91 of file CoolBoard\&.h\&.
.PP
Referenced by config(), getLogInterval(), and printConf()\&.
.SS "\fBCoolMQTT\fP CoolBoard::mqtt\fC [private]\fP"

.PP
Definition at line 73 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), connect(), onLineMode(), update(), and userData()\&.
.SS "\fBCoolTime\fP CoolBoard::rtc\fC [private]\fP"

.PP
Definition at line 69 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), onLineMode(), readSensors(), and userData()\&.
.SS "int CoolBoard::serverTimeOut =180\fC [private]\fP"

.PP
Definition at line 93 of file CoolBoard\&.h\&.
.PP
Referenced by config(), and printConf()\&.
.SS "bool CoolBoard::sleepActive =0\fC [private]\fP"

.PP
Definition at line 89 of file CoolBoard\&.h\&.
.PP
Referenced by config(), onLineMode(), and printConf()\&.
.SS "bool CoolBoard::userActive =0\fC [private]\fP"

.PP
Definition at line 81 of file CoolBoard\&.h\&.
.PP
Referenced by config(), offLineMode(), onLineMode(), and printConf()\&.
.SS "\fBCoolWifi\fP CoolBoard::wifiManager\fC [private]\fP"

.PP
Definition at line 71 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), and connect()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolAPI from the source code\&.
