.TH "CoolBoard" 3 "Wed Aug 2 2017" "CoolAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoolBoard \- This class manages the \fBCoolBoard\fP and all of Its functions\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolBoard\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBbegin\fP ()"
.br
.ti -1c
.RI "bool \fBconfig\fP ()"
.br
.ti -1c
.RI "void \fBupdate\fP (const char *\fBanswer\fP)"
.br
.ti -1c
.RI "void \fBoffLineMode\fP ()"
.br
.ti -1c
.RI "void \fBonLineMode\fP ()"
.br
.ti -1c
.RI "int \fBconnect\fP ()"
.br
.ti -1c
.RI "uint16_t \fBgetLogInterval\fP ()"
.br
.ti -1c
.RI "void \fBprintConf\fP ()"
.br
.ti -1c
.RI "void \fBsleep\fP (int interval)"
.br
.ti -1c
.RI "String \fBreadSensors\fP ()"
.br
.ti -1c
.RI "String \fBuserData\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBCoolFileSystem\fP \fBfileSystem\fP"
.br
.ti -1c
.RI "\fBCoolBoardSensors\fP \fBcoolBoardSensors\fP"
.br
.ti -1c
.RI "\fBCoolBoardLed\fP \fBcoolBoardLed\fP"
.br
.ti -1c
.RI "\fBCoolTime\fP \fBrtc\fP"
.br
.ti -1c
.RI "\fBCoolWifi\fP \fBwifiManager\fP"
.br
.ti -1c
.RI "\fBCoolMQTT\fP \fBmqtt\fP"
.br
.ti -1c
.RI "\fBJetpack\fP \fBjetPack\fP"
.br
.ti -1c
.RI "\fBIrene3000\fP \fBirene3000\fP"
.br
.ti -1c
.RI "\fBExternalSensors\fP \fBexternalSensors\fP"
.br
.ti -1c
.RI "bool \fBuserActive\fP =0"
.br
.ti -1c
.RI "bool \fBireneActive\fP =0"
.br
.ti -1c
.RI "bool \fBjetpackActive\fP =0"
.br
.ti -1c
.RI "bool \fBexternalSensorsActive\fP =0"
.br
.ti -1c
.RI "bool \fBsleepActive\fP =0"
.br
.ti -1c
.RI "unsigned long \fBlogInterval\fP =1000"
.br
.ti -1c
.RI "int \fBserverTimeOut\fP =180"
.br
.ti -1c
.RI "String \fBdata\fP =''"
.br
.ti -1c
.RI "String \fBanswer\fP =''"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class manages the \fBCoolBoard\fP and all of Its functions\&. 
.PP
Definition at line 33 of file CoolBoard\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "void CoolBoard::begin ()"
\fBCoolBoard::begin()\fP: This method is provided to configure and start the used CoolKit Parts\&. It also starts the first connection try If Serial is enabled,it prints the configuration of the used parts\&. 
.PP
Definition at line 37 of file CoolBoard\&.cpp\&.
.PP
References Jetpack::begin(), CoolMQTT::begin(), ExternalSensors::begin(), CoolWifi::begin(), CoolBoardSensors::begin(), CoolTime::begin(), Irene3000::begin(), CoolBoardLed::blink(), Jetpack::config(), ExternalSensors::config(), CoolWifi::config(), CoolMQTT::config(), CoolTime::config(), Irene3000::config(), CoolBoardSensors::config(), connect(), coolBoardLed, coolBoardSensors, externalSensors, externalSensorsActive, CoolBoardLed::fadeOut(), irene3000, ireneActive, jetPack, jetpackActive, mqtt, CoolBoardLed::printConf(), Jetpack::printConf(), ExternalSensors::printConf(), CoolMQTT::printConf(), CoolWifi::printConf(), CoolTime::printConf(), Irene3000::printConf(), CoolBoardSensors::printConf(), rtc, wifiManager, and CoolBoardLed::write()\&.
.PP
.nf
38 {
39 
40 #if DEBUG == 1
41 
42     Serial\&.println( F("Starting the CoolBoard  ")  );
43     Serial\&.println( F("Entering CoolBoard\&.begin() ")  );
44     Serial\&.println();
45 #endif  
46     coolBoardLed\&.printConf();
47     delay(100);
48     
49     coolBoardLed\&.write(255,128,0);//orange
50     
51     coolBoardSensors\&.config();
52     coolBoardSensors\&.begin();
53     coolBoardSensors\&.printConf();
54     delay(100);
55     
56     wifiManager\&.config();
57     wifiManager\&.begin();
58     wifiManager\&.printConf();
59     delay(100);
60 
61     mqtt\&.config();
62     mqtt\&.begin();
63     mqtt\&.printConf();
64     delay(100);
65 
66     if (jetpackActive)
67     {
68         jetPack\&.config();
69         jetPack\&.begin();
70         jetPack\&.printConf();
71         delay(100);
72     }
73 
74     if (ireneActive)
75     {
76         irene3000\&.config();
77         irene3000\&.begin();
78         irene3000\&.printConf();
79         delay(100);
80     }
81 
82     if (externalSensorsActive)
83     {
84         externalSensors\&.config();
85         externalSensors\&.begin();
86         externalSensors\&.printConf();
87         delay(100);
88     }
89     
90     coolBoardLed\&.fadeOut(255,128,0,0\&.5);//orange
91 
92     this->connect();
93     delay(100);
94 
95     rtc\&.config();
96     rtc\&.begin();
97     rtc\&.printConf();
98     delay(100);
99     
100     coolBoardLed\&.blink(0,255,0,0\&.5);//green
101 
102 }
.fi
.SS "bool CoolBoard::config ()"
\fBCoolBoard::config()\fP: This method is provided to configure the \fBCoolBoard\fP : -log interval -irene3000 activated/deactivated -jetpack activated/deactivated -external Sensors activated/deactivated -mqtt server timeout
.PP
\fBReturns:\fP
.RS 4
true if configuration is done, false otherwise 
.RE
.PP

.PP
Definition at line 483 of file CoolBoard\&.cpp\&.
.PP
References CoolFileSystem::begin(), CoolBoardLed::begin(), CoolBoardLed::blink(), CoolBoardLed::config(), coolBoardLed, externalSensorsActive, CoolBoardLed::fadeIn(), CoolBoardLed::fadeOut(), fileSystem, ireneActive, jetpackActive, logInterval, serverTimeOut, sleepActive, CoolBoardLed::strobe(), and userActive\&.
.PP
.nf
484 {
485 
486 #if DEBUG == 1
487 
488     Serial\&.println( F("Entering CoolBoard\&.config() ") );
489     Serial\&.println();
490 
491 #endif
492 
493     //open file system
494     fileSystem\&.begin();
495     
496     //start the led
497     coolBoardLed\&.config();
498     coolBoardLed\&.begin();
499     coolBoardLed\&.fadeIn(243,171,46,0\&.5);//shade of orange     
500 
501     
502     //open configuration file
503     File configFile = SPIFFS\&.open("/coolBoardConfig\&.json", "r");
504     
505     if (!configFile)
506 
507     {
508     
509     #if DEBUG == 1
510 
511         Serial\&.println( F("failed to read /coolBoardConfig\&.json  ") );
512 
513     #endif
514         coolBoardLed\&.blink(255,0,0,0\&.5);//shade of red        
515         return(false);
516     }
517 
518     else
519     {
520         size_t size = configFile\&.size();
521 
522         // Allocate a buffer to store contents of the file\&.
523         std::unique_ptr < char[] > buf(new char[size]);
524 
525         configFile\&.readBytes(buf\&.get(), size);
526 
527         DynamicJsonBuffer jsonBuffer;
528 
529         JsonObject & json = jsonBuffer\&.parseObject(buf\&.get());
530 
531         if (!json\&.success())
532         {
533         
534         #if DEBUG == 1
535 
536             Serial\&.println( F("failed to parse CoolBoard Config json object ") );
537     
538         #endif
539             coolBoardLed\&.blink(255,0,0,0\&.5);//shade of red        
540             return(false);
541         }
542 
543         else
544         {   
545         
546         #if DEBUG == 1
547             
548             Serial\&.println( F("configuration json : ") );
549             json\&.printTo(Serial);
550             Serial\&.println();
551             
552             Serial\&.print(F("jsonBuffer size : "));
553             Serial\&.print(jsonBuffer\&.size());
554             Serial\&.println();
555 
556         #endif
557             
558             //parsing userActive Key
559             if (json["userActive"]\&.success())
560             {
561                 this -> userActive = json["userActive"];
562             }
563 
564             else
565             {
566                 this -> userActive = this -> userActive;
567             }
568             json["userActive"] = this -> userActive;
569 
570             //parsing logInterval key
571             if (json["logInterval"]\&.success())
572             {
573                 this -> logInterval = json["logInterval"];
574             }
575             else
576             {
577                 this -> logInterval = this -> logInterval;
578             }
579             json["logInterval"] = this -> logInterval;
580             
581             //parsing ireneActive key           
582             if (json["ireneActive"]\&.success())
583             {
584                 this -> ireneActive = json["ireneActive"];
585             }
586             else
587             {
588                 this -> ireneActive = this -> ireneActive;
589             }
590             json["ireneActive"] = this -> ireneActive;
591             
592             //parsing jetpackActive key
593             if (json["jetpackActive"]\&.success())
594             {
595                 this -> jetpackActive = json["jetpackActive"];
596             }
597             else
598             {
599                 this -> jetpackActive = this -> jetpackActive;
600             }
601             json["jetpackActive"] = this -> jetpackActive;
602 
603             //parsing externalSensorsActive key
604             if (json["externalSensorsActive"]\&.success())
605             {
606                 this -> externalSensorsActive = json["externalSensorsActive"];
607             }
608             else
609             {
610                 this -> externalSensorsActive = this -> externalSensorsActive;
611             }
612             json["externalSensorsActive"] = this -> externalSensorsActive;
613 
614             //parsing serverTimeOut key
615             if (json["serverTimeOut"]\&.success())
616             {
617                 this -> serverTimeOut = json["serverTimeOut"];
618             }
619             else
620             {
621                 this -> serverTimeOut = this -> serverTimeOut;
622             }
623             json["serverTimeOut"] = this -> serverTimeOut;
624             
625             //parsing sleepActive key
626             if (json["sleepActive"]\&.success())
627             {
628                 this -> sleepActive = json["sleepActive"];
629             }
630             else
631             {
632                 this -> sleepActive = this -> sleepActive;
633             }
634             json["sleepActive"] = this -> sleepActive;
635 
636             //saving the current/correct configuration
637             configFile\&.close();
638             configFile = SPIFFS\&.open("/coolBoardConfig\&.json", "w");
639             if (!configFile)
640             {
641             
642             #if DEBUG == 1
643 
644                 Serial\&.println( F("failed to write to /coolBoardConfig\&.json") );
645                 Serial\&.println();
646             
647             #endif
648                 coolBoardLed\&.blink(255,0,0,0\&.5);//shade of red        
649                 return(false);
650             }
651 
652             json\&.printTo(configFile);
653             configFile\&.close();
654             return(true);
655         }
656     }
657 
658     coolBoardLed\&.strobe(243,171,46,0\&.5);//shade of orange
659     
660     coolBoardLed\&.fadeOut(243,171,46,0\&.5);//shade of orange                
661 }
.fi
.SS "int CoolBoard::connect ()"
\fBCoolBoard::connect()\fP: This method is provided to manage the network connection and the mqtt connection\&.
.PP
\fBReturns:\fP
.RS 4
mqtt client state 
.RE
.PP

.PP
Definition at line 111 of file CoolBoard\&.cpp\&.
.PP
References CoolBoardLed::blink(), CoolMQTT::connect(), CoolWifi::connect(), coolBoardLed, getLogInterval(), mqtt, CoolWifi::state(), CoolMQTT::state(), wifiManager, and CoolBoardLed::write()\&.
.PP
Referenced by begin()\&.
.PP
.nf
112 {
113 
114 #if DEBUG == 1  
115 
116     Serial\&.println( F("Entering CoolBoard\&.connect ") );
117     Serial\&.println();
118     Serial\&.println( F("Connecting the CoolBoard  ") );
119     delay(100);
120 
121 #endif
122     coolBoardLed\&.write(0,0,255);//blue
123 
124     if (wifiManager\&.state() != WL_CONNECTED)
125     {       
126     
127     #if DEBUG == 1      
128 
129         Serial\&.println( F("CoolBoard not connected to WiFi ") );
130         Serial\&.println( F("Launching CoolWifi") );
131         Serial\&.println();
132 
133     #endif
134         wifiManager\&.connect();
135         delay(100);
136     }
137 
138 
139     
140     if (mqtt\&.state() != 0)
141     {   
142     
143     #if DEBUG == 1  
144     
145         Serial\&.println( F("CoolBoard not connected to MQTT ") );
146         Serial\&.println( F("Launching mqtt\&.connect()") );
147         Serial\&.println();
148 
149     #endif  
150     
151         mqtt\&.connect(this -> getLogInterval());
152         delay(100);
153         
154     }
155     
156 #if DEBUG == 1
157 
158     Serial\&.println( F("mqtt state is :") );
159     Serial\&.println(mqtt\&.state());
160     Serial\&.println();
161     delay(100);
162 
163 #endif
164 
165     coolBoardLed\&.blink(0,0,255,0\&.5);//blue
166 
167     return(mqtt\&.state());
168 }
.fi
.SS "uint16_t CoolBoard::getLogInterval ()"
\fBCoolBoard::getLogInterval()\fP: This method is provided to get the log interval
.PP
\fBReturns:\fP
.RS 4
interval value in ms 
.RE
.PP

.PP
Definition at line 861 of file CoolBoard\&.cpp\&.
.PP
References logInterval\&.
.PP
Referenced by connect(), and onLineMode()\&.
.PP
.nf
862 {
863 
864 #if DEBUG == 1
865 
866     Serial\&.println( F("Entering CoolBoard\&.getLogInterval() ") );
867     Serial\&.println();
868     Serial\&.println( F("log Interval is :") );
869     Serial\&.println(logInterval);
870     Serial\&.println();
871 
872 #endif
873 
874     return(this -> logInterval);
875 }
.fi
.SS "void CoolBoard::offLineMode ()"
CoolBoard::offlineMode(): This method is provided to manage the offLine mode: -read sensors -do actions -save data in the file system 
.PP
Definition at line 378 of file CoolBoard\&.cpp\&.
.PP
References CoolBoardLed::blink(), coolBoardLed, data, Jetpack::doAction(), CoolBoardLed::fade(), CoolBoardLed::fadeIn(), CoolBoardLed::fadeOut(), fileSystem, jetPack, jetpackActive, readSensors(), CoolFileSystem::saveSensorData(), userActive, and userData()\&.
.PP
.nf
379 {
380     coolBoardLed\&.fade(51,100,50,0\&.5);//dark shade of green    
381 #if DEBUG == 1  
382     
383     Serial\&.println( F("Entering off line mode ") );  
384     
385 #endif
386 
387     //read user data if user is active
388     if(userActive)
389     {
390 
391         coolBoardLed\&.fadeIn(245,237,27,0\&.5);//shade of yellow
392 
393     #if DEBUG == 1
394         
395         Serial\&.println( F("User is Active") );
396         Serial\&.println( F("Collecting User's data ( mac,username,timeStamp )") );
397         Serial\&.println();
398 
399     #endif
400 
401         coolBoardLed\&.blink(245,237,27,0\&.5);//shade of yellow  
402 
403         //reading user data
404         data=this->userData();//{"":"","":"","",""}
405 
406         //formatting json 
407         data\&.setCharAt( data\&.lastIndexOf('}') , ',');//{"":"","":"","","",
408         
409                 
410         //read sensors data
411     #if DEBUG == 1
412 
413         Serial\&.println( F("Collecting sensors data ") );
414         Serial\&.println();
415 
416     #endif
417 
418         data+=this->readSensors();//{"":"","":"","","",{\&.\&.\&.\&.\&.\&.\&.}
419 
420         
421 
422         //formatting json correctly
423         data\&.remove(data\&.lastIndexOf('{'), 1);//{"":"","":"","","",\&.\&.\&.\&.\&.\&.\&.}
424 
425         coolBoardLed\&.fadeOut(245,237,27,0\&.5);//shade of yellow
426                 
427     }   
428     else
429     {
430         //read sensors data
431     #if DEBUG == 1
432 
433         Serial\&.println( F("Collecting sensors data ") );
434         Serial\&.println();
435 
436     #endif
437 
438         coolBoardLed\&.fade(190,100,150,0\&.5);//shade of violet      
439 
440         data=this->readSensors();//{\&.\&.,\&.\&.,\&.\&.}
441     }
442 
443     coolBoardLed\&.fade(51,100,50,0\&.5);//dark shade of green    
444 
445     //do action
446     if (jetpackActive)
447     {
448 
449     #if DEBUG == 1
450 
451         Serial\&.println( F("jetpack is Active ") );
452         Serial\&.println( F("jetpack doing action ") );
453         Serial\&.println();
454     
455     #endif
456         coolBoardLed\&.fade(100,100,150,0\&.5);//dark shade of blue   
457     
458         jetPack\&.doAction( data\&.c_str() );
459     }
460     
461     coolBoardLed\&.fade(51,100,50,0\&.5);//dark shade of green    
462     
463     //saving data in the file system
464     
465     fileSystem\&.saveSensorData( data\&.c_str() );
466 
467     coolBoardLed\&.fadeOut(51,100,50,0\&.5);//dark shade of green 
468 
469 }
.fi
.SS "void CoolBoard::onLineMode ()"
\fBCoolBoard::onLineMode()\fP: This method is provided to manage the online mode: -update clock -read sensor -do actions -publish data -read answer -update config 
.PP
Definition at line 180 of file CoolBoard\&.cpp\&.
.PP
References answer, CoolBoardLed::blink(), coolBoardLed, data, Jetpack::doAction(), CoolBoardLed::fade(), CoolBoardLed::fadeIn(), CoolBoardLed::fadeOut(), fileSystem, getLogInterval(), CoolFileSystem::getSensorSavedData(), CoolFileSystem::isDataSaved(), jetPack, jetpackActive, mqtt, CoolMQTT::mqttLoop(), CoolMQTT::publish(), CoolMQTT::read(), readSensors(), rtc, sleep(), sleepActive, CoolBoardLed::strobe(), CoolTime::update(), update(), userActive, and userData()\&.
.PP
.nf
181 {
182 
183     coolBoardLed\&.fadeIn(128,255,50,0\&.5);//shade of green
184 
185 #if DEBUG == 1
186 
187     Serial\&.println( F("Entering CoolBoard\&.onLineMode() ") );
188     Serial\&.println();
189 
190 #endif
191 
192     data="";
193     answer="";
194 
195     //send saved data if any
196     if(fileSystem\&.isDataSaved())
197     {
198 
199         coolBoardLed\&.fadeIn(128,128,255,0\&.5);//shade of blue
200 
201     #if DEBUG == 1
202 
203         Serial\&.println( F("There is data saved on the File System") );
204         Serial\&.println( F("Sending saved data over MQTT ") );
205         Serial\&.println();
206     
207     #endif  
208         coolBoardLed\&.strobe(128,128,255,0\&.5);//shade of blue 
209 
210         mqtt\&.publish("sending saved data");
211         mqtt\&.mqttLoop();
212 
213         data+=fileSystem\&.getSensorSavedData();//{\&.\&.,\&.\&.,\&.\&.}
214 
215         //formatting data:
216         String jsonData = "{\"state\":{\"reported\":";
217         jsonData += data; // {"state":{"reported":{\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}
218         jsonData += " } }"; // {"state":{"reported":{\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}  } }
219         
220         coolBoardLed\&.strobe(128,128,255,0\&.5);//shade of blue
221         
222         mqtt\&.publish( data\&.c_str() );
223         mqtt\&.mqttLoop();
224         
225         coolBoardLed\&.fadeOut(128,128,255,0\&.5);//shade of blue     
226     
227     #if DEBUG == 1
228 
229         Serial\&.println( F("Saved data sent ") );
230         Serial\&.println();
231     
232     #endif
233 
234     }
235 
236     coolBoardLed\&.blink(128,255,50,0\&.5);//shade of green
237 
238     //clock update
239     rtc\&.update();
240 
241     //read user data if user is active
242     if(userActive)
243     {
244         coolBoardLed\&.fadeIn(245,237,27,0\&.5);//shade of yellow
245     
246     #if DEBUG == 1
247 
248         Serial\&.println( F("User is Active") );
249         Serial\&.println( F("Collecting User's data ( mac,username,timeStamp )") );
250         Serial\&.println();
251     
252     #endif  
253         coolBoardLed\&.blink(245,237,27,0\&.5);//shade of yellow  
254 
255         //reading user data
256         data=this->userData();//{"":"","":"","",""}
257 
258         //formatting json 
259         data\&.setCharAt( data\&.lastIndexOf('}') , ',');//{"":"","":"","","",
260                 
261         //read sensors data
262     #if DEBUG == 1
263 
264         Serial\&.println( F("Collecting sensors data ") );
265         Serial\&.println();
266     
267     #endif
268 
269         data+=this->readSensors();//{"":"","":"","","",{\&.\&.\&.\&.\&.\&.\&.}       
270 
271         //formatting json correctly
272         data\&.remove(data\&.lastIndexOf('{'), 1);//{"":"","":"","","",\&.\&.\&.\&.\&.\&.\&.}
273         
274         coolBoardLed\&.fadeOut(245,237,27,0\&.5);//shade of yellow
275                 
276     }   
277     else
278     {
279         //read sensors data
280     #if DEBUG == 1
281 
282         Serial\&.println( F("Collecting sensors data ") );
283         Serial\&.println();
284     
285     #endif
286         coolBoardLed\&.fade(190,100,150,0\&.5);//shade of violet      
287         data=this->readSensors();//{\&.\&.,\&.\&.,\&.\&.}
288     }
289     
290     //do action
291     if (jetpackActive)
292     {
293     
294     #if DEBUG ==1
295 
296         Serial\&.println( F("jetpack is Active ") );
297         Serial\&.println( F("jetpack doing action ") );
298         Serial\&.println();
299 
300     #endif
301         coolBoardLed\&.fade(100,100,150,0\&.5);//dark shade of blue       
302         jetPack\&.doAction(data\&.c_str());
303     }
304     
305     coolBoardLed\&.fadeIn(128,255,50,0\&.5);//shade of green
306 
307     //formatting data:
308     String jsonData = "{\"state\":{\"reported\":";
309     jsonData += data; // {"state":{"reported":{\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}
310     jsonData += " } }"; // {"state":{"reported":{\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}  } }
311     
312     //mqtt client loop to allow data handling
313     mqtt\&.mqttLoop();
314 
315     coolBoardLed\&.blink(128,255,50,0\&.5);//shade of green   
316 
317     //read mqtt answer
318     answer = mqtt\&.read();
319 
320 #if DEBUG == 1 
321 
322     Serial\&.println( F("checking if there's an MQTT message ")  );
323     Serial\&.println( F("answer is : ") ); 
324     Serial\&.println(answer);  
325     Serial\&.println();
326 
327 #endif  
328 
329     coolBoardLed\&.fadeOut(128,255,50,0\&.5);//shade of green 
330 
331     //check if the configuration needs update 
332     //and update it if needed 
333     this -> update(answer\&.c_str());
334     
335     coolBoardLed\&.fadeIn(128,255,50,0\&.5);//shade of green  
336 
337     //publishing data   
338     if( this->sleepActive==0)   
339     {   
340         coolBoardLed\&.strobe(255,0,230,0\&.5);//shade of pink
341     
342         mqtt\&.publish( jsonData\&.c_str(), this->getLogInterval() );
343         mqtt\&.mqttLoop();
344     
345     }
346     else
347     {
348         coolBoardLed\&.strobe(230,255,0,0\&.5);//shade of yellow  
349 
350         mqtt\&.publish(jsonData\&.c_str());       
351         mqtt\&.mqttLoop();
352         answer = mqtt\&.read();
353         this ->update(answer\&.c_str());
354         this->sleep( this->getLogInterval() ) ;
355     }
356 
357     coolBoardLed\&.fadeOut(128,255,50,0\&.5);//shade of green     
358 
359     mqtt\&.mqttLoop();
360 
361     //read mqtt answer
362     answer = mqtt\&.read();
363     this -> update(answer\&.c_str());  
364 
365     coolBoardLed\&.blink(128,255,50,0\&.5);//shade of green   
366 
367 
368 }
.fi
.SS "void CoolBoard::printConf ()"
\fBCoolBoard::printConf()\fP: This method is provided to print the configuration to the Serial Monitor\&. 
.PP
Definition at line 670 of file CoolBoard\&.cpp\&.
.PP
References externalSensorsActive, ireneActive, jetpackActive, logInterval, serverTimeOut, sleepActive, and userActive\&.
.PP
.nf
671 {
672 
673 #if DEBUG == 1
674     
675     Serial\&.println( F("Entering CoolBoard\&.printConf() ") );
676     Serial\&.println();
677 
678 #endif
679 
680     Serial\&.println("Printing Cool Board Configuration ");
681     Serial\&.print("log interval       : ");
682     Serial\&.println(this->logInterval);
683 
684     Serial\&.print("irene active       : ");
685     Serial\&.println(this->ireneActive);
686 
687     Serial\&.print("jetpack active     : ");
688     Serial\&.println(this->jetpackActive);
689 
690     Serial\&.print("external sensors active    : ");
691     Serial\&.println(this->externalSensorsActive);
692 
693     Serial\&.print("access point timeOut   : ");
694     Serial\&.println(this->serverTimeOut);
695 
696     Serial\&.print("sleept active      : ");
697     Serial\&.println(this->sleepActive);
698 
699     Serial\&.print("user active        : ");
700     Serial\&.println(this->userActive);
701 
702     Serial\&.println();
703 
704 
705 
706 
707 }
.fi
.SS "String CoolBoard::readSensors ()"
\fBCoolBoard::readSensors()\fP: This method is provided to read and format all the sensors data in a single json\&.
.PP
\fBReturns:\fP
.RS 4
json string of all the sensors read\&. 
.RE
.PP

.PP
Definition at line 885 of file CoolBoard\&.cpp\&.
.PP
References coolBoardLed, coolBoardSensors, externalSensors, externalSensorsActive, CoolBoardLed::fadeIn(), CoolBoardLed::fadeOut(), CoolTime::getTimeDate(), irene3000, ireneActive, ExternalSensors::read(), CoolBoardSensors::read(), Irene3000::read(), rtc, and CoolBoardLed::strobe()\&.
.PP
Referenced by offLineMode(), and onLineMode()\&.
.PP
.nf
886 {
887 
888     coolBoardLed\&.fadeIn(128,255,0,0\&.5);//light shade of green
889                 
890 #if DEBUG == 1
891 
892     Serial\&.println( F("Entering CoolBoard\&.readSensors()") );
893     Serial\&.println();
894 
895 #endif
896     coolBoardLed\&.strobe(128,255,0,0\&.5);//light shade of green
897 
898     String sensorsData;
899 
900     sensorsData = coolBoardSensors\&.read(); // {\&.\&.,\&.\&.,\&.\&.}
901     
902     if (externalSensorsActive)
903     {
904         sensorsData += externalSensors\&.read(); // {\&.\&.,\&.\&.,\&.\&.}{\&.\&.,\&.\&.}
905 
906         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf('}'), ','); // {\&.\&.,\&.\&.,\&.\&.}{\&.\&.,\&.\&.,
907         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf('{'), ','); // {\&.\&.,\&.\&.,\&.\&.},\&.\&.,\&.\&.,
908         sensorsData\&.remove(sensorsData\&.lastIndexOf('}'), 1); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,
909         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf(','), '}'); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}
910 
911     }
912     if (ireneActive)
913     {
914         sensorsData += irene3000\&.read(); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}{\&.\&.,\&.\&.,\&.\&.}
915 
916         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf('}'), ','); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}{\&.\&.,\&.\&.,\&.\&.,
917         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf('{'), ','); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.},\&.\&.,\&.\&.,\&.\&.,
918         sensorsData\&.remove(sensorsData\&.lastIndexOf('}'), 1); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,
919         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf(','), '}'); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}        
920         
921         
922     }
923 
924     //getting Hour:
925     tmElements_t tm;
926     tm=rtc\&.getTimeDate();
927     
928     //adding Hour
929     sensorsData\&.remove(sensorsData\&.lastIndexOf('}'), 1); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&., 
930     sensorsData+=",\"hour\":";  
931     sensorsData+=tm\&.Hour;
932     sensorsData+="}";
933     
934 #if DEBUG == 1
935     Serial\&.println();
936     Serial\&.println( F("sensors data is ") );
937     Serial\&.println(sensorsData);
938     Serial\&.println();
939 
940 #endif
941     coolBoardLed\&.fadeOut(128,255,0,0\&.5);//light shade of green
942 
943     return(sensorsData);
944 
945 }
.fi
.SS "void CoolBoard::sleep (int interval)"
\fBCoolBoard::sleep(int interval)\fP: This method is provided to allow the board to enter deepSleep mode for a period of time equal to interval in ms 
.PP
Definition at line 1001 of file CoolBoard\&.cpp\&.
.PP
Referenced by onLineMode()\&.
.PP
.nf
1002 {
1003 
1004 #if DEBUG == 1
1005 
1006     Serial\&.println( F("Entering CoolBoard\&.sleep() ") );
1007     Serial\&.print( F("going to sleep for ") );
1008     Serial\&.print(interval);
1009     Serial\&.println(F("ms") );
1010     Serial\&.println();
1011 
1012 #endif
1013 
1014     ESP\&.deepSleep ( ( interval * 1000 ), WAKE_RF_DEFAULT) ;
1015 }
.fi
.SS "void CoolBoard::update (const char * answer)"
CoolBoard::update(mqtt answer): This method is provided to handle the configuration update of the different parts 
.PP
Definition at line 714 of file CoolBoard\&.cpp\&.
.PP
References coolBoardLed, CoolBoardLed::fadeIn(), CoolBoardLed::fadeOut(), fileSystem, mqtt, CoolMQTT::mqttLoop(), CoolMQTT::publish(), CoolBoardLed::strobe(), and CoolFileSystem::updateConfigFiles()\&.
.PP
Referenced by onLineMode()\&.
.PP
.nf
715 {
716     coolBoardLed\&.fadeIn(153,76,0,0\&.5);//shade of brown        
717 
718 #if DEBUG == 1
719 
720     Serial\&.println( F("Entering CoolBoard\&.update() ") );
721     Serial\&.println();
722     Serial\&.println( F("message is : ") );
723     Serial\&.println(answer);
724     Serial\&.println();
725 
726 #endif
727 
728     DynamicJsonBuffer jsonBuffer;
729     JsonObject & root = jsonBuffer\&.parseObject(answer);
730     JsonObject & stateDesired = root["state"];
731 
732 #if DEBUG == 1
733 
734     Serial\&.println( F("root json : ") );
735     root\&.printTo(Serial);
736     Serial\&.println();
737 
738     Serial\&.println(F("stateDesired json : "));
739     stateDesired\&.printTo(Serial);
740     Serial\&.println();
741     
742     Serial\&.print(F("jsonBuffer size : "));
743     Serial\&.println(jsonBuffer\&.size());
744 
745 #endif
746 
747     if (stateDesired\&.success())
748     {
749     
750     #if DEBUG == 1
751 
752         Serial\&.println( F("update message parsing : success") );
753         Serial\&.println();
754     
755     #endif
756 
757             String answerDesired;
758         
759             stateDesired\&.printTo(answerDesired);
760             
761         #if DEBUG == 1      
762         
763             Serial\&.println( F("update is ok ") );
764             Serial\&.println( F("desired update is : ") );         
765             Serial\&.println(answerDesired);
766             Serial\&.println("json size is : ");
767             Serial\&.println(jsonBuffer\&.size() ) ;              
768             Serial\&.println();
769 
770         
771         #endif
772             //saving the new configuration
773             fileSystem\&.updateConfigFiles(answerDesired);
774 
775             //applying the configuration    
776             /*this -> config();
777 
778             coolBoardSensors\&.config();
779 
780             rtc\&.config();
781 
782             coolBoardLed\&.config();
783             
784             wifiManager\&.config();
785 
786             mqtt\&.config();
787 
788             if (jetpackActive)
789             {
790                 jetPack\&.config();
791             }
792 
793             if (ireneActive)
794             {
795                 irene3000\&.config();
796             }
797 
798             if (externalSensorsActive)
799             {
800                 externalSensors\&.config();
801             }
802 
803             delay(10);
804             wifiManager\&.begin();
805             delay(100);
806             mqtt\&.begin();*/
807 
808                 //answering the update msg:
809             //reported = received configuration
810             //desired=null
811         
812             String updateAnswer;
813             String tempString;
814             
815             stateDesired\&.printTo(tempString);
816             updateAnswer="{\"state\":{\"reported\":";
817             updateAnswer+=tempString;
818             updateAnswer+=",\"desired\":null}}";
819 
820         #if DEBUG == 1
821 
822             Serial\&.println( F("preparing answer message ") );
823             Serial\&.println();
824             Serial\&.println( F("updateAnswer : ") );
825             Serial\&.println(updateAnswer);
826         
827         #endif  
828 
829             mqtt\&.publish(updateAnswer\&.c_str());
830             
831             mqtt\&.mqttLoop();
832 
833             delay(10);
834             
835             //restart the esp to apply the config
836             ESP\&.restart();
837     }
838     else
839     {
840     
841     #if DEBUG == 1
842 
843         Serial\&.println( F("Failed to parse update message( OR no message received )") );
844         Serial\&.println();
845     
846     #endif
847     
848     }
849 
850     coolBoardLed\&.strobe(153,76,0,0\&.5);//shade of brown
851     coolBoardLed\&.fadeOut(153,76,0,0\&.5);//shade of brown                               
852 }
.fi
.SS "String CoolBoard::userData ()"
\fBCoolBoard::userData()\fP: This method is provided to return the user's data\&.
.PP
\fBReturns:\fP
.RS 4
json string of the user's data 
.RE
.PP

.PP
Definition at line 954 of file CoolBoard\&.cpp\&.
.PP
References CoolTime::getESDate(), CoolMQTT::getUser(), mqtt, and rtc\&.
.PP
Referenced by offLineMode(), and onLineMode()\&.
.PP
.nf
955 {
956 
957 #if DEBUG == 1
958 
959     Serial\&.println( F("Entering CoolBoard\&.userData() ") );
960     Serial\&.println();
961 
962 #endif
963 
964     String tempMAC = WiFi\&.macAddress();
965 
966     tempMAC\&.replace(":", "");
967 
968     String userJson = "{\"user\":\"";
969 
970     userJson += mqtt\&.getUser();
971 
972     userJson += "\",\"timestamp\":\"";
973 
974     userJson += rtc\&.getESDate(); // "timestamp":"20yy-mm-ddThh:mm:ssZ"
975 
976     userJson += "\",\"mac\":\"";
977 
978     userJson += tempMAC;
979 
980     userJson += "\"}";
981 
982 #if DEBUG == 1
983 
984     Serial\&.println( F("userData is : ") );
985     Serial\&.println(userJson);
986     Serial\&.println();
987 
988 #endif  
989     
990     return(userJson);
991     
992 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "String CoolBoard::answer =''\fC [private]\fP"

.PP
Definition at line 97 of file CoolBoard\&.h\&.
.PP
Referenced by onLineMode()\&.
.SS "\fBCoolBoardLed\fP CoolBoard::coolBoardLed\fC [private]\fP"

.PP
Definition at line 67 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), config(), connect(), offLineMode(), onLineMode(), readSensors(), and update()\&.
.SS "\fBCoolBoardSensors\fP CoolBoard::coolBoardSensors\fC [private]\fP"

.PP
Definition at line 65 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), and readSensors()\&.
.SS "String CoolBoard::data =''\fC [private]\fP"

.PP
Definition at line 95 of file CoolBoard\&.h\&.
.PP
Referenced by offLineMode(), and onLineMode()\&.
.SS "\fBExternalSensors\fP CoolBoard::externalSensors\fC [private]\fP"

.PP
Definition at line 79 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), and readSensors()\&.
.SS "bool CoolBoard::externalSensorsActive =0\fC [private]\fP"

.PP
Definition at line 87 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), config(), printConf(), and readSensors()\&.
.SS "\fBCoolFileSystem\fP CoolBoard::fileSystem\fC [private]\fP"

.PP
Definition at line 63 of file CoolBoard\&.h\&.
.PP
Referenced by config(), offLineMode(), onLineMode(), and update()\&.
.SS "\fBIrene3000\fP CoolBoard::irene3000\fC [private]\fP"

.PP
Definition at line 77 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), and readSensors()\&.
.SS "bool CoolBoard::ireneActive =0\fC [private]\fP"

.PP
Definition at line 83 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), config(), printConf(), and readSensors()\&.
.SS "\fBJetpack\fP CoolBoard::jetPack\fC [private]\fP"

.PP
Definition at line 75 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), offLineMode(), and onLineMode()\&.
.SS "bool CoolBoard::jetpackActive =0\fC [private]\fP"

.PP
Definition at line 85 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), config(), offLineMode(), onLineMode(), and printConf()\&.
.SS "unsigned long CoolBoard::logInterval =1000\fC [private]\fP"

.PP
Definition at line 91 of file CoolBoard\&.h\&.
.PP
Referenced by config(), getLogInterval(), and printConf()\&.
.SS "\fBCoolMQTT\fP CoolBoard::mqtt\fC [private]\fP"

.PP
Definition at line 73 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), connect(), onLineMode(), update(), and userData()\&.
.SS "\fBCoolTime\fP CoolBoard::rtc\fC [private]\fP"

.PP
Definition at line 69 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), onLineMode(), readSensors(), and userData()\&.
.SS "int CoolBoard::serverTimeOut =180\fC [private]\fP"

.PP
Definition at line 93 of file CoolBoard\&.h\&.
.PP
Referenced by config(), and printConf()\&.
.SS "bool CoolBoard::sleepActive =0\fC [private]\fP"

.PP
Definition at line 89 of file CoolBoard\&.h\&.
.PP
Referenced by config(), onLineMode(), and printConf()\&.
.SS "bool CoolBoard::userActive =0\fC [private]\fP"

.PP
Definition at line 81 of file CoolBoard\&.h\&.
.PP
Referenced by config(), offLineMode(), onLineMode(), and printConf()\&.
.SS "\fBCoolWifi\fP CoolBoard::wifiManager\fC [private]\fP"

.PP
Definition at line 71 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), and connect()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolAPI from the source code\&.
