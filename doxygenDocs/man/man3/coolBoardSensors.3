.TH "CoolBoardSensors" 3 "Wed Aug 2 2017" "CoolAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoolBoardSensors \- This class handles the On-Board Sensors\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolBoardSensors\&.h>\fP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBairActive\fP"
.br
.ti -1c
.RI "struct \fBlightActive\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBCoolBoardSensors\fP ()"
.br
.ti -1c
.RI "void \fBbegin\fP ()"
.br
.ti -1c
.RI "String \fBread\fP ()"
.br
.ti -1c
.RI "void \fBallActive\fP ()"
.br
.ti -1c
.RI "void \fBinitReadI2C\fP ()"
.br
.ti -1c
.RI "void \fBstopReadI2C\fP ()"
.br
.ti -1c
.RI "void \fBend\fP ()"
.br
.ti -1c
.RI "bool \fBconfig\fP ()"
.br
.ti -1c
.RI "void \fBprintConf\fP ()"
.br
.ti -1c
.RI "void \fBsetEnvSensorSettings\fP (uint8_t commInterface=I2C_MODE, uint8_t I2CAddress=0x76, uint8_t runMode=3, uint8_t tStandby=0, uint8_t filter=0, uint8_t tempOverSample=1, uint8_t pressOverSample=1, uint8_t humidOverSample=1)"
.br
.ti -1c
.RI "float \fBreadVBat\fP ()"
.br
.ti -1c
.RI "float \fBreadMoisture\fP ()"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "SI114X \fBlightSensor\fP = SI114X()"
.br
.ti -1c
.RI "BME280 \fBenvSensor\fP"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "struct \fBCoolBoardSensors::lightActive\fP \fBlightDataActive\fP"
.br
.ti -1c
.RI "struct \fBCoolBoardSensors::airActive\fP \fBairDataActive\fP"
.br
.ti -1c
.RI "const int \fBEnMoisture\fP = 13"
.br
.ti -1c
.RI "const int \fBAnMplex\fP = 12"
.br
.ti -1c
.RI "const int \fBEnI2C\fP = 5"
.br
.ti -1c
.RI "byte \fBvbatActive\fP =0"
.br
.ti -1c
.RI "byte \fBsoilMoistureActive\fP =0"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class handles the On-Board Sensors\&. 
.PP
Definition at line 24 of file CoolBoardSensors\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "CoolBoardSensors::CoolBoardSensors ()"
\fBCoolBoardSensors::CoolBoardSensors()\fP: This Constructor is provided to start the I2C interface and Init the different used pins 
.PP
Definition at line 35 of file CoolBoardSensors\&.cpp\&.
.PP
References AnMplex, EnI2C, and EnMoisture\&.
.PP
.nf
36 {
37 
38 #if DEBUG == 1
39 
40     Serial\&.println( F("Entering CoolBoardSensors Constructor") );
41     Serial\&.println();
42 
43 #endif
44     
45     Wire\&.begin(2, 14);                       //I2C init Maybe change this to the CoolBoard?
46 
47     pinMode(AnMplex, OUTPUT);                //Declare Analog Multiplexer OUTPUT
48     pinMode(EnMoisture, OUTPUT);             //Declare Moisture enable Pin
49     pinMode(EnI2C, OUTPUT);        //Declare I2C Enable pin 
50 
51 
52 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void CoolBoardSensors::allActive ()"
\fBCoolBoardSensors::allActive()\fP: This method is provided to allow activation of all the sensor board sensors without passing by the configuration file/method 
.PP
Definition at line 61 of file CoolBoardSensors\&.cpp\&.
.PP
References airDataActive, CoolBoardSensors::airActive::humidity, CoolBoardSensors::lightActive::ir, lightDataActive, CoolBoardSensors::airActive::pressure, soilMoistureActive, CoolBoardSensors::airActive::temperature, CoolBoardSensors::lightActive::uv, vbatActive, and CoolBoardSensors::lightActive::visible\&.
.PP
.nf
62 {
63 
64 #if DEBUG == 1 
65 
66     Serial\&.println( F("Entering CoolBoardSensors\&.allActive()") );
67     Serial\&.println();
68 
69 #endif
70     
71     this->lightDataActive\&.visible=1;
72     this->lightDataActive\&.ir=1;
73     this->lightDataActive\&.uv=1;  
74 
75     this->airDataActive\&.temperature=1;
76     this->airDataActive\&.humidity=1;
77     this->airDataActive\&.pressure=1;
78 
79 
80     this->vbatActive=1;
81 
82     this->soilMoistureActive=1;
83     
84 
85 
86 }
.fi
.SS "void CoolBoardSensors::begin ()"
\fBCoolBoardSensors::begin()\fP: This method is provided to start the sensors that are on the sensor board 
.PP
Definition at line 94 of file CoolBoardSensors\&.cpp\&.
.PP
References envSensor, initReadI2C(), lightSensor, and setEnvSensorSettings()\&.
.PP
Referenced by CoolBoard::begin()\&.
.PP
.nf
95 {  
96 
97 #if DEBUG == 1 
98      
99     Serial\&.println( F("Entering CoolBoardSensors\&.begin()") );
100     Serial\&.println();
101 
102 #endif
103 
104     initReadI2C();
105 
106     while (!lightSensor\&.Begin()) 
107     {
108     
109     #if DEBUG == 1
110 
111         Serial\&.println( F("Si1145 is not ready!  1 second") );
112 
113     #endif
114 
115         delay(1000);
116     }
117      
118     this->setEnvSensorSettings();
119     delay(10);  //Make sure sensor had enough time to turn on\&. BME280 requires 2ms to start up\&.
120     this->envSensor\&.begin();
121     delay(10);  //Make sure sensor had enough time to turn on\&. BME280 requires 2ms to start up\&.
122 
123 #if DEBUG == 1 
124     
125     Serial\&.print( F("BME280 begin answer is :") );
126     Serial\&.println(envSensor\&.begin(), HEX);
127     Serial\&.println();
128 
129 #endif
130 
131 }
.fi
.SS "bool CoolBoardSensors::config ()"
\fBCoolBoardSensors::config()\fP: This method is provided to configure the sensor board : -activate 1 -deactivate 0
.PP
\fBReturns:\fP
.RS 4
true if configuration is successful, false otherwise 
.RE
.PP

.PP
Definition at line 289 of file CoolBoardSensors\&.cpp\&.
.PP
References airDataActive, CoolBoardSensors::airActive::humidity, CoolBoardSensors::lightActive::ir, lightDataActive, CoolBoardSensors::airActive::pressure, soilMoistureActive, CoolBoardSensors::airActive::temperature, CoolBoardSensors::lightActive::uv, vbatActive, and CoolBoardSensors::lightActive::visible\&.
.PP
Referenced by CoolBoard::begin()\&.
.PP
.nf
290 {
291 
292 #if DEBUG == 1
293 
294     Serial\&.println( F("Entering CoolBoardSensors\&.config()") );
295     Serial\&.println();
296 
297 #endif
298 
299     //read config file
300     //update data
301     File coolBoardSensorsConfig = SPIFFS\&.open("/coolBoardSensorsConfig\&.json", "r");
302 
303     if (!coolBoardSensorsConfig) 
304     {
305     
306     #if DEBUG == 1
307 
308         Serial\&.println( F("failed to read /coolBoardSensorsConfig\&.json") );
309         Serial\&.println();
310     
311     #endif
312 
313         return(false);
314     }
315     else
316     {
317         size_t size = coolBoardSensorsConfig\&.size();
318         // Allocate a buffer to store contents of the file\&.
319         std::unique_ptr<char[]> buf(new char[size]);
320 
321         coolBoardSensorsConfig\&.readBytes(buf\&.get(), size);
322         DynamicJsonBuffer jsonBuffer;
323         JsonObject& json = jsonBuffer\&.parseObject(buf\&.get());
324         if (!json\&.success()) 
325         {
326         
327         #if DEBUG == 1
328 
329             Serial\&.println( F("failed to parse coolBoardSensorsConfig json") );
330             Serial\&.println();
331         
332         #endif
333     
334             return(false);
335         } 
336         else
337         {
338 
339         #if DEBUG == 1
340 
341             Serial\&.println( F("Configuration Json is :") );
342             json\&.printTo(Serial);
343             Serial\&.println();
344 
345             Serial\&.print(F("jsonBuffer size: "));
346             Serial\&.println(jsonBuffer\&.size());
347             Serial\&.println();
348 
349             
350         
351         #endif
352             
353             if(json["BME280"]["temperature"]\&.success() )
354             {           
355                 this->airDataActive\&.temperature=json["BME280"]["temperature"];
356             }
357             else
358             {
359                 this->airDataActive\&.temperature=this->airDataActive\&.temperature;          
360             }
361             json["BME280"]["temperature"]=this->airDataActive\&.temperature;
362             
363             
364             if(json["BME280"]["humidity"]\&.success() )
365             {           
366             
367                 this->airDataActive\&.humidity=json["BME280"]["humidity"];
368             }
369             else
370             {
371                 this->airDataActive\&.humidity=this->airDataActive\&.humidity;
372             }
373             json["BME280"]["humidity"]=this->airDataActive\&.humidity;
374             
375             
376             if(json["BME280"]["pressure"]\&.success() )
377             {
378                 this->airDataActive\&.pressure=json["BME280"]["pressure"];
379             }
380             else
381             {
382                 this->airDataActive\&.pressure=this->airDataActive\&.pressure;
383             }
384             json["BME280"]["pressure"]=this->airDataActive\&.pressure;
385 
386             
387             if(json["SI114X"]["visible"]\&.success() )
388             {
389                 this->lightDataActive\&.visible=json["SI114X"]["visible"];
390             }
391             else
392             {
393                 this->lightDataActive\&.visible=this->lightDataActive\&.visible;
394             }
395             json["SI114X"]["visible"]=this->lightDataActive\&.visible;
396             
397             
398             if(json["SI114X"]["ir"]\&.success() )
399             {           
400                 this->lightDataActive\&.ir=json["SI114X"]["ir"];
401             }
402             else
403             {
404                 this->lightDataActive\&.ir=this->lightDataActive\&.ir;
405             }
406             json["SI114X"]["ir"]=this->lightDataActive\&.ir;
407 
408             
409             if(json["SI114X"]["uv"]\&.success() )          
410             {           
411                 this->lightDataActive\&.uv=json["SI114X"]["uv"];
412             }
413             else
414             {
415                 this->lightDataActive\&.uv=this->lightDataActive\&.uv;
416             }
417             json["SI114X"]["uv"]=this->lightDataActive\&.uv;
418 
419 
420             if(json["vbat"]\&.success() )
421             {
422                 this->vbatActive=json["vbat"];
423             }
424             else
425             {
426                 this->vbatActive=this->vbatActive;
427             }
428             json["vbat"]=this->vbatActive;
429 
430             
431             if(json["soilMoisture"]\&.success() )
432             {           
433                 this->soilMoistureActive= json["soilMoisture"];
434             }
435             else
436             {
437                 this->soilMoistureActive=this->soilMoistureActive;
438             }
439             json["soilMoisture"]=this->soilMoistureActive;
440 
441             coolBoardSensorsConfig\&.close();          
442             coolBoardSensorsConfig = SPIFFS\&.open("/coolBoardSensorsConfig\&.json", "w");            
443             if(!coolBoardSensorsConfig)
444             {
445             
446             #if DEBUG == 1
447 
448                 Serial\&.println( F("failed to write to /coolBoardSensorsConfig\&.json") );
449                 Serial\&.println();
450             
451             #endif
452 
453                 return(false);          
454             }  
455 
456             json\&.printTo(coolBoardSensorsConfig);
457             coolBoardSensorsConfig\&.close();          
458             
459         #if DEBUG == 1
460 
461             Serial\&.println( F("Saved Configuration Json is : ") );
462             json\&.printTo(Serial);
463             Serial\&.println();
464         
465         #endif
466 
467             return(true); 
468         }
469     }   
470 
471 }
.fi
.SS "void CoolBoardSensors::end ()"
\fBCoolBoardSensors::end()\fP: This method is provided to end the sensors on the sensor board 
.PP
Definition at line 138 of file CoolBoardSensors\&.cpp\&.
.PP
References lightSensor\&.
.PP
.nf
139 {
140 
141 #if DEBUG == 1  
142     Serial\&.println( F("Entering CoolBoardSensors\&.end()") );
143     Serial\&.println();
144 
145 #endif
146 
147     lightSensor\&.DeInit();
148 
149 }
.fi
.SS "void CoolBoardSensors::initReadI2C ()"
\fBCoolBoardSensors::initReadI2C()\fP: This method is provided to enable the I2C Interface on the sensor board\&. 
.PP
Definition at line 246 of file CoolBoardSensors\&.cpp\&.
.PP
References EnI2C\&.
.PP
Referenced by begin(), and read()\&.
.PP
.nf
247 {
248 
249 #if DEBUG == 1
250 
251     Serial\&.println( F("Entering CoolBoardSensors\&.initReadI2C()") );
252     Serial\&.println();
253 
254 #endif
255  
256     digitalWrite(EnI2C,HIGH);//HIGH= I2C Enable
257 
258 }
.fi
.SS "void CoolBoardSensors::printConf ()"
\fBCoolBoardSensors::printConf()\fP: This method is provided to print the configuration to the Serial Monitor 
.PP
Definition at line 479 of file CoolBoardSensors\&.cpp\&.
.PP
References airDataActive, CoolBoardSensors::airActive::humidity, CoolBoardSensors::lightActive::ir, lightDataActive, CoolBoardSensors::airActive::pressure, soilMoistureActive, CoolBoardSensors::airActive::temperature, CoolBoardSensors::lightActive::uv, vbatActive, and CoolBoardSensors::lightActive::visible\&.
.PP
Referenced by CoolBoard::begin()\&.
.PP
.nf
480 {
481 
482 #if DEBUG == 1
483 
484     Serial\&.println( F("Entering CoolBoardSensors\&.printConf()") );
485     Serial\&.println();
486 
487 #endif
488 
489     Serial\&.println("Sensors Configuration : ");
490     
491     Serial\&.print("airDataActive\&.temperature : ");
492     Serial\&.println(this->airDataActive\&.temperature);
493 
494     Serial\&.print("airDataActive\&.humidity : ");
495     Serial\&.println(airDataActive\&.humidity);
496 
497     Serial\&.print("airDataActive\&.pressure : ");
498     Serial\&.println(airDataActive\&.pressure);
499 
500     Serial\&.print("lightDataActive\&.visible : ");
501     Serial\&.println(lightDataActive\&.visible);
502 
503     Serial\&.print("lightDataActive\&.ir : ");
504     Serial\&.println(lightDataActive\&.ir);
505 
506     Serial\&.print("lightDataActive\&.uv : ");
507     Serial\&.println(lightDataActive\&.uv);
508     
509     Serial\&.print("vbatActive : ");
510     Serial\&.println(vbatActive);
511 
512     Serial\&.print("soilMoitureActive : ");
513     Serial\&.println(soilMoistureActive);
514 
515     Serial\&.println();
516 }
.fi
.SS "String CoolBoardSensors::read ()"
\fBCoolBoardSensors::read()\fP: This method is provided to return the data read by the sensor board
.PP
\fBReturns:\fP
.RS 4
a json string containing the sensors data 
.RE
.PP

.PP
Definition at line 159 of file CoolBoardSensors\&.cpp\&.
.PP
References airDataActive, envSensor, CoolBoardSensors::airActive::humidity, initReadI2C(), CoolBoardSensors::lightActive::ir, lightDataActive, lightSensor, CoolBoardSensors::airActive::pressure, readMoisture(), readVBat(), soilMoistureActive, CoolBoardSensors::airActive::temperature, CoolBoardSensors::lightActive::uv, vbatActive, and CoolBoardSensors::lightActive::visible\&.
.PP
Referenced by CoolBoard::readSensors()\&.
.PP
.nf
160 {
161 
162 #if DEBUG == 1 
163     
164     Serial\&.println( F("Entering CoolBoardSensors\&.read()") );
165     Serial\&.println();
166 
167 #endif
168 
169     String data;
170     DynamicJsonBuffer  jsonBuffer ;
171     JsonObject& root = jsonBuffer\&.createObject();
172     
173     initReadI2C();
174     delay(100);
175     //light data
176     if(lightDataActive\&.visible)
177     {
178         root["visibleLight"] =lightSensor\&.ReadVisible() ;
179     }
180     
181     if(lightDataActive\&.ir)
182     {
183         root["infraRed"] = lightSensor\&.ReadIR();
184     }
185 
186     if(lightDataActive\&.uv)
187     {
188         float tempUV = (float)lightSensor\&.ReadUV()/100 ;
189         root["ultraViolet"] = tempUV;
190     }
191     
192     //BME280 data
193     if(airDataActive\&.pressure)   
194     {
195         root["Pressure"] =envSensor\&.readFloatPressure();
196     }
197     
198         
199     if(airDataActive\&.humidity)   
200     {   
201         root["Humidity"] =envSensor\&.readFloatHumidity() ;
202     }   
203     
204     if(airDataActive\&.temperature)
205     {
206         root["Temperature"]=envSensor\&.readTempC();
207     }
208     
209     //Vbat
210     if(vbatActive)  
211     {   
212         root["Vbat"]=this->readVBat();
213     }
214     
215     //earth Moisture
216     if(soilMoistureActive)
217     {   
218         root["soilMoisture"]=this->readMoisture();
219     }
220     
221     
222     root\&.printTo(data);
223 
224 #if DEBUG == 1
225 
226     Serial\&.println( F("CoolBoardSensors data is :") );
227     root\&.printTo(Serial);
228     Serial\&.println();
229     
230     Serial\&.print(F("jsonBuffer size: "));
231     Serial\&.println(jsonBuffer\&.size());
232     Serial\&.println();
233 
234 #endif
235 
236     return(data);   
237     
238 
239 }
.fi
.SS "float CoolBoardSensors::readMoisture ()"
\fBCoolBoardSensors::readMoisture()\fP: This method is provided to red the Soil Moisture
.PP
\fBReturns:\fP
.RS 4
a float represnting the soil moisture 
.RE
.PP

.PP
Definition at line 602 of file CoolBoardSensors\&.cpp\&.
.PP
References AnMplex, and EnMoisture\&.
.PP
Referenced by read()\&.
.PP
.nf
603 {
604 
605 #if DEBUG == 1
606     
607     Serial\&.println( F("Entering CoolBoardSensors\&.readMoisture()") );
608     Serial\&.println();
609     
610 #endif
611 
612     digitalWrite(EnMoisture, LOW);                 //enable moisture sensor and waith a bit
613 
614     digitalWrite(AnMplex, HIGH);            //enable analog Switch to get the moisture
615 
616     delay(2000);
617 
618     int val = analogRead(A0);                       //read the value form the moisture sensor
619 
620     float result = (float)map(val, 0, 890, 0, 100); 
621 
622     digitalWrite(EnMoisture, HIGH);                  //disable moisture sensor for minimum wear
623     
624 #if DEBUG == 1 
625 
626     Serial\&.println( F("Soil Moisture is : ") );
627     Serial\&.println(result);
628     Serial\&.println();
629 
630 #endif 
631 
632     return (result);
633 }
.fi
.SS "float CoolBoardSensors::readVBat ()"
\fBCoolBoardSensors::readVBat()\fP: This method is provided to read the Battery Voltage\&.
.PP
\fBReturns:\fP
.RS 4
a float representing the battery voltage 
.RE
.PP

.PP
Definition at line 565 of file CoolBoardSensors\&.cpp\&.
.PP
References AnMplex\&.
.PP
Referenced by read()\&.
.PP
.nf
566 {
567 
568 #if DEBUG == 1
569 
570     Serial\&.println( F("Entering CoolBoardSensors\&.readVBat()") );
571     Serial\&.println();
572 
573 #endif
574 
575     digitalWrite(this->AnMplex, LOW);                            //Enable Analog Switch to get the batterie tension
576     
577     delay(200);
578     
579     int raw = analogRead(A0);                                    //read in batterie tension
580     
581     float val = 6\&.04 / 1024 * raw;                               //convert it apprimatly right tension in volts
582     
583 #if DEBUG == 1
584 
585     Serial\&.println( F("Vbat is : ") );
586     Serial\&.println(val);
587     Serial\&.println();
588 
589 #endif
590 
591     return (val);   
592 }
.fi
.SS "void CoolBoardSensors::setEnvSensorSettings (uint8_t commInterface = \fCI2C_MODE\fP, uint8_t I2CAddress = \fC0x76\fP, uint8_t runMode = \fC3\fP, uint8_t tStandby = \fC0\fP, uint8_t filter = \fC0\fP, uint8_t tempOverSample = \fC1\fP, uint8_t pressOverSample = \fC1\fP, uint8_t humidOverSample = \fC1\fP)"
CoolBoardSensors::setEnvSensorSetting(): This method is provided to set the enviornment sensor settings , if argument is ommitted , default value will be assigned 
.PP
Definition at line 525 of file CoolBoardSensors\&.cpp\&.
.PP
References envSensor\&.
.PP
Referenced by begin()\&.
.PP
.nf
530 {
531 
532 #if DEBUG == 1
533     
534     Serial\&.println( F("Entering CoolBoardSensors\&.setEnvSensorSettings()") );
535     Serial\&.println();
536 
537 #endif
538   
539     this->envSensor\&.settings\&.commInterface = commInterface;      
540 
541     this->envSensor\&.settings\&.I2CAddress = I2CAddress;
542 
543     this->envSensor\&.settings\&.runMode = runMode; 
544 
545     this->envSensor\&.settings\&.tStandby = tStandby; 
546 
547     this->envSensor\&.settings\&.filter = filter; 
548 
549     this->envSensor\&.settings\&.tempOverSample = tempOverSample;
550 
551     this->envSensor\&.settings\&.pressOverSample = pressOverSample;
552 
553     this->envSensor\&.settings\&.humidOverSample = humidOverSample;
554 
555 }
.fi
.SS "void CoolBoardSensors::stopReadI2C ()"
\fBCoolBoardSensors::stopReadI2C()\fP: This method is provided to disable the I2C Interface on the sensor board 
.PP
Definition at line 265 of file CoolBoardSensors\&.cpp\&.
.PP
References EnI2C\&.
.PP
.nf
266 {
267 
268 #if DEBUG == 1
269 
270     Serial\&.println( F("Entering CoolBoardSensors\&.stopReadI2C()") );
271     Serial\&.println();
272 
273 #endif
274 
275     digitalWrite(EnI2C,LOW);//HIGH= I2C Enable
276 
277 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "struct \fBCoolBoardSensors::airActive\fP CoolBoardSensors::airDataActive\fC [private]\fP"

.PP
Referenced by allActive(), config(), printConf(), and read()\&.
.SS "const int CoolBoardSensors::AnMplex = 12\fC [private]\fP"

.PP
Definition at line 95 of file CoolBoardSensors\&.h\&.
.PP
Referenced by CoolBoardSensors(), readMoisture(), and readVBat()\&.
.SS "const int CoolBoardSensors::EnI2C = 5\fC [private]\fP"

.PP
Definition at line 96 of file CoolBoardSensors\&.h\&.
.PP
Referenced by CoolBoardSensors(), initReadI2C(), and stopReadI2C()\&.
.SS "const int CoolBoardSensors::EnMoisture = 13\fC [private]\fP"

.PP
Definition at line 94 of file CoolBoardSensors\&.h\&.
.PP
Referenced by CoolBoardSensors(), and readMoisture()\&.
.SS "BME280 CoolBoardSensors::envSensor"

.PP
Definition at line 74 of file CoolBoardSensors\&.h\&.
.PP
Referenced by begin(), read(), and setEnvSensorSettings()\&.
.SS "struct \fBCoolBoardSensors::lightActive\fP CoolBoardSensors::lightDataActive\fC [private]\fP"

.PP
Referenced by allActive(), config(), printConf(), and read()\&.
.SS "SI114X CoolBoardSensors::lightSensor = SI114X()"

.PP
Definition at line 72 of file CoolBoardSensors\&.h\&.
.PP
Referenced by begin(), end(), and read()\&.
.SS "byte CoolBoardSensors::soilMoistureActive =0\fC [private]\fP"

.PP
Definition at line 99 of file CoolBoardSensors\&.h\&.
.PP
Referenced by allActive(), config(), printConf(), and read()\&.
.SS "byte CoolBoardSensors::vbatActive =0\fC [private]\fP"

.PP
Definition at line 98 of file CoolBoardSensors\&.h\&.
.PP
Referenced by allActive(), config(), printConf(), and read()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolAPI from the source code\&.
