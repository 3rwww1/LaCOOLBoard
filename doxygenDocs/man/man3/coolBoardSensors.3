.TH "CoolBoardSensors" 3 "Mon Jul 3 2017" "CoolAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoolBoardSensors \- This class handles the On-Board Sensors\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolBoardSensors\&.h>\fP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBairActive\fP"
.br
.ti -1c
.RI "struct \fBlightActive\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBCoolBoardSensors\fP ()"
.br
.ti -1c
.RI "void \fBbegin\fP ()"
.br
.ti -1c
.RI "String \fBread\fP ()"
.br
.ti -1c
.RI "int \fBgetJsonSize\fP ()"
.br
.ti -1c
.RI "void \fBsetJsonSize\fP (int \fBjsonSize\fP)"
.br
.ti -1c
.RI "void \fBallActive\fP ()"
.br
.ti -1c
.RI "void \fBinitReadI2C\fP ()"
.br
.ti -1c
.RI "void \fBstopReadI2C\fP ()"
.br
.ti -1c
.RI "void \fBend\fP ()"
.br
.ti -1c
.RI "bool \fBconfig\fP ()"
.br
.ti -1c
.RI "void \fBprintConf\fP ()"
.br
.ti -1c
.RI "void \fBsetEnvSensorSettings\fP (uint8_t commInterface=I2C_MODE, uint8_t I2CAddress=0x76, uint8_t runMode=3, uint8_t tStandby=0, uint8_t filter=0, uint8_t tempOverSample=1, uint8_t pressOverSample=1, uint8_t humidOverSample=1)"
.br
.ti -1c
.RI "float \fBreadVBat\fP ()"
.br
.ti -1c
.RI "float \fBreadMoisture\fP ()"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "SI114X \fBlightSensor\fP = SI114X()"
.br
.ti -1c
.RI "BME280 \fBenvSensor\fP"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "struct \fBCoolBoardSensors::lightActive\fP \fBlightDataActive\fP"
.br
.ti -1c
.RI "struct \fBCoolBoardSensors::airActive\fP \fBairDataActive\fP"
.br
.ti -1c
.RI "const int \fBEnMoisture\fP = 13"
.br
.ti -1c
.RI "const int \fBAnMplex\fP = 12"
.br
.ti -1c
.RI "const int \fBEnI2C\fP = 5"
.br
.ti -1c
.RI "byte \fBvbatActive\fP"
.br
.ti -1c
.RI "byte \fBearthMoistureActive\fP"
.br
.ti -1c
.RI "int \fBjsonSize\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class handles the On-Board Sensors\&. 
.PP
Definition at line 24 of file CoolBoardSensors\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "CoolBoardSensors::CoolBoardSensors ()"
\fBCoolBoardSensors::CoolBoardSensors()\fP: This Constructor is provided to start the I2C interface and Init the different used pins 
.PP
Definition at line 23 of file CoolBoardSensors\&.cpp\&.
.PP
References AnMplex, EnI2C, and EnMoisture\&.
.PP
.nf
24 {
25     Wire\&.begin(2, 14);                       //I2C init Maybe change this to the CoolBoard?
26 
27     pinMode(AnMplex, OUTPUT);                //Declare Analog Multiplexer OUTPUT
28     pinMode(EnMoisture, OUTPUT);             //Declare Moisture enable Pin
29     pinMode(EnI2C, OUTPUT);        //Declare I2C Enable pin 
30 
31 
32 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void CoolBoardSensors::allActive ()"
\fBCoolBoardSensors::allActive()\fP: This method is provided to allow activation of all the sensor board sensors without passing by the configuration file/method 
.PP
Definition at line 62 of file CoolBoardSensors\&.cpp\&.
.PP
References airDataActive, earthMoistureActive, CoolBoardSensors::airActive::humidity, CoolBoardSensors::lightActive::ir, lightDataActive, CoolBoardSensors::airActive::pressure, CoolBoardSensors::airActive::temperature, CoolBoardSensors::lightActive::uv, vbatActive, and CoolBoardSensors::lightActive::visible\&.
.PP
.nf
63 {
64     lightDataActive\&.visible=1;
65     lightDataActive\&.ir=1;
66     lightDataActive\&.uv=1;    
67 
68     airDataActive\&.temperature=1;
69     airDataActive\&.humidity=1;
70     airDataActive\&.pressure=1;
71 
72 
73     vbatActive=1;
74     earthMoistureActive=1;
75 
76 
77 }
.fi
.SS "void CoolBoardSensors::begin ()"
\fBCoolBoardSensors::begin()\fP: This method is provided to start the sensors that are on the sensor board 
.PP
Definition at line 85 of file CoolBoardSensors\&.cpp\&.
.PP
References envSensor, initReadI2C(), lightSensor, and setEnvSensorSettings()\&.
.PP
Referenced by CoolBoard::begin()\&.
.PP
.nf
86 {       
87     initReadI2C();
88 
89     while (!lightSensor\&.Begin()) {
90       Serial\&.println("Si1145 is not ready!  1 second");
91       delay(1000);
92     }
93      
94     this->setEnvSensorSettings();
95     delay(10);  //Make sure sensor had enough time to turn on\&. BME280 requires 2ms to start up\&.
96     this->envSensor\&.begin();
97     delay(10);  //Make sure sensor had enough time to turn on\&. BME280 requires 2ms to start up\&.
98     Serial\&.println(envSensor\&.begin(), HEX);
99 
100 
101 }
.fi
.SS "bool CoolBoardSensors::config ()"
\fBCoolBoardSensors::config()\fP: This method is provided to configure the sensor board : -activate 1 -deactivate 0
.PP
\fBReturns:\fP
.RS 4
true if configuration is successful, false otherwise 
.RE
.PP

.PP
Definition at line 222 of file CoolBoardSensors\&.cpp\&.
.PP
References airDataActive, earthMoistureActive, CoolBoardSensors::airActive::humidity, CoolBoardSensors::lightActive::ir, jsonSize, lightDataActive, CoolBoardSensors::airActive::pressure, CoolBoardSensors::airActive::temperature, CoolBoardSensors::lightActive::uv, vbatActive, and CoolBoardSensors::lightActive::visible\&.
.PP
Referenced by CoolBoard::begin(), and CoolBoard::update()\&.
.PP
.nf
223 {
224     //read config file
225     //update data
226     File coolBoardSensorsConfig = SPIFFS\&.open("/coolBoardSensorsConfig\&.json", "r");
227 
228     if (!coolBoardSensorsConfig) 
229     {
230         return(false);
231     }
232     else
233     {
234         size_t size = coolBoardSensorsConfig\&.size();
235         // Allocate a buffer to store contents of the file\&.
236         std::unique_ptr<char[]> buf(new char[size]);
237 
238         coolBoardSensorsConfig\&.readBytes(buf\&.get(), size);
239         DynamicJsonBuffer jsonBuffer;
240         JsonObject& json = jsonBuffer\&.parseObject(buf\&.get());
241         if (!json\&.success()) 
242         {
243               return(false);
244         } 
245         else
246         {     
247             if(json["jsonSize"]\&.success() )
248             {
249                 this->jsonSize = json["jsonSize"]; 
250             }
251             else
252             {
253                 this->jsonSize=this->jsonSize;          
254             }
255             json["jsonSize"]=this->jsonSize;
256 
257             
258             if(json["BME280"]["temperature"]\&.success() )
259             {           
260                 this->airDataActive\&.temperature=json["BME280"]["temperature"];
261             }
262             else
263             {
264                 this->airDataActive\&.temperature=this->airDataActive\&.temperature;          
265             }
266             json["BME280"]["temperature"]=this->airDataActive\&.temperature;
267             
268             
269             if(json["BME280"]["humidity"]\&.success() )
270             {           
271             
272                 this->airDataActive\&.humidity=json["BME280"]["humidity"];
273             }
274             else
275             {
276                 this->airDataActive\&.humidity=this->airDataActive\&.humidity;
277             }
278             json["BME280"]["humidity"]=this->airDataActive\&.humidity;
279             
280             
281             if(json["BME280"]["pressure"]\&.success() )
282             {
283                 this->airDataActive\&.pressure=json["BME280"]["pressure"];
284             }
285             else
286             {
287                 this->airDataActive\&.pressure=this->airDataActive\&.pressure;
288             }
289             json["BME280"]["pressure"]=this->airDataActive\&.pressure;
290 
291             
292             if(json["SI114X"]["visible"]\&.success() )
293             {
294                 this->lightDataActive\&.visible=json["SI114X"]["visible"];
295             }
296             else
297             {
298                 this->lightDataActive\&.visible=this->lightDataActive\&.visible;
299             }
300             json["SI114X"]["visible"]=this->lightDataActive\&.visible;
301             
302             
303             if(json["SI114X"]["ir"]\&.success() )
304             {           
305                 this->lightDataActive\&.ir=json["SI114X"]["ir"];
306             }
307             else
308             {
309                 this->lightDataActive\&.ir=this->lightDataActive\&.ir;
310             }
311             json["SI114X"]["ir"]=this->lightDataActive\&.ir;
312 
313             
314             if(json["SI114X"]["uv"]\&.success() )          
315             {           
316                 this->lightDataActive\&.uv=json["SI114X"]["uv"];
317             }
318             else
319             {
320                 this->lightDataActive\&.uv=this->lightDataActive\&.uv;
321             }
322             json["SI114X"]["uv"]=this->lightDataActive\&.uv;
323 
324 
325             if(json["vbat"]\&.success() )
326             {
327                 this->vbatActive=json["vbat"];
328             }
329             else
330             {
331                 this->vbatActive=this->vbatActive;
332             }
333             json["vbat"]=this->vbatActive;
334 
335             
336             if(json["soilMoisture"]\&.success() )
337             {           
338                 this->earthMoistureActive= json["soilMoisture"];
339             }
340             else
341             {
342                 this->earthMoistureActive=this->earthMoistureActive;
343             }
344             json["soilMoisture"]=this->earthMoistureActive;
345 
346             coolBoardSensorsConfig\&.close();          
347             coolBoardSensorsConfig = SPIFFS\&.open("/coolBoardSensorsConfig\&.json", "w");            
348             if(!coolBoardSensorsConfig)
349             {
350                 return(false);          
351             }  
352 
353             json\&.printTo(coolBoardSensorsConfig);
354             coolBoardSensorsConfig\&.close();          
355             
356               return(true); 
357         }
358     }   
359 
360 }
.fi
.SS "void CoolBoardSensors::end ()"
\fBCoolBoardSensors::end()\fP: This method is provided to end the sensors on the sensor board 
.PP
Definition at line 108 of file CoolBoardSensors\&.cpp\&.
.PP
References lightSensor\&.
.PP
.nf
109 {
110 
111     lightSensor\&.DeInit();
112 
113 }
.fi
.SS "int CoolBoardSensors::getJsonSize ()"
\fBCoolBoardSensors::getJsonSize()\fP: This method is provided to get the sensor board answer size
.PP
\fBReturns:\fP
.RS 4
json data size 
.RE
.PP

.PP
Definition at line 41 of file CoolBoardSensors\&.cpp\&.
.PP
References jsonSize\&.
.PP
.nf
42 {
43     return(this->jsonSize );
44 }
.fi
.SS "void CoolBoardSensors::initReadI2C ()"
\fBCoolBoardSensors::initReadI2C()\fP: This method is provided to enable the I2C Interface on the sensor board\&. 
.PP
Definition at line 193 of file CoolBoardSensors\&.cpp\&.
.PP
References EnI2C\&.
.PP
Referenced by begin(), and read()\&.
.PP
.nf
194 {
195   
196     digitalWrite(EnI2C,HIGH);//HIGH= I2C Enable
197 
198 }
.fi
.SS "void CoolBoardSensors::printConf ()"
\fBCoolBoardSensors::printConf()\fP: This method is provided to print the configuration to the Serial Monitor 
.PP
Definition at line 368 of file CoolBoardSensors\&.cpp\&.
.PP
References airDataActive, earthMoistureActive, CoolBoardSensors::airActive::humidity, CoolBoardSensors::lightActive::ir, jsonSize, lightDataActive, CoolBoardSensors::airActive::pressure, CoolBoardSensors::airActive::temperature, CoolBoardSensors::lightActive::uv, vbatActive, and CoolBoardSensors::lightActive::visible\&.
.PP
Referenced by CoolBoard::begin()\&.
.PP
.nf
369 {
370     Serial\&.println("Sensors Conf ");
371     Serial\&.println(jsonSize);
372     Serial\&.println(airDataActive\&.temperature);
373     Serial\&.println(airDataActive\&.humidity);
374     Serial\&.println(airDataActive\&.pressure);
375 
376     Serial\&.println(lightDataActive\&.visible);
377     Serial\&.println(lightDataActive\&.ir);
378     Serial\&.println(lightDataActive\&.uv);
379     Serial\&.println(vbatActive);
380     Serial\&.println(earthMoistureActive);
381     Serial\&.println(" ");
382 }
.fi
.SS "String CoolBoardSensors::read ()"
\fBCoolBoardSensors::read()\fP: This method is provided to return the data read by the sensor board
.PP
\fBReturns:\fP
.RS 4
a json string containing the sensors data 
.RE
.PP

.PP
Definition at line 123 of file CoolBoardSensors\&.cpp\&.
.PP
References airDataActive, earthMoistureActive, envSensor, CoolBoardSensors::airActive::humidity, initReadI2C(), CoolBoardSensors::lightActive::ir, jsonSize, lightDataActive, lightSensor, CoolBoardSensors::airActive::pressure, readMoisture(), readVBat(), CoolBoardSensors::airActive::temperature, CoolBoardSensors::lightActive::uv, vbatActive, and CoolBoardSensors::lightActive::visible\&.
.PP
Referenced by CoolBoard::readSensors()\&.
.PP
.nf
124 {
125     String data;
126     DynamicJsonBuffer  jsonBuffer(jsonSize) ;
127     JsonObject& root = jsonBuffer\&.createObject();
128     
129     initReadI2C();
130     delay(100);
131     //light data
132     if(lightDataActive\&.visible)
133     {
134 
135         root["visibleLight"] =lightSensor\&.ReadVisible() ;
136     }
137     
138     if(lightDataActive\&.ir)
139     {
140         root["infraRed"] = lightSensor\&.ReadIR();
141     }
142 
143     if(lightDataActive\&.uv)
144     {
145         float tempUV = (float)lightSensor\&.ReadUV()/100 ;
146         root["ultraViolet"] = tempUV;
147     }
148     
149     //BME280 data
150     if(airDataActive\&.pressure)   
151     {
152         root["Pressure"] =envSensor\&.readFloatPressure();
153     }
154     
155         
156     if(airDataActive\&.humidity)   
157     {   
158         root["Humidity"] =envSensor\&.readFloatHumidity() ;
159     }   
160     
161     if(airDataActive\&.temperature)
162     {
163         root["Temperature"]=envSensor\&.readTempC();
164     }
165     
166     //Vbat
167     if(vbatActive)  
168     {   
169         root["Vbat"]=this->readVBat();
170     }
171     
172     //earth Moisture
173     if(earthMoistureActive)
174     {   
175         root["soilMoisture"]=this->readMoisture();
176     }
177     
178     
179     root\&.printTo(data);
180     
181 
182 
183     return(data);
184     
185 
186 }
.fi
.SS "float CoolBoardSensors::readMoisture ()"
\fBCoolBoardSensors::readMoisture()\fP: This method is provided to red the Soil Moisture
.PP
\fBReturns:\fP
.RS 4
a float represnting the soil moisture 
.RE
.PP

.PP
Definition at line 444 of file CoolBoardSensors\&.cpp\&.
.PP
References AnMplex, and EnMoisture\&.
.PP
Referenced by read()\&.
.PP
.nf
445 {
446       digitalWrite(EnMoisture, LOW);                 //enable moisture sensor and waith a bit
447       
448       digitalWrite(AnMplex, HIGH);          //enable analog Switch to get the moisture
449       
450       delay(2000);
451       
452       int val = analogRead(A0);                       //read the value form the moisture sensor
453       
454       float result = (float)map(val, 0, 890, 0, 100);   
455 
456       digitalWrite(EnMoisture, HIGH);                  //disable moisture sensor for minimum wear
457       
458       return (result);
459 }
.fi
.SS "float CoolBoardSensors::readVBat ()"
\fBCoolBoardSensors::readVBat()\fP: This method is provided to read the Battery Voltage\&.
.PP
\fBReturns:\fP
.RS 4
a float representing the battery voltage 
.RE
.PP

.PP
Definition at line 423 of file CoolBoardSensors\&.cpp\&.
.PP
References AnMplex\&.
.PP
Referenced by read()\&.
.PP
.nf
424 {
425     digitalWrite(AnMplex, LOW);                                  //Enable Analog Switch to get the batterie tension
426     
427     delay(200);
428     
429     int raw = analogRead(A0);                                    //read in batterie tension
430     
431     float val = 6\&.04 / 1024 * raw;                               //convert it apprimatly right tension in volts
432 
433     return (val);   
434 }
.fi
.SS "void CoolBoardSensors::setEnvSensorSettings (uint8_t commInterface = \fCI2C_MODE\fP, uint8_t I2CAddress = \fC0x76\fP, uint8_t runMode = \fC3\fP, uint8_t tStandby = \fC0\fP, uint8_t filter = \fC0\fP, uint8_t tempOverSample = \fC1\fP, uint8_t pressOverSample = \fC1\fP, uint8_t humidOverSample = \fC1\fP)"
CoolBoardSensors::setEnvSensorSetting(): This method is provided to set the enviornment sensor settings , if argument is ommitted , default value will be assigned 
.PP
Definition at line 391 of file CoolBoardSensors\&.cpp\&.
.PP
References envSensor\&.
.PP
Referenced by begin()\&.
.PP
.nf
396 {
397   envSensor\&.settings\&.commInterface = commInterface;      
398   
399   envSensor\&.settings\&.I2CAddress = I2CAddress;
400   
401   envSensor\&.settings\&.runMode = runMode; 
402   
403   envSensor\&.settings\&.tStandby = tStandby; 
404   
405   envSensor\&.settings\&.filter = filter; 
406   
407   envSensor\&.settings\&.tempOverSample = tempOverSample;
408   
409   envSensor\&.settings\&.pressOverSample = pressOverSample;
410   
411   envSensor\&.settings\&.humidOverSample = humidOverSample;
412 
413 }
.fi
.SS "void CoolBoardSensors::setJsonSize (int jsonSize)"
CoolBoardSensors::setJsonSize( JSON size): This method is provided to set the sensor board answer size 
.PP
Definition at line 51 of file CoolBoardSensors\&.cpp\&.
.PP
References jsonSize\&.
.PP
.nf
52 {
53     this->jsonSize=jsonSize;
54 }
.fi
.SS "void CoolBoardSensors::stopReadI2C ()"
\fBCoolBoardSensors::stopReadI2C()\fP: This method is provided to disable the I2C Interface on the sensor board 
.PP
Definition at line 205 of file CoolBoardSensors\&.cpp\&.
.PP
References EnI2C\&.
.PP
.nf
206 {
207 
208     digitalWrite(EnI2C,LOW);//HIGH= I2C Enable
209 
210 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "struct \fBCoolBoardSensors::airActive\fP CoolBoardSensors::airDataActive\fC [private]\fP"

.PP
Referenced by allActive(), config(), printConf(), and read()\&.
.SS "const int CoolBoardSensors::AnMplex = 12\fC [private]\fP"

.PP
Definition at line 101 of file CoolBoardSensors\&.h\&.
.PP
Referenced by CoolBoardSensors(), readMoisture(), and readVBat()\&.
.SS "byte CoolBoardSensors::earthMoistureActive\fC [private]\fP"

.PP
Definition at line 105 of file CoolBoardSensors\&.h\&.
.PP
Referenced by allActive(), config(), printConf(), and read()\&.
.SS "const int CoolBoardSensors::EnI2C = 5\fC [private]\fP"

.PP
Definition at line 102 of file CoolBoardSensors\&.h\&.
.PP
Referenced by CoolBoardSensors(), initReadI2C(), and stopReadI2C()\&.
.SS "const int CoolBoardSensors::EnMoisture = 13\fC [private]\fP"

.PP
Definition at line 100 of file CoolBoardSensors\&.h\&.
.PP
Referenced by CoolBoardSensors(), and readMoisture()\&.
.SS "BME280 CoolBoardSensors::envSensor"

.PP
Definition at line 77 of file CoolBoardSensors\&.h\&.
.PP
Referenced by begin(), read(), and setEnvSensorSettings()\&.
.SS "int CoolBoardSensors::jsonSize\fC [private]\fP"

.PP
Definition at line 107 of file CoolBoardSensors\&.h\&.
.PP
Referenced by config(), getJsonSize(), printConf(), read(), and setJsonSize()\&.
.SS "struct \fBCoolBoardSensors::lightActive\fP CoolBoardSensors::lightDataActive\fC [private]\fP"

.PP
Referenced by allActive(), config(), printConf(), and read()\&.
.SS "SI114X CoolBoardSensors::lightSensor = SI114X()"

.PP
Definition at line 75 of file CoolBoardSensors\&.h\&.
.PP
Referenced by begin(), end(), and read()\&.
.SS "byte CoolBoardSensors::vbatActive\fC [private]\fP"

.PP
Definition at line 104 of file CoolBoardSensors\&.h\&.
.PP
Referenced by allActive(), config(), printConf(), and read()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolAPI from the source code\&.
