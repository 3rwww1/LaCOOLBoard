.TH "ExternalSensors" 3 "Mon Jul 3 2017" "CoolAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ExternalSensors \- This class handles the external sensors run time defintion , configuartion and actions\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <ExternalSensors\&.h>\fP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBsensor\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBbegin\fP ()"
.br
.ti -1c
.RI "String \fBread\fP ()"
.br
.ti -1c
.RI "bool \fBconfig\fP ()"
.br
.ti -1c
.RI "int \fBgetJsonSize\fP ()"
.br
.ti -1c
.RI "void \fBprintConf\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "struct \fBExternalSensors::sensor\fP \fBsensors\fP [50]"
.br
.ti -1c
.RI "int \fBsensorsNumber\fP"
.br
.ti -1c
.RI "int \fBjsonSize\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class handles the external sensors run time defintion , configuartion and actions\&. 
.PP
Definition at line 26 of file ExternalSensors\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "void ExternalSensors::begin (void)"
\fBExternalSensors::begin()\fP: This method is provided to initialise the external sensors\&. 
.PP
Definition at line 30 of file ExternalSensors\&.cpp\&.
.PP
References BaseExternalSensor::begin(), ExternalSensors::sensor::exSensor, sensors, and sensorsNumber\&.
.PP
Referenced by CoolBoard::begin()\&.
.PP
.nf
31 {
32     for(int i=0;i< this->sensorsNumber ; i++)
33     {
34         if( (sensors[i]\&.reference) == "NDIR_I2C" )
35         {   
36             std::unique_ptr< ExternalSensor<NDIR_I2C> > sensorCO2(new ExternalSensor<NDIR_I2C> (77));
37 
38 
39             sensors[i]\&.exSensor= sensorCO2\&.release();                       // using std::move;
40             sensors[i]\&.exSensor->begin();
41 
42         }
43         if( (sensors[i]\&.reference) == "DallasTemperature")
44         {
45             OneWire oneWire(0);
46             std::unique_ptr< ExternalSensor<DallasTemperature> > dallasTemp(new ExternalSensor<DallasTemperature> ());
47              ;
48             sensors[i]\&.exSensor=dallasTemp\&.release();
49             sensors[i]\&.exSensor->begin();
50             
51         }
52         
53         
54     }
55 }
.fi
.SS "bool ExternalSensors::config ()"
\fBExternalSensors::config()\fP: This method is provided to configure the externalSensors through a configuration file
.PP
\fBReturns:\fP
.RS 4
true if successful,false otherwise 
.RE
.PP

.PP
Definition at line 118 of file ExternalSensors\&.cpp\&.
.PP
References ExternalSensors::sensor::address, ExternalSensors::sensor::connection, ExternalSensors::sensor::dataSize, jsonSize, ExternalSensors::sensor::reference, sensors, sensorsNumber, and ExternalSensors::sensor::type\&.
.PP
Referenced by CoolBoard::begin(), and CoolBoard::update()\&.
.PP
.nf
119 {
120     //read config file
121     //update data
122     File externalSensorsConfig = SPIFFS\&.open("/externalSensorsConfig\&.json", "r");
123 
124     if (!externalSensorsConfig) 
125     {
126         return(false);
127     }
128     else
129     {
130         size_t size = externalSensorsConfig\&.size();
131         // Allocate a buffer to store contents of the file\&.
132         std::unique_ptr<char[]> buf(new char[size]);
133 
134         externalSensorsConfig\&.readBytes(buf\&.get(), size);
135         DynamicJsonBuffer jsonBuffer;
136         JsonObject& json = jsonBuffer\&.parseObject(buf\&.get());
137 
138         if (!json\&.success()) 
139         {
140               return(false);
141         } 
142         else
143         {   
144             if(json["jsonSize"]!=NULL )
145             {           
146                 this->jsonSize=json["jsonSize"];
147             }
148             else
149             {
150                 this->jsonSize=this->jsonSize;
151             }
152             json["jsonSize"]=this->jsonSize;            
153 
154             
155             if(json["sensorsNumber"]!=NULL)
156             {
157                 this->sensorsNumber = json["sensorsNumber"];
158                 
159                 
160 
161                 for(int i=0;i<sensorsNumber;i++)
162                 {   String name="sensor"+String(i);
163                     
164                     if(json[name]\&.success())
165                     {  
166                         JsonObject& sensorJson=json[name];
167                         
168                         if(sensorJson["reference"]\&.success() )
169                         {  
170                             this->sensors[i]\&.reference =sensorJson["reference"]\&.as<String>();
171                         }
172                         else
173                         {
174                             this->sensors[i]\&.reference=this->sensors[i]\&.reference;                            
175                             Serial\&.println("Not Found Name " );      
176                         }
177                         sensorJson["reference"]=this->sensors[i]\&.reference;
178 
179                     
180                         if(sensorJson["type"]\&.success() )
181                         {                   
182                             this->sensors[i]\&.type=sensorJson["type"]\&.as<String>();
183                         }
184                         else
185                         {
186                             this->sensors[i]\&.type=this->sensors[i]\&.type;
187                             Serial\&.println("Not Found Name " ) ;                     
188                         }
189                         sensorJson["type"]=this->sensors[i]\&.type;
190                     
191                     
192                         if(sensorJson["connection"]\&.success() )
193                         {
194                             this->sensors[i]\&.connection=sensorJson["connection"]\&.as<String>();
195                         }
196                         else
197                         {
198                             this->sensors[i]\&.connection=this->sensors[i]\&.connection;
199                             Serial\&.println("Not Found Name " ) ;                     
200                         }
201                         sensorJson["connection"]=this->sensors[i]\&.connection;
202 
203                     
204                         if(sensorJson["dataSize"]\&.success() )
205                         {               
206                             this->sensors[i]\&.dataSize=sensorJson["dataSize"];
207                         }
208                         else
209                         {
210                             this->sensors[i]\&.dataSize=this->sensors[i]\&.dataSize;
211                             Serial\&.println("Not Found Name " ) ;                     
212                         }
213                         sensorJson["dataSize"]=this->sensors[i]\&.dataSize;
214 
215                     
216                         if(sensorJson["address"]\&.success() )
217                         {                   
218                             this->sensors[i]\&.address=sensorJson["address"];
219                         }
220                         else
221                         {   
222                             this->sensors[i]\&.address=this->sensors[i]\&.address;
223                             Serial\&.println("Not Found Name " ) ;                     
224                         }
225                         sensorJson["address"]=this->sensors[i]\&.address;
226                     
227     
228                     }
229                     else
230                     {
231                         this->sensors[i]=this->sensors[i];                  
232                     }
233                                             
234                     json[name]["reference"]=this->sensors[i]\&.reference;
235                     json[name]["type"]=this->sensors[i]\&.type;
236                     json[name]["connection"]=this->sensors[i]\&.connection;
237                     json[name]["dataSize"]=this->sensors[i]\&.dataSize;
238                     json[name]["address"]=this->sensors[i]\&.address;
239                 }
240  
241             }
242             else
243             {
244                 this->sensorsNumber=this->sensorsNumber;
245             }
246             json["sensorsNumber"]=this->sensorsNumber;
247 
248             externalSensorsConfig\&.close();
249             externalSensorsConfig = SPIFFS\&.open("/externalSensorsConfig\&.json", "w");
250 
251             if(!externalSensorsConfig)
252             {
253                 return(false);
254             }
255             
256             json\&.printTo(externalSensorsConfig);
257             externalSensorsConfig\&.close();
258             
259             return(true); 
260         }
261     }   
262     
263 
264 
265 
266 }
.fi
.SS "int ExternalSensors::getJsonSize ()"
\fBExternalSensors::getJsonSize()\fP: This method is provided to return the size of the json data as a way to control memory usage
.PP
\fBReturns:\fP
.RS 4
the json data size 
.RE
.PP

.PP
Definition at line 105 of file ExternalSensors\&.cpp\&.
.PP
References jsonSize\&.
.PP
.nf
106 {
107     return(this->jsonSize );
108 }
.fi
.SS "void ExternalSensors::printConf ()"
\fBExternalSensors::printConf()\fP: This method is provided to print the configuration to the Serial Monitor 
.PP
Definition at line 273 of file ExternalSensors\&.cpp\&.
.PP
References jsonSize, sensors, and sensorsNumber\&.
.PP
Referenced by CoolBoard::begin()\&.
.PP
.nf
274 {
275     Serial\&.println("External Sensors config ");
276     Serial\&.println(sensorsNumber);
277     Serial\&.println(jsonSize);
278     for(int i=0;i<sensorsNumber;i++)
279     {
280         Serial\&.println(this->sensors[i]\&.reference);
281         Serial\&.println(this->sensors[i]\&.type);
282         Serial\&.println(this->sensors[i]\&.connection);
283         Serial\&.println(this->sensors[i]\&.dataSize);
284         Serial\&.println(this->sensors[i]\&.address);
285     
286     }
287 }
.fi
.SS "String ExternalSensors::read (void)"
\fBExternalSensors::read()\fP: This method is provided to read the data from the external sensors
.PP
\fBReturns:\fP
.RS 4
json string that contains the sensors data 
.RE
.PP

.PP
Definition at line 65 of file ExternalSensors\&.cpp\&.
.PP
References jsonSize, sensors, sensorsNumber, and ExternalSensors::sensor::type\&.
.PP
Referenced by CoolBoard::readSensors()\&.
.PP
.nf
66 {
67 
68     String data;
69     DynamicJsonBuffer  jsonBuffer(jsonSize) ;
70     JsonObject& root = jsonBuffer\&.createObject();
71 
72     if(!root\&.success() )
73     {
74 
75      return("00 ");
76     }
77 
78     else
79     {
80         if(sensorsNumber!=0)
81         {
82             for(int i=0;i<sensorsNumber;i++)
83             {
84             
85                 root[sensors[i]\&.type]=sensors[i]\&.exSensor->read();        
86             }
87         }   
88         
89         Serial\&.println(" ");
90         root\&.printTo(data);
91     
92         return(data);
93     }
94 
95 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "int ExternalSensors::jsonSize\fC [private]\fP"

.PP
Definition at line 52 of file ExternalSensors\&.h\&.
.PP
Referenced by config(), getJsonSize(), printConf(), and read()\&.
.SS "struct \fBExternalSensors::sensor\fP ExternalSensors::sensors[50]\fC [private]\fP"

.PP
Referenced by begin(), config(), printConf(), and read()\&.
.SS "int ExternalSensors::sensorsNumber\fC [private]\fP"

.PP
Definition at line 51 of file ExternalSensors\&.h\&.
.PP
Referenced by begin(), config(), printConf(), and read()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolAPI from the source code\&.
