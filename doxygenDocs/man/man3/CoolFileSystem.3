.TH "CoolFileSystem" 3 "Wed Jul 12 2017" "CoolAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoolFileSystem \- This class handles the file system\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolFileSystem\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "bool \fBbegin\fP ()"
.br
.ti -1c
.RI "bool \fBupdateConfigFiles\fP (String answer, int JSON_SIZE)"
.br
.ti -1c
.RI "bool \fBsaveSensorData\fP (const char *data, int Sensor_JSON_SIZE)"
.br
.ti -1c
.RI "bool \fBisDataSaved\fP ()"
.br
.ti -1c
.RI "String \fBgetSensorSavedData\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "bool \fBsavedData\fP =0"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class handles the file system\&. 
.PP
Definition at line 22 of file CoolFileSystem\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "bool CoolFileSystem::begin ()"
\fBCoolFileSystem::begin()\fP: This method is provided to start the SPIFFS object\&.
.PP
\fBReturns:\fP
.RS 4
true if SPIFFS was initialized correctly, false otherwise 
.RE
.PP

.PP
Definition at line 33 of file CoolFileSystem\&.cpp\&.
.PP
Referenced by CoolBoard::begin(), and CoolBoard::config()\&.
.PP
.nf
34 {
35 
36 #if DEBUG == 1
37 
38     Serial\&.println( F("Entering CoolFileSystem\&.begin()") );
39     Serial\&.println();    
40     Serial\&.print( F("SPIFFS success ? ") );
41     Serial\&.println(SPIFFS\&.begin());
42     Serial\&.println();
43 
44 #endif
45 
46     return( SPIFFS\&.begin() );                                   //Initialize Filesystem
47 
48 }
.fi
.SS "String CoolFileSystem::getSensorSavedData ()"
CoolFileSystem::getSensorData(): This method is provided to return the sensor data saved in the File System
.PP
\fBReturns:\fP
.RS 4
string json of the saved sensor data file 
.RE
.PP

.PP
Definition at line 658 of file CoolFileSystem\&.cpp\&.
.PP
References savedData\&.
.PP
Referenced by CoolBoard::onLineMode()\&.
.PP
.nf
659 {
660 
661 #if DEBUG == 1 
662 
663     Serial\&.println( F("Entering CoolFileSystem\&.getSensorSavedData()") );
664     Serial\&.println();
665 
666 #endif
667 
668     //open sensors data file
669     File sensorsData=SPIFFS\&.open("/sensorsData\&.json","r");
670     
671     if (!sensorsData)
672     {
673 
674     #if DEBUG == 1 
675 
676         Serial\&.println( F("Failed to read /sensorsData\&.json") );
677 
678     #endif
679  
680         return("failed to open file");
681     }
682 
683     else
684     {
685         size_t size = sensorsData\&.size();
686 
687         // Allocate a buffer to store contents of the file\&.
688         std::unique_ptr < char[] > buf(new char[size]);
689 
690         sensorsData\&.readBytes(buf\&.get(), size);
691 
692         DynamicJsonBuffer jsonBuffer;
693 
694         JsonObject & json = jsonBuffer\&.parseObject(buf\&.get());
695         
696         if (!json\&.success())
697         {
698 
699         #if DEBUG == 1
700         
701             Serial\&.println( F("failed to parse json") );
702         
703         #endif
704         
705             return("failed to parse json");
706         }
707         else
708         {   
709             //the return string
710             String sensorDataString;
711             
712             //print the json to the string
713             json\&.printTo(sensorDataString);
714             
715             //close the file
716             sensorsData\&.close();
717 
718             //delete data in the file
719             File sensorsData=SPIFFS\&.open("/sensorsData\&.json","w");
720             if (!sensorsData)   
721             {
722             #if DEBUG == 1
723         
724                 Serial\&.println( F("failed to delete data in the file") );
725         
726             #endif
727 
728                 return("failed to delete data in the file");
729             }
730 
731             sensorsData\&.close();
732             
733             //position the saved data flag to false
734             this->savedData=false;  
735             
736         #if DEBUG == 1 
737 
738             Serial\&.println( F("saved data : ") );
739             Serial\&.println(sensorDataString);
740             Serial\&.println();
741         
742         #endif
743 
744             //return the string
745             return(sensorDataString);       
746         }
747         
748         
749     }
750 
751 }
.fi
.SS "bool CoolFileSystem::isDataSaved ()"
\fBCoolFileSystem::isDataSaved()\fP: This method is provided to report wether there is sensor data saved in the File System\&.
.PP
\fBReturns:\fP
.RS 4
true if there is data saved, false otherwise 
.RE
.PP

.PP
Definition at line 635 of file CoolFileSystem\&.cpp\&.
.PP
References savedData\&.
.PP
Referenced by CoolBoard::onLineMode()\&.
.PP
.nf
636 {
637 
638 #if DEBUG == 1 
639 
640     Serial\&.println( F("Entering CoolFileSystem\&.isDataSaved()") );
641     Serial\&.println();
642     Serial\&.print( F("savedData : ") );
643     Serial\&.println(this->savedData);
644 
645 #endif
646 
647     return( this->savedData );
648 }
.fi
.SS "bool CoolFileSystem::saveSensorData (const char * data, int Sensor_JSON_SIZE)"
CoolFileSystem::saveSensorData( data, data size ): This method is provided to save the data on the local memory when there is no internet available
.PP
sets the saved data flag to TRUE when successful
.PP
\fBReturns:\fP
.RS 4
true if the data was saved, false otherwise 
.RE
.PP

.PP
Definition at line 60 of file CoolFileSystem\&.cpp\&.
.PP
References savedData\&.
.PP
Referenced by CoolBoard::offLineMode()\&.
.PP
.nf
61 {
62 
63 #if DEBUG == 1
64 
65     Serial\&.println( F("Entering CoolFileSystem\&.saveSensorData()") );
66     Serial\&.println();
67 
68 #endif
69     
70     File sensorsData=SPIFFS\&.open("/sensorsData\&.json","a+");
71     if(!sensorsData)
72     {
73     
74     #if DEBUG == 1
75     
76         Serial\&.println( F("failed to append to /sensorsData\&.json") );
77         Serial\&.println();
78     
79     #endif
80 
81         this->savedData=false;
82         return (false); 
83     }   
84 
85     DynamicJsonBuffer jsonBuffer(Sensor_JSON_SIZE);
86     JsonObject& root = jsonBuffer\&.parseObject(data);
87 
88     if( root\&.success() )
89     {
90         root\&.printTo(sensorsData);
91         sensorsData\&.close();
92     
93     #if DEBUG == 1
94     
95         Serial\&.println( F("saved data is : ") );
96         root\&.printTo(Serial);
97         Serial\&.println();
98     
99     #endif
100 
101         this->savedData=true;
102         return (true);      
103     }
104     else
105     {
106     
107     #if DEBUG == 1
108 
109         Serial\&.println( F("failed to parse json") );
110     
111     #endif
112 
113         this->savedData=false;
114         return(false);
115     }
116     
117 
118 }
.fi
.SS "bool CoolFileSystem::updateConfigFiles (String answer, int JSON_SIZE)"
CoolFileSyste::updateConfigFiles( mqtt answer, answer size): This method is provided to update the configuration files when the appropriate mqtt answer is received: -update : 1
.PP
\fBReturns:\fP
.RS 4
true if the files are updated correctly, false otherwise 
.RE
.PP

.PP
Definition at line 128 of file CoolFileSystem\&.cpp\&.
.PP
References temp\&.
.PP
Referenced by CoolBoard::update()\&.
.PP
.nf
129 {
130 
131 #if DEBUG == 1
132 
133     Serial\&.println( F("Entering CoolFileSystem\&.updateConfigFiles") );
134     Serial\&.println();
135     
136     Serial\&.println( F("input answer : ") );
137     Serial\&.println(answer);
138 #endif
139     //test
140     char buffer[ answer\&.length()+2 ];
141     answer\&.toCharArray( buffer, answer\&.length()+2  );
142     //total json object 
143     DynamicJsonBuffer jsonBuffer(JSON_SIZE);
144     JsonObject& root = jsonBuffer\&.parseObject( buffer );
145 
146 #if DEBUG == 1
147     Serial\&.println( F("json object : ") );   
148     root\&.printTo(Serial);
149 
150 #endif
151 
152     if(! ( root\&.success() ))
153     {
154     
155     #if DEBUG == 1
156 
157         Serial\&.println( F("failed to parse root ") );
158         Serial\&.println();
159     
160     #endif
161 
162         return(false);
163     }
164     else
165     {
166     #if DEBUG == 1
167         
168         Serial\&.println( F("success to parse root ") );
169         Serial\&.println();
170         
171     #endif  
172     }
173     
174 #if DEBUG == 1
175 
176     Serial\&.println( F("input message is : ") );
177     root\&.printTo(Serial);
178     Serial\&.println();
179 
180 #endif
181     //temp string
182     String temp;
183 
184     //CoolBoard Configuration File
185 
186         JsonObject& jsonCoolBoard=root["CoolBoard"];
187 
188 #if DEBUG == 1
189 
190     Serial\&.println( F("before config CoolBoard json") );
191     jsonCoolBoard\&.printTo(Serial);
192 
193 #endif
194 
195     if(jsonCoolBoard\&.success())
196     {
197         File coolBoardConfig = SPIFFS\&.open("/coolBoardConfig\&.json", "w"); 
198         if(!coolBoardConfig)
199         {   
200         #if DEBUG == 1
201             
202             Serial\&.println( F("failed to write to coolBoardConfig\&.json") );
203 
204         #endif
205             return(false);
206         }
207         
208         jsonCoolBoard\&.printTo(coolBoardConfig);
209         
210         coolBoardConfig\&.close();
211 
212 
213     #if DEBUG == 1
214 
215         Serial\&.println( F("CoolBoard Config") );
216         jsonCoolBoard\&.printTo(Serial);
217     
218     #endif
219         
220     }
221     else
222     {
223     
224     #if DEBUG == 1 
225 
226         Serial\&.println( F("failed to parse CoolBoard ") );
227     
228     #endif
229 
230     }       
231 
232     
233     //Cool Board Sensors Configuration File
234         JsonObject& jsonSensorsBoard=root["CoolSensorsBoard"];
235 
236 #if DEBUG == 1 
237 
238     Serial\&.println( F("before config CoolSensorsBoard json") );
239     jsonSensorsBoard\&.printTo(Serial);
240 
241 #endif 
242     
243     if(jsonSensorsBoard\&.success())
244     {   
245         File coolBoardSensorsConfig = SPIFFS\&.open("/coolBoardSensorsConfig\&.json", "w");   
246         if(!coolBoardSensorsConfig)
247         {
248         #if DEBUG == 1 
249         
250             Serial\&.println( F("failed to write coolBoardSensors\&.json") );
251 
252         #endif
253 
254             return(false);
255         }
256         
257         jsonSensorsBoard\&.printTo(coolBoardSensorsConfig);
258         coolBoardSensorsConfig\&.close();
259 
260     #if DEBUG == 1
261 
262         Serial\&.println("CoolBoardSensors Config");
263         jsonSensorsBoard\&.printTo(Serial);
264 
265     #endif
266 
267     }
268     else
269     {
270 
271     #if DEBUG == 1
272 
273         Serial\&.println( F("failed to parse CoolSensorsBoard sensors ") );    
274     
275     #endif
276 
277     }
278     
279     
280     
281     //rtc configuration file
282         JsonObject& jsonRTC=root["rtc"];
283 
284 #if DEBUG == 1 
285     
286     Serial\&.println( F("before config rtc json") );
287     jsonRTC\&.printTo(Serial);
288 
289 #endif
290     if(jsonRTC\&.success() )
291     {
292         File rtcConfig = SPIFFS\&.open("/rtcConfig\&.json", "w"); 
293         if(!rtcConfig)
294         {
295         
296         #if DEBUG == 1 
297 
298             Serial\&.println( F("failed to write rtcConfig\&.json") );
299 
300         #endif
301 
302             return(false);
303         }
304 
305         jsonRTC\&.printTo(rtcConfig);
306         rtcConfig\&.close();
307 
308     #if DEBUG == 1 
309 
310         Serial\&.println( F("RTC Config") );
311         jsonRTC\&.printTo(Serial);
312     
313     #endif
314 
315     
316     }
317     else
318     {
319     
320     #if DEBUG == 1 
321 
322         Serial\&.println( F("failed to parse rtc ") );
323     
324     #endif
325 
326     }
327 
328     
329     
330     
331     
332         //cool board led configuration
333         JsonObject& jsonLedBoard=root["led"];
334     
335 #if DEBUG == 1 
336 
337     Serial\&.println( F("before config Led json") );
338     jsonLedBoard\&.printTo(Serial);
339 
340 #endif
341 
342     if(jsonLedBoard\&.success())
343     {   
344         File coolBoardLedConfig = SPIFFS\&.open("/coolBoardLedConfig\&.json", "w");   
345         if(!coolBoardLedConfig)
346         {
347         
348         #if DEBUG == 1 
349         
350             Serial\&.println( F("failed to write led config") );
351         
352         #endif
353 
354             return(false);
355         }
356         
357         jsonLedBoard\&.printTo(coolBoardLedConfig);
358         coolBoardLedConfig\&.close();
359 
360     #if DEBUG == 1 
361 
362         Serial\&.println( F("CoolBoardLed Config") );      
363         jsonLedBoard\&.printTo(Serial);
364     
365     #endif
366 
367     
368     }
369     else
370     {
371     
372     #if DEBUG == 1 
373 
374         Serial\&.println( F("failed to parse led") );
375     
376     #endif 
377 
378     }
379         
380 
381     
382 
383     //jetpack configuration
384         JsonObject& jsonJetpack=root["jetPack"];
385 
386 #if DEBUG == 1 
387 
388     Serial\&.println( F("before config jetpack json") );
389     jsonJetpack\&.printTo(Serial);
390 
391 #endif
392 
393     if(jsonJetpack\&.success())
394     {   
395         File jetPackConfig = SPIFFS\&.open("/jetPackConfig\&.json", "w"); 
396         if(!jetPackConfig)
397         {
398         #if DEBUG == 1
399 
400             Serial\&.println( F("failed to write jetpack file") );
401         
402         #endif
403 
404             return(false);
405         }
406 
407         jsonJetpack\&.printTo(jetPackConfig);
408         jetPackConfig\&.close();
409 
410     #if DEBUG == 1
411 
412         Serial\&.println( F("jetpack Config") );   
413         jsonJetpack\&.printTo(Serial);
414     
415     #endif
416 
417     }
418 
419     else
420     {
421     
422     #if DEBUG == 1 
423 
424         Serial\&.println( F("failed to parse jetpack") );  
425     
426     #endif
427 
428     }
429     
430     //irene configuration   
431         JsonObject& jsonIrene=root["irene3000"];
432     
433 #if DEBUG == 1 
434 
435     Serial\&.println( F("before config irene json") ); 
436     jsonIrene\&.printTo(Serial);
437 
438 #endif 
439 
440     if(jsonIrene\&.success())
441     {
442         File irene3000Config = SPIFFS\&.open("/irene3000Config\&.json", "w"); 
443         if(!irene3000Config)
444         {
445 
446         #if DEBUG == 1 
447 
448             Serial\&.println( F("failed to write irene file") );
449         
450         #endif
451 
452             return(false);
453         }
454 
455         jsonIrene\&.printTo(irene3000Config);
456         irene3000Config\&.close();
457     
458     #if DEBUG == 1 
459         
460         Serial\&.println( F("irene3000 Config") );
461         jsonIrene\&.printTo(Serial);
462     
463     #endif
464     
465     }
466     else
467     {
468     
469     #if DEBUG == 1 
470 
471         Serial\&.println( F("failed to parse irene") );    
472     
473     #endif 
474 
475 
476     }
477     
478     //external sensors
479         JsonObject& jsonExternalSensors=root["externalSensors"];
480 
481 #if DEBUG == 1 
482 
483     Serial\&.println( F("before config external Sensors json") );
484     jsonExternalSensors\&.printTo(Serial);
485 
486 #endif
487 
488     if(jsonExternalSensors\&.success())
489     {
490         File externalSensorsConfig = SPIFFS\&.open("/externalSensorsConfig\&.json", "w"); 
491         if(!externalSensorsConfig)
492         {
493         
494         #if DEBUG == 1 
495 
496             Serial\&.println( F("failed to open external sensors file ") );
497         
498         #endif 
499 
500             return(false);
501         }
502 
503 #if DEBUG == 1 
504         
505         Serial\&.println( F("externalSensors Config") );
506         jsonExternalSensors\&.printTo(Serial);
507 
508 #endif 
509 
510         jsonExternalSensors\&.printTo(externalSensorsConfig);  
511         externalSensorsConfig\&.close();
512 
513     }
514 
515     else
516     {   
517 
518     #if DEBUG == 1
519         
520         Serial\&.println( F("failed to parse external sensors") );
521 
522     #endif
523 
524 
525     }
526 
527     
528     //mqtt config
529         JsonObject& jsonMQTT=root["mqtt"];
530     
531 #if DEBUG == 1 
532 
533     Serial\&.println( F("before config mqtt json") );
534     jsonMQTT\&.printTo(Serial);
535 
536 #endif
537 
538     if(jsonMQTT\&.success())
539     {
540         File mqttConfig = SPIFFS\&.open("/mqttConfig\&.json", "w");   
541         if(!mqttConfig)
542         {
543         
544         #if DEBUG == 1 
545 
546             Serial\&.println( F("failed to open mqtt file ") );
547         
548         #endif
549         
550             return(false);
551         }
552 
553 #if DEBUG == 1 
554 
555         Serial\&.println( F("mqtt config") );
556         jsonMQTT\&.printTo(Serial);
557 
558 #endif
559     
560         jsonMQTT\&.printTo(mqttConfig);
561         mqttConfig\&.close();
562     }
563     else
564     {
565 
566     #if DEBUG == 1 
567 
568         Serial\&.println( F("failed to parse mqtt") );
569     
570     #endif
571 
572     
573     }   
574 
575     //wifi config
576         JsonObject& jsonWifi=root["wifi"];
577     
578 #if DEBUG == 1 
579 
580     Serial\&.println( F("before config wifi json") );
581     jsonWifi\&.printTo(Serial);
582 
583 #endif
584 
585     if(jsonWifi\&.success())
586     {
587         File wifiConfig = SPIFFS\&.open("/wifiConfig\&.json", "w");   
588         if(!wifiConfig)
589         {
590         
591         #if DEBUG == 1 
592 
593             Serial\&.println( F("failed to open wifi file ") );
594         
595         #endif
596         
597             return(false);
598         }
599 
600 #if DEBUG == 1 
601 
602         Serial\&.println( F("wifi config") );
603         jsonWifi\&.printTo(Serial);
604 
605 #endif
606     
607         jsonMQTT\&.printTo(wifiConfig);
608         wifiConfig\&.close();
609     }
610     else
611     {
612 
613     #if DEBUG == 1 
614 
615         Serial\&.println( F("failed to parse wifi") );
616     
617     #endif
618 
619     
620     }   
621         
622     return true;
623 
624 }   
.fi
.SH "Member Data Documentation"
.PP 
.SS "bool CoolFileSystem::savedData =0\fC [private]\fP"

.PP
Definition at line 38 of file CoolFileSystem\&.h\&.
.PP
Referenced by getSensorSavedData(), isDataSaved(), and saveSensorData()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolAPI from the source code\&.
