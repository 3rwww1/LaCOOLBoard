.TH "CoolFileSystem" 3 "Wed Jul 12 2017" "CoolAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoolFileSystem \- This class handles the file system\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolFileSystem\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "bool \fBbegin\fP ()"
.br
.ti -1c
.RI "bool \fBupdateConfigFiles\fP (String answer, int JSON_SIZE)"
.br
.ti -1c
.RI "bool \fBsaveSensorData\fP (const char *data, int Sensor_JSON_SIZE)"
.br
.ti -1c
.RI "bool \fBisDataSaved\fP ()"
.br
.ti -1c
.RI "String \fBgetSensorSavedData\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "bool \fBsavedData\fP =0"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class handles the file system\&. 
.PP
Definition at line 22 of file CoolFileSystem\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "bool CoolFileSystem::begin ()"
\fBCoolFileSystem::begin()\fP: This method is provided to start the SPIFFS object\&.
.PP
\fBReturns:\fP
.RS 4
true if SPIFFS was initialized correctly, false otherwise 
.RE
.PP

.PP
Definition at line 33 of file CoolFileSystem\&.cpp\&.
.PP
Referenced by CoolBoard::begin(), and CoolBoard::config()\&.
.PP
.nf
34 {
35 
36 #if DEBUG == 1
37 
38     Serial\&.println( F("Entering CoolFileSystem\&.begin()") );
39     Serial\&.println();    
40     Serial\&.print( F("SPIFFS success ? ") );
41     Serial\&.println(SPIFFS\&.begin());
42     Serial\&.println();
43 
44 #endif
45 
46     return( SPIFFS\&.begin() );                                   //Initialize Filesystem
47 
48 }
.fi
.SS "String CoolFileSystem::getSensorSavedData ()"
CoolFileSystem::getSensorData(): This method is provided to return the sensor data saved in the File System
.PP
\fBReturns:\fP
.RS 4
string json of the saved sensor data file 
.RE
.PP

.PP
Definition at line 670 of file CoolFileSystem\&.cpp\&.
.PP
References savedData\&.
.PP
Referenced by CoolBoard::onLineMode()\&.
.PP
.nf
671 {
672 
673 #if DEBUG == 1 
674 
675     Serial\&.println( F("Entering CoolFileSystem\&.getSensorSavedData()") );
676     Serial\&.println();
677 
678 #endif
679 
680     //open sensors data file
681     File sensorsData=SPIFFS\&.open("/sensorsData\&.json","r");
682     
683     if (!sensorsData)
684     {
685 
686     #if DEBUG == 1 
687 
688         Serial\&.println( F("Failed to read /sensorsData\&.json") );
689 
690     #endif
691  
692         return("failed to open file");
693     }
694 
695     else
696     {
697         size_t size = sensorsData\&.size();
698 
699         // Allocate a buffer to store contents of the file\&.
700         std::unique_ptr < char[] > buf(new char[size]);
701 
702         sensorsData\&.readBytes(buf\&.get(), size);
703 
704         DynamicJsonBuffer jsonBuffer;
705 
706         JsonObject & json = jsonBuffer\&.parseObject(buf\&.get());
707         
708         if (!json\&.success())
709         {
710 
711         #if DEBUG == 1
712         
713             Serial\&.println( F("failed to parse json") );
714         
715         #endif
716         
717             return("failed to parse json");
718         }
719         else
720         {   
721             //the return string
722             String sensorDataString;
723             
724             //print the json to the string
725             json\&.printTo(sensorDataString);
726             
727             //close the file
728             sensorsData\&.close();
729 
730             //delete data in the file
731             File sensorsData=SPIFFS\&.open("/sensorsData\&.json","w");
732             if (!sensorsData)   
733             {
734             #if DEBUG == 1
735         
736                 Serial\&.println( F("failed to delete data in the file") );
737         
738             #endif
739 
740                 return("failed to delete data in the file");
741             }
742 
743             sensorsData\&.close();
744             
745             //position the saved data flag to false
746             this->savedData=false;  
747             
748         #if DEBUG == 1 
749 
750             Serial\&.println( F("saved data : ") );
751             Serial\&.println(sensorDataString);
752             Serial\&.println();
753         
754         #endif
755 
756             //return the string
757             return(sensorDataString);       
758         }
759         
760         
761     }
762 
763 }
.fi
.SS "bool CoolFileSystem::isDataSaved ()"
\fBCoolFileSystem::isDataSaved()\fP: This method is provided to report wether there is sensor data saved in the File System\&.
.PP
\fBReturns:\fP
.RS 4
true if there is data saved, false otherwise 
.RE
.PP

.PP
Definition at line 647 of file CoolFileSystem\&.cpp\&.
.PP
References savedData\&.
.PP
Referenced by CoolBoard::onLineMode()\&.
.PP
.nf
648 {
649 
650 #if DEBUG == 1 
651 
652     Serial\&.println( F("Entering CoolFileSystem\&.isDataSaved()") );
653     Serial\&.println();
654     Serial\&.print( F("savedData : ") );
655     Serial\&.println(this->savedData);
656 
657 #endif
658 
659     return( this->savedData );
660 }
.fi
.SS "bool CoolFileSystem::saveSensorData (const char * data, int Sensor_JSON_SIZE)"
CoolFileSystem::saveSensorData( data, data size ): This method is provided to save the data on the local memory when there is no internet available
.PP
sets the saved data flag to TRUE when successful
.PP
\fBReturns:\fP
.RS 4
true if the data was saved, false otherwise 
.RE
.PP

.PP
Definition at line 60 of file CoolFileSystem\&.cpp\&.
.PP
References savedData\&.
.PP
Referenced by CoolBoard::offLineMode()\&.
.PP
.nf
61 {
62 
63 #if DEBUG == 1
64 
65     Serial\&.println( F("Entering CoolFileSystem\&.saveSensorData()") );
66     Serial\&.println();
67 
68 #endif
69     
70     File sensorsData=SPIFFS\&.open("/sensorsData\&.json","a+");
71     if(!sensorsData)
72     {
73     
74     #if DEBUG == 1
75     
76         Serial\&.println( F("failed to append to /sensorsData\&.json") );
77         Serial\&.println();
78     
79     #endif
80 
81         this->savedData=false;
82         return (false); 
83     }   
84 
85     DynamicJsonBuffer jsonBuffer(Sensor_JSON_SIZE);
86     JsonObject& root = jsonBuffer\&.parseObject(data);
87 
88     if( root\&.success() )
89     {
90         root\&.printTo(sensorsData);
91         sensorsData\&.close();
92     
93     #if DEBUG == 1
94     
95         Serial\&.println( F("saved data is : ") );
96         root\&.printTo(Serial);
97         Serial\&.println();
98     
99     #endif
100 
101         this->savedData=true;
102         return (true);      
103     }
104     else
105     {
106     
107     #if DEBUG == 1
108 
109         Serial\&.println( F("failed to parse json") );
110     
111     #endif
112 
113         this->savedData=false;
114         return(false);
115     }
116     
117 
118 }
.fi
.SS "bool CoolFileSystem::updateConfigFiles (String answer, int JSON_SIZE)"
CoolFileSyste::updateConfigFiles( mqtt answer, answer size): This method is provided to update the configuration files when the appropriate mqtt answer is received: -update : 1
.PP
\fBReturns:\fP
.RS 4
true if the files are updated correctly, false otherwise 
.RE
.PP

.PP
Definition at line 128 of file CoolFileSystem\&.cpp\&.
.PP
References temp\&.
.PP
Referenced by CoolBoard::update()\&.
.PP
.nf
129 {
130 
131 #if DEBUG == 1
132 
133     Serial\&.println( F("Entering CoolFileSystem\&.updateConfigFiles") );
134     Serial\&.println();
135     
136     Serial\&.println( F("input answer : ") );
137     Serial\&.println(answer);
138 #endif
139     //test
140     char buffer[ answer\&.length()+2 ];
141     answer\&.toCharArray( buffer, answer\&.length()+2  );
142     //total json object 
143     DynamicJsonBuffer jsonBuffer(JSON_SIZE);
144     JsonObject& root = jsonBuffer\&.parseObject( buffer );
145 
146 #if DEBUG == 1
147 
148     Serial\&.println( F("json object : ") );   
149     root\&.printTo(Serial);
150 
151 #endif
152 
153     if(! ( root\&.success() ))
154     {
155     
156     #if DEBUG == 1
157 
158         Serial\&.println( F("failed to parse root ") );
159         Serial\&.println();
160     
161     #endif
162 
163         return(false);
164     }
165     else
166     {
167     #if DEBUG == 1
168         
169         Serial\&.println( F("success to parse root ") );
170         Serial\&.println();
171         
172     #endif  
173     }
174     
175 #if DEBUG == 1
176 
177     Serial\&.println( F("input message is : ") );
178     root\&.printTo(Serial);
179     Serial\&.println();
180 
181 #endif
182     //temp string
183     String temp;
184 
185     //CoolBoard Configuration File
186 
187         JsonObject& jsonCoolBoard=root["CoolBoard"];
188 
189 #if DEBUG == 1
190 
191     Serial\&.println( F("before config CoolBoard json") );
192     jsonCoolBoard\&.printTo(Serial);
193 
194 #endif
195 
196     if(jsonCoolBoard\&.success())
197     {
198         File coolBoardConfig = SPIFFS\&.open("/coolBoardConfig\&.json", "w"); 
199         if(!coolBoardConfig)
200         {   
201         #if DEBUG == 1
202             
203             Serial\&.println( F("failed to write to coolBoardConfig\&.json") );
204 
205         #endif
206             return(false);
207         }
208         
209         jsonCoolBoard\&.printTo(coolBoardConfig);
210         
211         coolBoardConfig\&.close();
212 
213 
214     #if DEBUG == 1
215 
216         Serial\&.println( F("CoolBoard Config") );
217         jsonCoolBoard\&.printTo(Serial);
218         Serial\&.println();
219     
220     #endif
221         
222     }
223     else
224     {
225     
226     #if DEBUG == 1 
227 
228         Serial\&.println( F("failed to parse CoolBoard ") );
229     
230     #endif
231 
232     }       
233 
234     
235     //Cool Board Sensors Configuration File
236         JsonObject& jsonSensorsBoard=root["CoolSensorsBoard"];
237 
238 #if DEBUG == 1 
239 
240     Serial\&.println( F("before config CoolSensorsBoard json") );
241     jsonSensorsBoard\&.printTo(Serial);
242 
243 #endif 
244     
245     if(jsonSensorsBoard\&.success())
246     {   
247         File coolBoardSensorsConfig = SPIFFS\&.open("/coolBoardSensorsConfig\&.json", "w");   
248         if(!coolBoardSensorsConfig)
249         {
250         #if DEBUG == 1 
251         
252             Serial\&.println( F("failed to write coolBoardSensors\&.json") );
253 
254         #endif
255 
256             return(false);
257         }
258         
259         jsonSensorsBoard\&.printTo(coolBoardSensorsConfig);
260         coolBoardSensorsConfig\&.close();
261 
262     #if DEBUG == 1
263 
264         Serial\&.println("CoolBoardSensors Config");
265         jsonSensorsBoard\&.printTo(Serial);
266         Serial\&.println();
267 
268     #endif
269 
270     }
271     else
272     {
273 
274     #if DEBUG == 1
275 
276         Serial\&.println( F("failed to parse CoolSensorsBoard sensors ") );    
277     
278     #endif
279 
280     }
281     
282     
283     
284     //rtc configuration file
285         JsonObject& jsonRTC=root["rtc"];
286 
287 #if DEBUG == 1 
288     
289     Serial\&.println( F("before config rtc json") );
290     jsonRTC\&.printTo(Serial);
291 
292 #endif
293     if(jsonRTC\&.success() )
294     {
295         File rtcConfig = SPIFFS\&.open("/rtcConfig\&.json", "w"); 
296         if(!rtcConfig)
297         {
298         
299         #if DEBUG == 1 
300 
301             Serial\&.println( F("failed to write rtcConfig\&.json") );
302 
303         #endif
304 
305             return(false);
306         }
307 
308         jsonRTC\&.printTo(rtcConfig);
309         rtcConfig\&.close();
310 
311     #if DEBUG == 1 
312 
313         Serial\&.println( F("RTC Config") );
314         jsonRTC\&.printTo(Serial);
315         Serial\&.println();
316     
317     #endif
318 
319     
320     }
321     else
322     {
323     
324     #if DEBUG == 1 
325 
326         Serial\&.println( F("failed to parse rtc ") );
327     
328     #endif
329 
330     }
331 
332     
333     
334     
335     
336         //cool board led configuration
337         JsonObject& jsonLedBoard=root["led"];
338     
339 #if DEBUG == 1 
340 
341     Serial\&.println( F("before config Led json") );
342     jsonLedBoard\&.printTo(Serial);
343 
344 #endif
345 
346     if(jsonLedBoard\&.success())
347     {   
348         File coolBoardLedConfig = SPIFFS\&.open("/coolBoardLedConfig\&.json", "w");   
349         if(!coolBoardLedConfig)
350         {
351         
352         #if DEBUG == 1 
353         
354             Serial\&.println( F("failed to write led config") );
355         
356         #endif
357 
358             return(false);
359         }
360         
361         jsonLedBoard\&.printTo(coolBoardLedConfig);
362         coolBoardLedConfig\&.close();
363 
364 
365     #if DEBUG == 1 
366 
367         Serial\&.println( F("CoolBoardLed Config") );      
368         jsonLedBoard\&.printTo(Serial);
369         Serial\&.println();
370     
371     #endif
372 
373     
374     }
375     else
376     {
377     
378     #if DEBUG == 1 
379 
380         Serial\&.println( F("failed to parse led") );
381     
382     #endif 
383 
384     }
385         
386 
387     
388 
389     //jetpack configuration
390         JsonObject& jsonJetpack=root["jetPack"];
391 
392 #if DEBUG == 1 
393 
394     Serial\&.println( F("before config jetpack json") );
395     jsonJetpack\&.printTo(Serial);
396 
397 #endif
398 
399     if(jsonJetpack\&.success())
400     {   
401         File jetPackConfig = SPIFFS\&.open("/jetPackConfig\&.json", "w"); 
402         if(!jetPackConfig)
403         {
404         #if DEBUG == 1
405 
406             Serial\&.println( F("failed to write jetpack file") );
407         
408         #endif
409 
410             return(false);
411         }
412 
413         jsonJetpack\&.printTo(jetPackConfig);
414         jetPackConfig\&.close();
415 
416     #if DEBUG == 1
417 
418         Serial\&.println( F("jetpack Config") );   
419         jsonJetpack\&.printTo(Serial);
420         Serial\&.println();
421     
422     #endif
423 
424     }
425 
426     else
427     {
428     
429     #if DEBUG == 1 
430 
431         Serial\&.println( F("failed to parse jetpack") );  
432     
433     #endif
434 
435     }
436     
437     //irene configuration   
438         JsonObject& jsonIrene=root["irene3000"];
439     
440 #if DEBUG == 1 
441 
442     Serial\&.println( F("before config irene json") ); 
443     jsonIrene\&.printTo(Serial);
444 
445 #endif 
446 
447     if(jsonIrene\&.success())
448     {
449         File irene3000Config = SPIFFS\&.open("/irene3000Config\&.json", "w"); 
450         if(!irene3000Config)
451         {
452 
453         #if DEBUG == 1 
454 
455             Serial\&.println( F("failed to write irene file") );
456         
457         #endif
458 
459             return(false);
460         }
461 
462         jsonIrene\&.printTo(irene3000Config);
463         irene3000Config\&.close();
464     
465     #if DEBUG == 1 
466         
467         Serial\&.println( F("irene3000 Config") );
468         jsonIrene\&.printTo(Serial);
469         Serial\&.println();
470     
471     #endif
472     
473     }
474     else
475     {
476     
477     #if DEBUG == 1 
478 
479         Serial\&.println( F("failed to parse irene") );    
480     
481     #endif 
482 
483 
484     }
485     
486     //external sensors
487         JsonObject& jsonExternalSensors=root["externalSensors"];
488 
489 #if DEBUG == 1 
490 
491     Serial\&.println( F("before config external Sensors json") );
492     jsonExternalSensors\&.printTo(Serial);
493 
494 #endif
495 
496     if(jsonExternalSensors\&.success())
497     {
498         File externalSensorsConfig = SPIFFS\&.open("/externalSensorsConfig\&.json", "w"); 
499         if(!externalSensorsConfig)
500         {
501         
502         #if DEBUG == 1 
503 
504             Serial\&.println( F("failed to open external sensors file ") );
505         
506         #endif 
507 
508             return(false);
509         }
510 
511         jsonExternalSensors\&.printTo(externalSensorsConfig);  
512         externalSensorsConfig\&.close();
513 
514 #if DEBUG == 1 
515         
516         Serial\&.println( F("externalSensors Config") );
517         jsonExternalSensors\&.printTo(Serial);
518         Serial\&.println();
519 
520 #endif 
521 
522 
523     }
524 
525     else
526     {   
527 
528     #if DEBUG == 1
529         
530         Serial\&.println( F("failed to parse external sensors") );
531 
532     #endif
533 
534 
535     }
536 
537     
538     //mqtt config
539         JsonObject& jsonMQTT=root["mqtt"];
540     
541 #if DEBUG == 1 
542 
543     Serial\&.println( F("before config mqtt json") );
544     jsonMQTT\&.printTo(Serial);
545 
546 #endif
547 
548     if(jsonMQTT\&.success())
549     {
550         File mqttConfig = SPIFFS\&.open("/mqttConfig\&.json", "w");   
551         if(!mqttConfig)
552         {
553         
554         #if DEBUG == 1 
555 
556             Serial\&.println( F("failed to open mqtt file ") );
557         
558         #endif
559         
560             return(false);
561         }
562             
563         jsonMQTT\&.printTo(mqttConfig);
564         mqttConfig\&.close();
565 
566 #if DEBUG == 1 
567 
568         Serial\&.println( F("mqtt config") );
569         jsonMQTT\&.printTo(Serial);
570         Serial\&.println();
571 
572 #endif
573 
574     }
575     else
576     {
577 
578     #if DEBUG == 1 
579 
580         Serial\&.println( F("failed to parse mqtt") );
581     
582     #endif
583 
584     
585     }   
586 
587     //wifi config
588         JsonObject& jsonWifi=root["wifi"];
589     
590 #if DEBUG == 1 
591 
592     Serial\&.println( F("before config wifi json") );
593     jsonWifi\&.printTo(Serial);
594 
595 #endif
596 
597     if(jsonWifi\&.success())
598     {
599         File wifiConfig = SPIFFS\&.open("/wifiConfig\&.json", "w");   
600         if(!wifiConfig)
601         {
602         
603         #if DEBUG == 1 
604 
605             Serial\&.println( F("failed to open wifi file ") );
606         
607         #endif
608         
609             return(false);
610         }
611 
612         jsonWifi\&.printTo(wifiConfig);
613         wifiConfig\&.close();
614 
615 #if DEBUG == 1 
616 
617         Serial\&.println( F("wifi config") );
618         jsonWifi\&.printTo(Serial);
619 
620 #endif
621     }
622     else
623     {
624 
625     #if DEBUG == 1 
626 
627         Serial\&.println( F("failed to parse wifi") );
628     
629     #endif
630 
631     
632     }   
633         
634     return true;
635 
636 }   
.fi
.SH "Member Data Documentation"
.PP 
.SS "bool CoolFileSystem::savedData =0\fC [private]\fP"

.PP
Definition at line 38 of file CoolFileSystem\&.h\&.
.PP
Referenced by getSensorSavedData(), isDataSaved(), and saveSensorData()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolAPI from the source code\&.
