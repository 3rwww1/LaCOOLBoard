.TH "CoolFileSystem" 3 "Wed Jul 5 2017" "CoolAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoolFileSystem \- This class handles the file system\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolFileSystem\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "bool \fBbegin\fP ()"
.br
.ti -1c
.RI "bool \fBupdateConfigFiles\fP (String answer, int JSON_SIZE)"
.br
.ti -1c
.RI "bool \fBsaveSensorData\fP (const char *data, int Sensor_JSON_SIZE)"
.br
.ti -1c
.RI "bool \fBisDataSaved\fP ()"
.br
.ti -1c
.RI "String \fBgetSensorSavedData\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "bool \fBsavedData\fP =0"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class handles the file system\&. 
.PP
Definition at line 22 of file CoolFileSystem\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "bool CoolFileSystem::begin ()"
\fBCoolFileSystem::begin()\fP: This method is provided to start the SPIFFS object\&.
.PP
\fBReturns:\fP
.RS 4
true if SPIFFS was initialized correctly, false otherwise 
.RE
.PP

.PP
Definition at line 22 of file CoolFileSystem\&.cpp\&.
.PP
Referenced by CoolBoard::begin(), and CoolBoard::config()\&.
.PP
.nf
23 {
24     Serial\&.println("Entering CoolFileSystem\&.begin()");
25     Serial\&.println();
26     
27     Serial\&.print("SPIFFS success ? ");
28     Serial\&.println(SPIFFS\&.begin());
29     Serial\&.println();
30     
31     return( SPIFFS\&.begin() );                                   //Initialize Filesystem
32 
33 }
.fi
.SS "String CoolFileSystem::getSensorSavedData ()"
CoolFileSystem::getSensorData(): This method is provided to return the sensor data saved in the File System
.PP
\fBReturns:\fP
.RS 4
string json of the saved sensor data file 
.RE
.PP

.PP
Definition at line 356 of file CoolFileSystem\&.cpp\&.
.PP
References savedData\&.
.PP
Referenced by CoolBoard::onLineMode()\&.
.PP
.nf
357 {
358     Serial\&.println("Entering CoolFileSystem\&.getSensorSavedData()");
359     Serial\&.println();
360 
361     //open sensors data file
362     File sensorsData=SPIFFS\&.open("/sensorsData\&.json","r");
363     
364     if (!sensorsData)
365     {
366         Serial\&.println("Failed to read /sensorsData\&.json"); 
367         return("failed to open file");
368     }
369     else
370     {
371         size_t size = sensorsData\&.size();
372 
373         // Allocate a buffer to store contents of the file\&.
374         std::unique_ptr < char[] > buf(new char[size]);
375 
376         sensorsData\&.readBytes(buf\&.get(), size);
377 
378         DynamicJsonBuffer jsonBuffer;
379 
380         JsonObject & json = jsonBuffer\&.parseObject(buf\&.get());
381         
382         if (!json\&.success())
383         {
384             return("failed to parse json");
385         }
386         else
387         {   
388             //the return string
389             String sensorDataString;
390             
391             //print the json to the string
392             json\&.printTo(sensorDataString);
393             
394             //close the file
395             sensorsData\&.close();
396 
397             //delete data in the file
398             File sensorsData=SPIFFS\&.open("/sensorsData\&.json","w");
399             if (!sensorsData)   
400             {
401                 return("failed to delete data in the file");
402             }
403 
404             sensorsData\&.close();
405             
406             //position the saved data flag to false
407             this->savedData=false;  
408         
409             Serial\&.println("saved data : ");
410             Serial\&.println(sensorDataString);
411             Serial\&.println();
412 
413             //return the string
414             return(sensorDataString);       
415         }
416         
417         
418     }
419 
420 }
.fi
.SS "bool CoolFileSystem::isDataSaved ()"
\fBCoolFileSystem::isDataSaved()\fP: This method is provided to report wether there is sensor data saved in the File System\&.
.PP
\fBReturns:\fP
.RS 4
true if there is data saved, false otherwise 
.RE
.PP

.PP
Definition at line 337 of file CoolFileSystem\&.cpp\&.
.PP
References savedData\&.
.PP
Referenced by CoolBoard::onLineMode()\&.
.PP
.nf
338 {
339     Serial\&.println("Entering CoolFileSystem\&.isDataSaved()");
340     Serial\&.println();
341     
342     Serial\&.print("savedData : ");
343     Serial\&.println(this->savedData);
344 
345     return( this->savedData );
346 }
.fi
.SS "bool CoolFileSystem::saveSensorData (const char * data, int Sensor_JSON_SIZE)"
CoolFileSystem::saveSensorData( data, data size ): This method is provided to save the data on the local memory when there is no internet available
.PP
sets the saved data flag to TRUE when successful
.PP
\fBReturns:\fP
.RS 4
true if the data was saved, false otherwise 
.RE
.PP

.PP
Definition at line 45 of file CoolFileSystem\&.cpp\&.
.PP
References savedData\&.
.PP
Referenced by CoolBoard::offLineMode()\&.
.PP
.nf
46 {
47     Serial\&.println("Entering CoolFileSystem\&.saveSensorData()");
48     Serial\&.println();
49 
50     
51     File sensorsData=SPIFFS\&.open("/sensorsData\&.json","a+");
52     if(!sensorsData)
53     {
54         Serial\&.println("failed to append to /sensorsData\&.json");
55         Serial\&.println();
56 
57         this->savedData=false;
58         return (false); 
59     }   
60 
61     DynamicJsonBuffer jsonBuffer(Sensor_JSON_SIZE);
62     JsonObject& root = jsonBuffer\&.parseObject(data);
63 
64     if( root\&.success() )
65     {
66         root\&.printTo(sensorsData);
67         sensorsData\&.close();
68 
69         Serial\&.println("saved data is : ");
70         root\&.printTo(Serial);
71         Serial\&.println();
72 
73         this->savedData=true;
74         return (true);      
75     }
76     else
77     {
78         Serial\&.println("failed to parse json");
79         this->savedData=false;
80         return(false);
81     }
82     
83 
84 }
.fi
.SS "bool CoolFileSystem::updateConfigFiles (String answer, int JSON_SIZE)"
CoolFileSyste::updateConfigFiles( mqtt answer, answer size): This method is provided to update the configuration files when the appropriate mqtt answer is received: -update : 1
.PP
\fBReturns:\fP
.RS 4
true if the files are updated correctly, false otherwise 
.RE
.PP

.PP
Definition at line 94 of file CoolFileSystem\&.cpp\&.
.PP
References temp\&.
.PP
Referenced by CoolBoard::update()\&.
.PP
.nf
95 {
96     Serial\&.println("Entering CoolFileSystem\&.updateConfigFiles");
97     Serial\&.println();
98 
99     //String conversion to char*
100     //char jsonRoot = new char(answer\&.length() + 1);
101     //strcpy(jsonRoot, answer\&.c_str());
102     //total json object 
103     DynamicJsonBuffer jsonBuffer(JSON_SIZE);
104     JsonObject& root = jsonBuffer\&.parseObject( answer\&.c_str() );
105     
106     if(! ( root\&.success() ))
107     {
108         Serial\&.println("failed to parse root ");
109         Serial\&.println();
110         return(false);
111     }
112     else
113     {
114         Serial\&.println("success to parse root ");
115         Serial\&.println();    
116     }
117     
118     Serial\&.println("input message is : ");
119     root\&.printTo(Serial);
120     Serial\&.println();
121 
122     //temp string
123     String temp;
124 
125     //CoolBoard Configuration File
126 
127         JsonObject& jsonCoolBoard=root["CoolBoard"];
128     if(jsonCoolBoard\&.success())
129     {
130         File coolBoardConfig = SPIFFS\&.open("/coolBoardConfig\&.json", "w"); 
131         if(!coolBoardConfig)
132         {   
133             Serial\&.println("failed to write to coolBoardConfig\&.json");
134             return(false);
135         }
136         Serial\&.println("CoolBoard Config");
137         jsonCoolBoard\&.printTo(Serial);
138         
139         jsonCoolBoard\&.printTo(coolBoardConfig);
140         
141         coolBoardConfig\&.close();
142     }
143     else
144     {
145         Serial\&.println("failed to parse CoolBoard ");
146     }       
147 
148     
149     //Cool Board Sensors Configuration File
150     DynamicJsonBuffer jsonSBoard;
151         JsonObject& jsonSensorsBoard=root["CoolSensorsBoard"];  
152     if(jsonSensorsBoard\&.success())
153     {   
154         File coolBoardSensorsConfig = SPIFFS\&.open("/coolBoardSensorsConfig\&.json", "w");   
155         if(!coolBoardSensorsConfig)
156         {
157             Serial\&.println("failed to write coolBoardSensors\&.json");
158             return(false);
159         }
160         
161         Serial\&.println("CoolBoardSensors Config");
162         jsonSensorsBoard\&.printTo(coolBoardSensorsConfig);
163         jsonSensorsBoard\&.printTo(Serial);
164         coolBoardSensorsConfig\&.close();
165     }
166     else
167     {
168         Serial\&.println("failed to parse CoolSensorsBoard sensors "); 
169     }
170     
171     
172     
173     //rtc configuration file
174     DynamicJsonBuffer jsonR;
175         JsonObject& jsonRTC=root["rtc"];
176     Serial\&.println("before config rtc json");
177     jsonRTC\&.printTo(Serial);
178     if(jsonRTC\&.success() )
179     {
180         File rtcConfig = SPIFFS\&.open("/rtcConfig\&.json", "w"); 
181         if(!rtcConfig)
182         {
183             Serial\&.println("failed to write rtcConfig\&.json");
184             return(false);
185         }
186         Serial\&.println("RTC Config");
187         jsonRTC\&.printTo(rtcConfig);
188         jsonRTC\&.printTo(Serial);
189         rtcConfig\&.close();
190     
191     }
192     else
193     {
194         Serial\&.println("failed to parse rtc ");
195     }
196 
197     
198     
199     
200     
201         //cool board led configuration
202     DynamicJsonBuffer jsonLBoard;
203         JsonObject& jsonLedBoard=root["led"];
204     Serial\&.println("before config Led json");
205     jsonLedBoard\&.printTo(Serial);
206     if(jsonLedBoard\&.success())
207     {   
208         File coolBoardLedConfig = SPIFFS\&.open("/coolBoardLedConfig\&.json", "w");   
209         if(!coolBoardLedConfig)
210         {
211             Serial\&.println("failed to write led config");
212             return(false);
213         }
214         Serial\&.println("CoolBoardLed Config");
215         jsonLedBoard\&.printTo(coolBoardLedConfig);
216         jsonLedBoard\&.printTo(Serial);
217         coolBoardLedConfig\&.close();
218     
219     }
220     else
221     {
222         Serial\&.println("failed to parse led");
223     }
224         
225 
226     
227 
228     //jetpack configuration
229     DynamicJsonBuffer jsonJBoard;
230         JsonObject& jsonJetpack=root["jetPack"];
231     Serial\&.println("before config jetpack json");
232     jsonJetpack\&.printTo(Serial);
233     if(jsonJetpack\&.success())
234     {   
235         File jetPackConfig = SPIFFS\&.open("/jetPackConfig\&.json", "w"); 
236         if(!jetPackConfig)
237         {
238             Serial\&.println("failed to write jetpack file");
239             return(false);
240         }
241         Serial\&.println("jetpack Config");    
242         jsonJetpack\&.printTo(jetPackConfig);
243         jsonJetpack\&.printTo(Serial);
244         jetPackConfig\&.close();
245     }
246     else
247     {
248         Serial\&.println("failed to parse jetpack");   
249     }
250     
251     //irene configuration   
252     DynamicJsonBuffer jsonIBoard;
253         JsonObject& jsonIrene=root["irene3000"];
254     Serial\&.println("before config irene json");  
255     jsonIrene\&.printTo(Serial);
256     if(jsonIrene\&.success())
257     {
258         File irene3000Config = SPIFFS\&.open("/irene3000Config\&.json", "w"); 
259         if(!irene3000Config)
260         {
261             Serial\&.println("failed to write irene file");
262             return(false);
263         }
264         Serial\&.println("irene3000 Config");
265         jsonIrene\&.printTo(irene3000Config);
266         jsonIrene\&.printTo(Serial);
267         irene3000Config\&.close();
268     
269     }
270     else
271     {
272         Serial\&.println("failed to parse irene"); 
273     }
274     
275     //external sensors
276     DynamicJsonBuffer jsonESBoard;
277         JsonObject& jsonExternalSensors=root["externalSensors"];
278     Serial\&.println("before config external Sensors json");
279     jsonExternalSensors\&.printTo(Serial);
280     if(jsonExternalSensors\&.success())
281     {
282         File externalSensorsConfig = SPIFFS\&.open("/externalSensorsConfig\&.json", "w"); 
283         if(!externalSensorsConfig)
284         {
285             Serial\&.println("failed to open external sensors file ");
286             return(false);
287         }
288         Serial\&.println("externalSensors Config");
289         jsonExternalSensors\&.printTo(externalSensorsConfig);
290         jsonExternalSensors\&.printTo(Serial);
291     
292         externalSensorsConfig\&.close();
293 
294     }
295     else
296     {
297         Serial\&.println("failed to parse external sensors");  
298     }
299 
300     
301     //mqtt config
302     DynamicJsonBuffer jsonMQ;
303         JsonObject& jsonMQTT=root["mqtt"];
304     Serial\&.println("before config mqtt json");
305     jsonMQTT\&.printTo(Serial);
306     if(jsonMQTT\&.success())
307     {
308         File mqttConfig = SPIFFS\&.open("/mqttConfig\&.json", "w");   
309         if(!mqttConfig)
310         {
311             Serial\&.println("failed to open mqtt file ");     
312             return(false);
313         }
314         Serial\&.println("mqtt config");
315         jsonMQTT\&.printTo(mqttConfig);
316         jsonMQTT\&.printTo(Serial);
317         mqttConfig\&.close();
318     }
319     else
320     {
321         Serial\&.println("failed to parse mqtt");  
322     }   
323         
324     return true;
325 
326 }   
.fi
.SH "Member Data Documentation"
.PP 
.SS "bool CoolFileSystem::savedData =0\fC [private]\fP"

.PP
Definition at line 38 of file CoolFileSystem\&.h\&.
.PP
Referenced by getSensorSavedData(), isDataSaved(), and saveSensorData()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolAPI from the source code\&.
