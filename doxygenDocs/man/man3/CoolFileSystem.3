.TH "CoolFileSystem" 3 "Wed Aug 2 2017" "CoolAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoolFileSystem \- This class handles the file system\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolFileSystem\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "bool \fBbegin\fP ()"
.br
.ti -1c
.RI "bool \fBupdateConfigFiles\fP (String answer)"
.br
.ti -1c
.RI "bool \fBsaveSensorData\fP (const char *data)"
.br
.ti -1c
.RI "bool \fBsaveSensorDataCSV\fP (const char *data)"
.br
.ti -1c
.RI "bool \fBisDataSaved\fP ()"
.br
.ti -1c
.RI "String \fBgetSensorSavedData\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "bool \fBsavedData\fP =0"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class handles the file system\&. 
.PP
Definition at line 22 of file CoolFileSystem\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "bool CoolFileSystem::begin ()"
\fBCoolFileSystem::begin()\fP: This method is provided to start the SPIFFS object\&.
.PP
\fBReturns:\fP
.RS 4
true if SPIFFS was initialized correctly, false otherwise 
.RE
.PP

.PP
Definition at line 33 of file CoolFileSystem\&.cpp\&.
.PP
Referenced by CoolBoard::config()\&.
.PP
.nf
34 {
35 
36 #if DEBUG == 1
37 
38     Serial\&.println( F("Entering CoolFileSystem\&.begin()") );
39     Serial\&.println();    
40     Serial\&.print( F("SPIFFS success ? ") );
41     Serial\&.println(SPIFFS\&.begin());
42     Serial\&.println();
43 
44 #endif
45 
46     return( SPIFFS\&.begin() );                                   //Initialize Filesystem
47 
48 }
.fi
.SS "String CoolFileSystem::getSensorSavedData ()"
CoolFileSystem::getSensorData(): This method is provided to return the sensor data saved in the File System
.PP
\fBReturns:\fP
.RS 4
string json of the saved sensor data file 
.RE
.PP

.PP
Definition at line 950 of file CoolFileSystem\&.cpp\&.
.PP
References savedData\&.
.PP
Referenced by CoolBoard::onLineMode()\&.
.PP
.nf
951 {
952 
953 #if DEBUG == 1 
954 
955     Serial\&.println( F("Entering CoolFileSystem\&.getSensorSavedData()") );
956     Serial\&.println();
957 
958 #endif
959 
960     //open sensors data file
961     File sensorsData=SPIFFS\&.open("/sensorsData\&.json","r");
962     
963     if (!sensorsData)
964     {
965 
966     #if DEBUG == 1 
967 
968         Serial\&.println( F("Failed to read /sensorsData\&.json") );
969 
970     #endif
971  
972         return("failed to open file");
973     }
974 
975     else
976     {
977         size_t size = sensorsData\&.size();
978 
979         // Allocate a buffer to store contents of the file\&.
980         std::unique_ptr < char[] > buf(new char[size]);
981 
982         sensorsData\&.readBytes(buf\&.get(), size);
983 
984         DynamicJsonBuffer jsonBuffer;
985 
986         JsonObject & json = jsonBuffer\&.parseObject(buf\&.get());
987         
988         if (!json\&.success())
989         {
990 
991         #if DEBUG == 1
992         
993             Serial\&.println( F("failed to parse json") );
994         
995         #endif
996         
997             return("failed to parse json");
998         }
999         else
1000         {   
1001             //the return string
1002             String sensorDataString;
1003             
1004             //print the json to the string
1005             json\&.printTo(sensorDataString);
1006             
1007             //close the file
1008             sensorsData\&.close();
1009 
1010             //delete data in the file
1011             File sensorsData=SPIFFS\&.open("/sensorsData\&.json","w");
1012             File sensorsDataCSV=SPIFFS\&.open("/sensorsData\&.csv","w");
1013             if( (!sensorsData)||(!sensorsDataCSV) ) 
1014             {
1015             #if DEBUG == 1
1016         
1017                 Serial\&.println( F("failed to delete data in the file") );
1018         
1019             #endif
1020 
1021                 return("failed to delete data in the file");
1022             }
1023 
1024             sensorsData\&.close();
1025             sensorsDataCSV\&.close();
1026 
1027             //position the saved data flag to false
1028             this->savedData=false;  
1029             
1030         #if DEBUG == 1 
1031 
1032             Serial\&.println( F("saved data : ") );
1033             Serial\&.println(sensorDataString);
1034             Serial\&.println();
1035 
1036             Serial\&.print(F("jsonBuffer size: "));
1037             Serial\&.println(jsonBuffer\&.size());
1038             Serial\&.println();
1039 
1040         
1041         #endif
1042 
1043             //return the string
1044             return(sensorDataString);       
1045         }
1046         
1047         
1048     }
1049 
1050 }
.fi
.SS "bool CoolFileSystem::isDataSaved ()"
\fBCoolFileSystem::isDataSaved()\fP: This method is provided to report wether there is sensor data saved in the File System\&.
.PP
\fBReturns:\fP
.RS 4
true if there is data saved, false otherwise 
.RE
.PP

.PP
Definition at line 885 of file CoolFileSystem\&.cpp\&.
.PP
References savedData\&.
.PP
Referenced by CoolBoard::onLineMode()\&.
.PP
.nf
886 {
887 
888 #if DEBUG == 1 
889 
890     Serial\&.println( F("Entering CoolFileSystem\&.isDataSaved()") );
891     Serial\&.println();
892 #endif
893 
894     File sensorsData=SPIFFS\&.open("/sensorsData\&.json","r");
895     File sensorsDataCSV=SPIFFS\&.open("/sensorsData\&.csv","r");
896     
897     if( (!sensorsData)||(!sensorsDataCSV) ) 
898     {
899     #if DEBUG == 1
900 
901         Serial\&.println( F("failed to open files") );
902 
903     #endif
904         
905         this->savedData=false;
906     }
907     else
908     {       
909         #if DEBUG == 1
910 
911             Serial\&.print(F("sensors Data file size : "));
912             Serial\&.println(sensorsData\&.size());
913             Serial\&.println();
914             
915             Serial\&.print(F("sensors Data CSV file size : "));                
916             Serial\&.println(sensorsDataCSV\&.size());
917             Serial\&.println();
918         #endif  
919 
920         if( (sensorsData\&.size()!=0) || (sensorsDataCSV\&.size()!=0) )
921         {
922             this->savedData=true;
923         }
924         else
925         {
926 
927             this->savedData=false;      
928         
929         }   
930     }
931 
932 #if DEBUG == 1 
933 
934     Serial\&.print( F("savedData : ") );
935     Serial\&.println(this->savedData);
936 
937 #endif
938 
939     return( this->savedData );
940 }
.fi
.SS "bool CoolFileSystem::saveSensorData (const char * data)"
CoolFileSystem::saveSensorData( data ): This method is provided to save the data on the local memory when there is no internet available
.PP
sets the saved data flag to TRUE when successful
.PP
\fBReturns:\fP
.RS 4
true if the data was saved, false otherwise 
.RE
.PP

.PP
Definition at line 60 of file CoolFileSystem\&.cpp\&.
.PP
References savedData, and saveSensorDataCSV()\&.
.PP
Referenced by CoolBoard::offLineMode()\&.
.PP
.nf
61 {
62 
63 #if DEBUG == 1
64 
65     Serial\&.println( F("Entering CoolFileSystem\&.saveSensorData()") );
66     Serial\&.println();
67 
68 #endif
69     
70     File sensorsData=SPIFFS\&.open("/sensorsData\&.json","a+");
71 
72     if(!sensorsData)
73     {
74     
75     #if DEBUG == 1
76     
77         Serial\&.println( F("failed to append to /sensorsData\&.json") );
78         Serial\&.println();
79     
80     #endif
81 
82         this->savedData=false;
83         return (false); 
84     }   
85 
86     DynamicJsonBuffer jsonBuffer;
87     JsonObject& root = jsonBuffer\&.parseObject(data);
88 
89     if( root\&.success() )
90     {
91         root\&.printTo(sensorsData);
92         sensorsData\&.println();
93         sensorsData\&.close();
94 
95 
96     #if DEBUG == 1
97         
98         Serial\&.print(F("jsonBuffer size: "));
99         Serial\&.println(jsonBuffer\&.size());
100         Serial\&.println();
101 
102         sensorsData=SPIFFS\&.open("/sensorsData\&.json","r");
103         
104         if(!sensorsData)
105         {
106             
107             Serial\&.println(F("failed to reopen /sensorsData\&.json"));
108                         
109         }
110     
111         Serial\&.println( F("saved data is : ") );
112         root\&.printTo(Serial);
113         Serial\&.println();
114 
115         Serial\&.println(F("/sensorsData\&.json") );
116         while (sensorsData\&.available()) 
117         {
118             Serial\&.println(sensorsData\&.readString()) ;
119         }
120         
121         Serial\&.println();
122         
123         sensorsData\&.close();
124     
125     #endif
126 
127         this->saveSensorDataCSV(data);      
128 
129         this->savedData=true;
130         return (true);      
131     }
132     else
133     {
134     
135     #if DEBUG == 1
136 
137         Serial\&.println( F("failed to parse json") );
138     
139     #endif
140 
141         this->savedData=false;
142         return(false);
143     }
144     
145 
146 }
.fi
.SS "bool CoolFileSystem::saveSensorDataCSV (const char * data)"
CoolFileSystem::saveSensorDataCSV( data ): This method is provided to save the data on the local memory in CSV format\&.
.PP
\fBReturns:\fP
.RS 4
true if the data was saved, false otherwise 
.RE
.PP

.PP
Definition at line 157 of file CoolFileSystem\&.cpp\&.
.PP
Referenced by saveSensorData()\&.
.PP
.nf
158 {
159 #if DEBUG == 1
160 
161     Serial\&.println( F("Entering CoolFileSystem\&.saveSensorDataCSV()") );
162     Serial\&.println();
163 
164 #endif
165     //parsing json
166     DynamicJsonBuffer jsonBuffer;
167     JsonObject& root = jsonBuffer\&.parseObject(data);
168     String header="",values="";
169     
170     //if json parse success
171     if( root\&.success() )
172     {       
173         for (auto kv : root) 
174         {
175             //print the header(json keys ) to header string
176             header+=kv\&.key;
177             header+=',';
178             
179             //print the values to header string
180             values+=( kv\&.value\&.as<char*>() );
181             values+=',';
182         }
183 
184         header\&.remove(header\&.lastIndexOf(','), 1);
185         values\&.remove(values\&.lastIndexOf(','), 1);        
186     
187     #if DEBUG == 1
188     
189         Serial\&.println( F(" data is : ") );
190         root\&.printTo(Serial);
191         Serial\&.println();
192         
193         Serial\&.println(F(" header is :" ) ) ;
194         Serial\&.println(header);
195         Serial\&.println(F(" values are : "));
196         Serial\&.println(values);
197         
198         Serial\&.print(F("jsonBuffer size: "));
199         Serial\&.println(jsonBuffer\&.size());
200         Serial\&.println();
201 
202     
203     #endif
204     
205     }
206     //failed to parse json
207     else
208     {
209     
210     #if DEBUG == 1
211 
212         Serial\&.println( F("failed to parse json") );
213     
214     #endif
215 
216         return(false);
217     }
218 
219     //check if file exists
220     File sensorsData=SPIFFS\&.open("/sensorsData\&.csv","r");
221     
222     //file doesn't exist
223     if(!sensorsData)
224     {
225     
226     #if DEBUG == 1
227     
228         Serial\&.println( F("/sensorsData\&.csv not found") );
229         Serial\&.println( F("creating /sensorsData\&.csv") );
230         Serial\&.println();
231     
232     #endif
233         //create file
234         sensorsData=SPIFFS\&.open("/sensorsData\&.csv","w");
235         
236         if(!sensorsData)
237         {
238 
239         #if DEBUG == 1
240         
241             Serial\&.println( F("failed to create /sensorsData\&.csv") );
242             Serial\&.println();
243         
244         #endif
245         
246             return(false);
247 
248         }
249         
250         //print the header(json keys ) to the CSV file
251         sensorsData\&.println(header);
252 
253         //print the values to the CSV file
254         sensorsData\&.println(values);
255         
256         sensorsData\&.close();
257     
258     #if DEBUG == 1
259 
260         sensorsData=SPIFFS\&.open("/sensorsData\&.csv","r");
261         
262         if(!sensorsData)
263         {
264             Serial\&.println(F("failed to reopen /sensorsData\&.csv "));
265             return(false);      
266         }
267 
268         Serial\&.println( F("/sensorsData\&.csv : ") );
269 
270         while (sensorsData\&.available()) 
271         {
272             Serial\&.print(sensorsData\&.readString()) ;
273         }
274         Serial\&.println();
275 
276         //close the file
277         sensorsData\&.close();
278 
279     #endif
280         
281 
282         
283         return(true);
284         
285     }
286 
287     //file exist
288     else
289     {
290 
291     #if DEBUG == 1
292     
293         Serial\&.println( F("/sensorsData\&.csv  found") );
294         Serial\&.println( F("appending to /sensorsData\&.csv") );
295         Serial\&.println();
296     
297     #endif
298 
299         //append to file
300         sensorsData=SPIFFS\&.open("/sensorsData\&.csv","a");
301         
302         if(!sensorsData)
303         {
304         
305         #if DEBUG == 1
306             
307             Serial\&.println( F("failed to open /sensorsData\&.csv") );
308             Serial\&.println();
309 
310         #endif
311             
312             return(false);
313         
314         }
315 
316         //print the values to the CSV file
317         sensorsData\&.println(values);
318         
319         sensorsData\&.close();
320 
321     #if DEBUG == 1
322 
323         sensorsData=SPIFFS\&.open("/sensorsData\&.csv","r");
324         
325         if(!sensorsData)
326         {
327             Serial\&.println(F("failed to reopen /sensorsData\&.csv "));
328             return(false);      
329         }
330 
331         
332         Serial\&.println( F("/sensorsData\&.csv : ") );
333 
334         while (sensorsData\&.available()) 
335         {
336             Serial\&.println(sensorsData\&.readString()) ;
337         }
338         
339         Serial\&.println();
340         
341         sensorsData\&.close();
342         
343     #endif      
344         
345         return(true);
346     
347     }   
348 
349 
350 
351 }
.fi
.SS "bool CoolFileSystem::updateConfigFiles (String answer)"
CoolFileSystem::updateConfigFiles( mqtt answer ): This method is provided to update the configuration files when the appropriate mqtt answer is received: -update : 1
.PP
\fBReturns:\fP
.RS 4
true if the files are updated correctly, false otherwise 
.RE
.PP

.PP
Definition at line 362 of file CoolFileSystem\&.cpp\&.
.PP
References temp\&.
.PP
Referenced by CoolBoard::update()\&.
.PP
.nf
363 {
364 
365 #if DEBUG == 1
366 
367     Serial\&.println( F("Entering CoolFileSystem\&.updateConfigFiles") );
368     Serial\&.println();
369     
370     Serial\&.println( F("input answer : ") );
371     Serial\&.println(answer);
372 #endif
373 
374     //total json object 
375     DynamicJsonBuffer jsonBuffer;
376     JsonObject& root = jsonBuffer\&.parseObject( answer\&.c_str() );
377 
378 #if DEBUG == 1
379     
380     Serial\&.println( F("json object : ") );   
381     root\&.printTo(Serial);
382     Serial\&.println();
383     
384     Serial\&.print(F("jsonBuffer size: "));
385     Serial\&.println(jsonBuffer\&.size());
386     Serial\&.println();
387 
388 
389 #endif
390 
391     if(! ( root\&.success() ))
392     {
393     
394     #if DEBUG == 1
395 
396         Serial\&.println( F("failed to parse root ") );
397         Serial\&.println();
398     
399     #endif
400 
401         return(false);
402     }
403     else
404     {
405     #if DEBUG == 1
406         
407         Serial\&.println( F("success to parse root ") );
408         Serial\&.println();
409         
410     #endif  
411     }
412     
413 #if DEBUG == 1
414 
415     Serial\&.println( F("input message is : ") );
416     root\&.printTo(Serial);
417     Serial\&.println();
418 
419 #endif
420     //temp string
421     String temp;
422 
423     //CoolBoard Configuration File
424 
425         JsonObject& jsonCoolBoard=root["CoolBoard"];
426 
427 #if DEBUG == 1
428 
429     Serial\&.println( F("before config CoolBoard json") );
430     jsonCoolBoard\&.printTo(Serial);
431 
432 #endif
433 
434     if(jsonCoolBoard\&.success())
435     {
436         File coolBoardConfig = SPIFFS\&.open("/coolBoardConfig\&.json", "w"); 
437         if(!coolBoardConfig)
438         {   
439         #if DEBUG == 1
440             
441             Serial\&.println( F("failed to write to coolBoardConfig\&.json") );
442 
443         #endif
444             return(false);
445         }
446         
447         jsonCoolBoard\&.printTo(coolBoardConfig);
448         
449         coolBoardConfig\&.close();
450 
451 
452     #if DEBUG == 1
453 
454         Serial\&.println( F("CoolBoard Config") );
455         jsonCoolBoard\&.printTo(Serial);
456         Serial\&.println();
457     
458     #endif
459         
460     }
461     else
462     {
463     
464     #if DEBUG == 1 
465 
466         Serial\&.println( F("failed to parse CoolBoard ") );
467     
468     #endif
469 
470     }       
471 
472     
473     //Cool Board Sensors Configuration File
474         JsonObject& jsonSensorsBoard=root["CoolSensorsBoard"];
475 
476 #if DEBUG == 1 
477 
478     Serial\&.println( F("before config CoolSensorsBoard json") );
479     jsonSensorsBoard\&.printTo(Serial);
480 
481 #endif 
482     
483     if(jsonSensorsBoard\&.success())
484     {   
485         File coolBoardSensorsConfig = SPIFFS\&.open("/coolBoardSensorsConfig\&.json", "w");   
486         if(!coolBoardSensorsConfig)
487         {
488         #if DEBUG == 1 
489         
490             Serial\&.println( F("failed to write coolBoardSensors\&.json") );
491 
492         #endif
493 
494             return(false);
495         }
496         
497         jsonSensorsBoard\&.printTo(coolBoardSensorsConfig);
498         coolBoardSensorsConfig\&.close();
499 
500     #if DEBUG == 1
501 
502         Serial\&.println("CoolBoardSensors Config");
503         jsonSensorsBoard\&.printTo(Serial);
504         Serial\&.println();
505 
506     #endif
507 
508     }
509     else
510     {
511 
512     #if DEBUG == 1
513 
514         Serial\&.println( F("failed to parse CoolSensorsBoard sensors ") );    
515     
516     #endif
517 
518     }
519     
520     
521     
522     //rtc configuration file
523         JsonObject& jsonRTC=root["rtc"];
524 
525 #if DEBUG == 1 
526     
527     Serial\&.println( F("before config rtc json") );
528     jsonRTC\&.printTo(Serial);
529 
530 #endif
531     if(jsonRTC\&.success() )
532     {
533         File rtcConfig = SPIFFS\&.open("/rtcConfig\&.json", "w"); 
534         if(!rtcConfig)
535         {
536         
537         #if DEBUG == 1 
538 
539             Serial\&.println( F("failed to write rtcConfig\&.json") );
540 
541         #endif
542 
543             return(false);
544         }
545 
546         jsonRTC\&.printTo(rtcConfig);
547         rtcConfig\&.close();
548 
549     #if DEBUG == 1 
550 
551         Serial\&.println( F("RTC Config") );
552         jsonRTC\&.printTo(Serial);
553         Serial\&.println();
554     
555     #endif
556 
557     
558     }
559     else
560     {
561     
562     #if DEBUG == 1 
563 
564         Serial\&.println( F("failed to parse rtc ") );
565     
566     #endif
567 
568     }
569 
570     
571     
572     
573     
574         //cool board led configuration
575         JsonObject& jsonLedBoard=root["led"];
576     
577 #if DEBUG == 1 
578 
579     Serial\&.println( F("before config Led json") );
580     jsonLedBoard\&.printTo(Serial);
581 
582 #endif
583 
584     if(jsonLedBoard\&.success())
585     {   
586         File coolBoardLedConfig = SPIFFS\&.open("/coolBoardLedConfig\&.json", "w");   
587         if(!coolBoardLedConfig)
588         {
589         
590         #if DEBUG == 1 
591         
592             Serial\&.println( F("failed to write led config") );
593         
594         #endif
595 
596             return(false);
597         }
598         
599         jsonLedBoard\&.printTo(coolBoardLedConfig);
600         coolBoardLedConfig\&.close();
601 
602 
603     #if DEBUG == 1 
604 
605         Serial\&.println( F("CoolBoardLed Config") );      
606         jsonLedBoard\&.printTo(Serial);
607         Serial\&.println();
608     
609     #endif
610 
611     
612     }
613     else
614     {
615     
616     #if DEBUG == 1 
617 
618         Serial\&.println( F("failed to parse led") );
619     
620     #endif 
621 
622     }
623         
624 
625     
626 
627     //jetpack configuration
628         JsonObject& jsonJetpack=root["jetPack"];
629 
630 #if DEBUG == 1 
631 
632     Serial\&.println( F("before config jetpack json") );
633     jsonJetpack\&.printTo(Serial);
634 
635 #endif
636 
637     if(jsonJetpack\&.success())
638     {   
639         File jetPackConfig = SPIFFS\&.open("/jetPackConfig\&.json", "w"); 
640         if(!jetPackConfig)
641         {
642         #if DEBUG == 1
643 
644             Serial\&.println( F("failed to write jetpack file") );
645         
646         #endif
647 
648             return(false);
649         }
650 
651         jsonJetpack\&.printTo(jetPackConfig);
652         jetPackConfig\&.close();
653 
654     #if DEBUG == 1
655 
656         Serial\&.println( F("jetpack Config") );   
657         jsonJetpack\&.printTo(Serial);
658         Serial\&.println();
659     
660     #endif
661 
662     }
663 
664     else
665     {
666     
667     #if DEBUG == 1 
668 
669         Serial\&.println( F("failed to parse jetpack") );  
670     
671     #endif
672 
673     }
674     
675     //irene configuration   
676         JsonObject& jsonIrene=root["irene3000"];
677     
678 #if DEBUG == 1 
679 
680     Serial\&.println( F("before config irene json") ); 
681     jsonIrene\&.printTo(Serial);
682 
683 #endif 
684 
685     if(jsonIrene\&.success())
686     {
687         File irene3000Config = SPIFFS\&.open("/irene3000Config\&.json", "w"); 
688         if(!irene3000Config)
689         {
690 
691         #if DEBUG == 1 
692 
693             Serial\&.println( F("failed to write irene file") );
694         
695         #endif
696 
697             return(false);
698         }
699 
700         jsonIrene\&.printTo(irene3000Config);
701         irene3000Config\&.close();
702     
703     #if DEBUG == 1 
704         
705         Serial\&.println( F("irene3000 Config") );
706         jsonIrene\&.printTo(Serial);
707         Serial\&.println();
708     
709     #endif
710     
711     }
712     else
713     {
714     
715     #if DEBUG == 1 
716 
717         Serial\&.println( F("failed to parse irene") );    
718     
719     #endif 
720 
721 
722     }
723     
724     //external sensors
725         JsonObject& jsonExternalSensors=root["externalSensors"];
726 
727 #if DEBUG == 1 
728 
729     Serial\&.println( F("before config external Sensors json") );
730     jsonExternalSensors\&.printTo(Serial);
731 
732 #endif
733 
734     if(jsonExternalSensors\&.success())
735     {
736         File externalSensorsConfig = SPIFFS\&.open("/externalSensorsConfig\&.json", "w"); 
737         if(!externalSensorsConfig)
738         {
739         
740         #if DEBUG == 1 
741 
742             Serial\&.println( F("failed to open external sensors file ") );
743         
744         #endif 
745 
746             return(false);
747         }
748 
749         jsonExternalSensors\&.printTo(externalSensorsConfig);  
750         externalSensorsConfig\&.close();
751 
752 #if DEBUG == 1 
753         
754         Serial\&.println( F("externalSensors Config") );
755         jsonExternalSensors\&.printTo(Serial);
756         Serial\&.println();
757 
758 #endif 
759 
760 
761     }
762 
763     else
764     {   
765 
766     #if DEBUG == 1
767         
768         Serial\&.println( F("failed to parse external sensors") );
769 
770     #endif
771 
772 
773     }
774 
775     
776     //mqtt config
777         JsonObject& jsonMQTT=root["mqtt"];
778     
779 #if DEBUG == 1 
780 
781     Serial\&.println( F("before config mqtt json") );
782     jsonMQTT\&.printTo(Serial);
783 
784 #endif
785 
786     if(jsonMQTT\&.success())
787     {
788         File mqttConfig = SPIFFS\&.open("/mqttConfig\&.json", "w");   
789         if(!mqttConfig)
790         {
791         
792         #if DEBUG == 1 
793 
794             Serial\&.println( F("failed to open mqtt file ") );
795         
796         #endif
797         
798             return(false);
799         }
800             
801         jsonMQTT\&.printTo(mqttConfig);
802         mqttConfig\&.close();
803 
804 #if DEBUG == 1 
805 
806         Serial\&.println( F("mqtt config") );
807         jsonMQTT\&.printTo(Serial);
808         Serial\&.println();
809 
810 #endif
811 
812     }
813     else
814     {
815 
816     #if DEBUG == 1 
817 
818         Serial\&.println( F("failed to parse mqtt") );
819     
820     #endif
821 
822     
823     }   
824 
825     //wifi config
826         JsonObject& jsonWifi=root["wifi"];
827     
828 #if DEBUG == 1 
829 
830     Serial\&.println( F("before config wifi json") );
831     jsonWifi\&.printTo(Serial);
832 
833 #endif
834 
835     if(jsonWifi\&.success())
836     {
837         File wifiConfig = SPIFFS\&.open("/wifiConfig\&.json", "w");   
838         if(!wifiConfig)
839         {
840         
841         #if DEBUG == 1 
842 
843             Serial\&.println( F("failed to open wifi file ") );
844         
845         #endif
846         
847             return(false);
848         }
849 
850         jsonWifi\&.printTo(wifiConfig);
851         wifiConfig\&.close();
852 
853 #if DEBUG == 1 
854 
855         Serial\&.println( F("wifi config") );
856         jsonWifi\&.printTo(Serial);
857 
858 #endif
859     }
860     else
861     {
862 
863     #if DEBUG == 1 
864 
865         Serial\&.println( F("failed to parse wifi") );
866     
867     #endif
868 
869     
870     }   
871         
872     return true;
873 
874 }   
.fi
.SH "Member Data Documentation"
.PP 
.SS "bool CoolFileSystem::savedData =0\fC [private]\fP"

.PP
Definition at line 40 of file CoolFileSystem\&.h\&.
.PP
Referenced by getSensorSavedData(), isDataSaved(), and saveSensorData()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolAPI from the source code\&.
