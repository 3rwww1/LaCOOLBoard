.TH "CoolFileSystem" 3 "Mon Jul 10 2017" "CoolAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoolFileSystem \- This class handles the file system\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolFileSystem\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "bool \fBbegin\fP ()"
.br
.ti -1c
.RI "bool \fBupdateConfigFiles\fP (String answer, int JSON_SIZE)"
.br
.ti -1c
.RI "bool \fBsaveSensorData\fP (const char *data, int Sensor_JSON_SIZE)"
.br
.ti -1c
.RI "bool \fBisDataSaved\fP ()"
.br
.ti -1c
.RI "String \fBgetSensorSavedData\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "bool \fBsavedData\fP =0"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class handles the file system\&. 
.PP
Definition at line 22 of file CoolFileSystem\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "bool CoolFileSystem::begin ()"
\fBCoolFileSystem::begin()\fP: This method is provided to start the SPIFFS object\&.
.PP
\fBReturns:\fP
.RS 4
true if SPIFFS was initialized correctly, false otherwise 
.RE
.PP

.PP
Definition at line 33 of file CoolFileSystem\&.cpp\&.
.PP
Referenced by CoolBoard::begin(), and CoolBoard::config()\&.
.PP
.nf
34 {
35 
36 #if DEBUG == 1
37 
38     Serial\&.println("Entering CoolFileSystem\&.begin()");
39     Serial\&.println();    
40     Serial\&.print("SPIFFS success ? ");
41     Serial\&.println(SPIFFS\&.begin());
42     Serial\&.println();
43 
44 #endif
45 
46     return( SPIFFS\&.begin() );                                   //Initialize Filesystem
47 
48 }
.fi
.SS "String CoolFileSystem::getSensorSavedData ()"
CoolFileSystem::getSensorData(): This method is provided to return the sensor data saved in the File System
.PP
\fBReturns:\fP
.RS 4
string json of the saved sensor data file 
.RE
.PP

.PP
Definition at line 607 of file CoolFileSystem\&.cpp\&.
.PP
References savedData\&.
.PP
Referenced by CoolBoard::onLineMode()\&.
.PP
.nf
608 {
609 
610 #if DEBUG == 1 
611 
612     Serial\&.println("Entering CoolFileSystem\&.getSensorSavedData()");
613     Serial\&.println();
614 
615 #endif
616 
617     //open sensors data file
618     File sensorsData=SPIFFS\&.open("/sensorsData\&.json","r");
619     
620     if (!sensorsData)
621     {
622 
623     #if DEBUG == 1 
624 
625         Serial\&.println("Failed to read /sensorsData\&.json");
626 
627     #endif
628  
629         return("failed to open file");
630     }
631 
632     else
633     {
634         size_t size = sensorsData\&.size();
635 
636         // Allocate a buffer to store contents of the file\&.
637         std::unique_ptr < char[] > buf(new char[size]);
638 
639         sensorsData\&.readBytes(buf\&.get(), size);
640 
641         DynamicJsonBuffer jsonBuffer;
642 
643         JsonObject & json = jsonBuffer\&.parseObject(buf\&.get());
644         
645         if (!json\&.success())
646         {
647 
648         #if DEBUG == 1
649         
650             Serial\&.println("failed to parse json");
651         
652         #endif
653         
654             return("failed to parse json");
655         }
656         else
657         {   
658             //the return string
659             String sensorDataString;
660             
661             //print the json to the string
662             json\&.printTo(sensorDataString);
663             
664             //close the file
665             sensorsData\&.close();
666 
667             //delete data in the file
668             File sensorsData=SPIFFS\&.open("/sensorsData\&.json","w");
669             if (!sensorsData)   
670             {
671             #if DEBUG == 1
672         
673                 Serial\&.println("failed to delete data in the file");
674         
675             #endif
676 
677                 return("failed to delete data in the file");
678             }
679 
680             sensorsData\&.close();
681             
682             //position the saved data flag to false
683             this->savedData=false;  
684             
685         #if DEBUG == 1 
686 
687             Serial\&.println("saved data : ");
688             Serial\&.println(sensorDataString);
689             Serial\&.println();
690         
691         #endif
692 
693             //return the string
694             return(sensorDataString);       
695         }
696         
697         
698     }
699 
700 }
.fi
.SS "bool CoolFileSystem::isDataSaved ()"
\fBCoolFileSystem::isDataSaved()\fP: This method is provided to report wether there is sensor data saved in the File System\&.
.PP
\fBReturns:\fP
.RS 4
true if there is data saved, false otherwise 
.RE
.PP

.PP
Definition at line 584 of file CoolFileSystem\&.cpp\&.
.PP
References savedData\&.
.PP
Referenced by CoolBoard::onLineMode()\&.
.PP
.nf
585 {
586 
587 #if DEBUG == 1 
588 
589     Serial\&.println("Entering CoolFileSystem\&.isDataSaved()");
590     Serial\&.println();
591     Serial\&.print("savedData : ");
592     Serial\&.println(this->savedData);
593 
594 #endif
595 
596     return( this->savedData );
597 }
.fi
.SS "bool CoolFileSystem::saveSensorData (const char * data, int Sensor_JSON_SIZE)"
CoolFileSystem::saveSensorData( data, data size ): This method is provided to save the data on the local memory when there is no internet available
.PP
sets the saved data flag to TRUE when successful
.PP
\fBReturns:\fP
.RS 4
true if the data was saved, false otherwise 
.RE
.PP

.PP
Definition at line 60 of file CoolFileSystem\&.cpp\&.
.PP
References savedData\&.
.PP
Referenced by CoolBoard::offLineMode()\&.
.PP
.nf
61 {
62 
63 #if DEBUG == 1
64 
65     Serial\&.println("Entering CoolFileSystem\&.saveSensorData()");
66     Serial\&.println();
67 
68 #endif
69     
70     File sensorsData=SPIFFS\&.open("/sensorsData\&.json","a+");
71     if(!sensorsData)
72     {
73     
74     #if DEBUG == 1
75     
76         Serial\&.println("failed to append to /sensorsData\&.json");
77         Serial\&.println();
78     
79     #endif
80 
81         this->savedData=false;
82         return (false); 
83     }   
84 
85     DynamicJsonBuffer jsonBuffer(Sensor_JSON_SIZE);
86     JsonObject& root = jsonBuffer\&.parseObject(data);
87 
88     if( root\&.success() )
89     {
90         root\&.printTo(sensorsData);
91         sensorsData\&.close();
92     
93     #if DEBUG == 1
94     
95         Serial\&.println("saved data is : ");
96         root\&.printTo(Serial);
97         Serial\&.println();
98     
99     #endif
100 
101         this->savedData=true;
102         return (true);      
103     }
104     else
105     {
106     
107     #if DEBUG == 1
108 
109         Serial\&.println("failed to parse json");
110     
111     #endif
112 
113         this->savedData=false;
114         return(false);
115     }
116     
117 
118 }
.fi
.SS "bool CoolFileSystem::updateConfigFiles (String answer, int JSON_SIZE)"
CoolFileSyste::updateConfigFiles( mqtt answer, answer size): This method is provided to update the configuration files when the appropriate mqtt answer is received: -update : 1
.PP
\fBReturns:\fP
.RS 4
true if the files are updated correctly, false otherwise 
.RE
.PP

.PP
Definition at line 128 of file CoolFileSystem\&.cpp\&.
.PP
References temp\&.
.PP
Referenced by CoolBoard::update()\&.
.PP
.nf
129 {
130 
131 #if DEBUG == 1
132 
133     Serial\&.println("Entering CoolFileSystem\&.updateConfigFiles");
134     Serial\&.println();
135 
136 #endif
137 
138     //total json object 
139     DynamicJsonBuffer jsonBuffer(JSON_SIZE);
140     JsonObject& root = jsonBuffer\&.parseObject( answer\&.c_str() );
141     
142     if(! ( root\&.success() ))
143     {
144     
145     #if DEBUG == 1
146 
147         Serial\&.println("failed to parse root ");
148         Serial\&.println();
149     
150     #endif
151 
152         return(false);
153     }
154     else
155     {
156     #if DEBUG == 1
157         
158         Serial\&.println("success to parse root ");
159         Serial\&.println();
160         
161     #endif  
162     }
163     
164 #if DEBUG == 1
165 
166     Serial\&.println("input message is : ");
167     root\&.printTo(Serial);
168     Serial\&.println();
169 
170 #endif
171     //temp string
172     String temp;
173 
174     //CoolBoard Configuration File
175 
176         JsonObject& jsonCoolBoard=root["CoolBoard"];
177 
178 #if DEBUG == 1
179 
180     Serial\&.println("before config CoolBoard json");
181     jsonCoolBoard\&.printTo(Serial);
182 
183 #endif
184 
185     if(jsonCoolBoard\&.success())
186     {
187         File coolBoardConfig = SPIFFS\&.open("/coolBoardConfig\&.json", "w"); 
188         if(!coolBoardConfig)
189         {   
190         #if DEBUG == 1
191             
192             Serial\&.println("failed to write to coolBoardConfig\&.json");
193 
194         #endif
195             return(false);
196         }
197         
198         jsonCoolBoard\&.printTo(coolBoardConfig);
199         
200         coolBoardConfig\&.close();
201 
202 
203     #if DEBUG == 1
204 
205         Serial\&.println("CoolBoard Config");
206         jsonCoolBoard\&.printTo(Serial);
207     
208     #endif
209         
210     }
211     else
212     {
213     
214     #if DEBUG == 1 
215 
216         Serial\&.println("failed to parse CoolBoard ");
217     
218     #endif
219 
220     }       
221 
222     
223     //Cool Board Sensors Configuration File
224         JsonObject& jsonSensorsBoard=root["CoolSensorsBoard"];
225 
226 #if DEBUG == 1 
227 
228     Serial\&.println("before config CoolSensorsBoard json");
229     jsonSensorsBoard\&.printTo(Serial);
230 
231 #endif 
232     
233     if(jsonSensorsBoard\&.success())
234     {   
235         File coolBoardSensorsConfig = SPIFFS\&.open("/coolBoardSensorsConfig\&.json", "w");   
236         if(!coolBoardSensorsConfig)
237         {
238         #if DEBUG == 1 
239         
240             Serial\&.println("failed to write coolBoardSensors\&.json");
241 
242         #endif
243 
244             return(false);
245         }
246         
247         jsonSensorsBoard\&.printTo(coolBoardSensorsConfig);
248         coolBoardSensorsConfig\&.close();
249 
250     #if DEBUG == 1
251 
252         Serial\&.println("CoolBoardSensors Config");
253         jsonSensorsBoard\&.printTo(Serial);
254 
255     #endif
256 
257     }
258     else
259     {
260 
261     #if DEBUG == 1
262 
263         Serial\&.println("failed to parse CoolSensorsBoard sensors "); 
264     
265     #endif
266 
267     }
268     
269     
270     
271     //rtc configuration file
272     DynamicJsonBuffer jsonR;
273         JsonObject& jsonRTC=root["rtc"];
274 
275 #if DEBUG == 1 
276     
277     Serial\&.println("before config rtc json");
278     jsonRTC\&.printTo(Serial);
279 
280 #endif
281     if(jsonRTC\&.success() )
282     {
283         File rtcConfig = SPIFFS\&.open("/rtcConfig\&.json", "w"); 
284         if(!rtcConfig)
285         {
286         
287         #if DEBUG == 1 
288 
289             Serial\&.println("failed to write rtcConfig\&.json");
290 
291         #endif
292 
293             return(false);
294         }
295 
296         jsonRTC\&.printTo(rtcConfig);
297         rtcConfig\&.close();
298 
299     #if DEBUG == 1 
300 
301         Serial\&.println("RTC Config");
302         jsonRTC\&.printTo(Serial);
303     
304     #endif
305 
306     
307     }
308     else
309     {
310     
311     #if DEBUG == 1 
312 
313         Serial\&.println("failed to parse rtc ");
314     
315     #endif
316 
317     }
318 
319     
320     
321     
322     
323         //cool board led configuration
324     DynamicJsonBuffer jsonLBoard;
325         JsonObject& jsonLedBoard=root["led"];
326     
327 #if DEBUG == 1 
328 
329     Serial\&.println("before config Led json");
330     jsonLedBoard\&.printTo(Serial);
331 
332 #endif
333 
334     if(jsonLedBoard\&.success())
335     {   
336         File coolBoardLedConfig = SPIFFS\&.open("/coolBoardLedConfig\&.json", "w");   
337         if(!coolBoardLedConfig)
338         {
339         
340         #if DEBUG == 1 
341         
342             Serial\&.println("failed to write led config");
343         
344         #endif
345 
346             return(false);
347         }
348         
349         jsonLedBoard\&.printTo(coolBoardLedConfig);
350         coolBoardLedConfig\&.close();
351 
352     #if DEBUG == 1 
353 
354         Serial\&.println("CoolBoardLed Config");       
355         jsonLedBoard\&.printTo(Serial);
356     
357     #endif
358 
359     
360     }
361     else
362     {
363     
364     #if DEBUG == 1 
365 
366         Serial\&.println("failed to parse led");
367     
368     #endif 
369 
370     }
371         
372 
373     
374 
375     //jetpack configuration
376     DynamicJsonBuffer jsonJBoard;
377         JsonObject& jsonJetpack=root["jetPack"];
378 
379 #if DEBUG == 1 
380 
381     Serial\&.println("before config jetpack json");
382     jsonJetpack\&.printTo(Serial);
383 
384 #endif
385 
386     if(jsonJetpack\&.success())
387     {   
388         File jetPackConfig = SPIFFS\&.open("/jetPackConfig\&.json", "w"); 
389         if(!jetPackConfig)
390         {
391         #if DEBUG == 1
392 
393             Serial\&.println("failed to write jetpack file");
394         
395         #endif
396 
397             return(false);
398         }
399 
400         jsonJetpack\&.printTo(jetPackConfig);
401         jetPackConfig\&.close();
402 
403     #if DEBUG == 1
404 
405         Serial\&.println("jetpack Config");    
406         jsonJetpack\&.printTo(Serial);
407     
408     #endif
409 
410     }
411 
412     else
413     {
414     
415     #if DEBUG == 1 
416 
417         Serial\&.println("failed to parse jetpack");   
418     
419     #endif
420 
421     }
422     
423     //irene configuration   
424     DynamicJsonBuffer jsonIBoard;
425         JsonObject& jsonIrene=root["irene3000"];
426     
427 #if DEBUG == 1 
428 
429     Serial\&.println("before config irene json");  
430     jsonIrene\&.printTo(Serial);
431 
432 #endif 
433 
434     if(jsonIrene\&.success())
435     {
436         File irene3000Config = SPIFFS\&.open("/irene3000Config\&.json", "w"); 
437         if(!irene3000Config)
438         {
439 
440         #if DEBUG == 1 
441 
442             Serial\&.println("failed to write irene file");
443         
444         #endif
445 
446             return(false);
447         }
448 
449         jsonIrene\&.printTo(irene3000Config);
450         irene3000Config\&.close();
451     
452     #if DEBUG == 1 
453         
454         Serial\&.println("irene3000 Config");
455         jsonIrene\&.printTo(Serial);
456     
457     #endif
458     
459     }
460     else
461     {
462     
463     #if DEBUG == 1 
464 
465         Serial\&.println("failed to parse irene"); 
466     
467     #endif 
468 
469 
470     }
471     
472     //external sensors
473     DynamicJsonBuffer jsonESBoard;
474         JsonObject& jsonExternalSensors=root["externalSensors"];
475 
476 #if DEBUG == 1 
477 
478     Serial\&.println("before config external Sensors json");
479     jsonExternalSensors\&.printTo(Serial);
480 
481 #endif
482 
483     if(jsonExternalSensors\&.success())
484     {
485         File externalSensorsConfig = SPIFFS\&.open("/externalSensorsConfig\&.json", "w"); 
486         if(!externalSensorsConfig)
487         {
488         
489         #if DEBUG == 1 
490 
491             Serial\&.println("failed to open external sensors file ");
492         
493         #endif 
494 
495             return(false);
496         }
497 
498 #if DEBUG == 1 
499         
500         Serial\&.println("externalSensors Config");
501         jsonExternalSensors\&.printTo(Serial);
502 
503 #endif 
504 
505         jsonExternalSensors\&.printTo(externalSensorsConfig);  
506         externalSensorsConfig\&.close();
507 
508     }
509 
510     else
511     {   
512 
513     #if DEBUG == 1
514         
515         Serial\&.println("failed to parse external sensors");
516 
517     #endif
518 
519 
520     }
521 
522     
523     //mqtt config
524     DynamicJsonBuffer jsonMQ;
525         JsonObject& jsonMQTT=root["mqtt"];
526     
527 #if DEBUG == 1 
528 
529     Serial\&.println("before config mqtt json");
530     jsonMQTT\&.printTo(Serial);
531 
532 #endif
533 
534     if(jsonMQTT\&.success())
535     {
536         File mqttConfig = SPIFFS\&.open("/mqttConfig\&.json", "w");   
537         if(!mqttConfig)
538         {
539         
540         #if DEBUG == 1 
541 
542             Serial\&.println("failed to open mqtt file ");
543         
544         #endif
545         
546             return(false);
547         }
548 
549 #if DEBUG == 1 
550 
551         Serial\&.println("mqtt config");
552         jsonMQTT\&.printTo(Serial);
553 
554 #endif
555     
556         jsonMQTT\&.printTo(mqttConfig);
557         mqttConfig\&.close();
558     }
559     else
560     {
561 
562     #if DEBUG == 1 
563 
564         Serial\&.println("failed to parse mqtt");
565     
566     #endif
567 
568     
569     }   
570         
571     return true;
572 
573 }   
.fi
.SH "Member Data Documentation"
.PP 
.SS "bool CoolFileSystem::savedData =0\fC [private]\fP"

.PP
Definition at line 38 of file CoolFileSystem\&.h\&.
.PP
Referenced by getSensorSavedData(), isDataSaved(), and saveSensorData()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolAPI from the source code\&.
