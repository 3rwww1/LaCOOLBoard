.TH "CoolFileSystem" 3 "Wed Aug 2 2017" "CoolAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoolFileSystem \- This class handles the file system\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolFileSystem\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "bool \fBbegin\fP ()"
.br
.ti -1c
.RI "bool \fBupdateConfigFiles\fP (String answer)"
.br
.ti -1c
.RI "bool \fBfileUpdate\fP (String update, const char *path)"
.br
.ti -1c
.RI "bool \fBsaveSensorData\fP (const char *data)"
.br
.ti -1c
.RI "bool \fBsaveSensorDataCSV\fP (const char *data)"
.br
.ti -1c
.RI "bool \fBisDataSaved\fP ()"
.br
.ti -1c
.RI "String \fBgetSensorSavedData\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "bool \fBsavedData\fP =0"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class handles the file system\&. 
.PP
Definition at line 22 of file CoolFileSystem\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "bool CoolFileSystem::begin ()"
\fBCoolFileSystem::begin()\fP: This method is provided to start the SPIFFS object\&.
.PP
\fBReturns:\fP
.RS 4
true if SPIFFS was initialized correctly, false otherwise 
.RE
.PP

.PP
Definition at line 33 of file CoolFileSystem\&.cpp\&.
.PP
Referenced by CoolBoard::config()\&.
.PP
.nf
34 {
35 
36 #if DEBUG == 1
37 
38     Serial\&.println( F("Entering CoolFileSystem\&.begin()") );
39     Serial\&.println();    
40     Serial\&.print( F("SPIFFS success ? ") );
41     Serial\&.println(SPIFFS\&.begin());
42     Serial\&.println();
43 
44 #endif
45 
46     return( SPIFFS\&.begin() );                                   //Initialize Filesystem
47 
48 }
.fi
.SS "bool CoolFileSystem::fileUpdate (String update, const char * path)"
CoolFileSystem::fileUpdate( update msg, file path): This method is provided to ensure the correct update for each configuration file in the File system
.PP
\fBReturns:\fP
.RS 4
true if successful , false otherwise 
.RE
.PP

.PP
Definition at line 900 of file CoolFileSystem\&.cpp\&.
.PP
Referenced by updateConfigFiles()\&.
.PP
.nf
901 {
902 
903 #if DEBUG == 1
904 
905     Serial\&.println( F("Entering CoolFileSystem\&.fileUpdate()") );
906     Serial\&.println();
907     
908     Serial\&.println(F("update msg is :"));
909     Serial\&.println(update);
910     
911     Serial\&.println(F("file path is : "));
912     Serial\&.println(path);    
913 
914 #endif
915     //transfer update String to json
916     DynamicJsonBuffer updateBuffer;
917     JsonObject& updateJson = updateBuffer\&.parseObject(update\&.c_str() );
918     
919     if(updateJson\&.success())
920     {
921     
922     #if DEBUG ==1
923         
924         Serial\&.println(F("root parsing success :"));
925         updateJson\&.printTo(Serial);
926     
927     #endif
928 
929     }
930     else
931     {
932     
933     #if DEBUG == 1 
934     
935         Serial\&.println(F("root parsing failure "));
936     
937     #endif
938         
939         return(false);  
940 
941     }
942     
943     //open file in read mode
944     File configFile = SPIFFS\&.open( path , "r");
945     
946     if(!configFile)
947     {   
948     #if DEBUG == 1
949         
950         Serial\&.print( F("failed to read ") );
951         Serial\&.println(path);
952 
953     #endif
954         return(false);
955     }
956 
957     //copy file to a json
958     size_t size = configFile\&.size();
959 
960     // Allocate a buffer to store contents of the file\&.
961     std::unique_ptr < char[] > buf(new char[size]);
962 
963     configFile\&.readBytes(buf\&.get(), size);
964 
965     DynamicJsonBuffer fileBuffer;
966 
967     JsonObject & fileJson = fileBuffer\&.parseObject(buf\&.get());
968 
969     if (!fileJson\&.success())
970     {
971 
972     #if DEBUG == 1
973 
974         Serial\&.println( F("failed to parse json") );
975 
976     #endif
977 
978         return(false);
979     }
980     
981     //modify root to contain all the json keys: updated ones and non updated ones
982     for (auto kv : fileJson) 
983     {
984         if( updateJson[kv\&.key]\&.success() )
985         {
986             fileJson[kv\&.key]=updateJson[kv\&.key];          
987         }
988         else
989         {
990             fileJson[kv\&.key]=fileJson[kv\&.key];
991         }
992 
993                 
994     }
995 
996 #if DEBUG == 1
997 
998     Serial\&.println(F("fileJson is now : "));
999     fileJson\&.printTo(Serial);
1000 
1001 #endif
1002 
1003     //close the file
1004     configFile\&.close();
1005 
1006     //open file in w mode
1007     configFile = SPIFFS\&.open( path , "w");
1008     
1009     if(!configFile)
1010     {   
1011     #if DEBUG == 1
1012         
1013         Serial\&.print( F("failed to open ") );
1014         Serial\&.println(path);
1015 
1016     #endif
1017         return(false);
1018     }
1019     //print json to file    
1020     
1021     fileJson\&.printTo(configFile);
1022     
1023     //close file
1024     configFile\&.close();
1025 
1026 
1027 #if DEBUG == 1
1028 
1029     Serial\&.println( F("config is") );
1030     fileJson\&.printTo(Serial);
1031     Serial\&.println();
1032 
1033 #endif
1034     
1035     return(true);
1036     
1037 }
.fi
.SS "String CoolFileSystem::getSensorSavedData ()"
CoolFileSystem::getSensorData(): This method is provided to return the sensor data saved in the File System
.PP
\fBReturns:\fP
.RS 4
string json of the saved sensor data file 
.RE
.PP

.PP
Definition at line 789 of file CoolFileSystem\&.cpp\&.
.PP
References savedData\&.
.PP
Referenced by CoolBoard::onLineMode()\&.
.PP
.nf
790 {
791 
792 #if DEBUG == 1 
793 
794     Serial\&.println( F("Entering CoolFileSystem\&.getSensorSavedData()") );
795     Serial\&.println();
796 
797 #endif
798 
799     //open sensors data file
800     File sensorsData=SPIFFS\&.open("/sensorsData\&.json","r");
801     
802     if (!sensorsData)
803     {
804 
805     #if DEBUG == 1 
806 
807         Serial\&.println( F("Failed to read /sensorsData\&.json") );
808 
809     #endif
810  
811         return("failed to open file");
812     }
813 
814     else
815     {
816         size_t size = sensorsData\&.size();
817 
818         // Allocate a buffer to store contents of the file\&.
819         std::unique_ptr < char[] > buf(new char[size]);
820 
821         sensorsData\&.readBytes(buf\&.get(), size);
822 
823         DynamicJsonBuffer jsonBuffer;
824 
825         JsonObject & json = jsonBuffer\&.parseObject(buf\&.get());
826         
827         if (!json\&.success())
828         {
829 
830         #if DEBUG == 1
831         
832             Serial\&.println( F("failed to parse json") );
833         
834         #endif
835         
836             return("failed to parse json");
837         }
838         else
839         {   
840             //the return string
841             String sensorDataString;
842             
843             //print the json to the string
844             json\&.printTo(sensorDataString);
845             
846             //close the file
847             sensorsData\&.close();
848 
849             //delete data in the file
850             File sensorsData=SPIFFS\&.open("/sensorsData\&.json","w");
851             File sensorsDataCSV=SPIFFS\&.open("/sensorsData\&.csv","w");
852             if( (!sensorsData)||(!sensorsDataCSV) ) 
853             {
854             #if DEBUG == 1
855         
856                 Serial\&.println( F("failed to delete data in the file") );
857         
858             #endif
859 
860                 return("failed to delete data in the file");
861             }
862 
863             sensorsData\&.close();
864             sensorsDataCSV\&.close();
865 
866             //position the saved data flag to false
867             this->savedData=false;  
868             
869         #if DEBUG == 1 
870 
871             Serial\&.println( F("saved data : ") );
872             Serial\&.println(sensorDataString);
873             Serial\&.println();
874 
875             Serial\&.print(F("jsonBuffer size: "));
876             Serial\&.println(jsonBuffer\&.size());
877             Serial\&.println();
878 
879         
880         #endif
881 
882             //return the string
883             return(sensorDataString);       
884         }
885         
886         
887     }
888 
889 }
.fi
.SS "bool CoolFileSystem::isDataSaved ()"
\fBCoolFileSystem::isDataSaved()\fP: This method is provided to report wether there is sensor data saved in the File System\&.
.PP
\fBReturns:\fP
.RS 4
true if there is data saved, false otherwise 
.RE
.PP

.PP
Definition at line 724 of file CoolFileSystem\&.cpp\&.
.PP
References savedData\&.
.PP
Referenced by CoolBoard::onLineMode()\&.
.PP
.nf
725 {
726 
727 #if DEBUG == 1 
728 
729     Serial\&.println( F("Entering CoolFileSystem\&.isDataSaved()") );
730     Serial\&.println();
731 #endif
732 
733     File sensorsData=SPIFFS\&.open("/sensorsData\&.json","r");
734     File sensorsDataCSV=SPIFFS\&.open("/sensorsData\&.csv","r");
735     
736     if( (!sensorsData)||(!sensorsDataCSV) ) 
737     {
738     #if DEBUG == 1
739 
740         Serial\&.println( F("failed to open files") );
741 
742     #endif
743         
744         this->savedData=false;
745     }
746     else
747     {       
748         #if DEBUG == 1
749 
750             Serial\&.print(F("sensors Data file size : "));
751             Serial\&.println(sensorsData\&.size());
752             Serial\&.println();
753             
754             Serial\&.print(F("sensors Data CSV file size : "));                
755             Serial\&.println(sensorsDataCSV\&.size());
756             Serial\&.println();
757         #endif  
758 
759         if( (sensorsData\&.size()!=0) || (sensorsDataCSV\&.size()!=0) )
760         {
761             this->savedData=true;
762         }
763         else
764         {
765 
766             this->savedData=false;      
767         
768         }   
769     }
770 
771 #if DEBUG == 1 
772 
773     Serial\&.print( F("savedData : ") );
774     Serial\&.println(this->savedData);
775 
776 #endif
777 
778     return( this->savedData );
779 }
.fi
.SS "bool CoolFileSystem::saveSensorData (const char * data)"
CoolFileSystem::saveSensorData( data ): This method is provided to save the data on the local memory when there is no internet available
.PP
sets the saved data flag to TRUE when successful
.PP
\fBReturns:\fP
.RS 4
true if the data was saved, false otherwise 
.RE
.PP

.PP
Definition at line 60 of file CoolFileSystem\&.cpp\&.
.PP
References savedData, and saveSensorDataCSV()\&.
.PP
Referenced by CoolBoard::offLineMode()\&.
.PP
.nf
61 {
62 
63 #if DEBUG == 1
64 
65     Serial\&.println( F("Entering CoolFileSystem\&.saveSensorData()") );
66     Serial\&.println();
67 
68 #endif
69     
70     File sensorsData=SPIFFS\&.open("/sensorsData\&.json","a");
71 
72     if(!sensorsData)
73     {
74     
75     #if DEBUG == 1
76     
77         Serial\&.println( F("failed to append to /sensorsData\&.json") );
78         Serial\&.println();
79     
80     #endif
81 
82         this->savedData=false;
83         return (false); 
84     }   
85 
86     DynamicJsonBuffer jsonBuffer;
87     JsonObject& root = jsonBuffer\&.parseObject(data);
88 
89     if( root\&.success() )
90     {
91         root\&.printTo(sensorsData);
92         sensorsData\&.println();
93         sensorsData\&.close();
94 
95 
96     #if DEBUG == 1
97         
98         Serial\&.print(F("jsonBuffer size: "));
99         Serial\&.println(jsonBuffer\&.size());
100         Serial\&.println();
101 
102         sensorsData=SPIFFS\&.open("/sensorsData\&.json","r");
103         
104         if(!sensorsData)
105         {
106             
107             Serial\&.println(F("failed to reopen /sensorsData\&.json"));
108                         
109         }
110     
111         Serial\&.println( F("saved data is : ") );
112         root\&.printTo(Serial);
113         Serial\&.println();
114 
115         Serial\&.println(F("/sensorsData\&.json") );
116         while (sensorsData\&.available()) 
117         {
118             Serial\&.println(sensorsData\&.readString()) ;
119         }
120         
121         Serial\&.println();
122         
123         sensorsData\&.close();
124     
125     #endif
126 
127         this->saveSensorDataCSV(data);      
128 
129         this->savedData=true;
130         return (true);      
131     }
132     else
133     {
134     
135     #if DEBUG == 1
136 
137         Serial\&.println( F("failed to parse json") );
138     
139     #endif
140 
141         this->savedData=false;
142         return(false);
143     }
144     
145 
146 }
.fi
.SS "bool CoolFileSystem::saveSensorDataCSV (const char * data)"
CoolFileSystem::saveSensorDataCSV( data ): This method is provided to save the data on the local memory in CSV format\&.
.PP
\fBReturns:\fP
.RS 4
true if the data was saved, false otherwise 
.RE
.PP

.PP
Definition at line 157 of file CoolFileSystem\&.cpp\&.
.PP
Referenced by saveSensorData()\&.
.PP
.nf
158 {
159 #if DEBUG == 1
160 
161     Serial\&.println( F("Entering CoolFileSystem\&.saveSensorDataCSV()") );
162     Serial\&.println();
163 
164 #endif
165     //parsing json
166     DynamicJsonBuffer jsonBuffer;
167     JsonObject& root = jsonBuffer\&.parseObject(data);
168     String header="",values="";
169     
170     //if json parse success
171     if( root\&.success() )
172     {       
173         for (auto kv : root) 
174         {
175             //print the header(json keys ) to header string
176             header+=kv\&.key;
177             header+=',';
178             
179             //print the values to header string
180             values+=( kv\&.value\&.as<char*>() );
181             values+=',';
182         }
183 
184         header\&.remove(header\&.lastIndexOf(','), 1);
185         values\&.remove(values\&.lastIndexOf(','), 1);        
186     
187     #if DEBUG == 1
188     
189         Serial\&.println( F(" data is : ") );
190         root\&.printTo(Serial);
191         Serial\&.println();
192         
193         Serial\&.println(F(" header is :" ) ) ;
194         Serial\&.println(header);
195         Serial\&.println(F(" values are : "));
196         Serial\&.println(values);
197         
198         Serial\&.print(F("jsonBuffer size: "));
199         Serial\&.println(jsonBuffer\&.size());
200         Serial\&.println();
201 
202     
203     #endif
204     
205     }
206     //failed to parse json
207     else
208     {
209     
210     #if DEBUG == 1
211 
212         Serial\&.println( F("failed to parse json") );
213     
214     #endif
215 
216         return(false);
217     }
218 
219     //check if file exists
220     File sensorsData=SPIFFS\&.open("/sensorsData\&.csv","r");
221     
222     //file doesn't exist
223     if(!sensorsData)
224     {
225     
226     #if DEBUG == 1
227     
228         Serial\&.println( F("/sensorsData\&.csv not found") );
229         Serial\&.println( F("creating /sensorsData\&.csv") );
230         Serial\&.println();
231     
232     #endif
233         //create file
234         sensorsData=SPIFFS\&.open("/sensorsData\&.csv","w");
235         
236         if(!sensorsData)
237         {
238 
239         #if DEBUG == 1
240         
241             Serial\&.println( F("failed to create /sensorsData\&.csv") );
242             Serial\&.println();
243         
244         #endif
245         
246             return(false);
247 
248         }
249         
250         //print the header(json keys ) to the CSV file
251         sensorsData\&.println(header);
252 
253         //print the values to the CSV file
254         sensorsData\&.println(values);
255         
256         sensorsData\&.close();
257     
258     #if DEBUG == 1
259 
260         sensorsData=SPIFFS\&.open("/sensorsData\&.csv","r");
261         
262         if(!sensorsData)
263         {
264             Serial\&.println(F("failed to reopen /sensorsData\&.csv "));
265             return(false);      
266         }
267 
268         Serial\&.println( F("/sensorsData\&.csv : ") );
269 
270         while (sensorsData\&.available()) 
271         {
272             Serial\&.print(sensorsData\&.readString()) ;
273         }
274         Serial\&.println();
275 
276         //close the file
277         sensorsData\&.close();
278 
279     #endif
280         
281 
282         
283         return(true);
284         
285     }
286 
287     //file exist
288     else
289     {
290 
291     #if DEBUG == 1
292     
293         Serial\&.println( F("/sensorsData\&.csv  found") );
294         Serial\&.println( F("appending to /sensorsData\&.csv") );
295         Serial\&.println();
296     
297     #endif
298 
299         //append to file
300         sensorsData=SPIFFS\&.open("/sensorsData\&.csv","a");
301         
302         if(!sensorsData)
303         {
304         
305         #if DEBUG == 1
306             
307             Serial\&.println( F("failed to open /sensorsData\&.csv") );
308             Serial\&.println();
309 
310         #endif
311             
312             return(false);
313         
314         }
315 
316         //print the values to the CSV file
317         sensorsData\&.println(values);
318         
319         sensorsData\&.close();
320 
321     #if DEBUG == 1
322 
323         sensorsData=SPIFFS\&.open("/sensorsData\&.csv","r");
324         
325         if(!sensorsData)
326         {
327             Serial\&.println(F("failed to reopen /sensorsData\&.csv "));
328             return(false);      
329         }
330 
331         
332         Serial\&.println( F("/sensorsData\&.csv : ") );
333 
334         while (sensorsData\&.available()) 
335         {
336             Serial\&.println(sensorsData\&.readString()) ;
337         }
338         
339         Serial\&.println();
340         
341         sensorsData\&.close();
342         
343     #endif      
344         
345         return(true);
346     
347     }   
348 
349 
350 
351 }
.fi
.SS "bool CoolFileSystem::updateConfigFiles (String answer)"
CoolFileSystem::updateConfigFiles( mqtt answer ): This method is provided to update the configuration files when the appropriate mqtt answer is received
.PP
\fBReturns:\fP
.RS 4
true if the files are updated correctly, false otherwise 
.RE
.PP

.PP
Definition at line 362 of file CoolFileSystem\&.cpp\&.
.PP
References fileUpdate(), and temp\&.
.PP
Referenced by CoolBoard::update()\&.
.PP
.nf
363 {
364 
365 #if DEBUG == 1
366 
367     Serial\&.println( F("Entering CoolFileSystem\&.updateConfigFiles") );
368     Serial\&.println();
369     
370     Serial\&.println( F("input answer : ") );
371     Serial\&.println(answer);
372 #endif
373 
374     //total json object 
375     DynamicJsonBuffer jsonBuffer;
376     JsonObject& root = jsonBuffer\&.parseObject( answer\&.c_str() );
377 
378 #if DEBUG == 1
379     
380     Serial\&.println( F("json object : ") );   
381     root\&.printTo(Serial);
382     Serial\&.println();
383     
384     Serial\&.print(F("jsonBuffer size: "));
385     Serial\&.println(jsonBuffer\&.size());
386     Serial\&.println();
387 
388 
389 #endif
390 
391     if(! ( root\&.success() ))
392     {
393     
394     #if DEBUG == 1
395 
396         Serial\&.println( F("failed to parse root ") );
397         Serial\&.println();
398     
399     #endif
400 
401         return(false);
402     }
403     else
404     {
405     #if DEBUG == 1
406         
407         Serial\&.println( F("success to parse root ") );
408         Serial\&.println();
409         
410     #endif  
411     }
412     
413 #if DEBUG == 1
414 
415     Serial\&.println( F("input message is : ") );
416     root\&.printTo(Serial);
417     Serial\&.println();
418 
419 #endif
420     //temp string
421     String temp;
422 
423     //CoolBoard Configuration File
424 
425         JsonObject& jsonCoolBoard=root["CoolBoard"];
426 
427 #if DEBUG == 1
428 
429     Serial\&.println( F("before config CoolBoard json") );
430     jsonCoolBoard\&.printTo(Serial);
431 
432 #endif
433 
434     if(jsonCoolBoard\&.success())
435     {
436         String update;
437     
438         jsonCoolBoard\&.printTo(update);
439 
440         this->fileUpdate(update,"/coolBoardConfig\&.json");        
441         
442     }
443     else
444     {
445     
446     #if DEBUG == 1 
447 
448         Serial\&.println( F("failed to parse CoolBoard ") );
449     
450     #endif
451 
452     }       
453 
454     
455     //Cool Board Sensors Configuration File
456         JsonObject& jsonSensorsBoard=root["CoolSensorsBoard"];
457 
458 #if DEBUG == 1 
459 
460     Serial\&.println( F("before config CoolSensorsBoard json") );
461     jsonSensorsBoard\&.printTo(Serial);
462 
463 #endif 
464     
465     if(jsonSensorsBoard\&.success())
466     {   
467         String update;
468     
469         jsonSensorsBoard\&.printTo(update);
470 
471         this->fileUpdate(update,"/coolBoardSensorsConfig\&.json");     
472 
473     }
474     else
475     {
476 
477     #if DEBUG == 1
478 
479         Serial\&.println( F("failed to parse CoolSensorsBoard sensors ") );    
480     
481     #endif
482 
483     }
484 
485     
486     //rtc configuration file
487         JsonObject& jsonRTC=root["rtc"];
488 
489 #if DEBUG == 1 
490     
491     Serial\&.println( F("before config rtc json") );
492     jsonRTC\&.printTo(Serial);
493 
494 #endif
495     if(jsonRTC\&.success() )
496     {
497         String update;
498 
499         jsonRTC\&.printTo(update);
500 
501         this->fileUpdate(update,"/rtcConfig\&.json");          
502     }
503     else
504     {
505     
506     #if DEBUG == 1 
507 
508         Serial\&.println( F("failed to parse rtc ") );
509     
510     #endif
511 
512     }
513     
514     
515         //cool board led configuration
516         JsonObject& jsonLedBoard=root["led"];
517     
518 #if DEBUG == 1 
519 
520     Serial\&.println( F("before config Led json") );
521     jsonLedBoard\&.printTo(Serial);
522 
523 #endif
524 
525     if(jsonLedBoard\&.success())
526     {   
527         String update;
528     
529         jsonLedBoard\&.printTo(update);
530 
531         this->fileUpdate(update,"/coolBoardLedConfig\&.json");     
532 
533     
534     }
535     else
536     {
537     
538     #if DEBUG == 1 
539 
540         Serial\&.println( F("failed to parse led") );
541     
542     #endif 
543 
544     }
545         
546 
547     
548 
549     //jetpack configuration
550         JsonObject& jsonJetpack=root["jetPack"];
551 
552 #if DEBUG == 1 
553 
554     Serial\&.println( F("before config jetpack json") );
555     jsonJetpack\&.printTo(Serial);
556 
557 #endif
558 
559     if(jsonJetpack\&.success())
560     {
561     
562         String update;
563     
564         jsonJetpack\&.printTo(update);
565 
566         this->fileUpdate(update,"/jetPackConfig\&.json");      
567 
568     }
569 
570     else
571     {
572     
573     #if DEBUG == 1 
574 
575         Serial\&.println( F("failed to parse jetpack") );  
576     
577     #endif
578 
579     }
580     
581     //irene configuration   
582         JsonObject& jsonIrene=root["irene3000"];
583     
584 #if DEBUG == 1 
585 
586     Serial\&.println( F("before config irene json") ); 
587     jsonIrene\&.printTo(Serial);
588 
589 #endif 
590 
591     if(jsonIrene\&.success())
592     {
593 
594         String update;
595     
596         jsonIrene\&.printTo(update);
597 
598         this->fileUpdate(update,"/irene3000Config\&.json");        
599     
600     }
601     else
602     {
603     
604     #if DEBUG == 1 
605 
606         Serial\&.println( F("failed to parse irene") );    
607     
608     #endif 
609 
610 
611     }
612     
613     //external sensors
614         JsonObject& jsonExternalSensors=root["externalSensors"];
615 
616 #if DEBUG == 1 
617 
618     Serial\&.println( F("before config external Sensors json") );
619     jsonExternalSensors\&.printTo(Serial);
620 
621 #endif
622 
623     if(jsonExternalSensors\&.success())
624     {
625 
626         String update;
627     
628         jsonExternalSensors\&.printTo(update);
629 
630         this->fileUpdate(update,"/externalSensorsConfig\&.json");      
631 
632     }
633 
634     else
635     {   
636 
637     #if DEBUG == 1
638         
639         Serial\&.println( F("failed to parse external sensors") );
640 
641     #endif
642 
643 
644     }
645 
646     
647     //mqtt config
648         JsonObject& jsonMQTT=root["mqtt"];
649     
650 #if DEBUG == 1 
651 
652     Serial\&.println( F("before config mqtt json") );
653     jsonMQTT\&.printTo(Serial);
654 
655 #endif
656 
657     if(jsonMQTT\&.success())
658     {
659 
660         String update;
661     
662         jsonMQTT\&.printTo(update);
663 
664         this->fileUpdate(update,"/mqttConfig\&.json");     
665 
666     }
667     else
668     {
669 
670     #if DEBUG == 1 
671 
672         Serial\&.println( F("failed to parse mqtt") );
673     
674     #endif
675 
676     
677     }   
678 
679     //wifi config
680         JsonObject& jsonWifi=root["wifi"];
681     
682 #if DEBUG == 1 
683 
684     Serial\&.println( F("before config wifi json") );
685     jsonWifi\&.printTo(Serial);
686 
687 #endif
688 
689     if(jsonWifi\&.success())
690     {
691 
692         String update;
693     
694         jsonWifi\&.printTo(update);
695 
696         this->fileUpdate(update,"/wifiConfig\&.json");     
697 
698     }
699     else
700     {
701 
702     #if DEBUG == 1 
703 
704         Serial\&.println( F("failed to parse wifi") );
705     
706     #endif
707 
708     
709     }   
710         
711     return true;
712 
713 }   
.fi
.SH "Member Data Documentation"
.PP 
.SS "bool CoolFileSystem::savedData =0\fC [private]\fP"

.PP
Definition at line 42 of file CoolFileSystem\&.h\&.
.PP
Referenced by getSensorSavedData(), isDataSaved(), and saveSensorData()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolAPI from the source code\&.
