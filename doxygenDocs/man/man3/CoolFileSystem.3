.TH "CoolFileSystem" 3 "Mon Jul 10 2017" "CoolAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoolFileSystem \- This class handles the file system\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolFileSystem\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "bool \fBbegin\fP ()"
.br
.ti -1c
.RI "bool \fBupdateConfigFiles\fP (String answer, int JSON_SIZE)"
.br
.ti -1c
.RI "bool \fBsaveSensorData\fP (const char *data, int Sensor_JSON_SIZE)"
.br
.ti -1c
.RI "bool \fBisDataSaved\fP ()"
.br
.ti -1c
.RI "String \fBgetSensorSavedData\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "bool \fBsavedData\fP =0"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class handles the file system\&. 
.PP
Definition at line 22 of file CoolFileSystem\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "bool CoolFileSystem::begin ()"
\fBCoolFileSystem::begin()\fP: This method is provided to start the SPIFFS object\&.
.PP
\fBReturns:\fP
.RS 4
true if SPIFFS was initialized correctly, false otherwise 
.RE
.PP

.PP
Definition at line 33 of file CoolFileSystem\&.cpp\&.
.PP
Referenced by CoolBoard::begin(), and CoolBoard::config()\&.
.PP
.nf
34 {
35 
36 #if DEBUG == 1
37 
38     Serial\&.println( F("Entering CoolFileSystem\&.begin()") );
39     Serial\&.println();    
40     Serial\&.print( F("SPIFFS success ? ") );
41     Serial\&.println(SPIFFS\&.begin());
42     Serial\&.println();
43 
44 #endif
45 
46     return( SPIFFS\&.begin() );                                   //Initialize Filesystem
47 
48 }
.fi
.SS "String CoolFileSystem::getSensorSavedData ()"
CoolFileSystem::getSensorData(): This method is provided to return the sensor data saved in the File System
.PP
\fBReturns:\fP
.RS 4
string json of the saved sensor data file 
.RE
.PP

.PP
Definition at line 617 of file CoolFileSystem\&.cpp\&.
.PP
References savedData\&.
.PP
Referenced by CoolBoard::onLineMode()\&.
.PP
.nf
618 {
619 
620 #if DEBUG == 1 
621 
622     Serial\&.println( F("Entering CoolFileSystem\&.getSensorSavedData()") );
623     Serial\&.println();
624 
625 #endif
626 
627     //open sensors data file
628     File sensorsData=SPIFFS\&.open("/sensorsData\&.json","r");
629     
630     if (!sensorsData)
631     {
632 
633     #if DEBUG == 1 
634 
635         Serial\&.println( F("Failed to read /sensorsData\&.json") );
636 
637     #endif
638  
639         return("failed to open file");
640     }
641 
642     else
643     {
644         size_t size = sensorsData\&.size();
645 
646         // Allocate a buffer to store contents of the file\&.
647         std::unique_ptr < char[] > buf(new char[size]);
648 
649         sensorsData\&.readBytes(buf\&.get(), size);
650 
651         DynamicJsonBuffer jsonBuffer;
652 
653         JsonObject & json = jsonBuffer\&.parseObject(buf\&.get());
654         
655         if (!json\&.success())
656         {
657 
658         #if DEBUG == 1
659         
660             Serial\&.println( F("failed to parse json") );
661         
662         #endif
663         
664             return("failed to parse json");
665         }
666         else
667         {   
668             //the return string
669             String sensorDataString;
670             
671             //print the json to the string
672             json\&.printTo(sensorDataString);
673             
674             //close the file
675             sensorsData\&.close();
676 
677             //delete data in the file
678             File sensorsData=SPIFFS\&.open("/sensorsData\&.json","w");
679             if (!sensorsData)   
680             {
681             #if DEBUG == 1
682         
683                 Serial\&.println( F("failed to delete data in the file") );
684         
685             #endif
686 
687                 return("failed to delete data in the file");
688             }
689 
690             sensorsData\&.close();
691             
692             //position the saved data flag to false
693             this->savedData=false;  
694             
695         #if DEBUG == 1 
696 
697             Serial\&.println( F("saved data : ") );
698             Serial\&.println(sensorDataString);
699             Serial\&.println();
700         
701         #endif
702 
703             //return the string
704             return(sensorDataString);       
705         }
706         
707         
708     }
709 
710 }
.fi
.SS "bool CoolFileSystem::isDataSaved ()"
\fBCoolFileSystem::isDataSaved()\fP: This method is provided to report wether there is sensor data saved in the File System\&.
.PP
\fBReturns:\fP
.RS 4
true if there is data saved, false otherwise 
.RE
.PP

.PP
Definition at line 594 of file CoolFileSystem\&.cpp\&.
.PP
References savedData\&.
.PP
Referenced by CoolBoard::onLineMode()\&.
.PP
.nf
595 {
596 
597 #if DEBUG == 1 
598 
599     Serial\&.println( F("Entering CoolFileSystem\&.isDataSaved()") );
600     Serial\&.println();
601     Serial\&.print( F("savedData : ") );
602     Serial\&.println(this->savedData);
603 
604 #endif
605 
606     return( this->savedData );
607 }
.fi
.SS "bool CoolFileSystem::saveSensorData (const char * data, int Sensor_JSON_SIZE)"
CoolFileSystem::saveSensorData( data, data size ): This method is provided to save the data on the local memory when there is no internet available
.PP
sets the saved data flag to TRUE when successful
.PP
\fBReturns:\fP
.RS 4
true if the data was saved, false otherwise 
.RE
.PP

.PP
Definition at line 60 of file CoolFileSystem\&.cpp\&.
.PP
References savedData\&.
.PP
Referenced by CoolBoard::offLineMode()\&.
.PP
.nf
61 {
62 
63 #if DEBUG == 1
64 
65     Serial\&.println( F("Entering CoolFileSystem\&.saveSensorData()") );
66     Serial\&.println();
67 
68 #endif
69     
70     File sensorsData=SPIFFS\&.open("/sensorsData\&.json","a+");
71     if(!sensorsData)
72     {
73     
74     #if DEBUG == 1
75     
76         Serial\&.println( F("failed to append to /sensorsData\&.json") );
77         Serial\&.println();
78     
79     #endif
80 
81         this->savedData=false;
82         return (false); 
83     }   
84 
85     DynamicJsonBuffer jsonBuffer(Sensor_JSON_SIZE);
86     JsonObject& root = jsonBuffer\&.parseObject(data);
87 
88     if( root\&.success() )
89     {
90         root\&.printTo(sensorsData);
91         sensorsData\&.close();
92     
93     #if DEBUG == 1
94     
95         Serial\&.println( F("saved data is : ") );
96         root\&.printTo(Serial);
97         Serial\&.println();
98     
99     #endif
100 
101         this->savedData=true;
102         return (true);      
103     }
104     else
105     {
106     
107     #if DEBUG == 1
108 
109         Serial\&.println( F("failed to parse json") );
110     
111     #endif
112 
113         this->savedData=false;
114         return(false);
115     }
116     
117 
118 }
.fi
.SS "bool CoolFileSystem::updateConfigFiles (String answer, int JSON_SIZE)"
CoolFileSyste::updateConfigFiles( mqtt answer, answer size): This method is provided to update the configuration files when the appropriate mqtt answer is received: -update : 1
.PP
\fBReturns:\fP
.RS 4
true if the files are updated correctly, false otherwise 
.RE
.PP

.PP
Definition at line 128 of file CoolFileSystem\&.cpp\&.
.PP
References temp\&.
.PP
Referenced by CoolBoard::update()\&.
.PP
.nf
129 {
130 
131 #if DEBUG == 1
132 
133     Serial\&.println( F("Entering CoolFileSystem\&.updateConfigFiles") );
134     Serial\&.println();
135     
136     Serial\&.println( F("input answer : ") );
137     Serial\&.println(answer);
138 #endif
139     //test
140     char buffer[ answer\&.length()+2 ];
141     answer\&.toCharArray( buffer, answer\&.length()+2  );
142     //total json object 
143     DynamicJsonBuffer jsonBuffer(JSON_SIZE);
144     JsonObject& root = jsonBuffer\&.parseObject( buffer );
145 
146 #if DEBUG == 1
147     Serial\&.println( F("json object : ") );   
148     root\&.printTo(Serial);
149 
150 #endif
151 
152     if(! ( root\&.success() ))
153     {
154     
155     #if DEBUG == 1
156 
157         Serial\&.println( F("failed to parse root ") );
158         Serial\&.println();
159     
160     #endif
161 
162         return(false);
163     }
164     else
165     {
166     #if DEBUG == 1
167         
168         Serial\&.println( F("success to parse root ") );
169         Serial\&.println();
170         
171     #endif  
172     }
173     
174 #if DEBUG == 1
175 
176     Serial\&.println( F("input message is : ") );
177     root\&.printTo(Serial);
178     Serial\&.println();
179 
180 #endif
181     //temp string
182     String temp;
183 
184     //CoolBoard Configuration File
185 
186         JsonObject& jsonCoolBoard=root["CoolBoard"];
187 
188 #if DEBUG == 1
189 
190     Serial\&.println( F("before config CoolBoard json") );
191     jsonCoolBoard\&.printTo(Serial);
192 
193 #endif
194 
195     if(jsonCoolBoard\&.success())
196     {
197         File coolBoardConfig = SPIFFS\&.open("/coolBoardConfig\&.json", "w"); 
198         if(!coolBoardConfig)
199         {   
200         #if DEBUG == 1
201             
202             Serial\&.println( F("failed to write to coolBoardConfig\&.json") );
203 
204         #endif
205             return(false);
206         }
207         
208         jsonCoolBoard\&.printTo(coolBoardConfig);
209         
210         coolBoardConfig\&.close();
211 
212 
213     #if DEBUG == 1
214 
215         Serial\&.println( F("CoolBoard Config") );
216         jsonCoolBoard\&.printTo(Serial);
217     
218     #endif
219         
220     }
221     else
222     {
223     
224     #if DEBUG == 1 
225 
226         Serial\&.println( F("failed to parse CoolBoard ") );
227     
228     #endif
229 
230     }       
231 
232     
233     //Cool Board Sensors Configuration File
234         JsonObject& jsonSensorsBoard=root["CoolSensorsBoard"];
235 
236 #if DEBUG == 1 
237 
238     Serial\&.println( F("before config CoolSensorsBoard json") );
239     jsonSensorsBoard\&.printTo(Serial);
240 
241 #endif 
242     
243     if(jsonSensorsBoard\&.success())
244     {   
245         File coolBoardSensorsConfig = SPIFFS\&.open("/coolBoardSensorsConfig\&.json", "w");   
246         if(!coolBoardSensorsConfig)
247         {
248         #if DEBUG == 1 
249         
250             Serial\&.println( F("failed to write coolBoardSensors\&.json") );
251 
252         #endif
253 
254             return(false);
255         }
256         
257         jsonSensorsBoard\&.printTo(coolBoardSensorsConfig);
258         coolBoardSensorsConfig\&.close();
259 
260     #if DEBUG == 1
261 
262         Serial\&.println("CoolBoardSensors Config");
263         jsonSensorsBoard\&.printTo(Serial);
264 
265     #endif
266 
267     }
268     else
269     {
270 
271     #if DEBUG == 1
272 
273         Serial\&.println( F("failed to parse CoolSensorsBoard sensors ") );    
274     
275     #endif
276 
277     }
278     
279     
280     
281     //rtc configuration file
282     DynamicJsonBuffer jsonR;
283         JsonObject& jsonRTC=root["rtc"];
284 
285 #if DEBUG == 1 
286     
287     Serial\&.println( F("before config rtc json") );
288     jsonRTC\&.printTo(Serial);
289 
290 #endif
291     if(jsonRTC\&.success() )
292     {
293         File rtcConfig = SPIFFS\&.open("/rtcConfig\&.json", "w"); 
294         if(!rtcConfig)
295         {
296         
297         #if DEBUG == 1 
298 
299             Serial\&.println( F("failed to write rtcConfig\&.json") );
300 
301         #endif
302 
303             return(false);
304         }
305 
306         jsonRTC\&.printTo(rtcConfig);
307         rtcConfig\&.close();
308 
309     #if DEBUG == 1 
310 
311         Serial\&.println( F("RTC Config") );
312         jsonRTC\&.printTo(Serial);
313     
314     #endif
315 
316     
317     }
318     else
319     {
320     
321     #if DEBUG == 1 
322 
323         Serial\&.println( F("failed to parse rtc ") );
324     
325     #endif
326 
327     }
328 
329     
330     
331     
332     
333         //cool board led configuration
334     DynamicJsonBuffer jsonLBoard;
335         JsonObject& jsonLedBoard=root["led"];
336     
337 #if DEBUG == 1 
338 
339     Serial\&.println( F("before config Led json") );
340     jsonLedBoard\&.printTo(Serial);
341 
342 #endif
343 
344     if(jsonLedBoard\&.success())
345     {   
346         File coolBoardLedConfig = SPIFFS\&.open("/coolBoardLedConfig\&.json", "w");   
347         if(!coolBoardLedConfig)
348         {
349         
350         #if DEBUG == 1 
351         
352             Serial\&.println( F("failed to write led config") );
353         
354         #endif
355 
356             return(false);
357         }
358         
359         jsonLedBoard\&.printTo(coolBoardLedConfig);
360         coolBoardLedConfig\&.close();
361 
362     #if DEBUG == 1 
363 
364         Serial\&.println( F("CoolBoardLed Config") );      
365         jsonLedBoard\&.printTo(Serial);
366     
367     #endif
368 
369     
370     }
371     else
372     {
373     
374     #if DEBUG == 1 
375 
376         Serial\&.println( F("failed to parse led") );
377     
378     #endif 
379 
380     }
381         
382 
383     
384 
385     //jetpack configuration
386     DynamicJsonBuffer jsonJBoard;
387         JsonObject& jsonJetpack=root["jetPack"];
388 
389 #if DEBUG == 1 
390 
391     Serial\&.println( F("before config jetpack json") );
392     jsonJetpack\&.printTo(Serial);
393 
394 #endif
395 
396     if(jsonJetpack\&.success())
397     {   
398         File jetPackConfig = SPIFFS\&.open("/jetPackConfig\&.json", "w"); 
399         if(!jetPackConfig)
400         {
401         #if DEBUG == 1
402 
403             Serial\&.println( F("failed to write jetpack file") );
404         
405         #endif
406 
407             return(false);
408         }
409 
410         jsonJetpack\&.printTo(jetPackConfig);
411         jetPackConfig\&.close();
412 
413     #if DEBUG == 1
414 
415         Serial\&.println( F("jetpack Config") );   
416         jsonJetpack\&.printTo(Serial);
417     
418     #endif
419 
420     }
421 
422     else
423     {
424     
425     #if DEBUG == 1 
426 
427         Serial\&.println( F("failed to parse jetpack") );  
428     
429     #endif
430 
431     }
432     
433     //irene configuration   
434     DynamicJsonBuffer jsonIBoard;
435         JsonObject& jsonIrene=root["irene3000"];
436     
437 #if DEBUG == 1 
438 
439     Serial\&.println( F("before config irene json") ); 
440     jsonIrene\&.printTo(Serial);
441 
442 #endif 
443 
444     if(jsonIrene\&.success())
445     {
446         File irene3000Config = SPIFFS\&.open("/irene3000Config\&.json", "w"); 
447         if(!irene3000Config)
448         {
449 
450         #if DEBUG == 1 
451 
452             Serial\&.println( F("failed to write irene file") );
453         
454         #endif
455 
456             return(false);
457         }
458 
459         jsonIrene\&.printTo(irene3000Config);
460         irene3000Config\&.close();
461     
462     #if DEBUG == 1 
463         
464         Serial\&.println( F("irene3000 Config") );
465         jsonIrene\&.printTo(Serial);
466     
467     #endif
468     
469     }
470     else
471     {
472     
473     #if DEBUG == 1 
474 
475         Serial\&.println( F("failed to parse irene") );    
476     
477     #endif 
478 
479 
480     }
481     
482     //external sensors
483     DynamicJsonBuffer jsonESBoard;
484         JsonObject& jsonExternalSensors=root["externalSensors"];
485 
486 #if DEBUG == 1 
487 
488     Serial\&.println( F("before config external Sensors json") );
489     jsonExternalSensors\&.printTo(Serial);
490 
491 #endif
492 
493     if(jsonExternalSensors\&.success())
494     {
495         File externalSensorsConfig = SPIFFS\&.open("/externalSensorsConfig\&.json", "w"); 
496         if(!externalSensorsConfig)
497         {
498         
499         #if DEBUG == 1 
500 
501             Serial\&.println( F("failed to open external sensors file ") );
502         
503         #endif 
504 
505             return(false);
506         }
507 
508 #if DEBUG == 1 
509         
510         Serial\&.println( F("externalSensors Config") );
511         jsonExternalSensors\&.printTo(Serial);
512 
513 #endif 
514 
515         jsonExternalSensors\&.printTo(externalSensorsConfig);  
516         externalSensorsConfig\&.close();
517 
518     }
519 
520     else
521     {   
522 
523     #if DEBUG == 1
524         
525         Serial\&.println( F("failed to parse external sensors") );
526 
527     #endif
528 
529 
530     }
531 
532     
533     //mqtt config
534     DynamicJsonBuffer jsonMQ;
535         JsonObject& jsonMQTT=root["mqtt"];
536     
537 #if DEBUG == 1 
538 
539     Serial\&.println( F("before config mqtt json") );
540     jsonMQTT\&.printTo(Serial);
541 
542 #endif
543 
544     if(jsonMQTT\&.success())
545     {
546         File mqttConfig = SPIFFS\&.open("/mqttConfig\&.json", "w");   
547         if(!mqttConfig)
548         {
549         
550         #if DEBUG == 1 
551 
552             Serial\&.println( F("failed to open mqtt file ") );
553         
554         #endif
555         
556             return(false);
557         }
558 
559 #if DEBUG == 1 
560 
561         Serial\&.println( F("mqtt config") );
562         jsonMQTT\&.printTo(Serial);
563 
564 #endif
565     
566         jsonMQTT\&.printTo(mqttConfig);
567         mqttConfig\&.close();
568     }
569     else
570     {
571 
572     #if DEBUG == 1 
573 
574         Serial\&.println( F("failed to parse mqtt") );
575     
576     #endif
577 
578     
579     }   
580         
581     return true;
582 
583 }   
.fi
.SH "Member Data Documentation"
.PP 
.SS "bool CoolFileSystem::savedData =0\fC [private]\fP"

.PP
Definition at line 38 of file CoolFileSystem\&.h\&.
.PP
Referenced by getSensorSavedData(), isDataSaved(), and saveSensorData()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolAPI from the source code\&.
