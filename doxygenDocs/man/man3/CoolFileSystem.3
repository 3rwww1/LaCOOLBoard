.TH "CoolFileSystem" 3 "Mon Jul 3 2017" "CoolAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoolFileSystem \- This class handles the file system\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolFileSystem\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "bool \fBbegin\fP ()"
.br
.ti -1c
.RI "bool \fBupdateConfigFiles\fP (String answer, int JSON_SIZE)"
.br
.ti -1c
.RI "bool \fBsaveSensorData\fP (const char *data, int Sensor_JSON_SIZE)"
.br
.ti -1c
.RI "bool \fBisDataSaved\fP ()"
.br
.ti -1c
.RI "String \fBgetSensorSavedData\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "bool \fBsavedData\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class handles the file system\&. 
.PP
Definition at line 22 of file CoolFileSystem\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "bool CoolFileSystem::begin ()"
\fBCoolFileSystem::begin()\fP: This method is provided to start the SPIFFS object\&.
.PP
\fBReturns:\fP
.RS 4
true if SPIFFS was initialized correctly, false otherwise 
.RE
.PP

.PP
Definition at line 22 of file CoolFileSystem\&.cpp\&.
.PP
Referenced by CoolBoard::begin(), and CoolBoard::config()\&.
.PP
.nf
23 {
24     return( SPIFFS\&.begin() );                                   //Initialize Filesystem
25 
26 }
.fi
.SS "String CoolFileSystem::getSensorSavedData ()"
CoolFileSystem::getSensorData(): This method is provided to return the sensor data saved in the File System
.PP
\fBReturns:\fP
.RS 4
string json of the saved sensor data file 
.RE
.PP

.PP
Definition at line 305 of file CoolFileSystem\&.cpp\&.
.PP
References savedData\&.
.PP
Referenced by CoolBoard::onLineMode()\&.
.PP
.nf
306 {
307     //open sensors data file
308     File sensorsData=SPIFFS\&.open("/sensorsData\&.json","r");
309     
310     if (!sensorsData)
311 
312     {
313         return("failed to open file");
314     }
315     else
316     {
317         size_t size = sensorsData\&.size();
318 
319         // Allocate a buffer to store contents of the file\&.
320         std::unique_ptr < char[] > buf(new char[size]);
321 
322         sensorsData\&.readBytes(buf\&.get(), size);
323 
324         DynamicJsonBuffer jsonBuffer;
325 
326         JsonObject & json = jsonBuffer\&.parseObject(buf\&.get());
327         
328         if (!json\&.success())
329         {
330             return("failed to parse json");
331         }
332         else
333         {   
334             //the return string
335             String sensorDataString;
336             
337             //print the json to the string
338             json\&.printTo(sensorDataString);
339             
340             //close the file
341             sensorsData\&.close();
342 
343             //delete data in the file
344             File sensorsData=SPIFFS\&.open("/sensorsData\&.json","w");
345             if (!sensorsData)   
346             {
347                 return("failed to delete data in the file");
348             }
349 
350             sensorsData\&.close();
351             
352             //position the saved data flag to false
353             this->savedData=false;          
354 
355             //return the string
356             return(sensorDataString);       
357         }
358         
359         
360     }
361 
362 }
.fi
.SS "bool CoolFileSystem::isDataSaved ()"
\fBCoolFileSystem::isDataSaved()\fP: This method is provided to report wether there is sensor data saved in the File System\&.
.PP
\fBReturns:\fP
.RS 4
true if there is data saved, false otherwise 
.RE
.PP

.PP
Definition at line 292 of file CoolFileSystem\&.cpp\&.
.PP
References savedData\&.
.PP
Referenced by CoolBoard::onLineMode()\&.
.PP
.nf
293 {
294     return( this->savedData );
295 }
.fi
.SS "bool CoolFileSystem::saveSensorData (const char * data, int Sensor_JSON_SIZE)"
CoolFileSystem::saveSensorData( data, data size ): This method is provided to save the data on the local memory when there is no internet available
.PP
sets the saved data flag to TRUE when successful
.PP
\fBReturns:\fP
.RS 4
true if the data was saved, false otherwise 
.RE
.PP

.PP
Definition at line 38 of file CoolFileSystem\&.cpp\&.
.PP
References savedData\&.
.PP
Referenced by CoolBoard::offLineMode()\&.
.PP
.nf
39 {
40     File sensorsData=SPIFFS\&.open("/sensorsData\&.json","a+");
41     if(!sensorsData)
42     {
43         this->savedData=false;
44         return (false); 
45     }   
46 
47     DynamicJsonBuffer jsonBuffer(Sensor_JSON_SIZE);
48     JsonObject& root = jsonBuffer\&.parseObject(data);
49     
50     root\&.printTo(sensorsData);
51     sensorsData\&.close();
52     
53     this->savedData=true;
54     return (true);      
55 }
.fi
.SS "bool CoolFileSystem::updateConfigFiles (String answer, int JSON_SIZE)"
CoolFileSyste::updateConfigFiles( mqtt answer, answer size): This method is provided to update the configuration files when the appropriate mqtt answer is received: -update : 1
.PP
\fBReturns:\fP
.RS 4
true if the files are updated correctly, false otherwise 
.RE
.PP

.PP
Definition at line 65 of file CoolFileSystem\&.cpp\&.
.PP
References temp\&.
.PP
Referenced by CoolBoard::update()\&.
.PP
.nf
66 {
67     //String conversion to char*
68 
69     char *jsonRoot = new char[answer\&.length() + 1];
70     strcpy(jsonRoot, answer\&.c_str());
71     //total json object 
72     DynamicJsonBuffer jsonBuffer(JSON_SIZE);
73     JsonObject& root = jsonBuffer\&.parseObject(jsonRoot);
74 
75 
76         
77     //temp string
78     String temp;
79 
80     //CoolBoard Configuration File
81 
82         JsonObject& jsonCoolBoard=root["CoolBoard"];
83     if(jsonCoolBoard\&.success())
84     {
85         File coolBoardConfig = SPIFFS\&.open("/coolBoardConfig\&.json", "w"); 
86         if(!coolBoardConfig)
87         {   
88             Serial\&.println("failed to open coolBoardConfig\&.json");
89             return(false);
90         }
91         Serial\&.println("CoolBoard Config");
92         jsonCoolBoard\&.printTo(Serial);
93         
94         jsonCoolBoard\&.printTo(coolBoardConfig);
95         
96         coolBoardConfig\&.close();
97     }
98     else
99     {
100         Serial\&.println("failed to pars coolBoard ");
101     }       
102 
103     
104     //Cool Board Sensors Configuration File
105     DynamicJsonBuffer jsonSBoard;
106         JsonObject& jsonSensorsBoard=root["CoolSensorsBoard"];  
107     if(jsonSensorsBoard\&.success())
108     {   
109         File coolBoardSensorsConfig = SPIFFS\&.open("/coolBoardSensorsConfig\&.json", "w");   
110         if(!coolBoardSensorsConfig)
111         {
112             Serial\&.println("failed to open coolBoardSensors\&.json");
113             return(false);
114         }
115         
116         Serial\&.println("CoolBoardSensors Config");
117         jsonSensorsBoard\&.printTo(coolBoardSensorsConfig);
118         jsonSensorsBoard\&.printTo(Serial);
119         coolBoardSensorsConfig\&.close();
120     }
121     else
122     {
123         Serial\&.println("failed to parse on board sensors "); 
124     }
125     
126     
127     
128     //rtc configuration file
129     DynamicJsonBuffer jsonR;
130         JsonObject& jsonRTC=root["rtc"];
131     Serial\&.println("before config rtc json");
132     jsonRTC\&.printTo(Serial);
133     if(jsonRTC\&.success() )
134     {
135         File rtcConfig = SPIFFS\&.open("/rtcConfig\&.json", "w"); 
136         if(!rtcConfig)
137         {
138             Serial\&.println("failed to open rtcConfig\&.json");
139             return(false);
140         }
141         Serial\&.println("RTC Config");
142         jsonRTC\&.printTo(rtcConfig);
143         jsonRTC\&.printTo(Serial);
144         rtcConfig\&.close();
145     
146     }
147     else
148     {
149         Serial\&.println("failed to parse rtc ");
150     }
151 
152     
153     
154     
155     
156         //cool board led configuration
157     DynamicJsonBuffer jsonLBoard;
158         JsonObject& jsonLedBoard=root["led"];
159     Serial\&.println("before config Led json");
160     jsonLedBoard\&.printTo(Serial);
161     if(jsonLedBoard\&.success())
162     {   
163         File coolBoardLedConfig = SPIFFS\&.open("/coolBoardLedConfig\&.json", "w");   
164         if(!coolBoardLedConfig)
165         {
166             Serial\&.println("failed to open led config");
167             return(false);
168         }
169         Serial\&.println("CoolBoardLed Config");
170         jsonLedBoard\&.printTo(coolBoardLedConfig);
171         jsonLedBoard\&.printTo(Serial);
172         coolBoardLedConfig\&.close();
173     
174     }
175     else
176     {
177         Serial\&.println("failed to parse led");
178     }
179         
180 
181     
182 
183     //jetpack configuration
184     DynamicJsonBuffer jsonJBoard;
185         JsonObject& jsonJetpack=root["jetPack"];
186     Serial\&.println("before config jetpack json");
187     jsonJetpack\&.printTo(Serial);
188     if(jsonJetpack\&.success())
189     {   
190         File jetPackConfig = SPIFFS\&.open("/jetPackConfig\&.json", "w"); 
191         if(!jetPackConfig)
192         {
193             Serial\&.println("failed to open jetpack file");
194             return(false);
195         }
196         Serial\&.println("jetpack Config");    
197         jsonJetpack\&.printTo(jetPackConfig);
198         jsonJetpack\&.printTo(Serial);
199         jetPackConfig\&.close();
200     }
201     else
202     {
203         Serial\&.println("failed to parse jetpack");   
204     }
205     
206     //irene configuration   
207     DynamicJsonBuffer jsonIBoard;
208         JsonObject& jsonIrene=root["irene3000"];
209     Serial\&.println("before config irene json");  
210     jsonIrene\&.printTo(Serial);
211     if(jsonIrene\&.success())
212     {
213         File irene3000Config = SPIFFS\&.open("/irene3000Config\&.json", "w"); 
214         if(!irene3000Config)
215         {
216             Serial\&.println("failed to open irene file");
217             return(false);
218         }
219         Serial\&.println("irene3000 Config");
220         jsonIrene\&.printTo(irene3000Config);
221         jsonIrene\&.printTo(Serial);
222         irene3000Config\&.close();
223     
224     }
225     else
226     {
227         Serial\&.println("failed to parse irene"); 
228     }
229     
230     //external sensors
231     DynamicJsonBuffer jsonESBoard;
232         JsonObject& jsonExternalSensors=root["externalSensors"];
233     Serial\&.println("before config external Sensors json");
234     jsonExternalSensors\&.printTo(Serial);
235     if(jsonExternalSensors\&.success())
236     {
237         File externalSensorsConfig = SPIFFS\&.open("/externalSensorsConfig\&.json", "w"); 
238         if(!externalSensorsConfig)
239         {
240             Serial\&.println("failed to open external sensors file ");
241             return(false);
242         }
243         Serial\&.println("externalSensors Config");
244         jsonExternalSensors\&.printTo(externalSensorsConfig);
245         jsonExternalSensors\&.printTo(Serial);
246     
247         externalSensorsConfig\&.close();
248 
249     }
250     else
251     {
252         Serial\&.println("failed to parse external sensors");  
253     }
254 
255     
256     //mqtt config
257     DynamicJsonBuffer jsonMQ;
258         JsonObject& jsonMQTT=root["mqtt"];
259     Serial\&.println("before config mqtt json");
260     jsonMQTT\&.printTo(Serial);
261     if(jsonMQTT\&.success())
262     {
263         File mqttConfig = SPIFFS\&.open("/mqttConfig\&.json", "w");   
264         if(!mqttConfig)
265         {
266             Serial\&.println("failed to open mqtt file ");     
267             return(false);
268         }
269         Serial\&.println("mqtt config");
270         jsonMQTT\&.printTo(mqttConfig);
271         jsonMQTT\&.printTo(Serial);
272         mqttConfig\&.close();
273     }
274     else
275     {
276         Serial\&.println("failed to parse mqtt");  
277     }   
278         
279     return true;
280 
281 }   
.fi
.SH "Member Data Documentation"
.PP 
.SS "bool CoolFileSystem::savedData\fC [private]\fP"

.PP
Definition at line 38 of file CoolFileSystem\&.h\&.
.PP
Referenced by getSensorSavedData(), isDataSaved(), and saveSensorData()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolAPI from the source code\&.
