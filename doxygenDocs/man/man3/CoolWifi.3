.TH "CoolWifi" 3 "Mon Jul 31 2017" "CoolAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoolWifi \- This class manages the WiFi connection \&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolWifi\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBbegin\fP ()"
.br
.ti -1c
.RI "bool \fBconfig\fP ()"
.br
.ti -1c
.RI "bool \fBconfig\fP (String \fBssid\fP[], String \fBpass\fP[], int wifiNumber, int APTimeOut)"
.br
.ti -1c
.RI "wl_status_t \fBconnect\fP ()"
.br
.ti -1c
.RI "wl_status_t \fBstate\fP ()"
.br
.ti -1c
.RI "void \fBprintConf\fP ()"
.br
.ti -1c
.RI "bool \fBaddWifi\fP (String \fBssid\fP, String \fBpass\fP='')"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "WiFiManager \fBwifiManager\fP"
.br
.ti -1c
.RI "ESP8266WiFiMulti \fBwifiMulti\fP"
.br
.ti -1c
.RI "int \fBwifiCount\fP =0"
.br
.ti -1c
.RI "String \fBssid\fP [50] ={'0'}"
.br
.ti -1c
.RI "String \fBpass\fP [50] ={'0'}"
.br
.ti -1c
.RI "int \fBtimeOut\fP =0"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class manages the WiFi connection \&. 
.PP
Definition at line 29 of file CoolWifi\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "bool CoolWifi::addWifi (String ssid, String pass = \fC''\fP)"
CoolWifi::addWifi(ssid,pass) This method is provided to add new WiFi detected by the WiFiManager to the jsonConfig(if used )
.PP
\fBReturns:\fP
.RS 4
true if successfull , false otherwise 
.RE
.PP

.PP
Definition at line 446 of file CoolWifi\&.cpp\&.
.PP
References pass, ssid, timeOut, and wifiCount\&.
.PP
Referenced by connect()\&.
.PP
.nf
447 {
448 
449 #if DEBUG == 1
450     
451     Serial\&.println("Entering CoolWifi\&.addWifi() ") ;
452 
453 #endif  
454     
455     this->wifiCount++;
456     if( this->wifiCount >=50)
457     {
458     
459     #if DEBUG == 1
460 
461         Serial\&.println("You have reached the limit of 50");
462         return(false);  
463     
464     #endif
465 
466     }
467 
468     this->ssid[this->wifiCount-1]=ssid;
469     this->pass[this->wifiCount-1]=pass;
470     
471     //read config file
472     //update data
473     File configFile = SPIFFS\&.open("/wifiConfig\&.json", "r");
474 
475     if (!configFile) 
476     {
477     
478     #if DEBUG == 1 
479 
480         Serial\&.println( F("failed to read /wifiConfig\&.json") );
481         Serial\&.println();
482 
483     #endif
484     }
485     else
486     {
487         size_t size = configFile\&.size();
488         // Allocate a buffer to store contents of the file\&.
489         std::unique_ptr<char[]> buf(new char[size]);
490 
491         configFile\&.readBytes(buf\&.get(), size);
492         DynamicJsonBuffer jsonBuffer;
493         JsonObject& json = jsonBuffer\&.parseObject(buf\&.get());
494         if (!json\&.success()) 
495         {
496         
497         #if DEBUG == 1 
498 
499             Serial\&.println( F("failed to parse json ") );
500             Serial\&.println();
501         
502         #endif
503         } 
504         else
505         {
506         
507         #if DEBUG == 1 
508         
509             Serial\&.println( F("configuration json is ") );
510             json\&.printTo(Serial);
511             Serial\&.println();
512 
513             Serial\&.print(F("jsonBuffer size: "));
514             Serial\&.println(jsonBuffer\&.size());
515             Serial\&.println();
516 
517 
518         #endif
519             //wifiCount
520             if(json["wifiCount"]\&.success() )
521             {           
522                 json["wifiCount"]=this->wifiCount;
523             }
524             else
525             {
526                 this->wifiCount=this->wifiCount;
527             }
528             json["wifiCount"]=this->wifiCount;
529 
530             
531             //AP timeOut
532             if(json["timeOut"]\&.success() )
533             {
534                 this->timeOut=json["timeOut"];
535             }
536             else
537             {
538                 this->timeOut=this->timeOut;
539 
540             }
541             json["timeOut"]=this->timeOut;
542             
543             
544             //new Wifi SSID and PASS
545             JsonObject& newWifi = json\&.createNestedObject( "Wifi"+String( this->wifiCount-1 ) );
546             
547             newWifi["ssid"] =this->ssid[this->wifiCount-1];
548             newWifi["pass"] = this->pass[this->wifiCount-1];
549             
550 
551             configFile\&.close();
552             configFile = SPIFFS\&.open("/wifiConfig\&.json", "w");
553             if(!configFile)
554             {
555             
556             #if DEBUG == 1 
557 
558                 Serial\&.println( F("failed to write to /wifiConfig\&.json") );
559             
560             #endif
561 
562             }
563             
564             json\&.printTo(configFile);
565             configFile\&.close();
566 
567         #if DEBUG == 1 
568 
569             Serial\&.println( F("saved configuration is :") );
570             json\&.printTo(Serial);
571             Serial\&.println();
572         
573         #endif
574 
575             return(true); 
576         }
577     }   
578 
579     
580     return(true);
581     
582 }
.fi
.SS "void CoolWifi::begin ()"
\fBCoolWifi::begin()\fP: This method is provided to set the wifiMulti Access points and the wifiManager time out 
.PP
Definition at line 37 of file CoolWifi\&.cpp\&.
.PP
References pass, ssid, timeOut, wifiCount, wifiManager, and wifiMulti\&.
.PP
Referenced by CoolBoard::begin()\&.
.PP
.nf
38 { 
39 
40 #if DEBUG == 1 
41 
42     Serial\&.println( F("Entering CoolWifi\&.begin()") );
43     Serial\&.println();
44 
45 #endif
46     for(int i =0;i<this->wifiCount;i++)
47     {
48          this->wifiMulti\&.addAP(this->ssid[i]\&.c_str() , this->pass[i]\&.c_str() );    
49     }
50     
51     this->wifiManager\&.setTimeout(this->timeOut); 
52     
53 }
.fi
.SS "bool CoolWifi::config ()"
\fBCoolWifi::config()\fP: This method is provided to set the wifi parameters : -ssid -pass -AP timeOut -wifiCount
.PP
\fBReturns:\fP
.RS 4
true if successful,false otherwise 
.RE
.PP

.PP
Definition at line 192 of file CoolWifi\&.cpp\&.
.PP
References pass, ssid, timeOut, and wifiCount\&.
.PP
Referenced by CoolBoard::begin()\&.
.PP
.nf
193 {
194 
195 #if DEBUG == 1 
196 
197     Serial\&.println( F("Entering CoolWifi\&.config()") );
198     Serial\&.println();
199 
200 #endif
201 
202     //read config file
203     //update data
204     File configFile = SPIFFS\&.open("/wifiConfig\&.json", "r");
205 
206     if (!configFile) 
207     {
208     
209     #if DEBUG == 1 
210 
211         Serial\&.println( F("failed to read /wifiConfig\&.json") );
212         Serial\&.println();
213 
214     #endif
215 
216         return(false);
217     }
218     else
219     {
220         size_t size = configFile\&.size();
221         // Allocate a buffer to store contents of the file\&.
222         std::unique_ptr<char[]> buf(new char[size]);
223 
224         configFile\&.readBytes(buf\&.get(), size);
225         DynamicJsonBuffer jsonBuffer;
226         JsonObject& json = jsonBuffer\&.parseObject(buf\&.get());
227         if (!json\&.success()) 
228         {
229         
230         #if DEBUG == 1 
231 
232             Serial\&.println( F("failed to parse json ") );
233             Serial\&.println();
234         
235         #endif
236             
237             return(false);
238         } 
239         else
240         {
241         
242         #if DEBUG == 1 
243         
244             Serial\&.println( F("configuration json is ") );
245             json\&.printTo(Serial);
246             Serial\&.println();
247 
248             Serial\&.print(F("jsonBuffer size: "));
249             Serial\&.println(jsonBuffer\&.size());
250             Serial\&.println();
251 
252 
253         #endif
254             //wifiCount
255             if(json["wifiCount"]\&.success() )
256             {           
257                 this->wifiCount=json["wifiCount"];
258             }
259             else
260             {
261                 this->wifiCount=this->wifiCount;
262             }
263             json["wifiCount"]=this->wifiCount;
264 
265             
266             //AP timeOut
267             if(json["timeOut"]\&.success() )
268             {
269                 this->timeOut=json["timeOut"];
270             }
271             else
272             {
273                 this->timeOut=this->timeOut;
274 
275             }
276             json["timeOut"]=this->timeOut;
277             
278             
279             //Wifis SSID and PASS
280             for(int i =0; i<this->wifiCount ;i++)
281             {
282                 if ( json["Wifi"+String(i)]\&.success() )
283                 {
284                     
285                     if( json["Wifi"+String(i)]["ssid"]\&.success() )
286                     {
287                         const char* tempSsid=json["Wifi"+String(i)]["ssid"]; 
288                         this->ssid[i]=tempSsid;                 
289                     }
290                     else
291                     {
292                         this->ssid[i]=this->ssid[i];                    
293                     }
294                     json["Wifi"+String(i)]["ssid"]=this->ssid[i]\&.c_str();
295                     
296                     
297                     if( json["Wifi"+String(i)]["pass"]\&.success() )
298                     {
299                         const char* tempPass =json["Wifi"+String(i)]["pass"];
300                         this->pass[i]=tempPass ;                    
301                     }
302                     else
303                     {
304                         this->pass[i]=this->pass[i];                    
305                     }
306                     json["Wifi"+String(i)]["pass"]=this->pass[i]\&.c_str();            
307                 
308                 }
309                 else
310                 {
311                     
312                     this->ssid[i]=this->ssid[i];
313                     this->pass[i]=this->pass[i];                    
314                     
315                 }
316                 json["Wifi"+String(i)]["ssid"]=this->ssid[i]\&.c_str();
317                 json["Wifi"+String(i)]["pass"]=this->pass[i]\&.c_str();            
318                         
319             }
320 
321             configFile\&.close();
322             configFile = SPIFFS\&.open("/wifiConfig\&.json", "w");
323             if(!configFile)
324             {
325             
326             #if DEBUG == 1 
327 
328                 Serial\&.println( F("failed to write to /wifiConfig\&.json") );
329             
330             #endif
331 
332                 return(false);              
333             }
334             
335             json\&.printTo(configFile);
336             configFile\&.close();
337 
338         #if DEBUG == 1 
339 
340             Serial\&.println( F("saved configuration is :") );
341             json\&.printTo(Serial);
342             Serial\&.println();
343         
344         #endif
345 
346             return(true); 
347         }
348     }   
349     
350 
351 }
.fi
.SS "bool CoolWifi::config (String ssid[], String pass[], int wifiNumber, int APTimeOut)"
CoolWifi::config(ssid array, pass array, number of wifis, AP timeout ); This method is provided to configure the Wifi without SPIFFS
.PP
\fBReturns:\fP
.RS 4
true if successfull, false otherwise 
.RE
.PP

.PP
Definition at line 359 of file CoolWifi\&.cpp\&.
.PP
References timeOut, and wifiCount\&.
.PP
.nf
360 {
361 
362 #if DEBUG == 1 
363     
364     Serial\&.println("Entering CoolWifi\&.config(), no SPIFFS variant ") ;
365     
366 #endif
367     
368     if(wifiNumber>50)
369     {
370     
371     #if DEBUG == 1 
372         
373         Serial\&.println("the limit of WiFis is 50 " );
374         
375     #endif
376         return(false);  
377     }
378 
379     this->wifiCount=wifiNumber;
380 
381     this->timeOut=APTimeOut;
382     
383     for(int i=0;i<wifiNumber;i++)
384     {
385         this->ssid[i]=ssid[i];
386         
387         this->pass[i]=pass[i];
388     }
389         
390     return(true);
391 
392 }
.fi
.SS "wl_status_t CoolWifi::connect ()"
\fBCoolWifi::connect( )\fP: This method is provided to connect to the strongest WiFi in the provided list of wiFis\&. If none are found , it starts the AP mode\&.
.PP
\fBReturns:\fP
.RS 4
wifi state 
.RE
.PP

.PP
Definition at line 92 of file CoolWifi\&.cpp\&.
.PP
References addWifi(), wifiManager, and wifiMulti\&.
.PP
Referenced by CoolBoard::connect()\&.
.PP
.nf
93 {       
94 
95     int i=0;
96 
97 #if DEBUG == 1 
98 
99     Serial\&.println( F("Entering CoolWifi\&.connect()") );
100     Serial\&.println( F("Wifi connecting\&.\&.\&.") );
101     
102     Serial\&.println("entry time to multi : ");
103     Serial\&.println(millis() ) ;
104 
105 #endif
106     //Wifi MULTI
107 
108     while( (wifiMulti\&.run() != WL_CONNECTED) && (i<1000)  ) 
109     {
110 
111     #if DEBUG == 1
112 
113             Serial\&.print("\&.");
114         i++;
115         delay(10);
116     
117     #endif
118 
119         }   
120 
121 #if DEBUG == 1 
122 
123     Serial\&.println();    
124     Serial\&.println("exit point from multi : ");
125     Serial\&.println(millis() );
126 
127 
128 #endif
129 
130     //Wifi Manager
131     if( (i>=1000) ||  (WiFi\&.status() != WL_CONNECTED) ) 
132     {
133     
134     #if DEBUG == 1 
135         
136         Serial\&.println(F("No matching wifi Found ") );
137         Serial\&.println( F("Starting Access Point ") );   
138         Serial\&.println();
139     
140     #endif
141         if(!wifiManager\&.autoConnect("CoolBoardAP")) 
142         {
143         
144         #if DEBUG == 1
145 
146             Serial\&.println( F("failed to connect and hit timeout") );
147         
148         #endif
149             delay(300);
150 
151         } 
152 
153           //if you get here you have connected to the WiFi
154         #if DEBUG == 1
155 
156             Serial\&.println( F("connected\&.\&.\&.yeey :)" ));
157             Serial\&.println("connected to ");
158             Serial\&.println( WiFi\&.SSID() );
159             Serial\&.println( WiFi\&.psk() ) ;
160             
161         #endif
162             this->addWifi( WiFi\&.SSID() , WiFi\&.psk() );
163         
164     }
165     else
166     {
167 
168     #if DEBUG == 1
169 
170         Serial\&.println("connected to ");
171         Serial\&.println( WiFi\&.SSID() );
172         Serial\&.println( WiFi\&.psk() ) ;
173                 
174     #endif
175     
176     }
177     
178     return( WiFi\&.status() ) ;
179 
180 }
.fi
.SS "void CoolWifi::printConf ()"
\fBCoolWifi::printConf()\fP: This method is provided to print the configuration to the Serial Monitor 
.PP
Definition at line 400 of file CoolWifi\&.cpp\&.
.PP
References pass, ssid, timeOut, and wifiCount\&.
.PP
Referenced by CoolBoard::begin()\&.
.PP
.nf
401 {
402 
403 #if DEBUG == 1 
404 
405     Serial\&.println( F("Entering CoolWifi\&.printConf()") );
406     Serial\&.println();    
407 
408 #endif
409     
410     Serial\&.println("Wifi configuration ");
411 
412     
413     Serial\&.println("wifiCount : ");
414     Serial\&.println(this->wifiCount);
415     
416     for(int i=0;i<this->wifiCount;i++)
417     {   
418         Serial\&.print("SSID");
419         Serial\&.print(i);
420         Serial\&.println(" : ");
421         Serial\&.println(this->ssid[i]);
422                 
423         Serial\&.print("PASS");
424         Serial\&.print(i);
425         Serial\&.println(" : ");
426         Serial\&.println(this->pass[i]);
427         
428     }
429     
430     Serial\&.println("timeOut : ");
431     Serial\&.println(this->timeOut);
432 
433     Serial\&.println();
434 
435 
436 }
.fi
.SS "wl_status_t CoolWifi::state ()"
\fBCoolWifi::state()\fP: This method is provided to return the Wifi client's state\&. 
.PP
\fBReturns:\fP
.RS 4
wifi client state: WL_NO_SHIELD = 255, WL_IDLE_STATUS = 0, WL_NO_SSID_AVAIL = 1, WL_SCAN_COMPLETED = 2, WL_CONNECTED = 3, WL_CONNECT_FAILED = 4, WL_CONNECTION_LOST = 5, WL_DISCONNECTED = 6 
.RE
.PP

.PP
Definition at line 69 of file CoolWifi\&.cpp\&.
.PP
Referenced by CoolBoard::connect()\&.
.PP
.nf
70 {
71 
72 #if DEBUG == 1 
73 
74     Serial\&.println( F("Entering CoolWifi\&.state()") );
75     Serial\&.println();    
76     Serial\&.print( F("state : ") );
77     Serial\&.println( WiFi\&.status() );
78 
79 #endif
80     
81     return( WiFi\&.status() ) ;
82 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "String CoolWifi::pass[50] ={'0'}\fC [private]\fP"

.PP
Definition at line 57 of file CoolWifi\&.h\&.
.PP
Referenced by addWifi(), begin(), config(), and printConf()\&.
.SS "String CoolWifi::ssid[50] ={'0'}\fC [private]\fP"

.PP
Definition at line 55 of file CoolWifi\&.h\&.
.PP
Referenced by addWifi(), begin(), config(), and printConf()\&.
.SS "int CoolWifi::timeOut =0\fC [private]\fP"

.PP
Definition at line 59 of file CoolWifi\&.h\&.
.PP
Referenced by addWifi(), begin(), config(), and printConf()\&.
.SS "int CoolWifi::wifiCount =0\fC [private]\fP"

.PP
Definition at line 53 of file CoolWifi\&.h\&.
.PP
Referenced by addWifi(), begin(), config(), and printConf()\&.
.SS "WiFiManager CoolWifi::wifiManager\fC [private]\fP"

.PP
Definition at line 49 of file CoolWifi\&.h\&.
.PP
Referenced by begin(), and connect()\&.
.SS "ESP8266WiFiMulti CoolWifi::wifiMulti\fC [private]\fP"

.PP
Definition at line 51 of file CoolWifi\&.h\&.
.PP
Referenced by begin(), and connect()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolAPI from the source code\&.
