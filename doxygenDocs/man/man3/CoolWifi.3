.TH "CoolWifi" 3 "Tue Aug 8 2017" "CoolAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoolWifi \- This class manages the WiFi connection \&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolWifi\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBbegin\fP ()"
.br
.ti -1c
.RI "bool \fBconfig\fP ()"
.br
.ti -1c
.RI "bool \fBconfig\fP (String \fBssid\fP[], String \fBpass\fP[], int wifiNumber, int APTimeOut, bool \fBnomad\fP)"
.br
.ti -1c
.RI "wl_status_t \fBconnect\fP ()"
.br
.ti -1c
.RI "wl_status_t \fBconnectWifiMulti\fP ()"
.br
.ti -1c
.RI "wl_status_t \fBconnectAP\fP ()"
.br
.ti -1c
.RI "wl_status_t \fBstate\fP ()"
.br
.ti -1c
.RI "void \fBprintConf\fP ()"
.br
.ti -1c
.RI "bool \fBaddWifi\fP (String \fBssid\fP, String \fBpass\fP='')"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "ESP8266WiFiMulti \fBwifiMulti\fP"
.br
.ti -1c
.RI "int \fBwifiCount\fP =0"
.br
.ti -1c
.RI "String \fBssid\fP [50] ={'0'}"
.br
.ti -1c
.RI "String \fBpass\fP [50] ={'0'}"
.br
.ti -1c
.RI "int \fBtimeOut\fP =0"
.br
.ti -1c
.RI "bool \fBnomad\fP =0"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class manages the WiFi connection \&. 
.PP
Definition at line 29 of file CoolWifi\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "bool CoolWifi::addWifi (String ssid, String pass = \fC''\fP)"
CoolWifi::addWifi(ssid,pass) This method is provided to add new WiFi detected by the WiFiManager to the jsonConfig(if used )
.PP
\fBReturns:\fP
.RS 4
true if successfull , false otherwise 
.RE
.PP

.PP
Definition at line 576 of file CoolWifi\&.cpp\&.
.PP
References pass, ssid, timeOut, and wifiCount\&.
.PP
Referenced by connectAP()\&.
.PP
.nf
577 {
578 
579 #if DEBUG == 1
580     
581     Serial\&.println("Entering CoolWifi\&.addWifi() ") ;
582 
583 #endif  
584     
585     this->wifiCount++;
586     if( this->wifiCount >=50)
587     {
588     
589     #if DEBUG == 1
590 
591         Serial\&.println("You have reached the limit of 50");
592         return(false);  
593     
594     #endif
595 
596     }
597 
598     this->ssid[this->wifiCount-1]=ssid;
599     this->pass[this->wifiCount-1]=pass;
600     
601     //read config file
602     //update data
603     File configFile = SPIFFS\&.open("/wifiConfig\&.json", "r");
604 
605     if (!configFile) 
606     {
607     
608     #if DEBUG == 1 
609 
610         Serial\&.println( F("failed to read /wifiConfig\&.json") );
611         Serial\&.println();
612 
613     #endif
614     }
615     else
616     {
617         size_t size = configFile\&.size();
618         // Allocate a buffer to store contents of the file\&.
619         std::unique_ptr<char[]> buf(new char[size]);
620 
621         configFile\&.readBytes(buf\&.get(), size);
622         DynamicJsonBuffer jsonBuffer;
623         JsonObject& json = jsonBuffer\&.parseObject(buf\&.get());
624         if (!json\&.success()) 
625         {
626         
627         #if DEBUG == 1 
628 
629             Serial\&.println( F("failed to parse json ") );
630             Serial\&.println();
631         
632         #endif
633         } 
634         else
635         {
636         
637         #if DEBUG == 1 
638         
639             Serial\&.println( F("configuration json is ") );
640             json\&.printTo(Serial);
641             Serial\&.println();
642 
643             Serial\&.print(F("jsonBuffer size: "));
644             Serial\&.println(jsonBuffer\&.size());
645             Serial\&.println();
646 
647 
648         #endif
649             //wifiCount
650             if(json["wifiCount"]\&.success() )
651             {           
652                 json["wifiCount"]=this->wifiCount;
653             }
654             else
655             {
656                 this->wifiCount=this->wifiCount;
657             }
658             json["wifiCount"]=this->wifiCount;
659 
660             
661             //AP timeOut
662             if(json["timeOut"]\&.success() )
663             {
664                 this->timeOut=json["timeOut"];
665             }
666             else
667             {
668                 this->timeOut=this->timeOut;
669 
670             }
671             json["timeOut"]=this->timeOut;
672             
673             
674             //new Wifi SSID and PASS
675             JsonObject& newWifi = json\&.createNestedObject( "Wifi"+String( this->wifiCount-1 ) );
676             
677             newWifi["ssid"] =this->ssid[this->wifiCount-1];
678             newWifi["pass"] = this->pass[this->wifiCount-1];
679             
680 
681             configFile\&.close();
682             configFile = SPIFFS\&.open("/wifiConfig\&.json", "w");
683             if(!configFile)
684             {
685             
686             #if DEBUG == 1 
687 
688                 Serial\&.println( F("failed to write to /wifiConfig\&.json") );
689             
690             #endif
691 
692             }
693             
694             json\&.printTo(configFile);
695             configFile\&.close();
696 
697         #if DEBUG == 1 
698 
699             Serial\&.println( F("saved configuration is :") );
700             json\&.printTo(Serial);
701             Serial\&.println();
702         
703         #endif
704 
705             return(true); 
706         }
707     }   
708 
709     
710     return(true);
711     
712 }
.fi
.SS "void CoolWifi::begin ()"
\fBCoolWifi::begin()\fP: This method is provided to set the wifiMulti Access points and the wifiManager time out 
.PP
Definition at line 37 of file CoolWifi\&.cpp\&.
.PP
References pass, ssid, wifiCount, and wifiMulti\&.
.PP
Referenced by CoolBoard::begin()\&.
.PP
.nf
38 { 
39 
40 #if DEBUG == 1 
41 
42     Serial\&.println( F("Entering CoolWifi\&.begin()") );
43     Serial\&.println();
44 
45 #endif
46     for(int i =0;i<this->wifiCount;i++)
47     {
48          this->wifiMulti\&.addAP(this->ssid[i]\&.c_str() , this->pass[i]\&.c_str() );    
49     }
50     
51 }
.fi
.SS "bool CoolWifi::config ()"
\fBCoolWifi::config()\fP: This method is provided to set the wifi parameters : -ssid -pass -AP timeOut -wifiCount
.PP
\fBReturns:\fP
.RS 4
true if successful,false otherwise 
.RE
.PP

.PP
Definition at line 298 of file CoolWifi\&.cpp\&.
.PP
References nomad, pass, ssid, timeOut, and wifiCount\&.
.PP
Referenced by CoolBoard::begin()\&.
.PP
.nf
299 {
300 
301 #if DEBUG == 1 
302 
303     Serial\&.println( F("Entering CoolWifi\&.config()") );
304     Serial\&.println();
305 
306 #endif
307 
308     //read config file
309     //update data
310     File configFile = SPIFFS\&.open("/wifiConfig\&.json", "r");
311 
312     if (!configFile) 
313     {
314     
315     #if DEBUG == 1 
316 
317         Serial\&.println( F("failed to read /wifiConfig\&.json") );
318         Serial\&.println();
319 
320     #endif
321 
322         return(false);
323     }
324     else
325     {
326         size_t size = configFile\&.size();
327         // Allocate a buffer to store contents of the file\&.
328         std::unique_ptr<char[]> buf(new char[size]);
329 
330         configFile\&.readBytes(buf\&.get(), size);
331         DynamicJsonBuffer jsonBuffer;
332         JsonObject& json = jsonBuffer\&.parseObject(buf\&.get());
333         if (!json\&.success()) 
334         {
335         
336         #if DEBUG == 1 
337 
338             Serial\&.println( F("failed to parse json ") );
339             Serial\&.println();
340         
341         #endif
342             
343             return(false);
344         } 
345         else
346         {
347         
348         #if DEBUG == 1 
349         
350             Serial\&.println( F("configuration json is ") );
351             json\&.printTo(Serial);
352             Serial\&.println();
353 
354             Serial\&.print(F("jsonBuffer size: "));
355             Serial\&.println(jsonBuffer\&.size());
356             Serial\&.println();
357 
358 
359         #endif
360             //wifiCount
361             if(json["wifiCount"]\&.success() )
362             {           
363                 this->wifiCount=json["wifiCount"];
364             }
365             else
366             {
367                 this->wifiCount=this->wifiCount;
368             }
369             json["wifiCount"]=this->wifiCount;
370 
371             
372             //AP timeOut
373             if(json["timeOut"]\&.success() )
374             {
375                 this->timeOut=json["timeOut"];
376             }
377             else
378             {
379                 this->timeOut=this->timeOut;
380 
381             }
382             json["timeOut"]=this->timeOut;
383 
384             //nomad
385             if(json["nomad"]\&.success() )
386             {
387                 this->nomad=json["nomad"];
388             }
389             else
390             {
391                 this->nomad=this->nomad;
392 
393             }
394             json["nomad"]=this->nomad;
395 
396             
397             
398             //Wifis SSID and PASS
399             for(int i =0; i<this->wifiCount ;i++)
400             {
401                 if ( json["Wifi"+String(i)]\&.success() )
402                 {
403                     
404                     if( json["Wifi"+String(i)]["ssid"]\&.success() )
405                     {
406                         const char* tempSsid=json["Wifi"+String(i)]["ssid"]; 
407                         this->ssid[i]=tempSsid;                 
408                     }
409                     else
410                     {
411                         this->ssid[i]=this->ssid[i];                    
412                     }
413                     json["Wifi"+String(i)]["ssid"]=this->ssid[i]\&.c_str();
414                     
415                     
416                     if( json["Wifi"+String(i)]["pass"]\&.success() )
417                     {
418                         const char* tempPass =json["Wifi"+String(i)]["pass"];
419                         this->pass[i]=tempPass ;                    
420                     }
421                     else
422                     {
423                         this->pass[i]=this->pass[i];                    
424                     }
425                     json["Wifi"+String(i)]["pass"]=this->pass[i]\&.c_str();            
426                 
427                 }
428                 else
429                 {
430                     
431                     this->ssid[i]=this->ssid[i];
432                     this->pass[i]=this->pass[i];                    
433                     
434                 }
435                 json["Wifi"+String(i)]["ssid"]=this->ssid[i]\&.c_str();
436                 json["Wifi"+String(i)]["pass"]=this->pass[i]\&.c_str();            
437                         
438             }
439 
440             configFile\&.close();
441             configFile = SPIFFS\&.open("/wifiConfig\&.json", "w");
442             if(!configFile)
443             {
444             
445             #if DEBUG == 1 
446 
447                 Serial\&.println( F("failed to write to /wifiConfig\&.json") );
448             
449             #endif
450 
451                 return(false);              
452             }
453             
454             json\&.printTo(configFile);
455             configFile\&.close();
456 
457         #if DEBUG == 1 
458 
459             Serial\&.println( F("saved configuration is :") );
460             json\&.printTo(Serial);
461             Serial\&.println();
462         
463         #endif
464 
465             return(true); 
466         }
467     }   
468     
469 
470 }
.fi
.SS "bool CoolWifi::config (String ssid[], String pass[], int wifiNumber, int APTimeOut, bool nomad)"
CoolWifi::config(ssid array, pass array, number of wifis, AP timeout ); This method is provided to configure the Wifi without SPIFFS
.PP
\fBReturns:\fP
.RS 4
true if successfull, false otherwise 
.RE
.PP

.PP
Definition at line 478 of file CoolWifi\&.cpp\&.
.PP
References nomad, timeOut, and wifiCount\&.
.PP
.nf
479 {
480 
481 #if DEBUG == 1 
482     
483     Serial\&.println("Entering CoolWifi\&.config(), no SPIFFS variant ") ;
484     
485 #endif
486     
487     if(wifiNumber>50)
488     {
489     
490     #if DEBUG == 1 
491         
492         Serial\&.println("the limit of WiFis is 50 " );
493         
494     #endif
495         return(false);  
496     }
497 
498     this->wifiCount=wifiNumber;
499 
500     this->timeOut=APTimeOut;
501 
502     this->nomad=nomad;
503     
504     for(int i=0;i<wifiNumber;i++)
505     {
506         this->ssid[i]=ssid[i];
507         
508         this->pass[i]=pass[i];
509     }
510         
511     return(true);
512 
513 }
.fi
.SS "wl_status_t CoolWifi::connect ()"
\fBCoolWifi::connect( )\fP: This method is provided to connect to the strongest WiFi in the provided list of wiFis\&. If none are found , it starts the AP mode\&.
.PP
\fBReturns:\fP
.RS 4
wifi state 
.RE
.PP

.PP
Definition at line 90 of file CoolWifi\&.cpp\&.
.PP
References connectAP(), connectWifiMulti(), nomad, and wifiCount\&.
.PP
Referenced by CoolBoard::connect()\&.
.PP
.nf
91 {       
92 
93 
94 
95 #if DEBUG == 1 
96 
97     Serial\&.println( F("Entering CoolWifi\&.connect()") );
98     Serial\&.println( F("Wifi connecting\&.\&.\&.") );
99 
100 #endif
101 
102     //if WifiCount > 0 , lunch wifiMulti
103     //else no need to , skip this part
104     // to wifiManager  
105     if(this->wifiCount !=0)
106     {
107     
108         this->connectWifiMulti();
109         
110         //if nomad is true, only check wifi list
111         if(this->nomad == true)
112         {
113     
114         #if DEBUG == 1
115     
116             Serial\&.print(F("nomad mode :"));
117             Serial\&.println(this->nomad);
118         
119             Serial\&.print(F("Wifi status: "));
120             Serial\&.println(WiFi\&.status());
121         
122         #endif  
123             return(WiFi\&.status());   
124         }
125 
126     }
127 
128 
129     //Wifi Manager
130     if( WiFi\&.status() != WL_CONNECTED ) 
131     {
132 
133     #if DEBUG == 1 
134     
135         Serial\&.println(F("No matching wifi Found ") );
136         Serial\&.println( F("Starting Access Point ") );   
137         Serial\&.println();
138 
139     #endif
140         
141         this->connectAP();      
142         
143     }
144     else
145     {
146 
147     #if DEBUG == 1
148 
149         Serial\&.println(F("connected to "));
150         Serial\&.println( WiFi\&.SSID() );
151         //Serial\&.println( WiFi\&.psk() ) ;
152                 
153     #endif
154     
155     }
156     
157     return( WiFi\&.status() ) ;
158 
159 }
.fi
.SS "wl_status_t CoolWifi::connectAP ()"
\fBCoolWifi::connectAP()\fP This function is provided to run the WifiManager part of the Wifi connection process
.PP
\fBReturns:\fP
.RS 4
wifi state 
.RE
.PP

.PP
Definition at line 220 of file CoolWifi\&.cpp\&.
.PP
References addWifi(), and timeOut\&.
.PP
Referenced by connect(), and CoolBoard::offLineMode()\&.
.PP
.nf
221 {
222 
223 #if DEBUG == 1 
224     
225     Serial\&.println( F("Entering CoolWifi\&.connectAP()") ); 
226     Serial\&.println();
227 
228 #endif
229     WiFiManager wifiManager;
230     
231     wifiManager\&.setRemoveDuplicateAPs(true);
232 
233     wifiManager\&.setTimeout(this->timeOut);
234     
235     String tempMAC = WiFi\&.macAddress();
236     tempMAC\&.replace(":","");
237 
238     String name="CoolBoardAP"+tempMAC;  
239 
240     if(!wifiManager\&.autoConnect(name\&.c_str())) 
241     {
242     
243     #if DEBUG == 1
244 
245         Serial\&.println( F("failed to connect and hit timeout") );
246     
247     #endif
248         delay(30);
249 
250     } 
251 
252     //if you get here you have connected to the WiFi
253 
254     if(WiFi\&.status()==WL_CONNECTED)
255 
256 
257             Serial\&.println( F("connected\&.\&.\&.yeey :)" ));
258             Serial\&.println("connected to ");
259             Serial\&.println( WiFi\&.SSID() );
260             //Serial\&.println( WiFi\&.psk() ) ;
261             
262         #endif
263             this->addWifi( WiFi\&.SSID() , WiFi\&.psk() );
264         
265     }
.fi
.SS "wl_status_t CoolWifi::connectWifiMulti ()"
\fBCoolWifi::connectWifiMulti()\fP This function is provided to run the WifiMulti part of the Wifi connection process
.PP
\fBReturns:\fP
.RS 4
wifi state 
.RE
.PP

.PP
Definition at line 169 of file CoolWifi\&.cpp\&.
.PP
References wifiMulti\&.
.PP
Referenced by connect()\&.
.PP
.nf
170 {
171     int i=0;
172 
173 #if DEBUG == 1 
174 
175     Serial\&.println(F("Entering CoolWifi\&.connectWifiMulti()"));
176     Serial\&.println();
177     
178     Serial\&.println( F("entry time to multi : ") );
179     Serial\&.println(millis() ) ;
180 
181 #endif
182     
183     //Wifi MULTI
184     while( (this->wifiMulti\&.run() != WL_CONNECTED) && (i<500)  ) 
185     {
186 
187     #if DEBUG == 1
188 
189         Serial\&.print(F("\&."));
190         i++;
191         delay(5);
192 
193     #endif
194 
195         }   
196 
197 #if DEBUG == 1 
198 
199     Serial\&.println();    
200     Serial\&.println(F("exit point from multi : "));
201     Serial\&.println(millis() );
202     
203     Serial\&.print(F("Wifi Status :"));
204     Serial\&.println(WiFi\&.status());
205 #endif
206 
207     return(WiFi\&.status());
208 
209 }
.fi
.SS "void CoolWifi::printConf ()"
\fBCoolWifi::printConf()\fP: This method is provided to print the configuration to the Serial Monitor 
.PP
Definition at line 521 of file CoolWifi\&.cpp\&.
.PP
References nomad, ssid, timeOut, and wifiCount\&.
.PP
Referenced by CoolBoard::begin()\&.
.PP
.nf
522 {
523 
524 #if DEBUG == 1 
525 
526     Serial\&.println( F("Entering CoolWifi\&.printConf()") );
527     Serial\&.println();    
528 
529 #endif
530     
531     Serial\&.println(F("Wifi configuration "));
532 
533     
534     Serial\&.println(F("wifiCount : "));
535     Serial\&.println(this->wifiCount);
536     
537     for(int i=0;i<this->wifiCount;i++)
538     {   
539         Serial\&.print(F("SSID"));
540         Serial\&.print(i);
541         Serial\&.println(F(" : "));
542         Serial\&.println(this->ssid[i]);
543                 
544 
545         //Serial\&.print("PASS");
546         //Serial\&.print(i);
547         //Serial\&.println(" : ");
548 
549         //Serial\&.print(F("PASS"));
550         //Serial\&.print(i);
551         //Serial\&.println(F(" : "));
552 
553         //Serial\&.println(this->pass[i]);
554         
555     }
556     
557     Serial\&.println(F("timeOut : "));
558     Serial\&.println(this->timeOut);
559 
560     Serial\&.println(F("nomad : "));
561     Serial\&.println(this->nomad);
562 
563     Serial\&.println();
564 
565 
566 }
.fi
.SS "wl_status_t CoolWifi::state ()"
\fBCoolWifi::state()\fP: This method is provided to return the Wifi client's state\&. 
.PP
\fBReturns:\fP
.RS 4
wifi client state: WL_NO_SHIELD = 255, WL_IDLE_STATUS = 0, WL_NO_SSID_AVAIL = 1, WL_SCAN_COMPLETED = 2, WL_CONNECTED = 3, WL_CONNECT_FAILED = 4, WL_CONNECTION_LOST = 5, WL_DISCONNECTED = 6 
.RE
.PP

.PP
Definition at line 67 of file CoolWifi\&.cpp\&.
.PP
Referenced by CoolBoard::connect(), CoolBoard::isConnected(), and CoolBoard::offLineMode()\&.
.PP
.nf
68 {
69 
70 #if DEBUG == 1 
71 
72     Serial\&.println( F("Entering CoolWifi\&.state()") );
73     Serial\&.println();    
74     Serial\&.print( F("state : ") );
75     Serial\&.println( WiFi\&.status() );
76 
77 #endif
78     
79     return( WiFi\&.status() ) ;
80 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "bool CoolWifi::nomad =0\fC [private]\fP"

.PP
Definition at line 63 of file CoolWifi\&.h\&.
.PP
Referenced by config(), connect(), and printConf()\&.
.SS "String CoolWifi::pass[50] ={'0'}\fC [private]\fP"

.PP
Definition at line 59 of file CoolWifi\&.h\&.
.PP
Referenced by addWifi(), begin(), and config()\&.
.SS "String CoolWifi::ssid[50] ={'0'}\fC [private]\fP"

.PP
Definition at line 57 of file CoolWifi\&.h\&.
.PP
Referenced by addWifi(), begin(), config(), and printConf()\&.
.SS "int CoolWifi::timeOut =0\fC [private]\fP"

.PP
Definition at line 61 of file CoolWifi\&.h\&.
.PP
Referenced by addWifi(), config(), connectAP(), and printConf()\&.
.SS "int CoolWifi::wifiCount =0\fC [private]\fP"

.PP
Definition at line 55 of file CoolWifi\&.h\&.
.PP
Referenced by addWifi(), begin(), config(), connect(), and printConf()\&.
.SS "ESP8266WiFiMulti CoolWifi::wifiMulti\fC [private]\fP"

.PP
Definition at line 53 of file CoolWifi\&.h\&.
.PP
Referenced by begin(), and connectWifiMulti()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolAPI from the source code\&.
