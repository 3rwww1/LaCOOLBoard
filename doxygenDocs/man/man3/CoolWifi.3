.TH "CoolWifi" 3 "Fri Aug 4 2017" "CoolAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoolWifi \- This class manages the WiFi connection \&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolWifi\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBbegin\fP ()"
.br
.ti -1c
.RI "bool \fBconfig\fP ()"
.br
.ti -1c
.RI "bool \fBconfig\fP (String \fBssid\fP[], String \fBpass\fP[], int wifiNumber, int APTimeOut)"
.br
.ti -1c
.RI "wl_status_t \fBconnect\fP ()"
.br
.ti -1c
.RI "wl_status_t \fBstate\fP ()"
.br
.ti -1c
.RI "void \fBprintConf\fP ()"
.br
.ti -1c
.RI "bool \fBaddWifi\fP (String \fBssid\fP, String \fBpass\fP='')"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "ESP8266WiFiMulti \fBwifiMulti\fP"
.br
.ti -1c
.RI "int \fBwifiCount\fP =0"
.br
.ti -1c
.RI "String \fBssid\fP [50] ={'0'}"
.br
.ti -1c
.RI "String \fBpass\fP [50] ={'0'}"
.br
.ti -1c
.RI "int \fBtimeOut\fP =0"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class manages the WiFi connection \&. 
.PP
Definition at line 29 of file CoolWifi\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "bool CoolWifi::addWifi (String ssid, String pass = \fC''\fP)"
CoolWifi::addWifi(ssid,pass) This method is provided to add new WiFi detected by the WiFiManager to the jsonConfig(if used )
.PP
\fBReturns:\fP
.RS 4
true if successfull , false otherwise 
.RE
.PP

.PP
Definition at line 455 of file CoolWifi\&.cpp\&.
.PP
References pass, ssid, timeOut, and wifiCount\&.
.PP
Referenced by connect()\&.
.PP
.nf
456 {
457 
458 #if DEBUG == 1
459     
460     Serial\&.println("Entering CoolWifi\&.addWifi() ") ;
461 
462 #endif  
463     
464     this->wifiCount++;
465     if( this->wifiCount >=50)
466     {
467     
468     #if DEBUG == 1
469 
470         Serial\&.println("You have reached the limit of 50");
471         return(false);  
472     
473     #endif
474 
475     }
476 
477     this->ssid[this->wifiCount-1]=ssid;
478     this->pass[this->wifiCount-1]=pass;
479     
480     //read config file
481     //update data
482     File configFile = SPIFFS\&.open("/wifiConfig\&.json", "r");
483 
484     if (!configFile) 
485     {
486     
487     #if DEBUG == 1 
488 
489         Serial\&.println( F("failed to read /wifiConfig\&.json") );
490         Serial\&.println();
491 
492     #endif
493     }
494     else
495     {
496         size_t size = configFile\&.size();
497         // Allocate a buffer to store contents of the file\&.
498         std::unique_ptr<char[]> buf(new char[size]);
499 
500         configFile\&.readBytes(buf\&.get(), size);
501         DynamicJsonBuffer jsonBuffer;
502         JsonObject& json = jsonBuffer\&.parseObject(buf\&.get());
503         if (!json\&.success()) 
504         {
505         
506         #if DEBUG == 1 
507 
508             Serial\&.println( F("failed to parse json ") );
509             Serial\&.println();
510         
511         #endif
512         } 
513         else
514         {
515         
516         #if DEBUG == 1 
517         
518             Serial\&.println( F("configuration json is ") );
519             json\&.printTo(Serial);
520             Serial\&.println();
521 
522             Serial\&.print(F("jsonBuffer size: "));
523             Serial\&.println(jsonBuffer\&.size());
524             Serial\&.println();
525 
526 
527         #endif
528             //wifiCount
529             if(json["wifiCount"]\&.success() )
530             {           
531                 json["wifiCount"]=this->wifiCount;
532             }
533             else
534             {
535                 this->wifiCount=this->wifiCount;
536             }
537             json["wifiCount"]=this->wifiCount;
538 
539             
540             //AP timeOut
541             if(json["timeOut"]\&.success() )
542             {
543                 this->timeOut=json["timeOut"];
544             }
545             else
546             {
547                 this->timeOut=this->timeOut;
548 
549             }
550             json["timeOut"]=this->timeOut;
551             
552             
553             //new Wifi SSID and PASS
554             JsonObject& newWifi = json\&.createNestedObject( "Wifi"+String( this->wifiCount-1 ) );
555             
556             newWifi["ssid"] =this->ssid[this->wifiCount-1];
557             newWifi["pass"] = this->pass[this->wifiCount-1];
558             
559 
560             configFile\&.close();
561             configFile = SPIFFS\&.open("/wifiConfig\&.json", "w");
562             if(!configFile)
563             {
564             
565             #if DEBUG == 1 
566 
567                 Serial\&.println( F("failed to write to /wifiConfig\&.json") );
568             
569             #endif
570 
571             }
572             
573             json\&.printTo(configFile);
574             configFile\&.close();
575 
576         #if DEBUG == 1 
577 
578             Serial\&.println( F("saved configuration is :") );
579             json\&.printTo(Serial);
580             Serial\&.println();
581         
582         #endif
583 
584             return(true); 
585         }
586     }   
587 
588     
589     return(true);
590     
591 }
.fi
.SS "void CoolWifi::begin ()"
\fBCoolWifi::begin()\fP: This method is provided to set the wifiMulti Access points and the wifiManager time out 
.PP
Definition at line 37 of file CoolWifi\&.cpp\&.
.PP
References pass, ssid, wifiCount, and wifiMulti\&.
.PP
Referenced by CoolBoard::begin()\&.
.PP
.nf
38 { 
39 
40 #if DEBUG == 1 
41 
42     Serial\&.println( F("Entering CoolWifi\&.begin()") );
43     Serial\&.println();
44 
45 #endif
46     for(int i =0;i<this->wifiCount;i++)
47     {
48          this->wifiMulti\&.addAP(this->ssid[i]\&.c_str() , this->pass[i]\&.c_str() );    
49     }
50     
51 }
.fi
.SS "bool CoolWifi::config ()"
\fBCoolWifi::config()\fP: This method is provided to set the wifi parameters : -ssid -pass -AP timeOut -wifiCount
.PP
\fBReturns:\fP
.RS 4
true if successful,false otherwise 
.RE
.PP

.PP
Definition at line 201 of file CoolWifi\&.cpp\&.
.PP
References pass, ssid, timeOut, and wifiCount\&.
.PP
Referenced by CoolBoard::begin()\&.
.PP
.nf
202 {
203 
204 #if DEBUG == 1 
205 
206     Serial\&.println( F("Entering CoolWifi\&.config()") );
207     Serial\&.println();
208 
209 #endif
210 
211     //read config file
212     //update data
213     File configFile = SPIFFS\&.open("/wifiConfig\&.json", "r");
214 
215     if (!configFile) 
216     {
217     
218     #if DEBUG == 1 
219 
220         Serial\&.println( F("failed to read /wifiConfig\&.json") );
221         Serial\&.println();
222 
223     #endif
224 
225         return(false);
226     }
227     else
228     {
229         size_t size = configFile\&.size();
230         // Allocate a buffer to store contents of the file\&.
231         std::unique_ptr<char[]> buf(new char[size]);
232 
233         configFile\&.readBytes(buf\&.get(), size);
234         DynamicJsonBuffer jsonBuffer;
235         JsonObject& json = jsonBuffer\&.parseObject(buf\&.get());
236         if (!json\&.success()) 
237         {
238         
239         #if DEBUG == 1 
240 
241             Serial\&.println( F("failed to parse json ") );
242             Serial\&.println();
243         
244         #endif
245             
246             return(false);
247         } 
248         else
249         {
250         
251         #if DEBUG == 1 
252         
253             Serial\&.println( F("configuration json is ") );
254             json\&.printTo(Serial);
255             Serial\&.println();
256 
257             Serial\&.print(F("jsonBuffer size: "));
258             Serial\&.println(jsonBuffer\&.size());
259             Serial\&.println();
260 
261 
262         #endif
263             //wifiCount
264             if(json["wifiCount"]\&.success() )
265             {           
266                 this->wifiCount=json["wifiCount"];
267             }
268             else
269             {
270                 this->wifiCount=this->wifiCount;
271             }
272             json["wifiCount"]=this->wifiCount;
273 
274             
275             //AP timeOut
276             if(json["timeOut"]\&.success() )
277             {
278                 this->timeOut=json["timeOut"];
279             }
280             else
281             {
282                 this->timeOut=this->timeOut;
283 
284             }
285             json["timeOut"]=this->timeOut;
286             
287             
288             //Wifis SSID and PASS
289             for(int i =0; i<this->wifiCount ;i++)
290             {
291                 if ( json["Wifi"+String(i)]\&.success() )
292                 {
293                     
294                     if( json["Wifi"+String(i)]["ssid"]\&.success() )
295                     {
296                         const char* tempSsid=json["Wifi"+String(i)]["ssid"]; 
297                         this->ssid[i]=tempSsid;                 
298                     }
299                     else
300                     {
301                         this->ssid[i]=this->ssid[i];                    
302                     }
303                     json["Wifi"+String(i)]["ssid"]=this->ssid[i]\&.c_str();
304                     
305                     
306                     if( json["Wifi"+String(i)]["pass"]\&.success() )
307                     {
308                         const char* tempPass =json["Wifi"+String(i)]["pass"];
309                         this->pass[i]=tempPass ;                    
310                     }
311                     else
312                     {
313                         this->pass[i]=this->pass[i];                    
314                     }
315                     json["Wifi"+String(i)]["pass"]=this->pass[i]\&.c_str();            
316                 
317                 }
318                 else
319                 {
320                     
321                     this->ssid[i]=this->ssid[i];
322                     this->pass[i]=this->pass[i];                    
323                     
324                 }
325                 json["Wifi"+String(i)]["ssid"]=this->ssid[i]\&.c_str();
326                 json["Wifi"+String(i)]["pass"]=this->pass[i]\&.c_str();            
327                         
328             }
329 
330             configFile\&.close();
331             configFile = SPIFFS\&.open("/wifiConfig\&.json", "w");
332             if(!configFile)
333             {
334             
335             #if DEBUG == 1 
336 
337                 Serial\&.println( F("failed to write to /wifiConfig\&.json") );
338             
339             #endif
340 
341                 return(false);              
342             }
343             
344             json\&.printTo(configFile);
345             configFile\&.close();
346 
347         #if DEBUG == 1 
348 
349             Serial\&.println( F("saved configuration is :") );
350             json\&.printTo(Serial);
351             Serial\&.println();
352         
353         #endif
354 
355             return(true); 
356         }
357     }   
358     
359 
360 }
.fi
.SS "bool CoolWifi::config (String ssid[], String pass[], int wifiNumber, int APTimeOut)"
CoolWifi::config(ssid array, pass array, number of wifis, AP timeout ); This method is provided to configure the Wifi without SPIFFS
.PP
\fBReturns:\fP
.RS 4
true if successfull, false otherwise 
.RE
.PP

.PP
Definition at line 368 of file CoolWifi\&.cpp\&.
.PP
References timeOut, and wifiCount\&.
.PP
.nf
369 {
370 
371 #if DEBUG == 1 
372     
373     Serial\&.println("Entering CoolWifi\&.config(), no SPIFFS variant ") ;
374     
375 #endif
376     
377     if(wifiNumber>50)
378     {
379     
380     #if DEBUG == 1 
381         
382         Serial\&.println("the limit of WiFis is 50 " );
383         
384     #endif
385         return(false);  
386     }
387 
388     this->wifiCount=wifiNumber;
389 
390     this->timeOut=APTimeOut;
391     
392     for(int i=0;i<wifiNumber;i++)
393     {
394         this->ssid[i]=ssid[i];
395         
396         this->pass[i]=pass[i];
397     }
398         
399     return(true);
400 
401 }
.fi
.SS "wl_status_t CoolWifi::connect ()"
\fBCoolWifi::connect( )\fP: This method is provided to connect to the strongest WiFi in the provided list of wiFis\&. If none are found , it starts the AP mode\&.
.PP
\fBReturns:\fP
.RS 4
wifi state 
.RE
.PP

.PP
Definition at line 90 of file CoolWifi\&.cpp\&.
.PP
References addWifi(), timeOut, and wifiMulti\&.
.PP
Referenced by CoolBoard::connect()\&.
.PP
.nf
91 {       
92 
93     int i=0;
94 
95 #if DEBUG == 1 
96 
97     Serial\&.println( F("Entering CoolWifi\&.connect()") );
98     Serial\&.println( F("Wifi connecting\&.\&.\&.") );
99     
100     Serial\&.println("entry time to multi : ");
101     Serial\&.println(millis() ) ;
102 
103 #endif
104     //Wifi MULTI
105 
106     while( (wifiMulti\&.run() != WL_CONNECTED) && (i<1000)  ) 
107     {
108 
109     #if DEBUG == 1
110 
111             Serial\&.print("\&.");
112         i++;
113         delay(10);
114     
115     #endif
116 
117         }   
118 
119 #if DEBUG == 1 
120 
121     Serial\&.println();    
122     Serial\&.println("exit point from multi : ");
123     Serial\&.println(millis() );
124 
125 
126 #endif
127 
128     //Wifi Manager
129     if( (i>=1000) ||  (WiFi\&.status() != WL_CONNECTED) ) 
130     {
131     
132     #if DEBUG == 1 
133         
134         Serial\&.println(F("No matching wifi Found ") );
135         Serial\&.println( F("Starting Access Point ") );   
136         Serial\&.println();
137     
138     #endif
139         WiFiManager wifiManager;
140         
141         wifiManager\&.setRemoveDuplicateAPs(true);
142     
143         wifiManager\&.setTimeout(this->timeOut);
144         
145         String tempMAC = WiFi\&.macAddress();
146         tempMAC\&.replace(":","");
147     
148         String name="CoolBoardAP"+tempMAC;  
149 
150         if(!wifiManager\&.autoConnect(name\&.c_str())) 
151         {
152         
153         #if DEBUG == 1
154 
155             Serial\&.println( F("failed to connect and hit timeout") );
156         
157         #endif
158             delay(300);
159 
160         } 
161 
162           //if you get here you have connected to the WiFi
163         #if DEBUG == 1
164 
165             Serial\&.println( F("connected\&.\&.\&.yeey :)" ));
166             Serial\&.println("connected to ");
167             Serial\&.println( WiFi\&.SSID() );
168             Serial\&.println( WiFi\&.psk() ) ;
169             
170         #endif
171             this->addWifi( WiFi\&.SSID() , WiFi\&.psk() );
172         
173     }
174     else
175     {
176 
177     #if DEBUG == 1
178 
179         Serial\&.println("connected to ");
180         Serial\&.println( WiFi\&.SSID() );
181         Serial\&.println( WiFi\&.psk() ) ;
182                 
183     #endif
184     
185     }
186     
187     return( WiFi\&.status() ) ;
188 
189 }
.fi
.SS "void CoolWifi::printConf ()"
\fBCoolWifi::printConf()\fP: This method is provided to print the configuration to the Serial Monitor 
.PP
Definition at line 409 of file CoolWifi\&.cpp\&.
.PP
References pass, ssid, timeOut, and wifiCount\&.
.PP
Referenced by CoolBoard::begin()\&.
.PP
.nf
410 {
411 
412 #if DEBUG == 1 
413 
414     Serial\&.println( F("Entering CoolWifi\&.printConf()") );
415     Serial\&.println();    
416 
417 #endif
418     
419     Serial\&.println("Wifi configuration ");
420 
421     
422     Serial\&.println("wifiCount : ");
423     Serial\&.println(this->wifiCount);
424     
425     for(int i=0;i<this->wifiCount;i++)
426     {   
427         Serial\&.print("SSID");
428         Serial\&.print(i);
429         Serial\&.println(" : ");
430         Serial\&.println(this->ssid[i]);
431                 
432         Serial\&.print("PASS");
433         Serial\&.print(i);
434         Serial\&.println(" : ");
435         Serial\&.println(this->pass[i]);
436         
437     }
438     
439     Serial\&.println("timeOut : ");
440     Serial\&.println(this->timeOut);
441 
442     Serial\&.println();
443 
444 
445 }
.fi
.SS "wl_status_t CoolWifi::state ()"
\fBCoolWifi::state()\fP: This method is provided to return the Wifi client's state\&. 
.PP
\fBReturns:\fP
.RS 4
wifi client state: WL_NO_SHIELD = 255, WL_IDLE_STATUS = 0, WL_NO_SSID_AVAIL = 1, WL_SCAN_COMPLETED = 2, WL_CONNECTED = 3, WL_CONNECT_FAILED = 4, WL_CONNECTION_LOST = 5, WL_DISCONNECTED = 6 
.RE
.PP

.PP
Definition at line 67 of file CoolWifi\&.cpp\&.
.PP
Referenced by CoolBoard::isConnected()\&.
.PP
.nf
68 {
69 
70 #if DEBUG == 1 
71 
72     Serial\&.println( F("Entering CoolWifi\&.state()") );
73     Serial\&.println();    
74     Serial\&.print( F("state : ") );
75     Serial\&.println( WiFi\&.status() );
76 
77 #endif
78     
79     return( WiFi\&.status() ) ;
80 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "String CoolWifi::pass[50] ={'0'}\fC [private]\fP"

.PP
Definition at line 55 of file CoolWifi\&.h\&.
.PP
Referenced by addWifi(), begin(), config(), and printConf()\&.
.SS "String CoolWifi::ssid[50] ={'0'}\fC [private]\fP"

.PP
Definition at line 53 of file CoolWifi\&.h\&.
.PP
Referenced by addWifi(), begin(), config(), and printConf()\&.
.SS "int CoolWifi::timeOut =0\fC [private]\fP"

.PP
Definition at line 57 of file CoolWifi\&.h\&.
.PP
Referenced by addWifi(), config(), connect(), and printConf()\&.
.SS "int CoolWifi::wifiCount =0\fC [private]\fP"

.PP
Definition at line 51 of file CoolWifi\&.h\&.
.PP
Referenced by addWifi(), begin(), config(), and printConf()\&.
.SS "ESP8266WiFiMulti CoolWifi::wifiMulti\fC [private]\fP"

.PP
Definition at line 49 of file CoolWifi\&.h\&.
.PP
Referenced by begin(), and connect()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolAPI from the source code\&.
