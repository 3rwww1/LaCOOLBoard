.TH "CoolWifi" 3 "Mon Aug 7 2017" "CoolAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoolWifi \- This class manages the WiFi connection \&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolWifi\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBbegin\fP ()"
.br
.ti -1c
.RI "bool \fBconfig\fP ()"
.br
.ti -1c
.RI "bool \fBconfig\fP (String \fBssid\fP[], String \fBpass\fP[], int wifiNumber, int APTimeOut, bool \fBnomad\fP)"
.br
.ti -1c
.RI "wl_status_t \fBconnect\fP ()"
.br
.ti -1c
.RI "wl_status_t \fBconnectWifiMulti\fP ()"
.br
.ti -1c
.RI "wl_status_t \fBconnectAP\fP ()"
.br
.ti -1c
.RI "wl_status_t \fBstate\fP ()"
.br
.ti -1c
.RI "void \fBprintConf\fP ()"
.br
.ti -1c
.RI "bool \fBaddWifi\fP (String \fBssid\fP, String \fBpass\fP='')"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "ESP8266WiFiMulti \fBwifiMulti\fP"
.br
.ti -1c
.RI "int \fBwifiCount\fP =0"
.br
.ti -1c
.RI "String \fBssid\fP [50] ={'0'}"
.br
.ti -1c
.RI "String \fBpass\fP [50] ={'0'}"
.br
.ti -1c
.RI "int \fBtimeOut\fP =0"
.br
.ti -1c
.RI "bool \fBnomad\fP =0"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class manages the WiFi connection \&. 
.PP
Definition at line 29 of file CoolWifi\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "bool CoolWifi::addWifi (String ssid, String pass = \fC''\fP)"
CoolWifi::addWifi(ssid,pass) This method is provided to add new WiFi detected by the WiFiManager to the jsonConfig(if used )
.PP
\fBReturns:\fP
.RS 4
true if successfull , false otherwise 
.RE
.PP

.PP
Definition at line 558 of file CoolWifi\&.cpp\&.
.PP
References pass, ssid, timeOut, and wifiCount\&.
.PP
Referenced by connectAP()\&.
.PP
.nf
559 {
560 
561 #if DEBUG == 1
562     
563     Serial\&.println("Entering CoolWifi\&.addWifi() ") ;
564 
565 #endif  
566     
567     this->wifiCount++;
568     if( this->wifiCount >=50)
569     {
570     
571     #if DEBUG == 1
572 
573         Serial\&.println("You have reached the limit of 50");
574         return(false);  
575     
576     #endif
577 
578     }
579 
580     this->ssid[this->wifiCount-1]=ssid;
581     this->pass[this->wifiCount-1]=pass;
582     
583     //read config file
584     //update data
585     File configFile = SPIFFS\&.open("/wifiConfig\&.json", "r");
586 
587     if (!configFile) 
588     {
589     
590     #if DEBUG == 1 
591 
592         Serial\&.println( F("failed to read /wifiConfig\&.json") );
593         Serial\&.println();
594 
595     #endif
596     }
597     else
598     {
599         size_t size = configFile\&.size();
600         // Allocate a buffer to store contents of the file\&.
601         std::unique_ptr<char[]> buf(new char[size]);
602 
603         configFile\&.readBytes(buf\&.get(), size);
604         DynamicJsonBuffer jsonBuffer;
605         JsonObject& json = jsonBuffer\&.parseObject(buf\&.get());
606         if (!json\&.success()) 
607         {
608         
609         #if DEBUG == 1 
610 
611             Serial\&.println( F("failed to parse json ") );
612             Serial\&.println();
613         
614         #endif
615         } 
616         else
617         {
618         
619         #if DEBUG == 1 
620         
621             Serial\&.println( F("configuration json is ") );
622             json\&.printTo(Serial);
623             Serial\&.println();
624 
625             Serial\&.print(F("jsonBuffer size: "));
626             Serial\&.println(jsonBuffer\&.size());
627             Serial\&.println();
628 
629 
630         #endif
631             //wifiCount
632             if(json["wifiCount"]\&.success() )
633             {           
634                 json["wifiCount"]=this->wifiCount;
635             }
636             else
637             {
638                 this->wifiCount=this->wifiCount;
639             }
640             json["wifiCount"]=this->wifiCount;
641 
642             
643             //AP timeOut
644             if(json["timeOut"]\&.success() )
645             {
646                 this->timeOut=json["timeOut"];
647             }
648             else
649             {
650                 this->timeOut=this->timeOut;
651 
652             }
653             json["timeOut"]=this->timeOut;
654             
655             
656             //new Wifi SSID and PASS
657             JsonObject& newWifi = json\&.createNestedObject( "Wifi"+String( this->wifiCount-1 ) );
658             
659             newWifi["ssid"] =this->ssid[this->wifiCount-1];
660             newWifi["pass"] = this->pass[this->wifiCount-1];
661             
662 
663             configFile\&.close();
664             configFile = SPIFFS\&.open("/wifiConfig\&.json", "w");
665             if(!configFile)
666             {
667             
668             #if DEBUG == 1 
669 
670                 Serial\&.println( F("failed to write to /wifiConfig\&.json") );
671             
672             #endif
673 
674             }
675             
676             json\&.printTo(configFile);
677             configFile\&.close();
678 
679         #if DEBUG == 1 
680 
681             Serial\&.println( F("saved configuration is :") );
682             json\&.printTo(Serial);
683             Serial\&.println();
684         
685         #endif
686 
687             return(true); 
688         }
689     }   
690 
691     
692     return(true);
693     
694 }
.fi
.SS "void CoolWifi::begin ()"
\fBCoolWifi::begin()\fP: This method is provided to set the wifiMulti Access points and the wifiManager time out 
.PP
Definition at line 37 of file CoolWifi\&.cpp\&.
.PP
References pass, ssid, wifiCount, and wifiMulti\&.
.PP
Referenced by CoolBoard::begin()\&.
.PP
.nf
38 { 
39 
40 #if DEBUG == 1 
41 
42     Serial\&.println( F("Entering CoolWifi\&.begin()") );
43     Serial\&.println();
44 
45 #endif
46     for(int i =0;i<this->wifiCount;i++)
47     {
48          this->wifiMulti\&.addAP(this->ssid[i]\&.c_str() , this->pass[i]\&.c_str() );    
49     }
50     
51 }
.fi
.SS "bool CoolWifi::config ()"
\fBCoolWifi::config()\fP: This method is provided to set the wifi parameters : -ssid -pass -AP timeOut -wifiCount
.PP
\fBReturns:\fP
.RS 4
true if successful,false otherwise 
.RE
.PP

.PP
Definition at line 286 of file CoolWifi\&.cpp\&.
.PP
References nomad, pass, ssid, timeOut, and wifiCount\&.
.PP
Referenced by CoolBoard::begin()\&.
.PP
.nf
287 {
288 
289 #if DEBUG == 1 
290 
291     Serial\&.println( F("Entering CoolWifi\&.config()") );
292     Serial\&.println();
293 
294 #endif
295 
296     //read config file
297     //update data
298     File configFile = SPIFFS\&.open("/wifiConfig\&.json", "r");
299 
300     if (!configFile) 
301     {
302     
303     #if DEBUG == 1 
304 
305         Serial\&.println( F("failed to read /wifiConfig\&.json") );
306         Serial\&.println();
307 
308     #endif
309 
310         return(false);
311     }
312     else
313     {
314         size_t size = configFile\&.size();
315         // Allocate a buffer to store contents of the file\&.
316         std::unique_ptr<char[]> buf(new char[size]);
317 
318         configFile\&.readBytes(buf\&.get(), size);
319         DynamicJsonBuffer jsonBuffer;
320         JsonObject& json = jsonBuffer\&.parseObject(buf\&.get());
321         if (!json\&.success()) 
322         {
323         
324         #if DEBUG == 1 
325 
326             Serial\&.println( F("failed to parse json ") );
327             Serial\&.println();
328         
329         #endif
330             
331             return(false);
332         } 
333         else
334         {
335         
336         #if DEBUG == 1 
337         
338             Serial\&.println( F("configuration json is ") );
339             json\&.printTo(Serial);
340             Serial\&.println();
341 
342             Serial\&.print(F("jsonBuffer size: "));
343             Serial\&.println(jsonBuffer\&.size());
344             Serial\&.println();
345 
346 
347         #endif
348             //wifiCount
349             if(json["wifiCount"]\&.success() )
350             {           
351                 this->wifiCount=json["wifiCount"];
352             }
353             else
354             {
355                 this->wifiCount=this->wifiCount;
356             }
357             json["wifiCount"]=this->wifiCount;
358 
359             
360             //AP timeOut
361             if(json["timeOut"]\&.success() )
362             {
363                 this->timeOut=json["timeOut"];
364             }
365             else
366             {
367                 this->timeOut=this->timeOut;
368 
369             }
370             json["timeOut"]=this->timeOut;
371 
372             //nomad
373             if(json["nomad"]\&.success() )
374             {
375                 this->nomad=json["nomad"];
376             }
377             else
378             {
379                 this->nomad=this->nomad;
380 
381             }
382             json["nomad"]=this->nomad;
383 
384             
385             
386             //Wifis SSID and PASS
387             for(int i =0; i<this->wifiCount ;i++)
388             {
389                 if ( json["Wifi"+String(i)]\&.success() )
390                 {
391                     
392                     if( json["Wifi"+String(i)]["ssid"]\&.success() )
393                     {
394                         const char* tempSsid=json["Wifi"+String(i)]["ssid"]; 
395                         this->ssid[i]=tempSsid;                 
396                     }
397                     else
398                     {
399                         this->ssid[i]=this->ssid[i];                    
400                     }
401                     json["Wifi"+String(i)]["ssid"]=this->ssid[i]\&.c_str();
402                     
403                     
404                     if( json["Wifi"+String(i)]["pass"]\&.success() )
405                     {
406                         const char* tempPass =json["Wifi"+String(i)]["pass"];
407                         this->pass[i]=tempPass ;                    
408                     }
409                     else
410                     {
411                         this->pass[i]=this->pass[i];                    
412                     }
413                     json["Wifi"+String(i)]["pass"]=this->pass[i]\&.c_str();            
414                 
415                 }
416                 else
417                 {
418                     
419                     this->ssid[i]=this->ssid[i];
420                     this->pass[i]=this->pass[i];                    
421                     
422                 }
423                 json["Wifi"+String(i)]["ssid"]=this->ssid[i]\&.c_str();
424                 json["Wifi"+String(i)]["pass"]=this->pass[i]\&.c_str();            
425                         
426             }
427 
428             configFile\&.close();
429             configFile = SPIFFS\&.open("/wifiConfig\&.json", "w");
430             if(!configFile)
431             {
432             
433             #if DEBUG == 1 
434 
435                 Serial\&.println( F("failed to write to /wifiConfig\&.json") );
436             
437             #endif
438 
439                 return(false);              
440             }
441             
442             json\&.printTo(configFile);
443             configFile\&.close();
444 
445         #if DEBUG == 1 
446 
447             Serial\&.println( F("saved configuration is :") );
448             json\&.printTo(Serial);
449             Serial\&.println();
450         
451         #endif
452 
453             return(true); 
454         }
455     }   
456     
457 
458 }
.fi
.SS "bool CoolWifi::config (String ssid[], String pass[], int wifiNumber, int APTimeOut, bool nomad)"
CoolWifi::config(ssid array, pass array, number of wifis, AP timeout ); This method is provided to configure the Wifi without SPIFFS
.PP
\fBReturns:\fP
.RS 4
true if successfull, false otherwise 
.RE
.PP

.PP
Definition at line 466 of file CoolWifi\&.cpp\&.
.PP
References nomad, timeOut, and wifiCount\&.
.PP
.nf
467 {
468 
469 #if DEBUG == 1 
470     
471     Serial\&.println("Entering CoolWifi\&.config(), no SPIFFS variant ") ;
472     
473 #endif
474     
475     if(wifiNumber>50)
476     {
477     
478     #if DEBUG == 1 
479         
480         Serial\&.println("the limit of WiFis is 50 " );
481         
482     #endif
483         return(false);  
484     }
485 
486     this->wifiCount=wifiNumber;
487 
488     this->timeOut=APTimeOut;
489 
490     this->nomad=nomad;
491     
492     for(int i=0;i<wifiNumber;i++)
493     {
494         this->ssid[i]=ssid[i];
495         
496         this->pass[i]=pass[i];
497     }
498         
499     return(true);
500 
501 }
.fi
.SS "wl_status_t CoolWifi::connect ()"
\fBCoolWifi::connect( )\fP: This method is provided to connect to the strongest WiFi in the provided list of wiFis\&. If none are found , it starts the AP mode\&.
.PP
\fBReturns:\fP
.RS 4
wifi state 
.RE
.PP

.PP
Definition at line 90 of file CoolWifi\&.cpp\&.
.PP
References connectAP(), connectWifiMulti(), nomad, and wifiCount\&.
.PP
Referenced by CoolBoard::connect()\&.
.PP
.nf
91 {       
92 
93 
94 
95 #if DEBUG == 1 
96 
97     Serial\&.println( F("Entering CoolWifi\&.connect()") );
98     Serial\&.println( F("Wifi connecting\&.\&.\&.") );
99 
100 #endif
101 
102     //if WifiCount > 0 , lunch wifiMulti
103     //else no need to , skip this part
104     // to wifiManager  
105     if(this->wifiCount !=0)
106     {
107     
108         this->connectWifiMulti();
109         
110         //if nomad is true, only check wifi list
111         if(this->nomad == true)
112         {
113     
114         #if DEBUG == 1
115     
116             Serial\&.print(F("nomad mode :"));
117             Serial\&.println(this->nomad);
118         
119             Serial\&.print(F("Wifi status: "));
120             Serial\&.println(WiFi\&.status());
121         
122         #endif  
123             return(WiFi\&.status());   
124         }
125 
126     }
127 
128 
129     //Wifi Manager
130     if( WiFi\&.status() != WL_CONNECTED ) 
131     {
132 
133     #if DEBUG == 1 
134     
135         Serial\&.println(F("No matching wifi Found ") );
136         Serial\&.println( F("Starting Access Point ") );   
137         Serial\&.println();
138 
139     #endif
140         
141         this->connectAP();      
142         
143     }
144     else
145     {
146 
147     #if DEBUG == 1
148 
149         Serial\&.println(F("connected to "));
150         Serial\&.println( WiFi\&.SSID() );
151         //Serial\&.println( WiFi\&.psk() ) ;
152                 
153     #endif
154     
155     }
156     
157     return( WiFi\&.status() ) ;
158 
159 }
.fi
.SS "wl_status_t CoolWifi::connectAP ()"
\fBCoolWifi::connectAP()\fP This function is provided to run the WifiManager part of the Wifi connection process
.PP
\fBReturns:\fP
.RS 4
wifi state 
.RE
.PP

.PP
Definition at line 220 of file CoolWifi\&.cpp\&.
.PP
References addWifi(), and timeOut\&.
.PP
Referenced by connect(), and CoolBoard::offLineMode()\&.
.PP
.nf
221 {
222 
223 #if DEBUG == 1 
224     
225     Serial\&.println( F("Entering CoolWifi\&.connectAP()") ); 
226     Serial\&.println();
227 
228 #endif
229     WiFiManager wifiManager;
230     
231     wifiManager\&.setRemoveDuplicateAPs(true);
232 
233     wifiManager\&.setTimeout(this->timeOut);
234     
235     String tempMAC = WiFi\&.macAddress();
236     tempMAC\&.replace(":","");
237 
238     String name="CoolBoardAP"+tempMAC;  
239 
240     if(!wifiManager\&.autoConnect(name\&.c_str())) 
241     {
242     
243     #if DEBUG == 1
244 
245         Serial\&.println( F("failed to connect and hit timeout") );
246     
247     #endif
248         delay(30);
249 
250     } 
251 
252     //if you get here you have connected to the WiFi
253 
254     if(WiFi\&.status()==WL_CONNECTED)
255 
256     {
257 
258         this->addWifi( WiFi\&.SSID() , WiFi\&.psk() );
259 
260     #if DEBUG == 1
261     
262         Serial\&.println( F("connected\&.\&.\&.yeey :)" ));
263         Serial\&.println(F("connected to ") );
264         Serial\&.println( WiFi\&.SSID() );
265         //Serial\&.println( WiFi\&.psk() ) ;
266 
267     #endif
268     
269     }
270     
271     return(WiFi\&.status());
272 
273 }
.fi
.SS "wl_status_t CoolWifi::connectWifiMulti ()"
\fBCoolWifi::connectWifiMulti()\fP This function is provided to run the WifiMulti part of the Wifi connection process
.PP
\fBReturns:\fP
.RS 4
wifi state 
.RE
.PP

.PP
Definition at line 169 of file CoolWifi\&.cpp\&.
.PP
References wifiMulti\&.
.PP
Referenced by connect()\&.
.PP
.nf
170 {
171     int i=0;
172 
173 #if DEBUG == 1 
174 
175     Serial\&.println(F("Entering CoolWifi\&.connectWifiMulti()"));
176     Serial\&.println();
177     
178     Serial\&.println( F("entry time to multi : ") );
179     Serial\&.println(millis() ) ;
180 
181 #endif
182     
183     //Wifi MULTI
184     while( (this->wifiMulti\&.run() != WL_CONNECTED) && (i<500)  ) 
185     {
186 
187     #if DEBUG == 1
188 
189         Serial\&.print(F("\&."));
190         i++;
191         delay(5);
192 
193     #endif
194 
195         }   
196 
197 #if DEBUG == 1 
198 
199     Serial\&.println();    
200     Serial\&.println(F("exit point from multi : "));
201     Serial\&.println(millis() );
202     
203     Serial\&.print(F("Wifi Status :"));
204     Serial\&.println(WiFi\&.status());
205 #endif
206 
207     return(WiFi\&.status());
208 
209 }
.fi
.SS "void CoolWifi::printConf ()"
\fBCoolWifi::printConf()\fP: This method is provided to print the configuration to the Serial Monitor 
.PP
Definition at line 509 of file CoolWifi\&.cpp\&.
.PP
References nomad, ssid, timeOut, and wifiCount\&.
.PP
Referenced by CoolBoard::begin()\&.
.PP
.nf
510 {
511 
512 #if DEBUG == 1 
513 
514     Serial\&.println( F("Entering CoolWifi\&.printConf()") );
515     Serial\&.println();    
516 
517 #endif
518     
519     Serial\&.println(F("Wifi configuration "));
520 
521     
522     Serial\&.println(F("wifiCount : "));
523     Serial\&.println(this->wifiCount);
524     
525     for(int i=0;i<this->wifiCount;i++)
526     {   
527         Serial\&.print(F("SSID"));
528         Serial\&.print(i);
529         Serial\&.println(F(" : "));
530         Serial\&.println(this->ssid[i]);
531                 
532         //Serial\&.print(F("PASS"));
533         //Serial\&.print(i);
534         //Serial\&.println(F(" : "));
535         //Serial\&.println(this->pass[i]);
536         
537     }
538     
539     Serial\&.println(F("timeOut : "));
540     Serial\&.println(this->timeOut);
541 
542     Serial\&.println(F("nomad : "));
543     Serial\&.println(this->nomad);
544 
545     Serial\&.println();
546 
547 
548 }
.fi
.SS "wl_status_t CoolWifi::state ()"
\fBCoolWifi::state()\fP: This method is provided to return the Wifi client's state\&. 
.PP
\fBReturns:\fP
.RS 4
wifi client state: WL_NO_SHIELD = 255, WL_IDLE_STATUS = 0, WL_NO_SSID_AVAIL = 1, WL_SCAN_COMPLETED = 2, WL_CONNECTED = 3, WL_CONNECT_FAILED = 4, WL_CONNECTION_LOST = 5, WL_DISCONNECTED = 6 
.RE
.PP

.PP
Definition at line 67 of file CoolWifi\&.cpp\&.
.PP
Referenced by CoolBoard::connect(), CoolBoard::isConnected(), and CoolBoard::offLineMode()\&.
.PP
.nf
68 {
69 
70 #if DEBUG == 1 
71 
72     Serial\&.println( F("Entering CoolWifi\&.state()") );
73     Serial\&.println();    
74     Serial\&.print( F("state : ") );
75     Serial\&.println( WiFi\&.status() );
76 
77 #endif
78     
79     return( WiFi\&.status() ) ;
80 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "bool CoolWifi::nomad =0\fC [private]\fP"

.PP
Definition at line 63 of file CoolWifi\&.h\&.
.PP
Referenced by config(), connect(), and printConf()\&.
.SS "String CoolWifi::pass[50] ={'0'}\fC [private]\fP"

.PP
Definition at line 59 of file CoolWifi\&.h\&.
.PP
Referenced by addWifi(), begin(), and config()\&.
.SS "String CoolWifi::ssid[50] ={'0'}\fC [private]\fP"

.PP
Definition at line 57 of file CoolWifi\&.h\&.
.PP
Referenced by addWifi(), begin(), config(), and printConf()\&.
.SS "int CoolWifi::timeOut =0\fC [private]\fP"

.PP
Definition at line 61 of file CoolWifi\&.h\&.
.PP
Referenced by addWifi(), config(), connectAP(), and printConf()\&.
.SS "int CoolWifi::wifiCount =0\fC [private]\fP"

.PP
Definition at line 55 of file CoolWifi\&.h\&.
.PP
Referenced by addWifi(), begin(), config(), connect(), and printConf()\&.
.SS "ESP8266WiFiMulti CoolWifi::wifiMulti\fC [private]\fP"

.PP
Definition at line 53 of file CoolWifi\&.h\&.
.PP
Referenced by begin(), and connectWifiMulti()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolAPI from the source code\&.
