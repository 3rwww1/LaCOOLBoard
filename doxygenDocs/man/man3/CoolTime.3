.TH "CoolTime" 3 "Mon Jul 3 2017" "CoolAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoolTime \- This class manages the DS1337 RTC \&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolTime\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBbegin\fP ()"
.br
.ti -1c
.RI "void \fBupdate\fP ()"
.br
.ti -1c
.RI "bool \fBconfig\fP ()"
.br
.ti -1c
.RI "void \fBconfig\fP (int \fBtimeZone\fP, IPAddress \fBtimeServer\fP, unsigned int \fBlocalPort\fP)"
.br
.ti -1c
.RI "void \fBprintConf\fP ()"
.br
.ti -1c
.RI "void \fBsetDateTime\fP (int year, int month, int day, int hour, int minutes, int seconds)"
.br
.ti -1c
.RI "tmElements_t \fBgetTimeDate\fP ()"
.br
.ti -1c
.RI "String \fBgetESDate\fP ()"
.br
.ti -1c
.RI "unsigned long \fBgetLastSyncTime\fP ()"
.br
.ti -1c
.RI "bool \fBisTimeSync\fP (unsigned long seconds=604800)"
.br
.ti -1c
.RI "time_t \fBgetNtpTime\fP ()"
.br
.ti -1c
.RI "void \fBsendNTPpacket\fP (IPAddress &address)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "unsigned long \fBtimeSync\fP"
.br
.ti -1c
.RI "int \fBtimeZone\fP"
.br
.ti -1c
.RI "IPAddress \fBtimeServer\fP"
.br
.ti -1c
.RI "WiFiUDP \fBUdp\fP"
.br
.ti -1c
.RI "unsigned int \fBlocalPort\fP"
.br
.ti -1c
.RI "byte \fBpacketBuffer\fP [\fBNTP_PACKET_SIZE\fP]"
.br
.ti -1c
.RI "tmElements_t \fBtmSet\fP"
.br
.ti -1c
.RI "DS1337RTC \fBrtc\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class manages the DS1337 RTC \&. 
.PP
Definition at line 31 of file CoolTime\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "void CoolTime::begin ()"
\fBCoolTime::begin()\fP: This method is provided to init the rtc, the udp connection
.PP
\fBReturns:\fP
.RS 4
true if successful,false otherwise 
.RE
.PP

.PP
Definition at line 30 of file CoolTime\&.cpp\&.
.PP
References getNtpTime(), localPort, rtc, tmSet, and Udp\&.
.PP
Referenced by CoolBoard::begin()\&.
.PP
.nf
31 {
32 
33     Udp\&.begin(localPort);
34 
35     time_t tm=getNtpTime();
36 
37     breakTime(tm, this->tmSet);//get NTP time
38 
39     this->rtc\&.set(makeTime(this->tmSet), CLOCK_ADDRESS); // set the clock
40     
41 }
.fi
.SS "bool CoolTime::config ()"
\fBCoolTime::config()\fP: This method is provided to configure the \fBCoolTime\fP object through a configuration file\&.
.PP
\fBReturns:\fP
.RS 4
true if successful,false otherwise 
.RE
.PP

.PP
Definition at line 237 of file CoolTime\&.cpp\&.
.PP
References localPort, timeServer, and timeZone\&.
.PP
Referenced by CoolBoard::begin(), and CoolBoard::update()\&.
.PP
.nf
238 {
239     File rtcConfig = SPIFFS\&.open("/rtcConfig\&.json", "r");
240 
241     if (!rtcConfig) 
242     {
243         return(false);
244     }
245     else
246     {
247         size_t size = rtcConfig\&.size();
248         // Allocate a buffer to store contents of the file\&.
249         std::unique_ptr<char[]> buf(new char[size]);
250 
251         rtcConfig\&.readBytes(buf\&.get(), size);
252         DynamicJsonBuffer jsonBuffer;
253         JsonObject& json = jsonBuffer\&.parseObject(buf\&.get());
254         if (!json\&.success()) 
255         {
256               return(false);
257         } 
258         else
259         {   String ip;
260             
261             if(json["timeZone"]\&.success() )
262             {
263                 this->timeZone=json["timeZone"] ;
264             }
265             else
266             {
267                 this->timeZone=this->timeZone;          
268             }
269             json["timeZone"]=this->timeZone;
270             
271             if(json["timeServer"]\&.success() )
272             {           
273                  ip=json["timeServer"]\&.as<String>();
274                 this->timeServer\&.fromString(ip);
275                 
276             }
277             else
278             {
279                 this->timeServer=this->timeServer;
280             }
281             json["timeServer"]=ip;
282             
283             if(json["localPort"]\&.success() )
284             {                       
285                 this->localPort=json["localPort"];
286             }
287             else
288             {
289                 this->localPort=this->localPort;
290             }
291             json["localPort"]=this->localPort;
292 
293             rtcConfig\&.close();
294             rtcConfig= SPIFFS\&.open("/rtcConfig\&.json", "w");
295             
296             if(!rtcConfig)
297             {
298                 return(false);
299             }
300             
301             json\&.printTo(rtcConfig);
302             rtcConfig\&.close();
303                         
304             return(true); 
305         }
306     }   
307 
308 
309 
310 }
.fi
.SS "void CoolTime::config (int timeZone, IPAddress timeServer, unsigned int localPort)"
CoolTime::config(time Zone, Time server IP , udp Port): This method is provided to do manual configuration\&. 
.PP
Definition at line 222 of file CoolTime\&.cpp\&.
.PP
References localPort, timeServer, and timeZone\&.
.PP
.nf
223 {
224     this->timeZone=timeZone;
225     this->timeServer=timeServer;
226     this->localPort=localPort;
227 } 
.fi
.SS "String CoolTime::getESDate ()"
CoolTime::getESD(): This method is provided to return an Elastic Search compatible date Format
.PP
\fBReturns:\fP
.RS 4
date String in Elastic Search format 
.RE
.PP

.PP
Definition at line 101 of file CoolTime\&.cpp\&.
.PP
References getTimeDate()\&.
.PP
Referenced by CoolBoard::userData()\&.
.PP
.nf
102 {
103     tmElements_t tm=this->getTimeDate();
104     tm\&.Second; 
105     tm\&.Minute; 
106     tm\&.Hour; 
107     tm\&.Day;
108     tm\&.Month; 
109     tm\&.Year; 
110     
111     String elasticSearchString =String(tm\&.Year+1970)+"-"+String(tm\&.Month)+"-";//"20yy-mm-ddT00:00:00Z"
112 
113     elasticSearchString +=String(tm\&.Day)+"T"+String(tm\&.Hour)+":"+String(tm\&.Minute)+":"+String(tm\&.Second)+"Z";
114     
115     return (elasticSearchString);
116 }
.fi
.SS "unsigned long CoolTime::getLastSyncTime ()"
\fBCoolTime::getLastSyncTime()\fP: This method is provided to get the last time we syncronised the time
.PP
\fBReturns:\fP
.RS 4
unsigned long representation of last syncronisation time in seconds 
.RE
.PP

.PP
Definition at line 126 of file CoolTime\&.cpp\&.
.PP
References timeSync\&.
.PP
Referenced by isTimeSync()\&.
.PP
.nf
127 {
128     return(this->timeSync);
129 }
.fi
.SS "time_t CoolTime::getNtpTime ()"
CoolTime::getNtopTime(): This method is provided to get the Time through an NTP request to a Time Server
.PP
\fBReturns:\fP
.RS 4
a time_t (unsigned long ) timestamp in seconds 
.RE
.PP

.PP
Definition at line 161 of file CoolTime\&.cpp\&.
.PP
References NTP_PACKET_SIZE, packetBuffer, sendNTPpacket(), timeServer, timeZone, and Udp\&.
.PP
Referenced by begin(), and update()\&.
.PP
.nf
162 {
163     while (Udp\&.parsePacket() > 0) ; // discard any previously received packets
164     
165     Serial\&.println("Transmit NTP Request");
166 
167     sendNTPpacket(timeServer);
168 
169     uint32_t beginWait = millis();
170 
171     while (millis() - beginWait < 1500) 
172     {
173         int size = Udp\&.parsePacket();
174         if (size >= NTP_PACKET_SIZE) 
175         {
176             Serial\&.println("Receive NTP Response");
177             Udp\&.read(packetBuffer, NTP_PACKET_SIZE);  // read packet into the buffer
178             unsigned long secsSince1900;
179             // convert four bytes starting at location 40 to a long integer
180             secsSince1900 =  (unsigned long)packetBuffer[40] << 24;
181             secsSince1900 |= (unsigned long)packetBuffer[41] << 16;
182             secsSince1900 |= (unsigned long)packetBuffer[42] << 8;
183             secsSince1900 |= (unsigned long)packetBuffer[43];
184             return secsSince1900 - 2208988800UL + this->timeZone * SECS_PER_HOUR;
185         }
186     }
187     Serial\&.println("No NTP Response :-(");
188     return 0; // return 0 if unable to get the time
189 }
.fi
.SS "tmElements_t CoolTime::getTimeDate ()"
\fBCoolTime::getTimeDate()\fP: This method is provided to get the RTC Time
.PP
\fBReturns:\fP
.RS 4
a tmElements_t structre that has the time in it 
.RE
.PP

.PP
Definition at line 85 of file CoolTime\&.cpp\&.
.PP
References rtc\&.
.PP
Referenced by getESDate()\&.
.PP
.nf
86 { 
87     tmElements_t tm;
88     time_t timeDate = this->rtc\&.get(CLOCK_ADDRESS);
89     breakTime(timeDate,tm);
90     return(tm);
91 }
.fi
.SS "bool CoolTime::isTimeSync (unsigned long seconds = \fC604800\fP)"
CoolTime::isTimeSync( time in seconds): This method is provided to test if the time is syncronised or not\&. By default we test once per week\&.
.PP
\fBReturns:\fP
.RS 4
true if time is syncronised,false otherwise 
.RE
.PP

.PP
Definition at line 141 of file CoolTime\&.cpp\&.
.PP
References getLastSyncTime()\&.
.PP
Referenced by update()\&.
.PP
.nf
142 {
143 //default is once per week we try to get a time update
144     if( (this->getLastSyncTime()+seconds) > (RTC\&.get(CLOCK_ADDRESS)) ) 
145     {
146         return(false);  
147     }
148 
149     return(true);
150 }
.fi
.SS "void CoolTime::printConf ()"
\fBCoolTime::printConf()\fP: This method is provided to print the \fBCoolTime\fP configuration to the Serial Monitor 
.PP
Definition at line 318 of file CoolTime\&.cpp\&.
.PP
References localPort, timeServer, and timeZone\&.
.PP
Referenced by CoolBoard::begin()\&.
.PP
.nf
319 {
320     Serial\&.println("RTC Config") ;
321     Serial\&.println(timeZone);
322     Serial\&.println(timeServer);
323     Serial\&.println(localPort);
324 }
.fi
.SS "void CoolTime::sendNTPpacket (IPAddress & address)"
CoolTime::sendNTPpacket( Time Server IP address): This method is provided to send an NTP request to the time server at the given address 
.PP
Definition at line 196 of file CoolTime\&.cpp\&.
.PP
References NTP_PACKET_SIZE, packetBuffer, and Udp\&.
.PP
Referenced by getNtpTime()\&.
.PP
.nf
197 {
198     memset(packetBuffer, 0, NTP_PACKET_SIZE);
199     // Initialize values needed to form NTP request
200     // (see URL above for details on the packets)
201     packetBuffer[0] = 0b11100011;   // LI, Version, Mode
202     packetBuffer[1] = 0;     // Stratum, or type of clock
203     packetBuffer[2] = 6;     // Polling Interval
204     packetBuffer[3] = 0xEC;  // Peer Clock Precision
205     // 8 bytes of zero for Root Delay & Root Dispersion
206     packetBuffer[12]  = 49;
207     packetBuffer[13]  = 0x4E;
208     packetBuffer[14]  = 49;
209     packetBuffer[15]  = 52;
210     // all NTP fields have been given values, now
211     // you can send a packet requesting a timestamp:                 
212     Udp\&.beginPacket(address, 123); //NTP requests are to port 123
213     Udp\&.write(packetBuffer, NTP_PACKET_SIZE);
214     Udp\&.endPacket(); 
215 }
.fi
.SS "void CoolTime::setDateTime (int year, int month, int day, int hour, int minutes, int seconds)"
CoolTime::setDateTime(year,month,dat,hour,minutes,seconds): This method is provided to manually set the RTc Time 
.PP
Definition at line 65 of file CoolTime\&.cpp\&.
.PP
References rtc\&.
.PP
.nf
66 { 
67     tmElements_t tm;
68     tm\&.Second=seconds; 
69     tm\&.Minute=minutes; 
70     tm\&.Hour=hour; 
71     tm\&.Day=day;
72     tm\&.Month=month; 
73     tm\&.Year=year;   
74 
75     this->rtc\&.set(makeTime(tm),CLOCK_ADDRESS);
76 }
.fi
.SS "void CoolTime::update ()"
\fBCoolTime::update()\fP: This method is provided to correct the rtc Time when it drifts,once every week\&. 
.PP
Definition at line 48 of file CoolTime\&.cpp\&.
.PP
References getNtpTime(), isTimeSync(), rtc, timeSync, and tmSet\&.
.PP
Referenced by CoolBoard::offLineMode(), and CoolBoard::onLineMode()\&.
.PP
.nf
49 {
50     if( !( this->isTimeSync() ) )
51     {
52         Serial\&.println("waiting for sync");
53         this->timeSync=this->getNtpTime();
54         breakTime(this->getNtpTime(), this->tmSet);
55         this->rtc\&.set(makeTime(this->tmSet), CLOCK_ADDRESS); // set the clock
56     }
57     
58 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "unsigned int CoolTime::localPort\fC [private]\fP"

.PP
Definition at line 68 of file CoolTime\&.h\&.
.PP
Referenced by begin(), config(), and printConf()\&.
.SS "byte CoolTime::packetBuffer[\fBNTP_PACKET_SIZE\fP]\fC [private]\fP"

.PP
Definition at line 70 of file CoolTime\&.h\&.
.PP
Referenced by getNtpTime(), and sendNTPpacket()\&.
.SS "DS1337RTC CoolTime::rtc\fC [private]\fP"

.PP
Definition at line 74 of file CoolTime\&.h\&.
.PP
Referenced by begin(), getTimeDate(), setDateTime(), and update()\&.
.SS "IPAddress CoolTime::timeServer\fC [private]\fP"

.PP
Definition at line 64 of file CoolTime\&.h\&.
.PP
Referenced by config(), getNtpTime(), and printConf()\&.
.SS "unsigned long CoolTime::timeSync\fC [private]\fP"

.PP
Definition at line 60 of file CoolTime\&.h\&.
.PP
Referenced by getLastSyncTime(), and update()\&.
.SS "int CoolTime::timeZone\fC [private]\fP"

.PP
Definition at line 62 of file CoolTime\&.h\&.
.PP
Referenced by config(), getNtpTime(), and printConf()\&.
.SS "tmElements_t CoolTime::tmSet\fC [private]\fP"

.PP
Definition at line 72 of file CoolTime\&.h\&.
.PP
Referenced by begin(), and update()\&.
.SS "WiFiUDP CoolTime::Udp\fC [private]\fP"

.PP
Definition at line 66 of file CoolTime\&.h\&.
.PP
Referenced by begin(), getNtpTime(), and sendNTPpacket()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolAPI from the source code\&.
