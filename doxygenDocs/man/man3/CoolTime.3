.TH "CoolTime" 3 "Tue Jun 27 2017" "CoolAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoolTime \- This class manages the DS1337 RTC \&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolTime\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "bool \fBbegin\fP ()"
.br
.ti -1c
.RI "void \fBupdate\fP ()"
.br
.ti -1c
.RI "bool \fBconfig\fP ()"
.br
.ti -1c
.RI "void \fBconfig\fP (int timeZone, IPAddress timeServer, unsigned int localPort)"
.br
.ti -1c
.RI "void \fBprintConf\fP ()"
.br
.ti -1c
.RI "void \fBsetDateTime\fP (int year, int month, int day, int hour, int minutes, int seconds)"
.br
.ti -1c
.RI "void \fBgetTimeDate\fP (int &year, int &month, int &day, int &hour, int &minute, int &second)"
.br
.ti -1c
.RI "unsigned long \fBgetLastSyncTime\fP ()"
.br
.ti -1c
.RI "bool \fBisTimeSync\fP (unsigned long seconds=604800)"
.br
.ti -1c
.RI "time_t \fBgetNtpTime\fP ()"
.br
.ti -1c
.RI "void \fBsendNTPpacket\fP (IPAddress &address)"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class manages the DS1337 RTC \&. 
.PP
Definition at line 27 of file CoolTime\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "bool CoolTime::begin ()"
\fBCoolTime::begin()\fP: This method is provided to init the rtc, the udp connection and the Sync Provider
.PP
\fBReturns:\fP
.RS 4
true if successful,false otherwise 
.RE
.PP

.PP
Definition at line 25 of file CoolTime\&.cpp\&.
.SS "bool CoolTime::config ()"
\fBCoolTime::config()\fP: This method is provided to configure the \fBCoolTime\fP object through a configuration file\&.
.PP
\fBReturns:\fP
.RS 4
true if successful,false otherwise 
.RE
.PP

.PP
Definition at line 211 of file CoolTime\&.cpp\&.
.SS "void CoolTime::config (int timeZone, IPAddress timeServer, unsigned int localPort)"
CoolTime::config(time Zone, Time server IP , udp Port): This method is provided to do manual configuration\&. 
.PP
Definition at line 196 of file CoolTime\&.cpp\&.
.SS "unsigned long CoolTime::getLastSyncTime ()"
\fBCoolTime::getLastSyncTime()\fP: This method is provided to get the last time we syncronised the time
.PP
\fBReturns:\fP
.RS 4
unsigned long representation of last syncronisation time in seconds 
.RE
.PP

.PP
Definition at line 102 of file CoolTime\&.cpp\&.
.SS "time_t CoolTime::getNtpTime ()"
CoolTime::getNtopTime(): This method is provided to get the Time through an NTP request to a Time Server
.PP
\fBReturns:\fP
.RS 4
a time_t (unsigned long ) timestamp in seconds 
.RE
.PP

.PP
Definition at line 137 of file CoolTime\&.cpp\&.
.SS "void CoolTime::getTimeDate (int & year, int & month, int & day, int & hour, int & minute, int & second)"
CoolTime::getTimeDate(year,month,day,hour,minute,seconds): This method is provided to get the RTC Time 
.PP
Definition at line 87 of file CoolTime\&.cpp\&.
.SS "bool CoolTime::isTimeSync (unsigned long seconds = \fC604800\fP)"
CoolTime::isTimeSync( time in seconds): This method is provided to test if the time is syncronised or not\&. By default we test once per week\&.
.PP
\fBReturns:\fP
.RS 4
true if time is syncronised,false otherwise 
.RE
.PP

.PP
Definition at line 117 of file CoolTime\&.cpp\&.
.SS "void CoolTime::printConf ()"
\fBCoolTime::printConf()\fP: This method is provided to print the \fBCoolTime\fP configuration to the Serial Monitor 
.PP
Definition at line 292 of file CoolTime\&.cpp\&.
.SS "void CoolTime::sendNTPpacket (IPAddress & address)"
CoolTime::sendNTPpacket( Time Server IP address): This method is provided to send an NTP request to the time server at the given address 
.PP
Definition at line 169 of file CoolTime\&.cpp\&.
.SS "void CoolTime::setDateTime (int year, int month, int day, int hour, int minutes, int seconds)"
CoolTime::setDateTime(year,month,dat,hour,minutes,seconds): This method is provided to manually set the RTc Time 
.PP
Definition at line 75 of file CoolTime\&.cpp\&.
.SS "void CoolTime::update ()"
\fBCoolTime::update()\fP: This method is provided to correct the rtc Time when it drifts,once every week\&. 
.PP
Definition at line 54 of file CoolTime\&.cpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolAPI from the source code\&.
