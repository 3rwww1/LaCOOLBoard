.TH "CoolTime" 3 "Wed Jul 5 2017" "CoolAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoolTime \- This class manages the DS1337 RTC \&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolTime\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBbegin\fP ()"
.br
.ti -1c
.RI "void \fBupdate\fP ()"
.br
.ti -1c
.RI "bool \fBconfig\fP ()"
.br
.ti -1c
.RI "void \fBconfig\fP (int \fBtimeZone\fP, IPAddress \fBtimeServer\fP, unsigned int \fBlocalPort\fP)"
.br
.ti -1c
.RI "void \fBprintConf\fP ()"
.br
.ti -1c
.RI "void \fBsetDateTime\fP (int year, int month, int day, int hour, int minutes, int seconds)"
.br
.ti -1c
.RI "tmElements_t \fBgetTimeDate\fP ()"
.br
.ti -1c
.RI "String \fBgetESDate\fP ()"
.br
.ti -1c
.RI "unsigned long \fBgetLastSyncTime\fP ()"
.br
.ti -1c
.RI "bool \fBisTimeSync\fP (unsigned long seconds=604800)"
.br
.ti -1c
.RI "time_t \fBgetNtpTime\fP ()"
.br
.ti -1c
.RI "void \fBsendNTPpacket\fP (IPAddress &address)"
.br
.ti -1c
.RI "String \fBformatDigits\fP (int digits)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "unsigned long \fBtimeSync\fP =0"
.br
.ti -1c
.RI "int \fBtimeZone\fP =0"
.br
.ti -1c
.RI "IPAddress \fBtimeServer\fP"
.br
.ti -1c
.RI "WiFiUDP \fBUdp\fP"
.br
.ti -1c
.RI "unsigned int \fBlocalPort\fP =0"
.br
.ti -1c
.RI "byte \fBpacketBuffer\fP [\fBNTP_PACKET_SIZE\fP]"
.br
.ti -1c
.RI "tmElements_t \fBtmSet\fP"
.br
.ti -1c
.RI "DS1337RTC \fBrtc\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class manages the DS1337 RTC \&. 
.PP
Definition at line 31 of file CoolTime\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "void CoolTime::begin ()"
\fBCoolTime::begin()\fP: This method is provided to init the udp connection 
.PP
Definition at line 29 of file CoolTime\&.cpp\&.
.PP
References localPort, and Udp\&.
.PP
Referenced by CoolBoard::begin()\&.
.PP
.nf
30 {
31     Serial\&.println("Entering CoolTime\&.begin()");
32     Serial\&.println();
33 
34     Udp\&.begin(localPort);
35     
36 }
.fi
.SS "bool CoolTime::config ()"
\fBCoolTime::config()\fP: This method is provided to configure the \fBCoolTime\fP object through a configuration file\&.
.PP
\fBReturns:\fP
.RS 4
true if successful,false otherwise 
.RE
.PP

.PP
Definition at line 314 of file CoolTime\&.cpp\&.
.PP
References localPort, timeServer, and timeZone\&.
.PP
Referenced by CoolBoard::begin(), and CoolBoard::update()\&.
.PP
.nf
315 {
316     Serial\&.println("Enter CoolTime\&.config()");
317     Serial\&.println();
318 
319     File rtcConfig = SPIFFS\&.open("/rtcConfig\&.json", "r");
320 
321     if (!rtcConfig) 
322     {
323         Serial\&.println("failed to read /rtcConfig\&.json");
324         Serial\&.println();
325 
326         return(false);
327     }
328     else
329     {
330         size_t size = rtcConfig\&.size();
331         // Allocate a buffer to store contents of the file\&.
332         std::unique_ptr<char[]> buf(new char[size]);
333 
334         rtcConfig\&.readBytes(buf\&.get(), size);
335         DynamicJsonBuffer jsonBuffer;
336         JsonObject& json = jsonBuffer\&.parseObject(buf\&.get());
337         if (!json\&.success()) 
338         {
339             Serial\&.println("failed to parse json");
340             Serial\&.println();
341 
342             return(false);
343         } 
344         else
345         {   
346             Serial\&.println("configuration json is :");
347             json\&.printTo(Serial);
348             Serial\&.println();
349 
350             String ip;
351             
352             if(json["timeZone"]\&.success() )
353             {
354                 this->timeZone=json["timeZone"] ;
355             }
356             else
357             {
358                 this->timeZone=this->timeZone;          
359             }
360             json["timeZone"]=this->timeZone;
361             
362             if(json["timeServer"]\&.success() )
363             {           
364                  ip=json["timeServer"]\&.as<String>();
365                 this->timeServer\&.fromString(ip);
366                 
367             }
368             else
369             {
370                 this->timeServer=this->timeServer;
371             }
372             json["timeServer"]=ip;
373             
374             if(json["localPort"]\&.success() )
375             {                       
376                 this->localPort=json["localPort"];
377             }
378             else
379             {
380                 this->localPort=this->localPort;
381             }
382             json["localPort"]=this->localPort;
383 
384             rtcConfig\&.close();
385             rtcConfig= SPIFFS\&.open("/rtcConfig\&.json", "w");
386             
387             if(!rtcConfig)
388             {
389                 Serial\&.println("failed to write to /rtcConfig\&.json");
390                 Serial\&.println();
391 
392                 return(false);
393             }
394             
395             json\&.printTo(rtcConfig);
396             rtcConfig\&.close();
397 
398             Serial\&.println("configuration is :");
399             json\&.printTo(Serial);
400             Serial\&.println();
401         
402             return(true); 
403         }
404     }   
405 
406 
407 
408 }
.fi
.SS "void CoolTime::config (int timeZone, IPAddress timeServer, unsigned int localPort)"
CoolTime::config(time Zone, Time server IP , udp Port): This method is provided to do manual configuration\&. 
.PP
Definition at line 295 of file CoolTime\&.cpp\&.
.PP
References localPort, timeServer, and timeZone\&.
.PP
.nf
296 {
297     Serial\&.println("Enter CoomTime\&.config() , no SPIFFS variant ");
298     Serial\&.println();
299 
300     this->timeZone=timeZone;
301     this->timeServer=timeServer;
302     this->localPort=localPort;
303     
304 } 
.fi
.SS "String CoolTime::formatDigits (int digits)"
CoolTime::printDigits(digit)
.PP
utility function for digital clock display adds leading 0
.PP
\fBReturns:\fP
.RS 4
formatted string of the input digit 
.RE
.PP

.PP
Definition at line 441 of file CoolTime\&.cpp\&.
.PP
Referenced by getESDate(), getTimeDate(), and setDateTime()\&.
.PP
.nf
442 {
443     Serial\&.println("Entering CoolTime\&.formatDigits()");
444     Serial\&.println();
445 
446     if(digits < 10)
447     {
448         Serial\&.println("output digit : ");
449         Serial\&.println( String("0") + String(digits) );
450         return( String("0") + String(digits) );
451     }
452     
453     Serial\&.println("output digit : ");
454     Serial\&.println(digits);
455     return( String(digits) );
456 }
.fi
.SS "String CoolTime::getESDate ()"
CoolTime::getESD(): This method is provided to return an Elastic Search compatible date Format
.PP
\fBReturns:\fP
.RS 4
date String in Elastic Search format 
.RE
.PP

.PP
Definition at line 143 of file CoolTime\&.cpp\&.
.PP
References formatDigits(), and getTimeDate()\&.
.PP
Referenced by setDateTime(), and CoolBoard::userData()\&.
.PP
.nf
144 {
145     Serial\&.println("Entering CoolTime\&.getESDate()");
146     Serial\&.println();
147 
148     tmElements_t tm=this->getTimeDate();
149 
150     //"20yy-mm-ddT00:00:00Z"
151     String elasticSearchString =String(tm\&.Year+1970)+"-"+this->formatDigits(tm\&.Month)+"-";
152 
153     elasticSearchString +=this->formatDigits(tm\&.Day)+"T"+this->formatDigits(tm\&.Hour)+":";
154     
155     elasticSearchString +=this->formatDigits(tm\&.Minute)+":"+this->formatDigits(tm\&.Second)+"Z";
156     
157     Serial\&.print("elastic Search date : ");
158     Serial\&.println(elasticSearchString);
159     Serial\&.println();
160 
161     return (elasticSearchString);
162 }
.fi
.SS "unsigned long CoolTime::getLastSyncTime ()"
\fBCoolTime::getLastSyncTime()\fP: This method is provided to get the last time we syncronised the time
.PP
\fBReturns:\fP
.RS 4
unsigned long representation of last syncronisation time in seconds 
.RE
.PP

.PP
Definition at line 172 of file CoolTime\&.cpp\&.
.PP
References timeSync\&.
.PP
Referenced by isTimeSync()\&.
.PP
.nf
173 {
174     Serial\&.println("Entering CoolTime\&.getLastSyncTime()");
175     Serial\&.println();
176     
177     Serial\&.print("last sync time : ");
178     Serial\&.println(this->timeSync);
179 
180     return(this->timeSync);
181 }
.fi
.SS "time_t CoolTime::getNtpTime ()"
CoolTime::getNtopTime(): This method is provided to get the Time through an NTP request to a Time Server
.PP
\fBReturns:\fP
.RS 4
a time_t (unsigned long ) timestamp in seconds 
.RE
.PP

.PP
Definition at line 217 of file CoolTime\&.cpp\&.
.PP
References NTP_PACKET_SIZE, packetBuffer, sendNTPpacket(), timeServer, timeZone, and Udp\&.
.PP
Referenced by update()\&.
.PP
.nf
218 {
219     Serial\&.println("Entering CoolTime\&.getNtpTime()");
220     Serial\&.println();
221 
222     while (Udp\&.parsePacket() > 0) ; // discard any previously received packets
223     
224     Serial\&.println("Transmit NTP Request");
225 
226     sendNTPpacket(timeServer);
227 
228     uint32_t beginWait = millis();
229 
230     while (millis() - beginWait < 1500) 
231     {
232         int size = Udp\&.parsePacket();
233         if (size >= NTP_PACKET_SIZE) 
234         {
235             Serial\&.println("Receive NTP Response");
236             Udp\&.read(packetBuffer, NTP_PACKET_SIZE);  // read packet into the buffer
237             unsigned long secsSince1900;
238             // convert four bytes starting at location 40 to a long integer
239             secsSince1900 =  (unsigned long)packetBuffer[40] << 24;
240             secsSince1900 |= (unsigned long)packetBuffer[41] << 16;
241             secsSince1900 |= (unsigned long)packetBuffer[42] << 8;
242             secsSince1900 |= (unsigned long)packetBuffer[43];
243             
244             Serial\&.print("received unix time : ");
245             Serial\&.println(secsSince1900 - 2208988800UL);
246             Serial\&.println();
247 
248             Serial\&.print("received unix time +");
249             Serial\&.print(this->timeZone);
250             Serial\&.print(" : ");
251             Serial\&.println( secsSince1900 - 2208988800UL + this->timeZone * SECS_PER_HOUR );
252             Serial\&.println();
253             
254             return secsSince1900 - 2208988800UL + this->timeZone * SECS_PER_HOUR;
255         }
256     }
257     Serial\&.println("No NTP Response :-(");
258     return 0; // return 0 if unable to get the time
259 }
.fi
.SS "tmElements_t CoolTime::getTimeDate ()"
\fBCoolTime::getTimeDate()\fP: This method is provided to get the RTC Time
.PP
\fBReturns:\fP
.RS 4
a tmElements_t structre that has the time in it 
.RE
.PP

.PP
Definition at line 109 of file CoolTime\&.cpp\&.
.PP
References formatDigits(), and rtc\&.
.PP
Referenced by getESDate()\&.
.PP
.nf
110 {  
111     Serial\&.println("Entering CoolTime\&.getTimeDate()");
112     Serial\&.println();
113 
114     tmElements_t tm;
115     time_t timeDate = this->rtc\&.get(CLOCK_ADDRESS);
116     breakTime(timeDate,tm);
117     
118     Serial\&.print("time is : ");
119     Serial\&.print(tm\&.Year);
120     Serial\&.print("-");
121     Serial\&.print( this->formatDigits( tm\&.Month ) );
122     Serial\&.print("-");
123     Serial\&.print( this->formatDigits( tm\&.Day ) );
124     Serial\&.print("T");
125     Serial\&.print( this->formatDigits( tm\&.Hour ) );
126     Serial\&.print(":");
127     Serial\&.print( this->formatDigits( tm\&.Minute ) );
128     Serial\&.print( ":" );
129     Serial\&.print( this->formatDigits( tm\&.Second ) );
130     Serial\&.print("Z");
131     
132     return(tm);
133 }
.fi
.SS "bool CoolTime::isTimeSync (unsigned long seconds = \fC604800\fP)"
CoolTime::isTimeSync( time in seconds): This method is provided to test if the time is syncronised or not\&. By default we test once per week\&.
.PP
\fBReturns:\fP
.RS 4
true if time is syncronised,false otherwise 
.RE
.PP

.PP
Definition at line 193 of file CoolTime\&.cpp\&.
.PP
References getLastSyncTime()\&.
.PP
Referenced by update()\&.
.PP
.nf
194 {
195     Serial\&.println("Entering CoolTime\&.isTimeSync() ");
196     Serial\&.println();
197 
198 //default is once per week we try to get a time update
199     if( (this->getLastSyncTime()+seconds) > (RTC\&.get(CLOCK_ADDRESS)) ) 
200     {
201         Serial\&.println("time is not syncronised ");
202         return(false);  
203     }
204     Serial\&.println("time is syncronised ");
205     return(true);
206 }
.fi
.SS "void CoolTime::printConf ()"
\fBCoolTime::printConf()\fP: This method is provided to print the \fBCoolTime\fP configuration to the Serial Monitor 
.PP
Definition at line 416 of file CoolTime\&.cpp\&.
.PP
References localPort, timeServer, and timeZone\&.
.PP
Referenced by CoolBoard::begin()\&.
.PP
.nf
417 {
418     Serial\&.println("Entering CoolTime\&.printConf()");
419     Serial\&.println();
420 
421     Serial\&.println("RTC Configuration") ;
422 
423     Serial\&.print("timeZone : ");
424     Serial\&.println(timeZone);
425 
426     Serial\&.print("timeServer : ");
427     Serial\&.println(timeServer);
428     
429     Serial\&.print("localPort : :");
430     Serial\&.println(localPort);
431 }
.fi
.SS "void CoolTime::sendNTPpacket (IPAddress & address)"
CoolTime::sendNTPpacket( Time Server IP address): This method is provided to send an NTP request to the time server at the given address 
.PP
Definition at line 266 of file CoolTime\&.cpp\&.
.PP
References NTP_PACKET_SIZE, packetBuffer, and Udp\&.
.PP
Referenced by getNtpTime()\&.
.PP
.nf
267 {
268     Serial\&.println("Enter CoolTime\&.sendNTPpacket()");
269     Serial\&.println();
270 
271     memset(packetBuffer, 0, NTP_PACKET_SIZE);
272     // Initialize values needed to form NTP request
273     // (see URL above for details on the packets)
274     packetBuffer[0] = 0b11100011;   // LI, Version, Mode
275     packetBuffer[1] = 0;     // Stratum, or type of clock
276     packetBuffer[2] = 6;     // Polling Interval
277     packetBuffer[3] = 0xEC;  // Peer Clock Precision
278     // 8 bytes of zero for Root Delay & Root Dispersion
279     packetBuffer[12]  = 49;
280     packetBuffer[13]  = 0x4E;
281     packetBuffer[14]  = 49;
282     packetBuffer[15]  = 52;
283     // all NTP fields have been given values, now
284     // you can send a packet requesting a timestamp:                 
285     Udp\&.beginPacket(address, 123); //NTP requests are to port 123
286     Udp\&.write(packetBuffer, NTP_PACKET_SIZE);
287     Udp\&.endPacket(); 
288 }
.fi
.SS "void CoolTime::setDateTime (int year, int month, int day, int hour, int minutes, int seconds)"
CoolTime::setDateTime(year,month,dat,hour,minutes,seconds): This method is provided to manually set the RTc Time 
.PP
Definition at line 65 of file CoolTime\&.cpp\&.
.PP
References formatDigits(), getESDate(), and rtc\&.
.PP
.nf
66 { 
67     Serial\&.println("Entering CoolTime\&.setDateTime");
68     Serial\&.println();
69 
70     tmElements_t tm;
71     tm\&.Second=seconds; 
72     tm\&.Minute=minutes; 
73     tm\&.Hour=hour; 
74     tm\&.Day=day;
75     tm\&.Month=month; 
76     tm\&.Year=year;   
77 
78     Serial\&.print("setting time to : ");//"20yy-mm-ddT00:00:00Z
79 
80     Serial\&.print(tm\&.Year);
81     Serial\&.print("-");
82     Serial\&.print( this->formatDigits( tm\&.Month ) );
83     Serial\&.print("-");
84     Serial\&.print( this->formatDigits( tm\&.Day ) );
85     Serial\&.print("T");
86     Serial\&.print( this->formatDigits( tm\&.Hour ) );
87     Serial\&.print(":");
88     Serial\&.print( this->formatDigits( tm\&.Minute ) );
89     Serial\&.print( ":" );
90     Serial\&.print( this->formatDigits( tm\&.Second ) );
91     Serial\&.print("Z");
92 
93     Serial\&.println();
94 
95     this->rtc\&.set(makeTime(tm),CLOCK_ADDRESS);
96     
97     Serial\&.print("time set to : ");
98     Serial\&.println(this->getESDate());
99     Serial\&.println();
100 }
.fi
.SS "void CoolTime::update ()"
\fBCoolTime::update()\fP: This method is provided to correct the rtc Time when it drifts,once every week\&. 
.PP
Definition at line 43 of file CoolTime\&.cpp\&.
.PP
References getNtpTime(), isTimeSync(), rtc, timeSync, and tmSet\&.
.PP
Referenced by CoolBoard::onLineMode()\&.
.PP
.nf
44 {
45     Serial\&.println("Entering CoolTime\&.update()");
46     Serial\&.println();
47 
48     if( !( this->isTimeSync() ) )
49     {
50         Serial\&.println("waiting for sync");
51         Serial\&.println();
52 
53         this->timeSync=this->getNtpTime();
54         breakTime(this->getNtpTime(), this->tmSet);
55         this->rtc\&.set(makeTime(this->tmSet), CLOCK_ADDRESS); // set the clock
56     }
57     
58 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "unsigned int CoolTime::localPort =0\fC [private]\fP"

.PP
Definition at line 71 of file CoolTime\&.h\&.
.PP
Referenced by begin(), config(), and printConf()\&.
.SS "byte CoolTime::packetBuffer[\fBNTP_PACKET_SIZE\fP]\fC [private]\fP"

.PP
Definition at line 73 of file CoolTime\&.h\&.
.PP
Referenced by getNtpTime(), and sendNTPpacket()\&.
.SS "DS1337RTC CoolTime::rtc\fC [private]\fP"

.PP
Definition at line 77 of file CoolTime\&.h\&.
.PP
Referenced by getTimeDate(), setDateTime(), and update()\&.
.SS "IPAddress CoolTime::timeServer\fC [private]\fP"

.PP
Definition at line 67 of file CoolTime\&.h\&.
.PP
Referenced by config(), getNtpTime(), and printConf()\&.
.SS "unsigned long CoolTime::timeSync =0\fC [private]\fP"

.PP
Definition at line 63 of file CoolTime\&.h\&.
.PP
Referenced by getLastSyncTime(), and update()\&.
.SS "int CoolTime::timeZone =0\fC [private]\fP"

.PP
Definition at line 65 of file CoolTime\&.h\&.
.PP
Referenced by config(), getNtpTime(), and printConf()\&.
.SS "tmElements_t CoolTime::tmSet\fC [private]\fP"

.PP
Definition at line 75 of file CoolTime\&.h\&.
.PP
Referenced by update()\&.
.SS "WiFiUDP CoolTime::Udp\fC [private]\fP"

.PP
Definition at line 69 of file CoolTime\&.h\&.
.PP
Referenced by begin(), getNtpTime(), and sendNTPpacket()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolAPI from the source code\&.
