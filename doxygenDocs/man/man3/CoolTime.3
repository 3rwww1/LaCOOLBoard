.TH "CoolTime" 3 "Mon Jul 31 2017" "CoolAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoolTime \- This class manages the DS1337 RTC \&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolTime\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBbegin\fP ()"
.br
.ti -1c
.RI "void \fBupdate\fP ()"
.br
.ti -1c
.RI "bool \fBconfig\fP ()"
.br
.ti -1c
.RI "void \fBconfig\fP (IPAddress \fBtimeServer\fP, unsigned int \fBlocalPort\fP)"
.br
.ti -1c
.RI "void \fBprintConf\fP ()"
.br
.ti -1c
.RI "void \fBsetDateTime\fP (int year, int month, int day, int hour, int minutes, int seconds)"
.br
.ti -1c
.RI "tmElements_t \fBgetTimeDate\fP ()"
.br
.ti -1c
.RI "String \fBgetESDate\fP ()"
.br
.ti -1c
.RI "unsigned long \fBgetLastSyncTime\fP ()"
.br
.ti -1c
.RI "bool \fBisTimeSync\fP (unsigned long seconds=604800)"
.br
.ti -1c
.RI "time_t \fBgetNtpTime\fP ()"
.br
.ti -1c
.RI "void \fBsendNTPpacket\fP (IPAddress &address)"
.br
.ti -1c
.RI "String \fBformatDigits\fP (int digits)"
.br
.ti -1c
.RI "bool \fBsaveTimeSync\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "unsigned long \fBtimeSync\fP =0"
.br
.ti -1c
.RI "IPAddress \fBtimeServer\fP"
.br
.ti -1c
.RI "WiFiUDP \fBUdp\fP"
.br
.ti -1c
.RI "unsigned int \fBlocalPort\fP =0"
.br
.ti -1c
.RI "byte \fBpacketBuffer\fP [\fBNTP_PACKET_SIZE\fP]"
.br
.ti -1c
.RI "tmElements_t \fBtmSet\fP"
.br
.ti -1c
.RI "DS1337RTC \fBrtc\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class manages the DS1337 RTC \&. 
.PP
Definition at line 31 of file CoolTime\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "void CoolTime::begin ()"
\fBCoolTime::begin()\fP: This method is provided to init the udp connection 
.PP
Definition at line 41 of file CoolTime\&.cpp\&.
.PP
References localPort, Udp, and update()\&.
.PP
Referenced by CoolBoard::begin()\&.
.PP
.nf
42 {
43 
44 #if DEBUG == 1 
45 
46     Serial\&.println( F("Entering CoolTime\&.begin()") );
47     Serial\&.println();
48 
49 #endif 
50 
51 
52     Udp\&.begin(localPort);
53     
54     this->update();
55     
56 }
.fi
.SS "bool CoolTime::config ()"
\fBCoolTime::config()\fP: This method is provided to configure the \fBCoolTime\fP object through a configuration file\&.
.PP
\fBReturns:\fP
.RS 4
true if successful,false otherwise 
.RE
.PP

.PP
Definition at line 424 of file CoolTime\&.cpp\&.
.PP
References localPort, timeServer, and timeSync\&.
.PP
Referenced by CoolBoard::begin()\&.
.PP
.nf
425 {
426 
427 #if DEBUG == 1 
428 
429     Serial\&.println( F("Enter CoolTime\&.config()") );
430     Serial\&.println();
431 
432 #endif 
433 
434     File rtcConfig = SPIFFS\&.open("/rtcConfig\&.json", "r");
435 
436     if (!rtcConfig) 
437     {
438     
439     #if DEBUG == 1 
440 
441         Serial\&.println( F("failed to read /rtcConfig\&.json") );
442         Serial\&.println();
443     
444     #endif
445 
446         return(false);
447     }
448     else
449     {
450         size_t size = rtcConfig\&.size();
451         // Allocate a buffer to store contents of the file\&.
452         std::unique_ptr<char[]> buf(new char[size]);
453 
454         rtcConfig\&.readBytes(buf\&.get(), size);
455         DynamicJsonBuffer jsonBuffer;
456         JsonObject& json = jsonBuffer\&.parseObject(buf\&.get());
457         if (!json\&.success()) 
458         {
459         
460         #if DEBUG == 1 
461 
462             Serial\&.println( F("failed to parse json") );
463             Serial\&.println();
464         
465         #endif 
466 
467             return(false);
468         } 
469         else
470         {  
471         
472         #if DEBUG == 1 
473 
474             Serial\&.println( F("configuration json is :") );
475             json\&.printTo(Serial);
476             Serial\&.println();
477 
478             Serial\&.print(F("jsonBuffer size: "));
479             Serial\&.println(jsonBuffer\&.size());
480             Serial\&.println();
481 
482 
483         #endif
484 
485             String ip;
486             
487             if(json["timeServer"]\&.success() )
488             {           
489                  ip=json["timeServer"]\&.as<String>();
490                 this->timeServer\&.fromString(ip);
491                 
492             }
493             else
494             {
495                 this->timeServer=this->timeServer;
496             }
497             json["timeServer"]=ip;
498             
499             if(json["localPort"]\&.success() )
500             {                       
501                 this->localPort=json["localPort"];
502             }
503             else
504             {
505                 this->localPort=this->localPort;
506             }
507             json["localPort"]=this->localPort;
508 
509 
510             if( json["timeSync"]\&.success() )
511             {
512 
513                 this->timeSync=json["timeSync"];
514             }
515             else
516             {
517                 this->timeSync=this->timeSync;
518             }
519             json["timeSync"]=this->timeSync;
520 
521             rtcConfig\&.close();
522             rtcConfig= SPIFFS\&.open("/rtcConfig\&.json", "w");
523             
524             if(!rtcConfig)
525             {
526             
527             #if DEBUG == 1
528 
529                 Serial\&.println( F("failed to write to /rtcConfig\&.json") );
530                 Serial\&.println();
531             
532             #endif
533 
534                 return(false);
535             }
536             
537             json\&.printTo(rtcConfig);
538             rtcConfig\&.close();
539 
540         #if DEBUG == 1 
541 
542             Serial\&.println( F("configuration is :") );
543             json\&.printTo(Serial);
544             Serial\&.println();
545         
546         #endif
547         
548             return(true); 
549         }
550     }   
551 
552 
553 
554 }
.fi
.SS "void CoolTime::config (IPAddress timeServer, unsigned int localPort)"
CoolTime::config(Time server IP , udp Port): This method is provided to do manual configuration\&. 
.PP
Definition at line 401 of file CoolTime\&.cpp\&.
.PP
References localPort, and timeServer\&.
.PP
.nf
402 {
403 
404 #if DEBUG == 1 
405 
406     Serial\&.println( F("Enter CoomTime\&.config() , no SPIFFS variant ") );
407     Serial\&.println();
408 
409 #endif 
410 
411     this->timeServer=timeServer;
412     this->localPort=localPort;
413     
414 } 
.fi
.SS "String CoolTime::formatDigits (int digits)"
CoolTime::printDigits(digit)
.PP
utility method for digital clock display adds leading 0
.PP
\fBReturns:\fP
.RS 4
formatted string of the input digit 
.RE
.PP

.PP
Definition at line 716 of file CoolTime\&.cpp\&.
.PP
Referenced by getESDate(), getTimeDate(), and setDateTime()\&.
.PP
.nf
717 {
718 
719 #if DEBUG == 1 
720 
721     Serial\&.println( F("Entering CoolTime\&.formatDigits()") );
722     Serial\&.println();
723 
724 #endif 
725 
726     if(digits < 10)
727     {
728     
729     #if DEBUG == 1
730 
731         Serial\&.println( F("output digit : ") );
732         Serial\&.println( String("0") + String(digits) );
733 
734     #endif
735 
736         return( String("0") + String(digits) );
737     }
738     
739 #if DEBUG == 1 
740 
741     Serial\&.println( F("output digit : ") );
742     Serial\&.println(digits);
743 
744 #endif
745 
746     return( String(digits) );
747 }
.fi
.SS "String CoolTime::getESDate ()"
CoolTime::getESD(): This method is provided to return an Elastic Search compatible date Format
.PP
\fBReturns:\fP
.RS 4
date String in Elastic Search format 
.RE
.PP

.PP
Definition at line 193 of file CoolTime\&.cpp\&.
.PP
References formatDigits(), and getTimeDate()\&.
.PP
Referenced by setDateTime(), and CoolBoard::userData()\&.
.PP
.nf
194 {
195 
196 #if DEBUG == 1 
197 
198     Serial\&.println( F("Entering CoolTime\&.getESDate()") );
199     Serial\&.println();
200 
201 #endif 
202 
203     tmElements_t tm=this->getTimeDate();
204 
205     //"20yy-mm-ddT00:00:00Z"
206     String elasticSearchString =String(tm\&.Year+1970)+"-"+this->formatDigits(tm\&.Month)+"-";
207 
208     elasticSearchString +=this->formatDigits(tm\&.Day)+"T"+this->formatDigits(tm\&.Hour)+":";
209     
210     elasticSearchString +=this->formatDigits(tm\&.Minute)+":"+this->formatDigits(tm\&.Second)+"Z";
211 
212 #if DEBUG == 1 
213 
214     Serial\&.print( F("elastic Search date : ") );
215     Serial\&.println(elasticSearchString);
216     Serial\&.println();
217 
218 #endif
219 
220     return (elasticSearchString);
221 }
.fi
.SS "unsigned long CoolTime::getLastSyncTime ()"
\fBCoolTime::getLastSyncTime()\fP: This method is provided to get the last time we syncronised the time
.PP
\fBReturns:\fP
.RS 4
unsigned long representation of last syncronisation time in seconds 
.RE
.PP

.PP
Definition at line 231 of file CoolTime\&.cpp\&.
.PP
References timeSync\&.
.PP
Referenced by isTimeSync()\&.
.PP
.nf
232 {
233 
234 #if DEBUG == 1 
235 
236     Serial\&.println( F("Entering CoolTime\&.getLastSyncTime()") );
237     Serial\&.println();
238     
239     Serial\&.print( F("last sync time : ") );
240     Serial\&.println(this->timeSync);
241 
242 #endif 
243 
244     return(this->timeSync);
245 }
.fi
.SS "time_t CoolTime::getNtpTime ()"
CoolTime::getNtopTime(): This method is provided to get the Time through an NTP request to a Time Server
.PP
\fBReturns:\fP
.RS 4
a time_t (unsigned long ) timestamp in seconds 
.RE
.PP

.PP
Definition at line 299 of file CoolTime\&.cpp\&.
.PP
References NTP_PACKET_SIZE, packetBuffer, sendNTPpacket(), timeServer, and Udp\&.
.PP
Referenced by update()\&.
.PP
.nf
300 {
301 
302 #if DEBUG == 1 
303 
304     Serial\&.println( F("Entering CoolTime\&.getNtpTime()") );
305     Serial\&.println();
306 
307 #endif 
308 
309     while (Udp\&.parsePacket() > 0) ; // discard any previously received packets
310 
311 #if DEBUG == 1 
312     
313     Serial\&.println( F("Transmit NTP Request") );
314 
315 #endif 
316 
317     sendNTPpacket(timeServer);
318 
319     uint32_t beginWait = millis();
320 
321     while (millis() - beginWait < 1500) 
322     {
323         int size = Udp\&.parsePacket();
324         if (size >= NTP_PACKET_SIZE) 
325         {
326         
327         #if DEBUG == 1
328 
329             Serial\&.println( F("Receive NTP Response") );
330         
331         #endif
332 
333             Udp\&.read(packetBuffer, NTP_PACKET_SIZE);  // read packet into the buffer
334             unsigned long secsSince1900;
335             // convert four bytes starting at location 40 to a long integer
336             secsSince1900 =  (unsigned long)packetBuffer[40] << 24;
337             secsSince1900 |= (unsigned long)packetBuffer[41] << 16;
338             secsSince1900 |= (unsigned long)packetBuffer[42] << 8;
339             secsSince1900 |= (unsigned long)packetBuffer[43];
340         
341         #if DEBUG == 1 
342     
343             Serial\&.print( F("received unix time : ") );
344             Serial\&.println(secsSince1900 - 2208988800UL);
345             Serial\&.println();
346 
347         #endif 
348 
349             return secsSince1900 - 2208988800UL ;
350         }
351     }
352     
353 #if DEBUG == 1
354 
355     Serial\&.println( F("No NTP Response :-(") );
356 
357 #endif 
358 
359     return 0; // return 0 if unable to get the time
360 }
.fi
.SS "tmElements_t CoolTime::getTimeDate ()"
\fBCoolTime::getTimeDate()\fP: This method is provided to get the RTC Time
.PP
\fBReturns:\fP
.RS 4
a tmElements_t structre that has the time in it 
.RE
.PP

.PP
Definition at line 150 of file CoolTime\&.cpp\&.
.PP
References formatDigits(), and rtc\&.
.PP
Referenced by getESDate(), and CoolBoard::readSensors()\&.
.PP
.nf
151 {
152 
153 #if DEBUG == 1 
154     
155     Serial\&.println( F("Entering CoolTime\&.getTimeDate()") );
156     Serial\&.println();
157 
158 #endif
159 
160     tmElements_t tm;
161     time_t timeDate = this->rtc\&.get(CLOCK_ADDRESS);
162     breakTime(timeDate,tm);
163 
164 #if DEBUG == 1
165     
166     Serial\&.print( F("time is : ") );
167     Serial\&.print(tm\&.Year+ 1970 );
168     Serial\&.print( F("-") );
169     Serial\&.print( this->formatDigits( tm\&.Month ) );
170     Serial\&.print( F("-") );
171     Serial\&.print( this->formatDigits( tm\&.Day ) );
172     Serial\&.print( F("T") );
173     Serial\&.print( this->formatDigits( tm\&.Hour ) );
174     Serial\&.print( F(":") );
175     Serial\&.print( this->formatDigits( tm\&.Minute ) );
176     Serial\&.print( F(":") );
177     Serial\&.print( this->formatDigits( tm\&.Second ) );
178     Serial\&.print( F("Z") );
179 
180 #endif
181     
182     return(tm);
183 }
.fi
.SS "bool CoolTime::isTimeSync (unsigned long seconds = \fC604800\fP)"
CoolTime::isTimeSync( time in seconds): This method is provided to test if the time is syncronised or not\&. By default we test once per week\&.
.PP
\fBReturns:\fP
.RS 4
true if time is syncronised,false otherwise 
.RE
.PP

.PP
Definition at line 257 of file CoolTime\&.cpp\&.
.PP
References getLastSyncTime()\&.
.PP
Referenced by update()\&.
.PP
.nf
258 {
259 
260 #if DEBUG == 1
261 
262     Serial\&.println( F("Entering CoolTime\&.isTimeSync() ") );
263     Serial\&.println();
264 
265 #endif 
266 
267 
268     //default is once per week we try to get a time update
269     if( ( RTC\&.get(CLOCK_ADDRESS) - this->getLastSyncTime() ) > ( seconds ) ) 
270     {
271 
272     #if DEBUG == 1 
273 
274         Serial\&.println( F("time is not syncronised ") );
275     
276     #endif
277 
278         return(false);  
279     }
280     
281 #if DEBUG == 1 
282 
283     Serial\&.println( F("time is syncronised ") );
284 
285 #endif 
286 
287     return(true);
288 }
.fi
.SS "void CoolTime::printConf ()"
\fBCoolTime::printConf()\fP: This method is provided to print the \fBCoolTime\fP configuration to the Serial Monitor 
.PP
Definition at line 689 of file CoolTime\&.cpp\&.
.PP
References localPort, and timeServer\&.
.PP
Referenced by CoolBoard::begin()\&.
.PP
.nf
690 {
691 
692 #if DEBUG == 1
693 
694     Serial\&.println( F("Entering CoolTime\&.printConf()") );
695     Serial\&.println();
696 
697 #endif 
698 
699     Serial\&.println("RTC Configuration") ;
700 
701     Serial\&.print("timeServer : ");
702     Serial\&.println(timeServer);
703     
704     Serial\&.print("localPort : :");
705     Serial\&.println(localPort);
706 }
.fi
.SS "bool CoolTime::saveTimeSync ()"
\fBCoolTime::saveTimeSync()\fP This method is provided to save the last sync time in the SPIFFS\&.
.PP
\fBReturns:\fP
.RS 4
true if successful,false otherwise 
.RE
.PP

.PP
Definition at line 565 of file CoolTime\&.cpp\&.
.PP
References localPort, timeServer, and timeSync\&.
.PP
Referenced by update()\&.
.PP
.nf
566 {
567     Serial\&.println( F("Enter CoolTime\&.saveTimeSync()") );
568     Serial\&.println();
569 
570     File rtcConfig = SPIFFS\&.open("/rtcConfig\&.json", "r");
571 
572     if (!rtcConfig) 
573     {
574         Serial\&.println( F("failed to read /rtcConfig\&.json") );
575         Serial\&.println();
576 
577         return(false);
578     }
579     else
580     {
581         size_t size = rtcConfig\&.size();
582         // Allocate a buffer to store contents of the file\&.
583         std::unique_ptr<char[]> buf(new char[size]);
584 
585         rtcConfig\&.readBytes(buf\&.get(), size);
586         DynamicJsonBuffer jsonBuffer;
587         JsonObject& json = jsonBuffer\&.parseObject(buf\&.get());
588         if (!json\&.success()) 
589         {
590         #if DEBUG == 1
591 
592             Serial\&.println( F("failed to parse json") );
593             Serial\&.println();
594         
595         #endif
596 
597             return(false);
598         } 
599         else
600         {
601 
602         #if DEBUG == 1
603     
604             Serial\&.println( F("configuration json is :") );
605             json\&.printTo(Serial);
606             Serial\&.println();
607 
608             Serial\&.print(F("jsonBuffer size: "));
609             Serial\&.println(jsonBuffer\&.size());
610             Serial\&.println();
611 
612         #endif
613 
614             String ip;
615                     
616             if(json["timeServer"]\&.success() )
617             {           
618                  ip=json["timeServer"]\&.as<String>();
619                 this->timeServer\&.fromString(ip);
620                 
621             }
622             else
623             {
624                 this->timeServer=this->timeServer;
625             }
626             json["timeServer"]=ip;
627             
628             if(json["localPort"]\&.success() )
629             {                       
630                 this->localPort=json["localPort"];
631             }
632             else
633             {
634                 this->localPort=this->localPort;
635             }
636             json["localPort"]=this->localPort;
637 
638 
639             if( json["timeSync"]\&.success() )
640             {
641                 json["timeSync"]=this->timeSync;
642             }
643             else
644             {
645                 this->timeSync=this->timeSync;
646             }
647             json["timeSync"]=this->timeSync;
648 
649 
650             rtcConfig\&.close();
651             rtcConfig= SPIFFS\&.open("/rtcConfig\&.json", "w");
652             
653             if(!rtcConfig)
654             {
655             #if DEBUG == 1
656 
657                 Serial\&.println( F("failed to write timeSync to /rtcConfig\&.json") );
658                 Serial\&.println();
659             
660             #endif
661 
662                 return(false);
663             }
664             
665             json\&.printTo(rtcConfig);
666             rtcConfig\&.close();
667     
668         #if DEBUG == 1
669 
670             Serial\&.println( F("configuration is :") );
671             json\&.printTo(Serial);
672             Serial\&.println();
673         
674         #endif
675             return(true); 
676         }
677     }   
678 
679 
680 
681 }
.fi
.SS "void CoolTime::sendNTPpacket (IPAddress & address)"
CoolTime::sendNTPpacket( Time Server IP address): This method is provided to send an NTP request to the time server at the given address 
.PP
Definition at line 367 of file CoolTime\&.cpp\&.
.PP
References NTP_PACKET_SIZE, packetBuffer, and Udp\&.
.PP
Referenced by getNtpTime()\&.
.PP
.nf
368 {
369 
370 #if DEBUG == 1 
371 
372     Serial\&.println( F("Enter CoolTime\&.sendNTPpacket()") );
373     Serial\&.println();
374 
375 #endif
376 
377     memset(packetBuffer, 0, NTP_PACKET_SIZE);
378     // Initialize values needed to form NTP request
379     // (see URL above for details on the packets)
380     packetBuffer[0] = 0b11100011;   // LI, Version, Mode
381     packetBuffer[1] = 0;     // Stratum, or type of clock
382     packetBuffer[2] = 6;     // Polling Interval
383     packetBuffer[3] = 0xEC;  // Peer Clock Precision
384     // 8 bytes of zero for Root Delay & Root Dispersion
385     packetBuffer[12]  = 49;
386     packetBuffer[13]  = 0x4E;
387     packetBuffer[14]  = 49;
388     packetBuffer[15]  = 52;
389     // all NTP fields have been given values, now
390     // you can send a packet requesting a timestamp:                 
391     Udp\&.beginPacket(address, 123); //NTP requests are to port 123
392     Udp\&.write(packetBuffer, NTP_PACKET_SIZE);
393     Udp\&.endPacket(); 
394 }
.fi
.SS "void CoolTime::setDateTime (int year, int month, int day, int hour, int minutes, int seconds)"
CoolTime::setDateTime(year,month,dat,hour,minutes,seconds): This method is provided to manually set the RTc Time 
.PP
Definition at line 96 of file CoolTime\&.cpp\&.
.PP
References formatDigits(), getESDate(), and rtc\&.
.PP
.nf
97 { 
98 
99 #if DEBUG == 1
100 
101     Serial\&.println( F("Entering CoolTime\&.setDateTime") );
102     Serial\&.println();
103 
104 #endif
105 
106     tmElements_t tm;
107     tm\&.Second=seconds; 
108     tm\&.Minute=minutes; 
109     tm\&.Hour=hour; 
110     tm\&.Day=day;
111     tm\&.Month=month; 
112     tm\&.Year=year;
113     
114     this->rtc\&.set(makeTime(tm),CLOCK_ADDRESS);   
115 
116 #if DEBUG == 1
117 
118     Serial\&.print( F("setting time to : ") );//"20yy-mm-ddT00:00:00Z
119 
120     Serial\&.print(tm\&.Year);
121     Serial\&.print( F("-") );
122     Serial\&.print( this->formatDigits( tm\&.Month ) );
123     Serial\&.print( F("-") );
124     Serial\&.print( this->formatDigits( tm\&.Day ) );
125     Serial\&.print( F("T") );
126     Serial\&.print( this->formatDigits( tm\&.Hour ) );
127     Serial\&.print( F(":") );
128     Serial\&.print( this->formatDigits( tm\&.Minute ) );
129     Serial\&.print( F(":") );
130     Serial\&.print( this->formatDigits( tm\&.Second ) );
131     Serial\&.print( F("Z") );
132 
133     Serial\&.println();
134     
135     Serial\&.print( F("time set to : ") );
136     Serial\&.println(this->getESDate());
137     Serial\&.println();
138 
139 #endif
140 
141 }
.fi
.SS "void CoolTime::update ()"
\fBCoolTime::update()\fP: This method is provided to correct the rtc Time when it drifts,once every week\&. 
.PP
Definition at line 63 of file CoolTime\&.cpp\&.
.PP
References getNtpTime(), isTimeSync(), rtc, saveTimeSync(), timeSync, and tmSet\&.
.PP
Referenced by begin(), and CoolBoard::onLineMode()\&.
.PP
.nf
64 {
65 
66 #if DEBUG == 1
67 
68     Serial\&.println( F("Entering CoolTime\&.update()") );
69     Serial\&.println();
70 
71 #endif 
72 
73     if( !( this->isTimeSync() ) )
74     {
75     
76     #if DEBUG == 1
77 
78         Serial\&.println( F("waiting for sync") );
79         Serial\&.println();
80 
81     #endif 
82 
83         this->timeSync=this->getNtpTime();
84         breakTime(this->getNtpTime(), this->tmSet);
85         this->rtc\&.set(makeTime(this->tmSet), CLOCK_ADDRESS); // set the clock
86         this->saveTimeSync();
87     }
88     
89 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "unsigned int CoolTime::localPort =0\fC [private]\fP"

.PP
Definition at line 71 of file CoolTime\&.h\&.
.PP
Referenced by begin(), config(), printConf(), and saveTimeSync()\&.
.SS "byte CoolTime::packetBuffer[\fBNTP_PACKET_SIZE\fP]\fC [private]\fP"

.PP
Definition at line 73 of file CoolTime\&.h\&.
.PP
Referenced by getNtpTime(), and sendNTPpacket()\&.
.SS "DS1337RTC CoolTime::rtc\fC [private]\fP"

.PP
Definition at line 77 of file CoolTime\&.h\&.
.PP
Referenced by getTimeDate(), setDateTime(), and update()\&.
.SS "IPAddress CoolTime::timeServer\fC [private]\fP"

.PP
Definition at line 67 of file CoolTime\&.h\&.
.PP
Referenced by config(), getNtpTime(), printConf(), and saveTimeSync()\&.
.SS "unsigned long CoolTime::timeSync =0\fC [private]\fP"

.PP
Definition at line 65 of file CoolTime\&.h\&.
.PP
Referenced by config(), getLastSyncTime(), saveTimeSync(), and update()\&.
.SS "tmElements_t CoolTime::tmSet\fC [private]\fP"

.PP
Definition at line 75 of file CoolTime\&.h\&.
.PP
Referenced by update()\&.
.SS "WiFiUDP CoolTime::Udp\fC [private]\fP"

.PP
Definition at line 69 of file CoolTime\&.h\&.
.PP
Referenced by begin(), getNtpTime(), and sendNTPpacket()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolAPI from the source code\&.
