.TH "Irene3000" 3 "Wed Jun 28 2017" "CoolAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Irene3000 \- This class is provided to manage the \fBIrene3000\fP Ph/Temperature Shield\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Irene3000\&.h>\fP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBparameters_T\fP"
.br
.ti -1c
.RI "struct \fBstate\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBbegin\fP ()"
.br
.ti -1c
.RI "void \fBcalcpHSlope\fP ()"
.br
.ti -1c
.RI "void \fBcalibratepH4\fP (adsGain_t gain)"
.br
.ti -1c
.RI "void \fBcalibratepH7\fP (adsGain_t gain)"
.br
.ti -1c
.RI "bool \fBconfig\fP ()"
.br
.ti -1c
.RI "adsGain_t \fBgainConvert\fP (uint16_t tempGain)"
.br
.ti -1c
.RI "void \fBprintConf\fP ()"
.br
.ti -1c
.RI "String \fBread\fP ()"
.br
.ti -1c
.RI "int \fBreadADSChannel2\fP (adsGain_t gain)"
.br
.ti -1c
.RI "int \fBreadButton\fP (adsGain_t gain)"
.br
.ti -1c
.RI "float \fBreadPh\fP (adsGain_t gain)"
.br
.ti -1c
.RI "double \fBreadTemp\fP (adsGain_t gain)"
.br
.ti -1c
.RI "void \fBresetParams\fP (void)"
.br
.ti -1c
.RI "void \fBsetGain\fP (adsGain_t gain)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "struct \fBIrene3000::state\fP \fBadc2\fP"
.br
.ti -1c
.RI "Adafruit_ADS1115 \fBads\fP"
.br
.ti -1c
.RI "int \fBireneJsonSize\fP"
.br
.ti -1c
.RI "const float \fBopampGain\fP = 5\&.25"
.br
.ti -1c
.RI "struct \fBIrene3000::parameters_T\fP \fBparams\fP"
.br
.ti -1c
.RI "struct \fBIrene3000::state\fP \fBphProbe\fP"
.br
.ti -1c
.RI "const float \fBvRef\fP = 1\&.024"
.br
.ti -1c
.RI "struct \fBIrene3000::state\fP \fBwaterTemp\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class is provided to manage the \fBIrene3000\fP Ph/Temperature Shield\&. 
.PP
Definition at line 35 of file Irene3000\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "void Irene3000::begin (void)"
\fBIrene3000::begin()\fP: This method is provided to start the \fBIrene3000\fP ADS chip 
.PP
Definition at line 22 of file irene3000\&.cpp\&.
.PP
References ads\&.
.PP
Referenced by CoolBoard::begin()\&.
.PP
.nf
23 {
24     this->ads\&.begin();
25 }
.fi
.SS "void Irene3000::calcpHSlope ()"
Irene3000::calcpHSlop(): This method is provided to calculate th PH slope 
.PP
Definition at line 359 of file irene3000\&.cpp\&.
.PP
References opampGain, params, Irene3000::parameters_T::pH4Cal, Irene3000::parameters_T::pH7Cal, Irene3000::parameters_T::pHStep, and vRef\&.
.PP
Referenced by calibratepH4(), and calibratepH7()\&.
.PP
.nf
360 {
361 
362   params\&.pHStep = ((((vRef * (float)(params\&.pH7Cal - params\&.pH4Cal)) / 32767) * 1000) / opampGain) / 3;
363 
364  
365 }
.fi
.SS "void Irene3000::calibratepH4 (adsGain_t gain)"
Irene3000::calibratepH4(gain): This method is provided to calibrate the PH probe to 4 
.PP
Definition at line 341 of file irene3000\&.cpp\&.
.PP
References ads, calcpHSlope(), params, ph, Irene3000::parameters_T::pH4Cal, and setGain()\&.
.PP
.nf
342 {
343 
344   this->setGain(gain);
345         
346   this->params\&.pH4Cal =  ads\&.readADC_SingleEnded(ph);
347  
348   this->calcpHSlope();
349 
350 
351 
352 }
.fi
.SS "void Irene3000::calibratepH7 (adsGain_t gain)"
Irene3000::calibratepH7(gain): This method is provided to calibrate the PH probe to 7 
.PP
Definition at line 325 of file irene3000\&.cpp\&.
.PP
References ads, calcpHSlope(), params, ph, Irene3000::parameters_T::pH7Cal, and setGain()\&.
.PP
.nf
326 {
327     this->setGain(gain);
328         
329     this->params\&.pH7Cal = ads\&.readADC_SingleEnded(ph);
330  
331     this->calcpHSlope();
332 
333 
334 }
.fi
.SS "bool Irene3000::config ()"
\fBIrene3000::config()\fP: This method is provided to configure the \fBIrene3000\fP shield through a configuration file
.PP
\fBReturns:\fP
.RS 4
true if successful,false otherwise 
.RE
.PP

.PP
Definition at line 74 of file irene3000\&.cpp\&.
.PP
References Irene3000::state::active, adc2, Irene3000::state::gain, gainConvert(), ireneJsonSize, phProbe, Irene3000::state::type, and waterTemp\&.
.PP
Referenced by CoolBoard::begin(), and CoolBoard::update()\&.
.PP
.nf
75 {
76 
77     File irene3000Config = SPIFFS\&.open("/irene3000Config\&.json", "r");
78 
79     if (!irene3000Config) 
80     {
81         return(false);
82     }
83     else
84     {
85         size_t size = irene3000Config\&.size();
86         // Allocate a buffer to store contents of the file\&.
87         std::unique_ptr<char[]> buf(new char[size]);
88             uint16_t tempGain;
89         irene3000Config\&.readBytes(buf\&.get(), size);
90         DynamicJsonBuffer jsonBuffer;
91         JsonObject& json = jsonBuffer\&.parseObject(buf\&.get());
92         if (!json\&.success()) 
93         {
94               return(false);
95         } 
96         else
97         {   
98             if(json["ireneJsonSize"]\&.success() )
99             {
100                 this->ireneJsonSize=json["ireneJsonSize"];
101             }
102             else
103             {
104                 this->ireneJsonSize=this->ireneJsonSize;
105             }
106             json["ireneJsonSize"]=this->ireneJsonSize;
107 
108             
109             if(json["waterTemp"]["active"]\&.success() )
110             {           
111                 this->waterTemp\&.active = json["waterTemp"]["active"]; 
112             }
113             else
114             {
115                 this->waterTemp\&.active=this->waterTemp\&.active;
116             }
117             json["waterTemp"]["active"]=this->waterTemp\&.active;
118 
119             
120             if(json["waterTemp"]["gain"]\&.success() )
121             {           
122                 tempGain = json["waterTemp"]["gain"]; 
123                 this->waterTemp\&.gain=this->gainConvert(tempGain);
124             }
125             else
126             {
127                 this->waterTemp\&.gain=this->waterTemp\&.gain;
128             }
129             json["waterTemp"]["gain"]=this->waterTemp\&.gain;
130 
131             
132             if(json["phProbe"]["active"]\&.success())
133             {
134                 this->phProbe\&.active=json["phProbe"]["active"];
135             }
136             else
137             {
138                 this->phProbe\&.active=this->phProbe\&.active;
139             }
140             json["phProbe"]["active"]=this->phProbe\&.active;
141     
142             
143             if(json["phProbe"]["gain"]\&.success() )
144             {       
145                 tempGain=json["phProbe"]["gain"];
146                 this->phProbe\&.gain=this->gainConvert(tempGain);          
147             }
148             else
149             {
150                 this->phProbe\&.gain=this->phProbe\&.gain;
151             }
152             json["phProbe"]["gain"]=this->phProbe\&.gain;
153 
154             
155             if(json["adc2"]["active"]\&.success() )
156             {
157                 this->adc2\&.active=json["adc2"]["active"];
158             }
159             else
160             {
161                 this->adc2\&.active=this->adc2\&.active;
162             }
163             json["adc2"]["active"]=this->adc2\&.active;
164 
165             
166             if(json["adc2"]["gain"]\&.success() )
167             {           
168                 tempGain=json["adc2"]["gain"];
169                 this->adc2\&.gain=this->gainConvert(tempGain);
170             }
171             else
172             {
173                 this->adc2\&.gain=this->adc2\&.gain;
174             }
175             json["adc2"]["gain"]=this->adc2\&.gain;
176 
177             
178             if(json["adc2"]["type"]\&.success() )
179             {
180                 this->adc2\&.type=json["adc2"]["type"]\&.as<String>(); 
181             }
182             else
183             {
184                 this->adc2\&.type=this->adc2\&.type;
185             }
186             json["adc2"]["type"]=this->adc2\&.type;
187 
188             irene3000Config\&.close();
189             irene3000Config = SPIFFS\&.open("/irene3000Config\&.json", "w");
190 
191             if(!irene3000Config)
192             {
193                 return(false);
194             }
195 
196             json\&.printTo(irene3000Config);
197             irene3000Config\&.close();
198 
199             return(true); 
200         }
201     }   
202 
203 }
.fi
.SS "adsGain_t Irene3000::gainConvert (uint16_t tempGain)"
\fBIrene3000::gainConvert\fP( gain : { 2/3,1,2,4,8,16 } ) This method is provided to convert the gain to Internal Constants
.PP
\fBReturns:\fP
.RS 4
internal representation of the ADS gain 
.RE
.PP

.PP
Definition at line 391 of file irene3000\&.cpp\&.
.PP
Referenced by config()\&.
.PP
.nf
392 {
393     switch(tempGain)
394     {
395         case(2/3): return(GAIN_TWOTHIRDS);
396         case(1): return (GAIN_ONE);
397         case(2) : return(GAIN_TWO);
398         case(4): return(GAIN_FOUR) ;   
399         case(8):return(GAIN_EIGHT)  ;  
400         case(16):return(GAIN_SIXTEEN);  
401     }
402 
403 
404 
405 }
.fi
.SS "void Irene3000::printConf ()"
\fBIrene3000::printConf()\fP: This method is provided to print the configuration to the Serial Monitor 
.PP
Definition at line 210 of file irene3000\&.cpp\&.
.PP
References Irene3000::state::active, adc2, Irene3000::state::gain, phProbe, Irene3000::state::type, and waterTemp\&.
.PP
Referenced by CoolBoard::begin()\&.
.PP
.nf
211 {
212     Serial\&.println("Irene Config ");
213     Serial\&.println(waterTemp\&.active);
214     Serial\&.println(waterTemp\&.gain);   
215     Serial\&.println(phProbe\&.active);
216     Serial\&.println(phProbe\&.gain);
217     Serial\&.println(adc2\&.active);
218     Serial\&.println(adc2\&.gain);
219     Serial\&.println(adc2\&.type);
220     Serial\&.println(" ");
221 }
.fi
.SS "String Irene3000::read (void)"
\fBIrene3000\fP:\fBread()\fP: This method is provided to read the \fBIrene3000\fP sensors data
.PP
\fBReturns:\fP
.RS 4
json string of the sensors data 
.RE
.PP

.PP
Definition at line 35 of file irene3000\&.cpp\&.
.PP
References Irene3000::state::active, adc2, Irene3000::state::gain, ireneJsonSize, phProbe, readADSChannel2(), readPh(), readTemp(), Irene3000::state::type, and waterTemp\&.
.PP
Referenced by CoolBoard::offLineMode(), and CoolBoard::onLineMode()\&.
.PP
.nf
36 {   
37     String data;
38     DynamicJsonBuffer jsonBuffer(ireneJsonSize);
39     JsonObject& root = jsonBuffer\&.createObject();
40 
41 
42         
43     if(waterTemp\&.active)
44     {
45         root["waterTemp"] = this->readTemp(waterTemp\&.gain);
46 
47         if(phProbe\&.active)
48         {
49             root["ph"] =this->readPh(phProbe\&.gain) ;
50         }
51 
52     }
53 
54     if(adc2\&.active)
55     {
56         root[adc2\&.type] =this->readADSChannel2(adc2\&.gain);
57     }
58     
59     root\&.printTo(data);
60     
61     return(data);
62     
63     
64 
65 }
.fi
.SS "int Irene3000::readADSChannel2 (adsGain_t gain)"
Irene3000::readADSChannel2(gain): This method is provided to read from the ADS channel 2 \&. ADS Channel 2 is free and the user can connect another analog sensor to it\&.
.PP
\fBReturns:\fP
.RS 4
the ADS Channel 2 value 
.RE
.PP

.PP
Definition at line 256 of file irene3000\&.cpp\&.
.PP
References ads, freeAdc, and setGain()\&.
.PP
Referenced by read()\&.
.PP
.nf
257 {  
258     this->setGain(gain);
259     return( this->ads\&.readADC_SingleEnded(freeAdc) ) ;
260 }
.fi
.SS "int Irene3000::readButton (adsGain_t gain)"
Irene3000::readButton(gain): This method is provided to read the \fBIrene3000\fP button
.PP
\fBReturns:\fP
.RS 4
the button value 
.RE
.PP

.PP
Definition at line 230 of file irene3000\&.cpp\&.
.PP
References ads, button, and setGain()\&.
.PP
.nf
231 {
232     this->setGain(gain);
233     return( this->ads\&.readADC_SingleEnded(button) );
234     
235 }
.fi
.SS "float Irene3000::readPh (adsGain_t gain)"
Irene3000::readPh(gain): This method is provided to read the PH probe note that for the best results, PH must be correlated to Temperature\&.
.PP
\fBReturns:\fP
.RS 4
the PH probe value 
.RE
.PP

.PP
Definition at line 270 of file irene3000\&.cpp\&.
.PP
References ADC_MAXIMUM_VALUE, ads, opampGain, params, ph, Irene3000::parameters_T::pH7Cal, Irene3000::parameters_T::pHStep, setGain(), and vRef\&.
.PP
Referenced by read()\&.
.PP
.nf
271 {
272   this->setGain(gain);
273 
274   double Voltage =  gain * ( ads\&.readADC_SingleEnded(ph) ) / ADC_MAXIMUM_VALUE;
275 
276   float miliVolts = Voltage * 1000;
277   float temporary = ((((vRef * (float)params\&.pH7Cal) / 32767) * 1000) - miliVolts) / opampGain;
278 
279 
280  return( 7 - (temporary / params\&.pHStep) );
281 
282 }
.fi
.SS "double Irene3000::readTemp (adsGain_t gain)"
Irene3000::readTemp(gain): This method is provided to read the Temeperature probe
.PP
\fBReturns:\fP
.RS 4
the Temperature probe value 
.RE
.PP

.PP
Definition at line 291 of file irene3000\&.cpp\&.
.PP
References ads, setGain(), temp, and V_GAIN_8\&.
.PP
Referenced by read()\&.
.PP
.nf
292 {
293   const double A = 3\&.9083E-3;
294   const double B = -5\&.775E-7;
295   double T;
296   
297   this->setGain(gain);
298   int adc0 = ads\&.readADC_SingleEnded(temp);
299  
300 
301   double R = ((adc0 * V_GAIN_8) / 0\&.095) / 1000;
302 
303   T = 0\&.0 - A;
304   T += sqrt((A * A) - 4\&.0 * B * (1\&.0 - R));
305   T /= (2\&.0 * B);
306   if (T > 0 && T < 200) {
307     return T;
308   }
309   else {
310   
311     T = 0\&.0 - A;
312     T -= sqrt((A * A) - 4\&.0 * B * (1\&.0 - R));
313     T /= (2\&.0 * B);
314     return T;
315   }
316 
317 }
.fi
.SS "void Irene3000::resetParams (void)"
\fBIrene3000::resetParams()\fP: This method is provided to reset the PH configuration, assuming Ideal configuration 
.PP
Definition at line 373 of file irene3000\&.cpp\&.
.PP
References params, Irene3000::parameters_T::pH4Cal, Irene3000::parameters_T::pH7Cal, Irene3000::parameters_T::pHStep, Write_Check, and Irene3000::parameters_T::WriteCheck\&.
.PP
.nf
374 {
375   //Restore to default set of parameters!
376   params\&.WriteCheck = Write_Check;
377   params\&.pH7Cal = 16384; //assume ideal probe and amp conditions 1/2 of 4096
378   params\&.pH4Cal = 8192; //using ideal probe slope we end up this many 12bit units away on the 4 scale
379   params\&.pHStep = 59\&.16;//ideal probe slope
380 
381   
382 }
.fi
.SS "void Irene3000::setGain (adsGain_t gain)"
Irene3000::setGain(gain): This method is provided to set the ADS chip gain 
.PP
Definition at line 242 of file irene3000\&.cpp\&.
.PP
References ads\&.
.PP
Referenced by calibratepH4(), calibratepH7(), readADSChannel2(), readButton(), readPh(), and readTemp()\&.
.PP
.nf
243 {
244     this->ads\&.setGain(gain);
245 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "struct \fBIrene3000::state\fP Irene3000::adc2\fC [private]\fP"

.PP
Referenced by config(), printConf(), and read()\&.
.SS "Adafruit_ADS1115 Irene3000::ads\fC [private]\fP"

.PP
Definition at line 69 of file Irene3000\&.h\&.
.PP
Referenced by begin(), calibratepH4(), calibratepH7(), readADSChannel2(), readButton(), readPh(), readTemp(), and setGain()\&.
.SS "int Irene3000::ireneJsonSize\fC [private]\fP"

.PP
Definition at line 86 of file Irene3000\&.h\&.
.PP
Referenced by config(), and read()\&.
.SS "const float Irene3000::opampGain = 5\&.25\fC [private]\fP"

.PP
Definition at line 90 of file Irene3000\&.h\&.
.PP
Referenced by calcpHSlope(), and readPh()\&.
.SS "struct \fBIrene3000::parameters_T\fP Irene3000::params\fC [private]\fP"

.PP
Referenced by calcpHSlope(), calibratepH4(), calibratepH7(), readPh(), and resetParams()\&.
.SS "struct \fBIrene3000::state\fP  Irene3000::phProbe\fC [private]\fP"

.PP
Referenced by config(), printConf(), and read()\&.
.SS "const float Irene3000::vRef = 1\&.024\fC [private]\fP"

.PP
Definition at line 88 of file Irene3000\&.h\&.
.PP
Referenced by calcpHSlope(), and readPh()\&.
.SS "struct \fBIrene3000::state\fP  Irene3000::waterTemp\fC [private]\fP"

.PP
Referenced by config(), printConf(), and read()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolAPI from the source code\&.
