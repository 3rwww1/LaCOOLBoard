.TH "Irene3000" 3 "Wed Jul 5 2017" "CoolAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Irene3000 \- This class is provided to manage the \fBIrene3000\fP Ph/Temperature Shield\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Irene3000\&.h>\fP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBparameters_T\fP"
.br
.ti -1c
.RI "struct \fBstate\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBbegin\fP ()"
.br
.ti -1c
.RI "bool \fBconfig\fP ()"
.br
.ti -1c
.RI "void \fBprintConf\fP ()"
.br
.ti -1c
.RI "String \fBread\fP ()"
.br
.ti -1c
.RI "int \fBreadButton\fP (adsGain_t gain)"
.br
.ti -1c
.RI "void \fBsetGain\fP (adsGain_t gain)"
.br
.ti -1c
.RI "int \fBreadADSChannel2\fP (adsGain_t gain)"
.br
.ti -1c
.RI "float \fBreadPh\fP (adsGain_t gain)"
.br
.ti -1c
.RI "double \fBreadTemp\fP (adsGain_t gain)"
.br
.ti -1c
.RI "void \fBresetParams\fP (void)"
.br
.ti -1c
.RI "void \fBcalibratepH7\fP (adsGain_t gain)"
.br
.ti -1c
.RI "void \fBcalibratepH4\fP (adsGain_t gain)"
.br
.ti -1c
.RI "void \fBcalcpHSlope\fP ()"
.br
.ti -1c
.RI "adsGain_t \fBgainConvert\fP (uint16_t tempGain)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "Adafruit_ADS1115 \fBads\fP"
.br
.ti -1c
.RI "struct \fBIrene3000::parameters_T\fP \fBparams\fP"
.br
.ti -1c
.RI "struct \fBIrene3000::state\fP \fBwaterTemp\fP"
.br
.ti -1c
.RI "struct \fBIrene3000::state\fP \fBphProbe\fP"
.br
.ti -1c
.RI "struct \fBIrene3000::state\fP \fBadc2\fP"
.br
.ti -1c
.RI "int \fBireneJsonSize\fP =100"
.br
.ti -1c
.RI "const float \fBvRef\fP = 1\&.024"
.br
.ti -1c
.RI "const float \fBopampGain\fP = 5\&.25"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class is provided to manage the \fBIrene3000\fP Ph/Temperature Shield\&. 
.PP
Definition at line 35 of file Irene3000\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "void Irene3000::begin (void)"
\fBIrene3000::begin()\fP: This method is provided to start the \fBIrene3000\fP ADS chip 
.PP
Definition at line 22 of file irene3000\&.cpp\&.
.PP
References ads\&.
.PP
Referenced by CoolBoard::begin()\&.
.PP
.nf
23 {
24     Serial\&.println("Entering Irene3000\&.begin()");
25     Serial\&.println();
26 
27     this->ads\&.begin();
28 }
.fi
.SS "void Irene3000::calcpHSlope ()"
Irene3000::calcpHSlop(): This method is provided to calculate th PH slope 
.PP
Definition at line 454 of file irene3000\&.cpp\&.
.PP
References opampGain, params, Irene3000::parameters_T::pH4Cal, Irene3000::parameters_T::pH7Cal, Irene3000::parameters_T::pHStep, and vRef\&.
.PP
Referenced by calibratepH4(), and calibratepH7()\&.
.PP
.nf
455 {
456     Serial\&.println("Entering Irene3000\&.calcpHSlope()");
457     Serial\&.println();
458 
459     params\&.pHStep = ((((vRef * (float)(params\&.pH7Cal - params\&.pH4Cal)) / 32767) * 1000) / opampGain) / 3;
460 
461  
462 }
.fi
.SS "void Irene3000::calibratepH4 (adsGain_t gain)"
Irene3000::calibratepH4(gain): This method is provided to calibrate the PH probe to 4 
.PP
Definition at line 434 of file irene3000\&.cpp\&.
.PP
References ads, calcpHSlope(), params, ph, Irene3000::parameters_T::pH4Cal, and setGain()\&.
.PP
.nf
435 {
436     Serial\&.println("Entering Irene3000\&.calibraph4()");
437     Serial\&.println();
438     
439     this->setGain(gain);
440 
441     this->params\&.pH4Cal =  ads\&.readADC_SingleEnded(ph);
442 
443     this->calcpHSlope();
444 
445 
446 
447 }
.fi
.SS "void Irene3000::calibratepH7 (adsGain_t gain)"
Irene3000::calibratepH7(gain): This method is provided to calibrate the PH probe to 7 
.PP
Definition at line 415 of file irene3000\&.cpp\&.
.PP
References ads, calcpHSlope(), params, ph, Irene3000::parameters_T::pH7Cal, and setGain()\&.
.PP
.nf
416 {
417     Serial\&.println("Entering Irene3000\&.calibratepH7() ");
418     Serial\&.println();
419 
420     this->setGain(gain);
421         
422     this->params\&.pH7Cal = ads\&.readADC_SingleEnded(ph);
423  
424     this->calcpHSlope();
425 
426 
427 }
.fi
.SS "bool Irene3000::config ()"
\fBIrene3000::config()\fP: This method is provided to configure the \fBIrene3000\fP shield through a configuration file
.PP
\fBReturns:\fP
.RS 4
true if successful,false otherwise 
.RE
.PP

.PP
Definition at line 88 of file irene3000\&.cpp\&.
.PP
References Irene3000::state::active, adc2, Irene3000::state::gain, gainConvert(), ireneJsonSize, phProbe, Irene3000::state::type, and waterTemp\&.
.PP
Referenced by CoolBoard::begin(), and CoolBoard::update()\&.
.PP
.nf
89 {
90 
91     Serial\&.println("Entering Irene3000\&.config()");
92     Serial\&.println();
93 
94     File irene3000Config = SPIFFS\&.open("/irene3000Config\&.json", "r");
95 
96     if (!irene3000Config) 
97     {
98         Serial\&.println("failed to read /irene3000Config\&.json");
99         Serial\&.println();
100 
101         return(false);
102     }
103     else
104     {
105         size_t size = irene3000Config\&.size();
106         // Allocate a buffer to store contents of the file\&.
107         std::unique_ptr<char[]> buf(new char[size]);
108             uint16_t tempGain;
109         irene3000Config\&.readBytes(buf\&.get(), size);
110         DynamicJsonBuffer jsonBuffer;
111         JsonObject& json = jsonBuffer\&.parseObject(buf\&.get());
112         if (!json\&.success()) 
113         {
114             Serial\&.println("failed to parse json ");
115             Serial\&.println();
116             
117             return(false);
118         } 
119         else
120         {   
121             Serial\&.println("read configuration file ");
122             json\&.printTo(Serial);
123             Serial\&.println();
124             
125             if(json["ireneJsonSize"]\&.success() )
126             {
127                 this->ireneJsonSize=json["ireneJsonSize"];
128             }
129             else
130             {
131                 this->ireneJsonSize=this->ireneJsonSize;
132             }
133             json["ireneJsonSize"]=this->ireneJsonSize;
134 
135             
136             if(json["waterTemp"]["active"]\&.success() )
137             {           
138                 this->waterTemp\&.active = json["waterTemp"]["active"]; 
139             }
140             else
141             {
142                 this->waterTemp\&.active=this->waterTemp\&.active;
143             }
144             json["waterTemp"]["active"]=this->waterTemp\&.active;
145 
146             
147             if(json["waterTemp"]["gain"]\&.success() )
148             {           
149                 tempGain = json["waterTemp"]["gain"]; 
150                 this->waterTemp\&.gain=this->gainConvert(tempGain);
151             }
152             else
153             {
154                 this->waterTemp\&.gain=this->waterTemp\&.gain;
155             }
156             json["waterTemp"]["gain"]=this->waterTemp\&.gain;
157 
158             
159             if(json["phProbe"]["active"]\&.success())
160             {
161                 this->phProbe\&.active=json["phProbe"]["active"];
162             }
163             else
164             {
165                 this->phProbe\&.active=this->phProbe\&.active;
166             }
167             json["phProbe"]["active"]=this->phProbe\&.active;
168     
169             
170             if(json["phProbe"]["gain"]\&.success() )
171             {       
172                 tempGain=json["phProbe"]["gain"];
173                 this->phProbe\&.gain=this->gainConvert(tempGain);          
174             }
175             else
176             {
177                 this->phProbe\&.gain=this->phProbe\&.gain;
178             }
179             json["phProbe"]["gain"]=this->phProbe\&.gain;
180 
181             
182             if(json["adc2"]["active"]\&.success() )
183             {
184                 this->adc2\&.active=json["adc2"]["active"];
185             }
186             else
187             {
188                 this->adc2\&.active=this->adc2\&.active;
189             }
190             json["adc2"]["active"]=this->adc2\&.active;
191 
192             
193             if(json["adc2"]["gain"]\&.success() )
194             {           
195                 tempGain=json["adc2"]["gain"];
196                 this->adc2\&.gain=this->gainConvert(tempGain);
197             }
198             else
199             {
200                 this->adc2\&.gain=this->adc2\&.gain;
201             }
202             json["adc2"]["gain"]=this->adc2\&.gain;
203 
204             
205             if(json["adc2"]["type"]\&.success() )
206             {
207                 this->adc2\&.type=json["adc2"]["type"]\&.as<String>(); 
208             }
209             else
210             {
211                 this->adc2\&.type=this->adc2\&.type;
212             }
213             json["adc2"]["type"]=this->adc2\&.type;
214 
215             irene3000Config\&.close();
216             irene3000Config = SPIFFS\&.open("/irene3000Config\&.json", "w");
217 
218             if(!irene3000Config)
219             {
220                 Serial\&.println("failed to write to /irene3000Config\&.json");
221                 Serial\&.println();
222 
223                 return(false);
224             }
225 
226             json\&.printTo(irene3000Config);
227             irene3000Config\&.close();
228             
229             Serial\&.println("saved configuration file :" );
230             json\&.printTo(Serial);
231             Serial\&.println();
232 
233             return(true); 
234         }
235     }   
236 
237 }
.fi
.SS "adsGain_t Irene3000::gainConvert (uint16_t tempGain)"
\fBIrene3000::gainConvert\fP( gain : { 2/3,1,2,4,8,16 } ) This method is provided to convert the gain to Internal Constants
.PP
\fBReturns:\fP
.RS 4
internal representation of the ADS gain 
.RE
.PP

.PP
Definition at line 491 of file irene3000\&.cpp\&.
.PP
Referenced by config()\&.
.PP
.nf
492 {
493     Serial\&.println("Entering Irene3000\&.gainConvert()");
494     Serial\&.println();
495     
496     switch(tempGain)
497     {
498         case(2/3): return(GAIN_TWOTHIRDS);
499         case(1): return (GAIN_ONE);
500         case(2) : return(GAIN_TWO);
501         case(4): return(GAIN_FOUR) ;   
502         case(8):return(GAIN_EIGHT)  ;  
503         case(16):return(GAIN_SIXTEEN);  
504     }
505 
506 
507 
508 }
.fi
.SS "void Irene3000::printConf ()"
\fBIrene3000::printConf()\fP: This method is provided to print the configuration to the Serial Monitor 
.PP
Definition at line 244 of file irene3000\&.cpp\&.
.PP
References Irene3000::state::active, adc2, Irene3000::state::gain, phProbe, Irene3000::state::type, and waterTemp\&.
.PP
Referenced by CoolBoard::begin()\&.
.PP
.nf
245 {
246     Serial\&.println("Entering Irene3000\&.printConf()");
247     Serial\&.println();
248 
249     Serial\&.println("Irene Configuration ");
250 
251     Serial\&.print("waterTemp\&.active : ");
252     Serial\&.println(waterTemp\&.active);
253 
254     Serial\&.print("waterTemp\&.gain : ");
255     Serial\&.println(waterTemp\&.gain,HEX);   
256 
257     Serial\&.print("phProbe\&.active : ");
258     Serial\&.println(phProbe\&.active);
259 
260     Serial\&.print("phProbe\&.gain : ");
261     Serial\&.println(phProbe\&.gain,HEX);
262     
263     Serial\&.print("adc2\&.active : ");
264     Serial\&.println(adc2\&.active);
265 
266     Serial\&.print("adc2\&.gain : ");
267     Serial\&.println(adc2\&.gain,HEX);
268 
269     Serial\&.print("adc2\&.type : ");
270     Serial\&.println(adc2\&.type);
271 
272     Serial\&.println();
273 }
.fi
.SS "String Irene3000::read (void)"
\fBIrene3000\fP:\fBread()\fP: This method is provided to read the \fBIrene3000\fP sensors data
.PP
\fBReturns:\fP
.RS 4
json string of the sensors data 
.RE
.PP

.PP
Definition at line 38 of file irene3000\&.cpp\&.
.PP
References Irene3000::state::active, adc2, Irene3000::state::gain, ireneJsonSize, phProbe, readADSChannel2(), readPh(), readTemp(), Irene3000::state::type, and waterTemp\&.
.PP
Referenced by CoolBoard::readSensors()\&.
.PP
.nf
39 {  
40     Serial\&.println("Entering Irene3000\&.read()");
41     Serial\&.println();
42 
43     String data;
44     DynamicJsonBuffer jsonBuffer(ireneJsonSize);
45     JsonObject& root = jsonBuffer\&.createObject();
46     if( !( root\&.success()) )
47     {
48         Serial\&.println("failed to create json");
49         return("");
50     }
51 
52         
53     if(waterTemp\&.active)
54     {
55         root["waterTemp"] = this->readTemp(waterTemp\&.gain);
56 
57         if(phProbe\&.active)
58         {
59             root["ph"] =this->readPh(phProbe\&.gain) ;
60         }
61 
62     }
63 
64     if(adc2\&.active)
65     {
66         root[adc2\&.type] =this->readADSChannel2(adc2\&.gain);
67     }
68     
69     root\&.printTo(data);
70 
71     Serial\&.println("Irene data : ");
72     Serial\&.println(data);
73     Serial\&.println();
74     
75     return(data);
76     
77     
78 
79 }
.fi
.SS "int Irene3000::readADSChannel2 (adsGain_t gain)"
Irene3000::readADSChannel2(gain): This method is provided to read from the ADS channel 2 \&. ADS Channel 2 is free and the user can connect another analog sensor to it\&.
.PP
\fBReturns:\fP
.RS 4
the ADS Channel 2 value 
.RE
.PP

.PP
Definition at line 318 of file irene3000\&.cpp\&.
.PP
References ads, freeAdc, and setGain()\&.
.PP
Referenced by read()\&.
.PP
.nf
319 {  
320     Serial\&.println("Entering Irene3000\&.readADSChannel2()");
321     Serial\&.println();
322 
323     this->setGain(gain);
324     
325     Serial\&.println("adc2 value : ");
326     Serial\&.println(this->ads\&.readADC_SingleEnded(freeAdc) );
327     Serial\&.println();
328 
329     return( this->ads\&.readADC_SingleEnded(freeAdc) ) ;
330 }
.fi
.SS "int Irene3000::readButton (adsGain_t gain)"
Irene3000::readButton(gain): This method is provided to read the \fBIrene3000\fP button
.PP
\fBReturns:\fP
.RS 4
the button value 
.RE
.PP

.PP
Definition at line 282 of file irene3000\&.cpp\&.
.PP
References ads, button, and setGain()\&.
.PP
.nf
283 {
284     Serial\&.println("Entering Irene3000\&.readButton()");
285     Serial\&.println();
286 
287     this->setGain(gain);
288     
289     Serial\&.println("button value : ");
290     Serial\&.println(this->ads\&.readADC_SingleEnded(button) );
291 
292     return( this->ads\&.readADC_SingleEnded(button) );
293     
294 }
.fi
.SS "float Irene3000::readPh (adsGain_t gain)"
Irene3000::readPh(gain): This method is provided to read the PH probe note that for the best results, PH must be correlated to Temperature\&.
.PP
\fBReturns:\fP
.RS 4
the PH probe value 
.RE
.PP

.PP
Definition at line 340 of file irene3000\&.cpp\&.
.PP
References ADC_MAXIMUM_VALUE, ads, opampGain, params, ph, Irene3000::parameters_T::pH7Cal, Irene3000::parameters_T::pHStep, setGain(), and vRef\&.
.PP
Referenced by read()\&.
.PP
.nf
341 {
342     Serial\&.println("Entering Irene3000\&.readPh()");
343     Serial\&.println();
344 
345     this->setGain(gain);
346 
347     double Voltage =  gain * ( ads\&.readADC_SingleEnded(ph) ) / ADC_MAXIMUM_VALUE;
348 
349     float miliVolts = Voltage * 1000;
350     float temporary = ((((vRef * (float)params\&.pH7Cal) / 32767) * 1000) - miliVolts) / opampGain;
351 
352     Serial\&.println("ph is : ");
353     Serial\&.println( 7 - (temporary / params\&.pHStep) ) ;
354 
355     return( 7 - (temporary / params\&.pHStep) );
356 
357 }
.fi
.SS "double Irene3000::readTemp (adsGain_t gain)"
Irene3000::readTemp(gain): This method is provided to read the Temeperature probe
.PP
\fBReturns:\fP
.RS 4
the Temperature probe value 
.RE
.PP

.PP
Definition at line 366 of file irene3000\&.cpp\&.
.PP
References ads, setGain(), temp, and V_GAIN_8\&.
.PP
Referenced by read()\&.
.PP
.nf
367 {
368 
369     Serial\&.println("Entering Irene3000\&.readTemp()");
370     Serial\&.println();
371 
372     const double A = 3\&.9083E-3;
373     const double B = -5\&.775E-7;
374     double T;
375 
376     this->setGain(gain);
377     int adc0 = ads\&.readADC_SingleEnded(temp);
378 
379 
380     double R = ((adc0 * V_GAIN_8) / 0\&.095) / 1000;
381 
382     T = 0\&.0 - A;
383     T += sqrt((A * A) - 4\&.0 * B * (1\&.0 - R));
384     T /= (2\&.0 * B);
385 
386     if (T > 0 && T < 200) 
387     {
388         Serial\&.print("temperature : ");
389         Serial\&.println(T);
390         Serial\&.println();
391 
392         return T;
393     }
394     else 
395     {
396         T = 0\&.0 - A;
397         T -= sqrt((A * A) - 4\&.0 * B * (1\&.0 - R));
398         T /= (2\&.0 * B);
399         
400         Serial\&.println("temperature : ");
401         Serial\&.println(T);
402         Serial\&.println();
403 
404         return T;
405     }
406 
407 }
.fi
.SS "void Irene3000::resetParams (void)"
\fBIrene3000::resetParams()\fP: This method is provided to reset the PH configuration, assuming Ideal configuration 
.PP
Definition at line 470 of file irene3000\&.cpp\&.
.PP
References params, Irene3000::parameters_T::pH4Cal, Irene3000::parameters_T::pH7Cal, Irene3000::parameters_T::pHStep, Write_Check, and Irene3000::parameters_T::WriteCheck\&.
.PP
.nf
471 {
472     Serial\&.println("Entering Irene3000\&.resetParams()");
473     Serial\&.println();
474 
475     //Restore to default set of parameters!
476     params\&.WriteCheck = Write_Check;
477     params\&.pH7Cal = 16384; //assume ideal probe and amp conditions 1/2 of 4096
478     params\&.pH4Cal = 8192; //using ideal probe slope we end up this many 12bit units away on the 4 scale
479     params\&.pHStep = 59\&.16;//ideal probe slope
480 
481 
482 }
.fi
.SS "void Irene3000::setGain (adsGain_t gain)"
Irene3000::setGain(gain): This method is provided to set the ADS chip gain 
.PP
Definition at line 301 of file irene3000\&.cpp\&.
.PP
References ads\&.
.PP
Referenced by calibratepH4(), calibratepH7(), readADSChannel2(), readButton(), readPh(), and readTemp()\&.
.PP
.nf
302 {
303     Serial\&.println("Entering Irene3000\&.setGain()");
304     Serial\&.println();
305 
306     this->ads\&.setGain(gain);
307 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "struct \fBIrene3000::state\fP Irene3000::adc2\fC [private]\fP"

.PP
Referenced by config(), printConf(), and read()\&.
.SS "Adafruit_ADS1115 Irene3000::ads\fC [private]\fP"

.PP
Definition at line 69 of file Irene3000\&.h\&.
.PP
Referenced by begin(), calibratepH4(), calibratepH7(), readADSChannel2(), readButton(), readPh(), readTemp(), and setGain()\&.
.SS "int Irene3000::ireneJsonSize =100\fC [private]\fP"

.PP
Definition at line 86 of file Irene3000\&.h\&.
.PP
Referenced by config(), and read()\&.
.SS "const float Irene3000::opampGain = 5\&.25\fC [private]\fP"

.PP
Definition at line 90 of file Irene3000\&.h\&.
.PP
Referenced by calcpHSlope(), and readPh()\&.
.SS "struct \fBIrene3000::parameters_T\fP Irene3000::params\fC [private]\fP"

.PP
Referenced by calcpHSlope(), calibratepH4(), calibratepH7(), readPh(), and resetParams()\&.
.SS "struct \fBIrene3000::state\fP  Irene3000::phProbe\fC [private]\fP"

.PP
Referenced by config(), printConf(), and read()\&.
.SS "const float Irene3000::vRef = 1\&.024\fC [private]\fP"

.PP
Definition at line 88 of file Irene3000\&.h\&.
.PP
Referenced by calcpHSlope(), and readPh()\&.
.SS "struct \fBIrene3000::state\fP  Irene3000::waterTemp\fC [private]\fP"

.PP
Referenced by config(), printConf(), and read()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolAPI from the source code\&.
