{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 9;}
{\s50\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext51 List Continue 0;}
{\s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext52 List Continue 1;}
{\s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext53 List Continue 2;}
{\s53\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext54 List Continue 3;}
{\s54\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext55 List Continue 4;}
{\s55\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext56 List Continue 5;}
{\s56\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext57 List Continue 6;}
{\s57\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext58 List Continue 7;}
{\s58\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext59 List Continue 8;}
{\s59\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext59 List Continue 9;}
{\s60\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext61 DescContinue 0;}
{\s61\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext62 DescContinue 1;}
{\s62\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext63 DescContinue 2;}
{\s63\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext64 DescContinue 3;}
{\s64\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext65 DescContinue 4;}
{\s65\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext66 DescContinue 5;}
{\s66\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext67 DescContinue 6;}
{\s67\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext68 DescContinue 7;}
{\s68\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext69 DescContinue 8;}
{\s69\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext69 DescContinue 9;}
{\s70\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext81 LatexTOC 0;}
{\s71\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext82 LatexTOC 1;}
{\s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext83 LatexTOC 2;}
{\s73\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext84 LatexTOC 3;}
{\s74\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext85 LatexTOC 4;}
{\s75\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext86 LatexTOC 5;}
{\s76\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext87 LatexTOC 6;}
{\s77\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext88 LatexTOC 7;}
{\s78\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext89 LatexTOC 8;}
{\s79\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext89 LatexTOC 9;}
{\s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext81 \sautoupd List Bullet 0;}
{\s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid \sbasedon0 \snext82 \sautoupd List Bullet 1;}
{\s82\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls3\adjustright \fs20\cgrid \sbasedon0 \snext83 \sautoupd List Bullet 2;}
{\s83\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls4\adjustright \fs20\cgrid \sbasedon0 \snext84 \sautoupd List Bullet 3;}
{\s84\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls5\adjustright \fs20\cgrid \sbasedon0 \snext85 \sautoupd List Bullet 4;}
{\s85\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls6\adjustright \fs20\cgrid \sbasedon0 \snext86 \sautoupd List Bullet 5;}
{\s86\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls7\adjustright \fs20\cgrid \sbasedon0 \snext87 \sautoupd List Bullet 6;}
{\s87\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls8\adjustright \fs20\cgrid \sbasedon0 \snext88 \sautoupd List Bullet 7;}
{\s88\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls9\adjustright \fs20\cgrid \sbasedon0 \snext89 \sautoupd List Bullet 8;}
{\s89\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls10\adjustright \fs20\cgrid \sbasedon0 \snext89 \sautoupd List Bullet 9;}
{\s90\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext91 \sautoupd List Enum 0;}
{\s91\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext92 \sautoupd List Enum 1;}
{\s92\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext93 \sautoupd List Enum 2;}
{\s93\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext94 \sautoupd List Enum 3;}
{\s94\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext95 \sautoupd List Enum 4;}
{\s95\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext96 \sautoupd List Enum 5;}
{\s96\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext96 \sautoupd List Enum 5;}
{\s97\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext98 \sautoupd List Enum 7;}
{\s98\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext99 \sautoupd List Enum 8;}
{\s99\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext99 \sautoupd List Enum 9;}
}
{\info 
{\title {\comment CoolAPI }CoolAPI}
{\comment Generated byDoxgyen. }
{\creatim \yr2017\mo8\dy2\hr15\min11\sec41}
}\pard\plain 
\sectd\pgnlcrm
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\vertalc\qc\par\par\par\par\par\par\par
\pard\plain \s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid 
{\field\fldedit {\*\fldinst TITLE \\*MERGEFORMAT}{\fldrslt CoolAPI}}\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\par
\par\par\par\par\par\par\par\par\par\par\par\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
{\field\fldedit {\*\fldinst AUTHOR \\*MERGEFORMAT}{\fldrslt AUTHOR}}\par
Version \par{\field\fldedit {\*\fldinst CREATEDATE \\*MERGEFORMAT}{\fldrslt Wed Aug 2 2017 }}\par
\page\page\vertalt
\pard\plain 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Table of Contents\par
\pard\plain \par
{\field\fldedit {\*\fldinst TOC \\f \\*MERGEFORMAT}{\fldrslt Table of contents}}\par
\pard\plain 
\sect \sbkpage \pgndec \pgnrestart
\sect \sectd \sbknone
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Hierarchical Index\par \pard\plain 
{\tc \v Hierarchical Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Class Hierarchy\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This inheritance list is sorted roughly, but not completely, alphabetically:}
{
\par
\pard\plain \s71\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
CoolBoardSensors::airActive\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
BaseExternalSensor\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGJ \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
ExternalSensor< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
ExternalSensor< DallasTemperature >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
ExternalSensor< NDIR_I2C >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
CoolBoard\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
CoolBoardLed\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
CoolBoardSensors\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
CoolFileSystem\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
CoolMQTT\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
CoolTime\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
CoolWifi\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
ExternalSensors\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Irene3000\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Jetpack\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
CoolBoardSensors::lightActive\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Irene3000::parameters_T\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
ExternalSensors::sensor\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Irene3000::state\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Jetpack::state\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Class Index\par \pard\plain 
{\tc \v Class Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Class List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here are the classes, structs, unions and interfaces with brief descriptions:}
{
\par
\pard\plain \s71\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEW" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::airActive}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGJ" }{}}{\fldrslt {\cs37\ul\cf2 BaseExternalSensor}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class is a generic external Sensor it is a way to access real external sensor methods through run Time polymorphism })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADL" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class manages the {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADL" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard}}} and all of Its functions })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADO" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class handles the led in the Sensor Board })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADN" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class handles the On-Board Sensors })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADM" }{}}{\fldrslt {\cs37\ul\cf2 CoolFileSystem}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class handles the file system })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADR" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class handles the mqtt client })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADP" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class manages the DS1337 RTC })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADQ" }{}}{\fldrslt {\cs37\ul\cf2 CoolWifi}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class manages the WiFi connection })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGN" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor< T >}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Template<class SensorClass> class External Sensor: Derived class from {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGJ" }{}}{\fldrslt {\cs37\ul\cf2 BaseExternalSensor}}} })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHE" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor< DallasTemperature >}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
DallasTemperature Specialization Class This is the template specialization for the Dallas Temperature sensor })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHC" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor< NDIR_I2C >}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
NDIR_I2C Specialization Class This is the template specialization for the NDIR_I2C CO2 sensor })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADU" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class handles the external sensors run time defintion , configuartion and actions })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADT" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class is provided to manage the {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADT" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000}}} Ph/Temperature Shield })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADS" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class manages the {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADS" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack}}} shield })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEV" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::lightActive}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIN" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::parameters_T}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHI" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors::sensor}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIO" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::state}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIV" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack::state}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Index\par \pard\plain 
{\tc \v File Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
File List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here is a list of all files with brief descriptions:}
{
\par
\pard\plain \s71\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b /home/ashiroji/Arduino/libraries/CoolBoard/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJF" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard.cpp}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADL" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard}}} Source file })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b /home/ashiroji/Arduino/libraries/CoolBoard/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAA" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard.h}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADL" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard}}} Header file })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b /home/ashiroji/Arduino/libraries/CoolBoard/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJK" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed.cpp}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADO" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed}}} Source File })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b /home/ashiroji/Arduino/libraries/CoolBoard/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADE" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed.h}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADO" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed}}} Header File })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b /home/ashiroji/Arduino/libraries/CoolBoard/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJP" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors.cpp}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADN" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors}}} Source File })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b /home/ashiroji/Arduino/libraries/CoolBoard/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADD" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors.h}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADN" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors}}} Header File })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b /home/ashiroji/Arduino/libraries/CoolBoard/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJU" }{}}{\fldrslt {\cs37\ul\cf2 CoolFileSystem.cpp}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADM" }{}}{\fldrslt {\cs37\ul\cf2 CoolFileSystem}}} Source File })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b /home/ashiroji/Arduino/libraries/CoolBoard/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADC" }{}}{\fldrslt {\cs37\ul\cf2 CoolFileSystem.h}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADM" }{}}{\fldrslt {\cs37\ul\cf2 CoolFileSystem}}} Header File })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b /home/ashiroji/Arduino/libraries/CoolBoard/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJZ" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT.cpp}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADR" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT}}} Source File })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b /home/ashiroji/Arduino/libraries/CoolBoard/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADG" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT.h}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADR" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT}}} Header File })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b /home/ashiroji/Arduino/libraries/CoolBoard/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKE" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime.cpp}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADP" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime}}} Source File })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAKE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b /home/ashiroji/Arduino/libraries/CoolBoard/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADF" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime.h}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADP" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime}}} Header File })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b /home/ashiroji/Arduino/libraries/CoolBoard/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKM" }{}}{\fldrslt {\cs37\ul\cf2 CoolWifi.cpp}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADQ" }{}}{\fldrslt {\cs37\ul\cf2 CoolWifi}}} Source File })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAKM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b /home/ashiroji/Arduino/libraries/CoolBoard/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADK" }{}}{\fldrslt {\cs37\ul\cf2 CoolWifi.h}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADQ" }{}}{\fldrslt {\cs37\ul\cf2 CoolWifi}}} Header File })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b /home/ashiroji/Arduino/libraries/CoolBoard/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGZ" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor.h}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGN" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor}}} Header File })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b /home/ashiroji/Arduino/libraries/CoolBoard/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKU" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors.cpp}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADU" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors}}} Source File })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAKU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b /home/ashiroji/Arduino/libraries/CoolBoard/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADJ" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors.h}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADU" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors}}} Header File })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b /home/ashiroji/Arduino/libraries/CoolBoard/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKZ" }{}}{\fldrslt {\cs37\ul\cf2 irene3000.cpp}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAKZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b /home/ashiroji/Arduino/libraries/CoolBoard/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADI" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000.h}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADT" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000}}} Header File })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b /home/ashiroji/Arduino/libraries/CoolBoard/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALY" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack.cpp}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADS" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack}}} Source File })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAALY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b /home/ashiroji/Arduino/libraries/CoolBoard/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADH" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack.h}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADS" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack}}} Header File })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Class Documentation{\tc \v Class Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
CoolBoardSensors::airActive Struct Reference\par \pard\plain 
{\tc\tcl2 \v CoolBoardSensors::airActive}
{\xe \v CoolBoardSensors::airActive}
{\bkmkstart AAAAAAAAEW}
{\bkmkend AAAAAAAAEW}
Collaboration diagram for CoolBoardSensors::airActive:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structCoolBoardSensors_1_1airActive__coll__graph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
byte {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEI" }{}}{\fldrslt {\cs37\ul\cf2 temperature}}}
 =0\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
byte {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEJ" }{}}{\fldrslt {\cs37\ul\cf2 humidity}}}
 =0\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
byte {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEK" }{}}{\fldrslt {\cs37\ul\cf2 pressure}}}
 =0\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQI" }{}}{\fldrslt {\cs37\ul\cf2 87}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJT" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors.h}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v humidity\:CoolBoardSensors::airActive}
{\xe \v CoolBoardSensors::airActive\:humidity}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
byte CoolBoardSensors::airActive::humidity =0}}
\par
{\bkmkstart AAAAAAAAEJ}
{\bkmkend AAAAAAAAEJ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPS" }{}}{\fldrslt {\cs37\ul\cf2 90}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJT" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPR" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::allActive()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMX" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::config()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANQ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::printConf()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPE" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::read()}}}
.}\par
}
{\xe \v pressure\:CoolBoardSensors::airActive}
{\xe \v CoolBoardSensors::airActive\:pressure}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
byte CoolBoardSensors::airActive::pressure =0}}
\par
{\bkmkstart AAAAAAAAEK}
{\bkmkend AAAAAAAAEK}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPU" }{}}{\fldrslt {\cs37\ul\cf2 91}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJT" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPR" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::allActive()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMX" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::config()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANQ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::printConf()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPE" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::read()}}}
.}\par
}
{\xe \v temperature\:CoolBoardSensors::airActive}
{\xe \v CoolBoardSensors::airActive\:temperature}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
byte CoolBoardSensors::airActive::temperature =0}}
\par
{\bkmkstart AAAAAAAAEI}
{\bkmkend AAAAAAAAEI}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPW" }{}}{\fldrslt {\cs37\ul\cf2 89}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJT" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPR" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::allActive()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMX" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::config()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANQ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::printConf()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPE" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::read()}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADD" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors.h}}}
\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
BaseExternalSensor Class Reference\par \pard\plain 
{\tc\tcl2 \v BaseExternalSensor}
{\xe \v BaseExternalSensor}
{\bkmkstart AAAAAAAAGJ}
{\bkmkend AAAAAAAAGJ}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class is a generic external Sensor it is a way to access real external sensor methods through run Time polymorphism. }}\par
{
{\f2 #include <ExternalSensor.h>}}\par
Inheritance diagram for BaseExternalSensor:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classBaseExternalSensor__inherit__graph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for BaseExternalSensor:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classBaseExternalSensor__coll__graph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGK" }{}}{\fldrslt {\cs37\ul\cf2 BaseExternalSensor}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual uint8_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGL" }{}}{\fldrslt {\cs37\ul\cf2 begin}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGM" }{}}{\fldrslt {\cs37\ul\cf2 read}}}
 ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class is a generic external Sensor it is a way to access real external sensor methods through run Time polymorphism. \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMD" }{}}{\fldrslt {\cs37\ul\cf2 35}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKS" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor.h}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v BaseExternalSensor\:BaseExternalSensor}
{\xe \v BaseExternalSensor\:BaseExternalSensor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
BaseExternalSensor::BaseExternalSensor (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAGK}
{\bkmkend AAAAAAAAGK}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGK" }{}}{\fldrslt {\cs37\ul\cf2 BaseExternalSensor()}}}: Base class generic Constructor \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAME" }{}}{\fldrslt {\cs37\ul\cf2 43}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKS" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor.h}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    44     \{\par
   45 \par
   46     #if DEBUG == 1 \par
   47 \par
   48         Serial.println( "BaseExternalSensor Constructor" );\par
   49         Serial.println();\par
   50     \par
   51     #endif\par
   52 \par
   53     \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v begin\:BaseExternalSensor}
{\xe \v BaseExternalSensor\:begin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual uint8_t BaseExternalSensor::begin (){\f2 [inline]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAGL}
{\bkmkend AAAAAAAAGL}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGL" }{}}{\fldrslt {\cs37\ul\cf2 begin()}}}: Base class virtual generic begin method\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid generic value as it's not supposed to be used \par
}}{
Reimplemented in {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGW" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor< DallasTemperature >}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGT" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor< NDIR_I2C >}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGQ" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor< T >}}}
.}\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMF" }{}}{\fldrslt {\cs37\ul\cf2 63}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKS" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMG" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors::begin()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    64     \{\par
   65     \par
   66     #if DEBUG == 1 \par
   67     \par
   68         Serial.println( "BaseExternalSensor.begin()" );\par
   69         Serial.println();\par
   70     \par
   71     #endif\par
   72 \par
   73         return(-2);\par
   74     \}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classBaseExternalSensor_a87d132803d4f4fdd4e66332809f0c9a0_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v read\:BaseExternalSensor}
{\xe \v BaseExternalSensor\:read}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual float BaseExternalSensor::read (){\f2 [inline]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAGM}
{\bkmkend AAAAAAAAGM}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGM" }{}}{\fldrslt {\cs37\ul\cf2 read()}}}: Base class virtual generic read method\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid generic value as it is not supposed to be used \par
}}{
Reimplemented in {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGX" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor< DallasTemperature >}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGU" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor< NDIR_I2C >}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGR" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor< T >}}}
.}\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMH" }{}}{\fldrslt {\cs37\ul\cf2 85}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKS" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor.h}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    86     \{\par
   87     \par
   88     #if DEBUG == 1 \par
   89 \par
   90         Serial.println( "BaseExternalSensor.read()" );\par
   91         Serial.println();\par
   92     \par
   93     #endif      \par
   94         \par
   95         return(-2);\par
   96     \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGZ" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor.h}}}
\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
CoolBoard Class Reference\par \pard\plain 
{\tc\tcl2 \v CoolBoard}
{\xe \v CoolBoard}
{\bkmkstart AAAAAAAADL}
{\bkmkend AAAAAAAADL}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class manages the {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADL" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard}}} and all of Its functions. }}\par
{
{\f2 #include <CoolBoard.h>}}\par
Collaboration diagram for CoolBoard:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolBoard__coll__graph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAB" }{}}{\fldrslt {\cs37\ul\cf2 begin}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACO" }{}}{\fldrslt {\cs37\ul\cf2 config}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACJ" }{}}{\fldrslt {\cs37\ul\cf2 update}}}
 (const char *{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABV" }{}}{\fldrslt {\cs37\ul\cf2 answer}}}
)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACM" }{}}{\fldrslt {\cs37\ul\cf2 offLineMode}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABS" }{}}{\fldrslt {\cs37\ul\cf2 onLineMode}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABH" }{}}{\fldrslt {\cs37\ul\cf2 connect}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned long {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABR" }{}}{\fldrslt {\cs37\ul\cf2 getLogInterval}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACU" }{}}{\fldrslt {\cs37\ul\cf2 printConf}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACL" }{}}{\fldrslt {\cs37\ul\cf2 sleep}}}
 (unsigned long interval)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACF" }{}}{\fldrslt {\cs37\ul\cf2 readSensors}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACE" }{}}{\fldrslt {\cs37\ul\cf2 userData}}}
 ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADM" }{}}{\fldrslt {\cs37\ul\cf2 CoolFileSystem}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABW" }{}}{\fldrslt {\cs37\ul\cf2 fileSystem}}}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADN" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAF" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardSensors}}}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADO" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADP" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABI" }{}}{\fldrslt {\cs37\ul\cf2 rtc}}}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADQ" }{}}{\fldrslt {\cs37\ul\cf2 CoolWifi}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAJ" }{}}{\fldrslt {\cs37\ul\cf2 wifiManager}}}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADR" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAN" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADS" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAS" }{}}{\fldrslt {\cs37\ul\cf2 jetPack}}}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADT" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAX" }{}}{\fldrslt {\cs37\ul\cf2 irene3000}}}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADU" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABC" }{}}{\fldrslt {\cs37\ul\cf2 externalSensors}}}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 userActive}}}
 =0\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAW" }{}}{\fldrslt {\cs37\ul\cf2 ireneActive}}}
 =0\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAR" }{}}{\fldrslt {\cs37\ul\cf2 jetpackActive}}}
 =0\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABB" }{}}{\fldrslt {\cs37\ul\cf2 externalSensorsActive}}}
 =0\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACK" }{}}{\fldrslt {\cs37\ul\cf2 sleepActive}}}
 =0\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned long {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACS" }{}}{\fldrslt {\cs37\ul\cf2 logInterval}}}
 =1\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACT" }{}}{\fldrslt {\cs37\ul\cf2 serverTimeOut}}}
 =180\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABU" }{}}{\fldrslt {\cs37\ul\cf2 data}}}
 =""\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABV" }{}}{\fldrslt {\cs37\ul\cf2 answer}}}
 =""\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class manages the {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADL" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard}}} and all of Its functions. \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMI" }{}}{\fldrslt {\cs37\ul\cf2 33}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJJ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard.h}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v begin\:CoolBoard}
{\xe \v CoolBoard\:begin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CoolBoard::begin ()}}
\par
{\bkmkstart AAAAAAAAAB}
{\bkmkend AAAAAAAAAB}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAB" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::begin()}}}: This method is provided to configure and start the used CoolKit Parts. It also starts the first connection try If Serial is enabled,it prints the configuration of the used parts. \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMJ" }{}}{\fldrslt {\cs37\ul\cf2 37}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJH" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMK" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack::begin()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAML" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT::begin()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMG" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors::begin()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMM" }{}}{\fldrslt {\cs37\ul\cf2 CoolWifi::begin()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMN" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::begin()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMO" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime::begin()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMP" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::begin()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMQ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed::blink()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMR" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack::config()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMS" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors::config()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMT" }{}}{\fldrslt {\cs37\ul\cf2 CoolWifi::config()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMU" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT::config()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMV" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime::config()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMW" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::config()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMX" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::config()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMY" }{}}{\fldrslt {\cs37\ul\cf2 connect()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMZ" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANA" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardSensors}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANB" }{}}{\fldrslt {\cs37\ul\cf2 externalSensors}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANC" }{}}{\fldrslt {\cs37\ul\cf2 externalSensorsActive}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAND" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed::fadeOut()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANE" }{}}{\fldrslt {\cs37\ul\cf2 irene3000}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANF" }{}}{\fldrslt {\cs37\ul\cf2 ireneActive}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANG" }{}}{\fldrslt {\cs37\ul\cf2 jetPack}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANH" }{}}{\fldrslt {\cs37\ul\cf2 jetpackActive}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANI" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANJ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed::printConf()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANK" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack::printConf()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANL" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors::printConf()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANM" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT::printConf()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANN" }{}}{\fldrslt {\cs37\ul\cf2 CoolWifi::printConf()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANO" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime::printConf()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANP" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::printConf()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANQ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::printConf()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANR" }{}}{\fldrslt {\cs37\ul\cf2 rtc}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANS" }{}}{\fldrslt {\cs37\ul\cf2 wifiManager}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANT" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed::write()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    38 \{\par
   39 \par
   40 #if DEBUG == 1\par
   41 \par
   42     Serial.println( F("Starting the CoolBoard  ")  );\par
   43     Serial.println( F("Entering CoolBoard.begin() ")  );\par
   44     Serial.println();\par
   45 #endif  \par
   46     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAD" }{}}{\fldrslt {\cs37\ul\cf2 printConf}}}
();\par
   47     delay(100);\par
   48     \par
   49     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAE" }{}}{\fldrslt {\cs37\ul\cf2 write}}}
(255,128,0);//orange\par
   50     \par
   51     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAF" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardSensors}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAG" }{}}{\fldrslt {\cs37\ul\cf2 config}}}
();\par
   52     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAF" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardSensors}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAH" }{}}{\fldrslt {\cs37\ul\cf2 begin}}}
();\par
   53     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAF" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardSensors}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAI" }{}}{\fldrslt {\cs37\ul\cf2 printConf}}}
();\par
   54     delay(100);\par
   55     \par
   56     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAJ" }{}}{\fldrslt {\cs37\ul\cf2 wifiManager}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAK" }{}}{\fldrslt {\cs37\ul\cf2 config}}}
();\par
   57     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAJ" }{}}{\fldrslt {\cs37\ul\cf2 wifiManager}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAL" }{}}{\fldrslt {\cs37\ul\cf2 begin}}}
();\par
   58     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAJ" }{}}{\fldrslt {\cs37\ul\cf2 wifiManager}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAM" }{}}{\fldrslt {\cs37\ul\cf2 printConf}}}
();\par
   59     delay(100);\par
   60 \par
   61     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAN" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAO" }{}}{\fldrslt {\cs37\ul\cf2 config}}}
();\par
   62     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAN" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAP" }{}}{\fldrslt {\cs37\ul\cf2 begin}}}
();\par
   63     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAN" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAQ" }{}}{\fldrslt {\cs37\ul\cf2 printConf}}}
();\par
   64     delay(100);\par
   65 \par
   66     if ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAR" }{}}{\fldrslt {\cs37\ul\cf2 jetpackActive}}}
)\par
   67     \{\par
   68         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAS" }{}}{\fldrslt {\cs37\ul\cf2 jetPack}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAT" }{}}{\fldrslt {\cs37\ul\cf2 config}}}
();\par
   69         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAS" }{}}{\fldrslt {\cs37\ul\cf2 jetPack}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAU" }{}}{\fldrslt {\cs37\ul\cf2 begin}}}
();\par
   70         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAS" }{}}{\fldrslt {\cs37\ul\cf2 jetPack}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAV" }{}}{\fldrslt {\cs37\ul\cf2 printConf}}}
();\par
   71         delay(100);\par
   72     \}\par
   73 \par
   74     if ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAW" }{}}{\fldrslt {\cs37\ul\cf2 ireneActive}}}
)\par
   75     \{\par
   76         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAX" }{}}{\fldrslt {\cs37\ul\cf2 irene3000}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAY" }{}}{\fldrslt {\cs37\ul\cf2 config}}}
();\par
   77         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAX" }{}}{\fldrslt {\cs37\ul\cf2 irene3000}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAZ" }{}}{\fldrslt {\cs37\ul\cf2 begin}}}
();\par
   78         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAX" }{}}{\fldrslt {\cs37\ul\cf2 irene3000}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABA" }{}}{\fldrslt {\cs37\ul\cf2 printConf}}}
();\par
   79         delay(100);\par
   80     \}\par
   81 \par
   82     if ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABB" }{}}{\fldrslt {\cs37\ul\cf2 externalSensorsActive}}}
)\par
   83     \{\par
   84         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABC" }{}}{\fldrslt {\cs37\ul\cf2 externalSensors}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABD" }{}}{\fldrslt {\cs37\ul\cf2 config}}}
();\par
   85         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABC" }{}}{\fldrslt {\cs37\ul\cf2 externalSensors}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABE" }{}}{\fldrslt {\cs37\ul\cf2 begin}}}
();\par
   86         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABC" }{}}{\fldrslt {\cs37\ul\cf2 externalSensors}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABF" }{}}{\fldrslt {\cs37\ul\cf2 printConf}}}
();\par
   87         delay(100);\par
   88     \}\par
   89     \par
   90     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABG" }{}}{\fldrslt {\cs37\ul\cf2 fadeOut}}}
(255,128,0,0.5);//orange\par
   91 \par
   92     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABH" }{}}{\fldrslt {\cs37\ul\cf2 connect}}}
();\par
   93     delay(100);\par
   94 \par
   95     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABI" }{}}{\fldrslt {\cs37\ul\cf2 rtc}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABJ" }{}}{\fldrslt {\cs37\ul\cf2 config}}}
();\par
   96     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABI" }{}}{\fldrslt {\cs37\ul\cf2 rtc}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABK" }{}}{\fldrslt {\cs37\ul\cf2 begin}}}
();\par
   97     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABI" }{}}{\fldrslt {\cs37\ul\cf2 rtc}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABL" }{}}{\fldrslt {\cs37\ul\cf2 printConf}}}
();\par
   98     delay(100);\par
   99     \par
  100     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABM" }{}}{\fldrslt {\cs37\ul\cf2 blink}}}
(0,255,0,0.5);//green\par
  101 \par
  102 \}\par
}
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolBoard_acba7c5aef7268b2c0044bdb54d3b9d76_cgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v config\:CoolBoard}
{\xe \v CoolBoard\:config}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool CoolBoard::config ()}}
\par
{\bkmkstart AAAAAAAACO}
{\bkmkend AAAAAAAACO}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACO" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::config()}}}: This method is provided to configure the {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADL" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard}}} : -log interval -irene3000 activated/deactivated -jetpack activated/deactivated -external Sensors activated/deactivated -mqtt server timeout\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid true if configuration is done, false otherwise \par
}}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANU" }{}}{\fldrslt {\cs37\ul\cf2 486}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJH" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANV" }{}}{\fldrslt {\cs37\ul\cf2 CoolFileSystem::begin()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANW" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed::begin()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMQ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed::blink()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANX" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed::config()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMZ" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANC" }{}}{\fldrslt {\cs37\ul\cf2 externalSensorsActive}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANY" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed::fadeIn()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAND" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed::fadeOut()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANZ" }{}}{\fldrslt {\cs37\ul\cf2 fileSystem}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANF" }{}}{\fldrslt {\cs37\ul\cf2 ireneActive}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANH" }{}}{\fldrslt {\cs37\ul\cf2 jetpackActive}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOA" }{}}{\fldrslt {\cs37\ul\cf2 logInterval}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOB" }{}}{\fldrslt {\cs37\ul\cf2 serverTimeOut}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOC" }{}}{\fldrslt {\cs37\ul\cf2 sleepActive}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOD" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed::strobe()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOE" }{}}{\fldrslt {\cs37\ul\cf2 userActive}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   487 \{\par
  488 \par
  489 #if DEBUG == 1\par
  490 \par
  491     Serial.println( F("Entering CoolBoard.config() ") );\par
  492     Serial.println();\par
  493 \par
  494 #endif\par
  495 \par
  496     //open file system\par
  497     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABW" }{}}{\fldrslt {\cs37\ul\cf2 fileSystem}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACP" }{}}{\fldrslt {\cs37\ul\cf2 begin}}}
();\par
  498     \par
  499     //start the led\par
  500     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACQ" }{}}{\fldrslt {\cs37\ul\cf2 config}}}
();\par
  501     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACR" }{}}{\fldrslt {\cs37\ul\cf2 begin}}}
();\par
  502     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABT" }{}}{\fldrslt {\cs37\ul\cf2 fadeIn}}}
(243,171,46,0.5);//shade of orange       \par
  503 \par
  504     \par
  505     //open configuration file\par
  506     File configFile = SPIFFS.open("/coolBoardConfig.json", "r");\par
  507     \par
  508     if (!configFile)\par
  509 \par
  510     \{\par
  511     \par
  512     #if DEBUG == 1\par
  513 \par
  514         Serial.println( F("failed to read /coolBoardConfig.json  ") );\par
  515 \par
  516     #endif\par
  517         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABM" }{}}{\fldrslt {\cs37\ul\cf2 blink}}}
(255,0,0,0.5);//shade of red      \par
  518         return(false);\par
  519     \}\par
  520 \par
  521     else\par
  522     \{\par
  523         size_t size = configFile.size();\par
  524 \par
  525         // Allocate a buffer to store contents of the file.\par
  526         std::unique_ptr < char[] > buf(new char[size]);\par
  527 \par
  528         configFile.readBytes(buf.get(), size);\par
  529 \par
  530         DynamicJsonBuffer jsonBuffer;\par
  531 \par
  532         JsonObject & json = jsonBuffer.parseObject(buf.get());\par
  533 \par
  534         if (!json.success())\par
  535         \{\par
  536         \par
  537         #if DEBUG == 1\par
  538 \par
  539             Serial.println( F("failed to parse CoolBoard Config json object ") );\par
  540     \par
  541         #endif\par
  542             {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABM" }{}}{\fldrslt {\cs37\ul\cf2 blink}}}
(255,0,0,0.5);//shade of red      \par
  543             return(false);\par
  544         \}\par
  545 \par
  546         else\par
  547         \{   \par
  548         \par
  549         #if DEBUG == 1\par
  550             \par
  551             Serial.println( F("configuration json : ") );\par
  552             json.printTo(Serial);\par
  553             Serial.println();\par
  554             \par
  555             Serial.print(F("jsonBuffer size : "));\par
  556             Serial.print(jsonBuffer.size());\par
  557             Serial.println();\par
  558 \par
  559         #endif\par
  560             \par
  561             //parsing userActive Key\par
  562             if (json["userActive"].success())\par
  563             \{\par
  564                 this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 userActive}}}
 = json["userActive"];\par
  565             \}\par
  566 \par
  567             else\par
  568             \{\par
  569                 this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 userActive}}}
 = this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 userActive}}}
;\par
  570             \}\par
  571             json["userActive"] = this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 userActive}}}
;\par
  572 \par
  573             //parsing logInterval key\par
  574             if (json["logInterval"].success())\par
  575             \{\par
  576                 this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACS" }{}}{\fldrslt {\cs37\ul\cf2 logInterval}}}
 = json["logInterval"];\par
  577             \}\par
  578             else\par
  579             \{\par
  580                 this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACS" }{}}{\fldrslt {\cs37\ul\cf2 logInterval}}}
 = this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACS" }{}}{\fldrslt {\cs37\ul\cf2 logInterval}}}
;\par
  581             \}\par
  582             json["logInterval"] = this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACS" }{}}{\fldrslt {\cs37\ul\cf2 logInterval}}}
;\par
  583             \par
  584             //parsing ireneActive key           \par
  585             if (json["ireneActive"].success())\par
  586             \{\par
  587                 this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAW" }{}}{\fldrslt {\cs37\ul\cf2 ireneActive}}}
 = json["ireneActive"];\par
  588             \}\par
  589             else\par
  590             \{\par
  591                 this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAW" }{}}{\fldrslt {\cs37\ul\cf2 ireneActive}}}
 = this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAW" }{}}{\fldrslt {\cs37\ul\cf2 ireneActive}}}
;\par
  592             \}\par
  593             json["ireneActive"] = this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAW" }{}}{\fldrslt {\cs37\ul\cf2 ireneActive}}}
;\par
  594             \par
  595             //parsing jetpackActive key\par
  596             if (json["jetpackActive"].success())\par
  597             \{\par
  598                 this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAR" }{}}{\fldrslt {\cs37\ul\cf2 jetpackActive}}}
 = json["jetpackActive"];\par
  599             \}\par
  600             else\par
  601             \{\par
  602                 this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAR" }{}}{\fldrslt {\cs37\ul\cf2 jetpackActive}}}
 = this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAR" }{}}{\fldrslt {\cs37\ul\cf2 jetpackActive}}}
;\par
  603             \}\par
  604             json["jetpackActive"] = this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAR" }{}}{\fldrslt {\cs37\ul\cf2 jetpackActive}}}
;\par
  605 \par
  606             //parsing externalSensorsActive key\par
  607             if (json["externalSensorsActive"].success())\par
  608             \{\par
  609                 this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABB" }{}}{\fldrslt {\cs37\ul\cf2 externalSensorsActive}}}
 = json["externalSensorsActive"];\par
  610             \}\par
  611             else\par
  612             \{\par
  613                 this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABB" }{}}{\fldrslt {\cs37\ul\cf2 externalSensorsActive}}}
 = this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABB" }{}}{\fldrslt {\cs37\ul\cf2 externalSensorsActive}}}
;\par
  614             \}\par
  615             json["externalSensorsActive"] = this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABB" }{}}{\fldrslt {\cs37\ul\cf2 externalSensorsActive}}}
;\par
  616 \par
  617             //parsing serverTimeOut key\par
  618             if (json["serverTimeOut"].success())\par
  619             \{\par
  620                 this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACT" }{}}{\fldrslt {\cs37\ul\cf2 serverTimeOut}}}
 = json["serverTimeOut"];\par
  621             \}\par
  622             else\par
  623             \{\par
  624                 this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACT" }{}}{\fldrslt {\cs37\ul\cf2 serverTimeOut}}}
 = this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACT" }{}}{\fldrslt {\cs37\ul\cf2 serverTimeOut}}}
;\par
  625             \}\par
  626             json["serverTimeOut"] = this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACT" }{}}{\fldrslt {\cs37\ul\cf2 serverTimeOut}}}
;\par
  627             \par
  628             //parsing sleepActive key\par
  629             if (json["sleepActive"].success())\par
  630             \{\par
  631                 this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACK" }{}}{\fldrslt {\cs37\ul\cf2 sleepActive}}}
 = json["sleepActive"];\par
  632             \}\par
  633             else\par
  634             \{\par
  635                 this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACK" }{}}{\fldrslt {\cs37\ul\cf2 sleepActive}}}
 = this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACK" }{}}{\fldrslt {\cs37\ul\cf2 sleepActive}}}
;\par
  636             \}\par
  637             json["sleepActive"] = this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACK" }{}}{\fldrslt {\cs37\ul\cf2 sleepActive}}}
;\par
  638 \par
  639             //saving the current/correct configuration\par
  640             configFile.close();\par
  641             configFile = SPIFFS.open("/coolBoardConfig.json", "w");\par
  642             if (!configFile)\par
  643             \{\par
  644             \par
  645             #if DEBUG == 1\par
  646 \par
  647                 Serial.println( F("failed to write to /coolBoardConfig.json") );\par
  648                 Serial.println();\par
  649             \par
  650             #endif\par
  651                 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABM" }{}}{\fldrslt {\cs37\ul\cf2 blink}}}
(255,0,0,0.5);//shade of red      \par
  652                 return(false);\par
  653             \}\par
  654 \par
  655             json.printTo(configFile);\par
  656             configFile.close();\par
  657             return(true);\par
  658         \}\par
  659     \}\par
  660 \par
  661     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABY" }{}}{\fldrslt {\cs37\ul\cf2 strobe}}}
(243,171,46,0.5);//shade of orange\par
  662     \par
  663     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABG" }{}}{\fldrslt {\cs37\ul\cf2 fadeOut}}}
(243,171,46,0.5);//shade of orange              \par
  664 \}\par
}
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolBoard_a583a874c09c07e70a6eb9229fc4beddb_cgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v connect\:CoolBoard}
{\xe \v CoolBoard\:connect}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int CoolBoard::connect ()}}
\par
{\bkmkstart AAAAAAAABH}
{\bkmkend AAAAAAAABH}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABH" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::connect()}}}: This method is provided to manage the network connection and the mqtt connection.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid mqtt client state \par
}}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMY" }{}}{\fldrslt {\cs37\ul\cf2 111}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJH" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMQ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed::blink()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOF" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT::connect()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOG" }{}}{\fldrslt {\cs37\ul\cf2 CoolWifi::connect()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMZ" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOH" }{}}{\fldrslt {\cs37\ul\cf2 getLogInterval()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANI" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOI" }{}}{\fldrslt {\cs37\ul\cf2 CoolWifi::state()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOJ" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT::state()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANS" }{}}{\fldrslt {\cs37\ul\cf2 wifiManager}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANT" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed::write()}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMJ" }{}}{\fldrslt {\cs37\ul\cf2 begin()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   112 \{\par
  113 \par
  114 #if DEBUG == 1  \par
  115 \par
  116     Serial.println( F("Entering CoolBoard.connect ") );\par
  117     Serial.println();\par
  118     Serial.println( F("Connecting the CoolBoard  ") );\par
  119     delay(100);\par
  120 \par
  121 #endif\par
  122     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAE" }{}}{\fldrslt {\cs37\ul\cf2 write}}}
(0,0,255);//blue\par
  123 \par
  124     if ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAJ" }{}}{\fldrslt {\cs37\ul\cf2 wifiManager}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABN" }{}}{\fldrslt {\cs37\ul\cf2 state}}}
() != WL_CONNECTED)\par
  125     \{       \par
  126     \par
  127     #if DEBUG == 1      \par
  128 \par
  129         Serial.println( F("CoolBoard not connected to WiFi ") );\par
  130         Serial.println( F("Launching CoolWifi") );\par
  131         Serial.println();\par
  132 \par
  133     #endif\par
  134         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAJ" }{}}{\fldrslt {\cs37\ul\cf2 wifiManager}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABO" }{}}{\fldrslt {\cs37\ul\cf2 connect}}}
();\par
  135         delay(100);\par
  136     \}\par
  137 \par
  138 \par
  139     \par
  140     if ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAN" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABP" }{}}{\fldrslt {\cs37\ul\cf2 state}}}
() != 0)\par
  141     \{   \par
  142     \par
  143     #if DEBUG == 1  \par
  144     \par
  145         Serial.println( F("CoolBoard not connected to MQTT ") );\par
  146         Serial.println( F("Launching mqtt.connect()") );\par
  147         Serial.println();\par
  148 \par
  149     #endif  \par
  150         //logInterval in seconds\par
  151         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAN" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABQ" }{}}{\fldrslt {\cs37\ul\cf2 connect}}}
(this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABR" }{}}{\fldrslt {\cs37\ul\cf2 getLogInterval}}}
());\par
  152         delay(100);\par
  153         \par
  154     \}\par
  155     \par
  156 #if DEBUG == 1\par
  157 \par
  158     Serial.println( F("mqtt state is :") );\par
  159     Serial.println({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAN" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABP" }{}}{\fldrslt {\cs37\ul\cf2 state}}}
());\par
  160     Serial.println();\par
  161     delay(100);\par
  162 \par
  163 #endif\par
  164 \par
  165     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABM" }{}}{\fldrslt {\cs37\ul\cf2 blink}}}
(0,0,255,0.5);//blue\par
  166 \par
  167     return({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAN" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABP" }{}}{\fldrslt {\cs37\ul\cf2 state}}}
());\par
  168 \}\par
}
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolBoard_a519de78b807f8ec6463ff484eb925918_cgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolBoard_a519de78b807f8ec6463ff484eb925918_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v getLogInterval\:CoolBoard}
{\xe \v CoolBoard\:getLogInterval}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned long CoolBoard::getLogInterval ()}}
\par
{\bkmkstart AAAAAAAABR}
{\bkmkend AAAAAAAABR}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABR" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::getLogInterval()}}}: This method is provided to get the log interval\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid interval value in s \par
}}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOH" }{}}{\fldrslt {\cs37\ul\cf2 864}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJH" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOA" }{}}{\fldrslt {\cs37\ul\cf2 logInterval}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMY" }{}}{\fldrslt {\cs37\ul\cf2 connect()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOK" }{}}{\fldrslt {\cs37\ul\cf2 onLineMode()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   865 \{\par
  866 \par
  867 #if DEBUG == 1\par
  868 \par
  869     Serial.println( F("Entering CoolBoard.getLogInterval() ") );\par
  870     Serial.println();\par
  871     Serial.println( F("log Interval is :") );\par
  872     Serial.println({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACS" }{}}{\fldrslt {\cs37\ul\cf2 logInterval}}}
);\par
  873     Serial.println();\par
  874 \par
  875 #endif\par
  876 \par
  877     return(this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACS" }{}}{\fldrslt {\cs37\ul\cf2 logInterval}}}
);\par
  878 \}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolBoard_a7508e029f2ee17bb747ffab599285e0d_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v offLineMode\:CoolBoard}
{\xe \v CoolBoard\:offLineMode}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CoolBoard::offLineMode ()}}
\par
{\bkmkstart AAAAAAAACM}
{\bkmkend AAAAAAAACM}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
CoolBoard::offlineMode(): This method is provided to manage the offLine mode: -read sensors -do actions -save data in the file system \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOL" }{}}{\fldrslt {\cs37\ul\cf2 381}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJH" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMQ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed::blink()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMZ" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOM" }{}}{\fldrslt {\cs37\ul\cf2 data}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAON" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack::doAction()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOO" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed::fade()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANY" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed::fadeIn()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAND" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed::fadeOut()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANZ" }{}}{\fldrslt {\cs37\ul\cf2 fileSystem}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANG" }{}}{\fldrslt {\cs37\ul\cf2 jetPack}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANH" }{}}{\fldrslt {\cs37\ul\cf2 jetpackActive}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOP" }{}}{\fldrslt {\cs37\ul\cf2 readSensors()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOQ" }{}}{\fldrslt {\cs37\ul\cf2 CoolFileSystem::saveSensorData()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOE" }{}}{\fldrslt {\cs37\ul\cf2 userActive}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOR" }{}}{\fldrslt {\cs37\ul\cf2 userData()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   382 \{\par
  383     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACG" }{}}{\fldrslt {\cs37\ul\cf2 fade}}}
(51,100,50,0.5);//dark shade of green  \par
  384 #if DEBUG == 1  \par
  385     \par
  386     Serial.println( F("Entering off line mode ") ); \par
  387     \par
  388 #endif\par
  389 \par
  390     //read user data if user is active\par
  391     if({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 userActive}}}
)\par
  392     \{\par
  393 \par
  394         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABT" }{}}{\fldrslt {\cs37\ul\cf2 fadeIn}}}
(245,237,27,0.5);//shade of yellow\par
  395 \par
  396     #if DEBUG == 1\par
  397         \par
  398         Serial.println( F("User is Active") );\par
  399         Serial.println( F("Collecting User's data ( mac,username,timeStamp )") );\par
  400         Serial.println();\par
  401 \par
  402     #endif\par
  403 \par
  404         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABM" }{}}{\fldrslt {\cs37\ul\cf2 blink}}}
(245,237,27,0.5);//shade of yellow    \par
  405 \par
  406         //reading user data\par
  407         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABU" }{}}{\fldrslt {\cs37\ul\cf2 data}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACE" }{}}{\fldrslt {\cs37\ul\cf2 userData}}}
();//\{"":"","":"","",""\}\par
  408 \par
  409         //formatting json \par
  410         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABU" }{}}{\fldrslt {\cs37\ul\cf2 data}}}
.setCharAt( {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABU" }{}}{\fldrslt {\cs37\ul\cf2 data}}}
.lastIndexOf('\}') , ',');//\{"":"","":"","","",\par
  411         \par
  412                 \par
  413         //read sensors data\par
  414     #if DEBUG == 1\par
  415 \par
  416         Serial.println( F("Collecting sensors data ") );\par
  417         Serial.println();\par
  418 \par
  419     #endif\par
  420 \par
  421         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABU" }{}}{\fldrslt {\cs37\ul\cf2 data}}}
+=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACF" }{}}{\fldrslt {\cs37\ul\cf2 readSensors}}}
();//\{"":"","":"","","",\{.......\}\par
  422 \par
  423         \par
  424 \par
  425         //formatting json correctly\par
  426         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABU" }{}}{\fldrslt {\cs37\ul\cf2 data}}}
.remove({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABU" }{}}{\fldrslt {\cs37\ul\cf2 data}}}
.lastIndexOf('\{'), 1);//\{"":"","":"","","",.......\}\par
  427 \par
  428         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABG" }{}}{\fldrslt {\cs37\ul\cf2 fadeOut}}}
(245,237,27,0.5);//shade of yellow\par
  429                 \par
  430     \}   \par
  431     else\par
  432     \{\par
  433         //read sensors data\par
  434     #if DEBUG == 1\par
  435 \par
  436         Serial.println( F("Collecting sensors data ") );\par
  437         Serial.println();\par
  438 \par
  439     #endif\par
  440 \par
  441         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACG" }{}}{\fldrslt {\cs37\ul\cf2 fade}}}
(190,100,150,0.5);//shade of violet        \par
  442 \par
  443         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABU" }{}}{\fldrslt {\cs37\ul\cf2 data}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACF" }{}}{\fldrslt {\cs37\ul\cf2 readSensors}}}
();//\{..,..,..\}\par
  444     \}\par
  445 \par
  446     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACG" }{}}{\fldrslt {\cs37\ul\cf2 fade}}}
(51,100,50,0.5);//dark shade of green  \par
  447 \par
  448     //do action\par
  449     if ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAR" }{}}{\fldrslt {\cs37\ul\cf2 jetpackActive}}}
)\par
  450     \{\par
  451 \par
  452     #if DEBUG == 1\par
  453 \par
  454         Serial.println( F("jetpack is Active ") );\par
  455         Serial.println( F("jetpack doing action ") );\par
  456         Serial.println();\par
  457     \par
  458     #endif\par
  459         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACG" }{}}{\fldrslt {\cs37\ul\cf2 fade}}}
(100,100,150,0.5);//dark shade of blue \par
  460     \par
  461         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAS" }{}}{\fldrslt {\cs37\ul\cf2 jetPack}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACH" }{}}{\fldrslt {\cs37\ul\cf2 doAction}}}
( {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABU" }{}}{\fldrslt {\cs37\ul\cf2 data}}}
.c_str() );\par
  462     \}\par
  463     \par
  464     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACG" }{}}{\fldrslt {\cs37\ul\cf2 fade}}}
(51,100,50,0.5);//dark shade of green  \par
  465     \par
  466     //saving data in the file system\par
  467     \par
  468     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABW" }{}}{\fldrslt {\cs37\ul\cf2 fileSystem}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACN" }{}}{\fldrslt {\cs37\ul\cf2 saveSensorData}}}
( {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABU" }{}}{\fldrslt {\cs37\ul\cf2 data}}}
.c_str() );\par
  469 \par
  470     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABG" }{}}{\fldrslt {\cs37\ul\cf2 fadeOut}}}
(51,100,50,0.5);//dark shade of green   \par
  471 \par
  472 \}\par
}
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolBoard_ae6b5e1274d760462290192acea4adca8_cgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v onLineMode\:CoolBoard}
{\xe \v CoolBoard\:onLineMode}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CoolBoard::onLineMode ()}}
\par
{\bkmkstart AAAAAAAABS}
{\bkmkend AAAAAAAABS}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABS" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::onLineMode()}}}: This method is provided to manage the online mode: -update clock -read sensor -do actions -publish data -read answer -update config \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOK" }{}}{\fldrslt {\cs37\ul\cf2 180}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJH" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOS" }{}}{\fldrslt {\cs37\ul\cf2 answer}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMQ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed::blink()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMZ" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOM" }{}}{\fldrslt {\cs37\ul\cf2 data}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAON" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack::doAction()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOO" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed::fade()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANY" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed::fadeIn()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAND" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed::fadeOut()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANZ" }{}}{\fldrslt {\cs37\ul\cf2 fileSystem}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOH" }{}}{\fldrslt {\cs37\ul\cf2 getLogInterval()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOT" }{}}{\fldrslt {\cs37\ul\cf2 CoolFileSystem::getSensorSavedData()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOU" }{}}{\fldrslt {\cs37\ul\cf2 CoolFileSystem::isDataSaved()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANG" }{}}{\fldrslt {\cs37\ul\cf2 jetPack}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANH" }{}}{\fldrslt {\cs37\ul\cf2 jetpackActive}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANI" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOV" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT::mqttLoop()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOW" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT::publish()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOX" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT::read()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOP" }{}}{\fldrslt {\cs37\ul\cf2 readSensors()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANR" }{}}{\fldrslt {\cs37\ul\cf2 rtc}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOY" }{}}{\fldrslt {\cs37\ul\cf2 sleep()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOC" }{}}{\fldrslt {\cs37\ul\cf2 sleepActive}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOD" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed::strobe()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOZ" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime::update()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPA" }{}}{\fldrslt {\cs37\ul\cf2 update()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOE" }{}}{\fldrslt {\cs37\ul\cf2 userActive}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOR" }{}}{\fldrslt {\cs37\ul\cf2 userData()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   181 \{\par
  182 \par
  183     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABT" }{}}{\fldrslt {\cs37\ul\cf2 fadeIn}}}
(128,255,50,0.5);//shade of green\par
  184 \par
  185 #if DEBUG == 1\par
  186 \par
  187     Serial.println( F("Entering CoolBoard.onLineMode() ") );\par
  188     Serial.println();\par
  189 \par
  190 #endif\par
  191 \par
  192     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABU" }{}}{\fldrslt {\cs37\ul\cf2 data}}}
="";\par
  193     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABV" }{}}{\fldrslt {\cs37\ul\cf2 answer}}}
="";\par
  194 \par
  195     //send saved data if any\par
  196     if({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABW" }{}}{\fldrslt {\cs37\ul\cf2 fileSystem}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABX" }{}}{\fldrslt {\cs37\ul\cf2 isDataSaved}}}
())\par
  197     \{\par
  198 \par
  199         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABT" }{}}{\fldrslt {\cs37\ul\cf2 fadeIn}}}
(128,128,255,0.5);//shade of blue\par
  200 \par
  201     #if DEBUG == 1\par
  202 \par
  203         Serial.println( F("There is data saved on the File System") );\par
  204         Serial.println( F("Sending saved data over MQTT ") );\par
  205         Serial.println();\par
  206     \par
  207     #endif  \par
  208         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABY" }{}}{\fldrslt {\cs37\ul\cf2 strobe}}}
(128,128,255,0.5);//shade of blue \par
  209 \par
  210         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAN" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABZ" }{}}{\fldrslt {\cs37\ul\cf2 publish}}}
("sending saved data");\par
  211         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAN" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACA" }{}}{\fldrslt {\cs37\ul\cf2 mqttLoop}}}
();\par
  212 \par
  213         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABU" }{}}{\fldrslt {\cs37\ul\cf2 data}}}
+={\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABW" }{}}{\fldrslt {\cs37\ul\cf2 fileSystem}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACB" }{}}{\fldrslt {\cs37\ul\cf2 getSensorSavedData}}}
();//\{..,..,..\}\par
  214 \par
  215         //formatting data:\par
  216         String jsonData = "\{\\"state\\":\{\\"reported\\":";\par
  217         jsonData += {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABU" }{}}{\fldrslt {\cs37\ul\cf2 data}}}
; // \{"state":\{"reported":\{..,..,..,..,..,..,..,..\}\par
  218         jsonData += " \} \}"; // \{"state":\{"reported":\{..,..,..,..,..,..,..,..\}  \} \}\par
  219         \par
  220         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABY" }{}}{\fldrslt {\cs37\ul\cf2 strobe}}}
(128,128,255,0.5);//shade of blue\par
  221         \par
  222         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAN" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABZ" }{}}{\fldrslt {\cs37\ul\cf2 publish}}}
( {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABU" }{}}{\fldrslt {\cs37\ul\cf2 data}}}
.c_str() );\par
  223         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAN" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACA" }{}}{\fldrslt {\cs37\ul\cf2 mqttLoop}}}
();\par
  224         \par
  225         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABG" }{}}{\fldrslt {\cs37\ul\cf2 fadeOut}}}
(128,128,255,0.5);//shade of blue       \par
  226     \par
  227     #if DEBUG == 1\par
  228 \par
  229         Serial.println( F("Saved data sent ") );\par
  230         Serial.println();\par
  231     \par
  232     #endif\par
  233 \par
  234     \}\par
  235 \par
  236     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABM" }{}}{\fldrslt {\cs37\ul\cf2 blink}}}
(128,255,50,0.5);//shade of green\par
  237 \par
  238     //clock update\par
  239     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABI" }{}}{\fldrslt {\cs37\ul\cf2 rtc}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACC" }{}}{\fldrslt {\cs37\ul\cf2 update}}}
();\par
  240 \par
  241     //read user data if user is active\par
  242     if({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 userActive}}}
)\par
  243     \{\par
  244         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABT" }{}}{\fldrslt {\cs37\ul\cf2 fadeIn}}}
(245,237,27,0.5);//shade of yellow\par
  245     \par
  246     #if DEBUG == 1\par
  247 \par
  248         Serial.println( F("User is Active") );\par
  249         Serial.println( F("Collecting User's data ( mac,username,timeStamp )") );\par
  250         Serial.println();\par
  251     \par
  252     #endif  \par
  253         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABM" }{}}{\fldrslt {\cs37\ul\cf2 blink}}}
(245,237,27,0.5);//shade of yellow    \par
  254 \par
  255         //reading user data\par
  256         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABU" }{}}{\fldrslt {\cs37\ul\cf2 data}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACE" }{}}{\fldrslt {\cs37\ul\cf2 userData}}}
();//\{"":"","":"","",""\}\par
  257 \par
  258         //formatting json \par
  259         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABU" }{}}{\fldrslt {\cs37\ul\cf2 data}}}
.setCharAt( {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABU" }{}}{\fldrslt {\cs37\ul\cf2 data}}}
.lastIndexOf('\}') , ',');//\{"":"","":"","","",\par
  260                 \par
  261         //read sensors data\par
  262     #if DEBUG == 1\par
  263 \par
  264         Serial.println( F("Collecting sensors data ") );\par
  265         Serial.println();\par
  266     \par
  267     #endif\par
  268 \par
  269         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABU" }{}}{\fldrslt {\cs37\ul\cf2 data}}}
+=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACF" }{}}{\fldrslt {\cs37\ul\cf2 readSensors}}}
();//\{"":"","":"","","",\{.......\}        \par
  270 \par
  271         //formatting json correctly\par
  272         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABU" }{}}{\fldrslt {\cs37\ul\cf2 data}}}
.remove({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABU" }{}}{\fldrslt {\cs37\ul\cf2 data}}}
.lastIndexOf('\{'), 1);//\{"":"","":"","","",.......\}\par
  273         \par
  274         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABG" }{}}{\fldrslt {\cs37\ul\cf2 fadeOut}}}
(245,237,27,0.5);//shade of yellow\par
  275                 \par
  276     \}   \par
  277     else\par
  278     \{\par
  279         //read sensors data\par
  280     #if DEBUG == 1\par
  281 \par
  282         Serial.println( F("Collecting sensors data ") );\par
  283         Serial.println();\par
  284     \par
  285     #endif\par
  286         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACG" }{}}{\fldrslt {\cs37\ul\cf2 fade}}}
(190,100,150,0.5);//shade of violet        \par
  287         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABU" }{}}{\fldrslt {\cs37\ul\cf2 data}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACF" }{}}{\fldrslt {\cs37\ul\cf2 readSensors}}}
();//\{..,..,..\}\par
  288     \}\par
  289     \par
  290     //do action\par
  291     if ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAR" }{}}{\fldrslt {\cs37\ul\cf2 jetpackActive}}}
)\par
  292     \{\par
  293     \par
  294     #if DEBUG ==1\par
  295 \par
  296         Serial.println( F("jetpack is Active ") );\par
  297         Serial.println( F("jetpack doing action ") );\par
  298         Serial.println();\par
  299 \par
  300     #endif\par
  301         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACG" }{}}{\fldrslt {\cs37\ul\cf2 fade}}}
(100,100,150,0.5);//dark shade of blue     \par
  302         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAS" }{}}{\fldrslt {\cs37\ul\cf2 jetPack}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACH" }{}}{\fldrslt {\cs37\ul\cf2 doAction}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABU" }{}}{\fldrslt {\cs37\ul\cf2 data}}}
.c_str());\par
  303     \}\par
  304     \par
  305     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABT" }{}}{\fldrslt {\cs37\ul\cf2 fadeIn}}}
(128,255,50,0.5);//shade of green\par
  306 \par
  307     //formatting data:\par
  308     String jsonData = "\{\\"state\\":\{\\"reported\\":";\par
  309     jsonData += {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABU" }{}}{\fldrslt {\cs37\ul\cf2 data}}}
; // \{"state":\{"reported":\{..,..,..,..,..,..,..,..\}\par
  310     jsonData += " \} \}"; // \{"state":\{"reported":\{..,..,..,..,..,..,..,..\}  \} \}\par
  311     \par
  312     //mqtt client loop to allow data handling\par
  313     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAN" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACA" }{}}{\fldrslt {\cs37\ul\cf2 mqttLoop}}}
();\par
  314 \par
  315     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABM" }{}}{\fldrslt {\cs37\ul\cf2 blink}}}
(128,255,50,0.5);//shade of green \par
  316 \par
  317     //read mqtt answer\par
  318     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABV" }{}}{\fldrslt {\cs37\ul\cf2 answer}}}
 = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAN" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACI" }{}}{\fldrslt {\cs37\ul\cf2 read}}}
();\par
  319 \par
  320 #if DEBUG == 1 \par
  321 \par
  322     Serial.println( F("checking if there's an MQTT message ")  );\par
  323     Serial.println( F("answer is : ") );    \par
  324     Serial.println({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABV" }{}}{\fldrslt {\cs37\ul\cf2 answer}}}
); \par
  325     Serial.println();\par
  326 \par
  327 #endif  \par
  328 \par
  329     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABG" }{}}{\fldrslt {\cs37\ul\cf2 fadeOut}}}
(128,255,50,0.5);//shade of green   \par
  330 \par
  331     //check if the configuration needs update \par
  332     //and update it if needed \par
  333     this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACJ" }{}}{\fldrslt {\cs37\ul\cf2 update}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABV" }{}}{\fldrslt {\cs37\ul\cf2 answer}}}
.c_str());\par
  334     \par
  335     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABT" }{}}{\fldrslt {\cs37\ul\cf2 fadeIn}}}
(128,255,50,0.5);//shade of green    \par
  336 \par
  337     //publishing data   \par
  338     if( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACK" }{}}{\fldrslt {\cs37\ul\cf2 sleepActive}}}
==0)   \par
  339     \{   \par
  340         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABY" }{}}{\fldrslt {\cs37\ul\cf2 strobe}}}
(255,0,230,0.5);//shade of pink\par
  341         \par
  342         //logInterval in seconds\par
  343         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAN" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABZ" }{}}{\fldrslt {\cs37\ul\cf2 publish}}}
( jsonData.c_str(), this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABR" }{}}{\fldrslt {\cs37\ul\cf2 getLogInterval}}}
() );\par
  344         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAN" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACA" }{}}{\fldrslt {\cs37\ul\cf2 mqttLoop}}}
();\par
  345     \par
  346     \}\par
  347     else\par
  348     \{\par
  349         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABY" }{}}{\fldrslt {\cs37\ul\cf2 strobe}}}
(230,255,0,0.5);//shade of yellow    \par
  350 \par
  351         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAN" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABZ" }{}}{\fldrslt {\cs37\ul\cf2 publish}}}
(jsonData.c_str());     \par
  352         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAN" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACA" }{}}{\fldrslt {\cs37\ul\cf2 mqttLoop}}}
();\par
  353         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABV" }{}}{\fldrslt {\cs37\ul\cf2 answer}}}
 = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAN" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACI" }{}}{\fldrslt {\cs37\ul\cf2 read}}}
();\par
  354         this ->update({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABV" }{}}{\fldrslt {\cs37\ul\cf2 answer}}}
.c_str());\par
  355 \par
  356         //logInterval in seconds\par
  357         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACL" }{}}{\fldrslt {\cs37\ul\cf2 sleep}}}
( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABR" }{}}{\fldrslt {\cs37\ul\cf2 getLogInterval}}}
() ) ;\par
  358     \}\par
  359 \par
  360     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABG" }{}}{\fldrslt {\cs37\ul\cf2 fadeOut}}}
(128,255,50,0.5);//shade of green       \par
  361 \par
  362     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAN" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACA" }{}}{\fldrslt {\cs37\ul\cf2 mqttLoop}}}
();\par
  363 \par
  364     //read mqtt answer\par
  365     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABV" }{}}{\fldrslt {\cs37\ul\cf2 answer}}}
 = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAN" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACI" }{}}{\fldrslt {\cs37\ul\cf2 read}}}
();\par
  366     this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACJ" }{}}{\fldrslt {\cs37\ul\cf2 update}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABV" }{}}{\fldrslt {\cs37\ul\cf2 answer}}}
.c_str()); \par
  367 \par
  368     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABM" }{}}{\fldrslt {\cs37\ul\cf2 blink}}}
(128,255,50,0.5);//shade of green \par
  369 \par
  370 \par
  371 \}\par
}
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolBoard_aa0bbc4bc605e35618d18e68795c61363_cgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v printConf\:CoolBoard}
{\xe \v CoolBoard\:printConf}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CoolBoard::printConf ()}}
\par
{\bkmkstart AAAAAAAACU}
{\bkmkend AAAAAAAACU}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACU" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::printConf()}}}: This method is provided to print the configuration to the Serial Monitor. \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPB" }{}}{\fldrslt {\cs37\ul\cf2 673}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJH" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANC" }{}}{\fldrslt {\cs37\ul\cf2 externalSensorsActive}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANF" }{}}{\fldrslt {\cs37\ul\cf2 ireneActive}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANH" }{}}{\fldrslt {\cs37\ul\cf2 jetpackActive}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOA" }{}}{\fldrslt {\cs37\ul\cf2 logInterval}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOB" }{}}{\fldrslt {\cs37\ul\cf2 serverTimeOut}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOC" }{}}{\fldrslt {\cs37\ul\cf2 sleepActive}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOE" }{}}{\fldrslt {\cs37\ul\cf2 userActive}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   674 \{\par
  675 \par
  676 #if DEBUG == 1\par
  677     \par
  678     Serial.println( F("Entering CoolBoard.printConf() ") );\par
  679     Serial.println();\par
  680 \par
  681 #endif\par
  682 \par
  683     Serial.println("Printing Cool Board Configuration ");\par
  684     Serial.print("log interval      : ");\par
  685     Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACS" }{}}{\fldrslt {\cs37\ul\cf2 logInterval}}}
);\par
  686 \par
  687     Serial.print("irene active      : ");\par
  688     Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAW" }{}}{\fldrslt {\cs37\ul\cf2 ireneActive}}}
);\par
  689 \par
  690     Serial.print("jetpack active        : ");\par
  691     Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAR" }{}}{\fldrslt {\cs37\ul\cf2 jetpackActive}}}
);\par
  692 \par
  693     Serial.print("external sensors active   : ");\par
  694     Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABB" }{}}{\fldrslt {\cs37\ul\cf2 externalSensorsActive}}}
);\par
  695 \par
  696     Serial.print("access point timeOut  : ");\par
  697     Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACT" }{}}{\fldrslt {\cs37\ul\cf2 serverTimeOut}}}
);\par
  698 \par
  699     Serial.print("sleept active         : ");\par
  700     Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACK" }{}}{\fldrslt {\cs37\ul\cf2 sleepActive}}}
);\par
  701 \par
  702     Serial.print("user active       : ");\par
  703     Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 userActive}}}
);\par
  704 \par
  705     Serial.println();\par
  706 \par
  707 \par
  708 \par
  709 \par
  710 \}\par
}
}
{\xe \v readSensors\:CoolBoard}
{\xe \v CoolBoard\:readSensors}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String CoolBoard::readSensors ()}}
\par
{\bkmkstart AAAAAAAACF}
{\bkmkend AAAAAAAACF}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACF" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::readSensors()}}}: This method is provided to read and format all the sensors data in a single json.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid json string of all the sensors read. \par
}}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOP" }{}}{\fldrslt {\cs37\ul\cf2 888}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJH" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMZ" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANA" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardSensors}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANB" }{}}{\fldrslt {\cs37\ul\cf2 externalSensors}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANC" }{}}{\fldrslt {\cs37\ul\cf2 externalSensorsActive}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANY" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed::fadeIn()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAND" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed::fadeOut()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPC" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime::getTimeDate()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANE" }{}}{\fldrslt {\cs37\ul\cf2 irene3000}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANF" }{}}{\fldrslt {\cs37\ul\cf2 ireneActive}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPD" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors::read()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPE" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::read()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPF" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::read()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANR" }{}}{\fldrslt {\cs37\ul\cf2 rtc}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOD" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed::strobe()}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOL" }{}}{\fldrslt {\cs37\ul\cf2 offLineMode()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOK" }{}}{\fldrslt {\cs37\ul\cf2 onLineMode()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   889 \{\par
  890 \par
  891     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABT" }{}}{\fldrslt {\cs37\ul\cf2 fadeIn}}}
(128,255,0,0.5);//light shade of green\par
  892                 \par
  893 #if DEBUG == 1\par
  894 \par
  895     Serial.println( F("Entering CoolBoard.readSensors()") );\par
  896     Serial.println();\par
  897 \par
  898 #endif\par
  899     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABY" }{}}{\fldrslt {\cs37\ul\cf2 strobe}}}
(128,255,0,0.5);//light shade of green\par
  900 \par
  901     String sensorsData;\par
  902 \par
  903     sensorsData = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAF" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardSensors}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACW" }{}}{\fldrslt {\cs37\ul\cf2 read}}}
(); // \{..,..,..\}\par
  904     \par
  905     if ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABB" }{}}{\fldrslt {\cs37\ul\cf2 externalSensorsActive}}}
)\par
  906     \{\par
  907         sensorsData += {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABC" }{}}{\fldrslt {\cs37\ul\cf2 externalSensors}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACX" }{}}{\fldrslt {\cs37\ul\cf2 read}}}
(); // \{..,..,..\}\{..,..\}\par
  908 \par
  909         sensorsData.setCharAt(sensorsData.lastIndexOf('\}'), ','); // \{..,..,..\}\{..,..,\par
  910         sensorsData.setCharAt(sensorsData.lastIndexOf('\{'), ','); // \{..,..,..\},..,..,\par
  911         sensorsData.remove(sensorsData.lastIndexOf('\}'), 1); // \{..,..,..,..,..,\par
  912         sensorsData.setCharAt(sensorsData.lastIndexOf(','), '\}'); // \{..,..,..,..,..\}\par
  913 \par
  914     \}\par
  915     if ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAW" }{}}{\fldrslt {\cs37\ul\cf2 ireneActive}}}
)\par
  916     \{\par
  917         sensorsData += {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAX" }{}}{\fldrslt {\cs37\ul\cf2 irene3000}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACY" }{}}{\fldrslt {\cs37\ul\cf2 read}}}
(); // \{..,..,..,..,..\}\{..,..,..\}\par
  918 \par
  919         sensorsData.setCharAt(sensorsData.lastIndexOf('\}'), ','); // \{..,..,..,..,..\}\{..,..,..,\par
  920         sensorsData.setCharAt(sensorsData.lastIndexOf('\{'), ','); // \{..,..,..,..,..\},..,..,..,\par
  921         sensorsData.remove(sensorsData.lastIndexOf('\}'), 1); // \{..,..,..,..,..,..,..,..,\par
  922         sensorsData.setCharAt(sensorsData.lastIndexOf(','), '\}'); // \{..,..,..,..,..,..,..,..\}      \par
  923         \par
  924         \par
  925     \}\par
  926 \par
  927     //getting Hour:\par
  928     tmElements_t tm;\par
  929     tm={\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABI" }{}}{\fldrslt {\cs37\ul\cf2 rtc}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACZ" }{}}{\fldrslt {\cs37\ul\cf2 getTimeDate}}}
();\par
  930     \par
  931     //adding Hour\par
  932     sensorsData.remove(sensorsData.lastIndexOf('\}'), 1); // \{..,..,..,..,..,..,..,..,   \par
  933     sensorsData+=",\\"hour\\":";  \par
  934     sensorsData+=tm.Hour;\par
  935     sensorsData+="\}";\par
  936     \par
  937 #if DEBUG == 1\par
  938     Serial.println();\par
  939     Serial.println( F("sensors data is ") );\par
  940     Serial.println(sensorsData);\par
  941     Serial.println();\par
  942 \par
  943 #endif\par
  944     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABG" }{}}{\fldrslt {\cs37\ul\cf2 fadeOut}}}
(128,255,0,0.5);//light shade of green\par
  945 \par
  946     return(sensorsData);\par
  947 \par
  948 \}\par
}
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolBoard_ad03abdce2e65f520bbf2cff0f2d083cf_cgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolBoard_ad03abdce2e65f520bbf2cff0f2d083cf_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v sleep\:CoolBoard}
{\xe \v CoolBoard\:sleep}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CoolBoard::sleep (unsigned long  {\i interval})}}
\par
{\bkmkstart AAAAAAAACL}
{\bkmkend AAAAAAAACL}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
CoolBoard::sleep(int interval): This method is provided to allow the board to enter deepSleep mode for a period of time equal to interval in s \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOY" }{}}{\fldrslt {\cs37\ul\cf2 1004}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJH" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard.cpp}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOK" }{}}{\fldrslt {\cs37\ul\cf2 onLineMode()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  1005 \{\par
 1006 \par
 1007 #if DEBUG == 1\par
 1008 \par
 1009     Serial.println( F("Entering CoolBoard.sleep() ") );\par
 1010     Serial.print( F("going to sleep for ") );\par
 1011     Serial.print(interval);\par
 1012     Serial.println(F("s") );\par
 1013     Serial.println();\par
 1014 \par
 1015 #endif\par
 1016     //interval is in seconds , interval*1000*1000 in \'B5S\par
 1017     ESP.deepSleep ( ( interval * 1000 * 1000 ), WAKE_RF_DEFAULT) ;\par
 1018 \}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolBoard_a069952cdcb2e7f68518aa429eceadb6e_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v update\:CoolBoard}
{\xe \v CoolBoard\:update}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CoolBoard::update (const char *  {\i answer})}}
\par
{\bkmkstart AAAAAAAACJ}
{\bkmkend AAAAAAAACJ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
CoolBoard::update(mqtt answer): This method is provided to handle the configuration update of the different parts \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPA" }{}}{\fldrslt {\cs37\ul\cf2 717}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJH" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMZ" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANY" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed::fadeIn()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAND" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed::fadeOut()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANZ" }{}}{\fldrslt {\cs37\ul\cf2 fileSystem}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANI" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOV" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT::mqttLoop()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOW" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT::publish()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOD" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed::strobe()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALS" }{}}{\fldrslt {\cs37\ul\cf2 CoolFileSystem::updateConfigFiles()}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOK" }{}}{\fldrslt {\cs37\ul\cf2 onLineMode()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   718 \{\par
  719     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABT" }{}}{\fldrslt {\cs37\ul\cf2 fadeIn}}}
(153,76,0,0.5);//shade of brown      \par
  720 \par
  721 #if DEBUG == 1\par
  722 \par
  723     Serial.println( F("Entering CoolBoard.update() ") );\par
  724     Serial.println();\par
  725     Serial.println( F("message is : ") );\par
  726     Serial.println({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABV" }{}}{\fldrslt {\cs37\ul\cf2 answer}}}
);\par
  727     Serial.println();\par
  728 \par
  729 #endif\par
  730 \par
  731     DynamicJsonBuffer jsonBuffer;\par
  732     JsonObject & root = jsonBuffer.parseObject({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABV" }{}}{\fldrslt {\cs37\ul\cf2 answer}}}
);\par
  733     JsonObject & stateDesired = root["state"];\par
  734 \par
  735 #if DEBUG == 1\par
  736 \par
  737     Serial.println( F("root json : ") );\par
  738     root.printTo(Serial);\par
  739     Serial.println();\par
  740 \par
  741     Serial.println(F("stateDesired json : "));\par
  742     stateDesired.printTo(Serial);\par
  743     Serial.println();\par
  744     \par
  745     Serial.print(F("jsonBuffer size : "));\par
  746     Serial.println(jsonBuffer.size());\par
  747 \par
  748 #endif\par
  749 \par
  750     if (stateDesired.success())\par
  751     \{\par
  752     \par
  753     #if DEBUG == 1\par
  754 \par
  755         Serial.println( F("update message parsing : success") );\par
  756         Serial.println();\par
  757     \par
  758     #endif\par
  759 \par
  760             String answerDesired;\par
  761         \par
  762             stateDesired.printTo(answerDesired);\par
  763             \par
  764         #if DEBUG == 1      \par
  765         \par
  766             Serial.println( F("update is ok ") );\par
  767             Serial.println( F("desired update is : ") );            \par
  768             Serial.println(answerDesired);\par
  769             Serial.println("json size is : ");\par
  770             Serial.println(jsonBuffer.size() ) ;                \par
  771             Serial.println();\par
  772 \par
  773         \par
  774         #endif\par
  775             //saving the new configuration\par
  776             {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABW" }{}}{\fldrslt {\cs37\ul\cf2 fileSystem}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACV" }{}}{\fldrslt {\cs37\ul\cf2 updateConfigFiles}}}
(answerDesired);\par
  777 \par
  778             //applying the configuration    \par
  779             /*this -> config();\par
  780 \par
  781             coolBoardSensors.config();\par
  782 \par
  783             rtc.config();\par
  784 \par
  785             coolBoardLed.config();\par
  786             \par
  787             wifiManager.config();\par
  788 \par
  789             mqtt.config();\par
  790 \par
  791             if (jetpackActive)\par
  792             \{\par
  793                 jetPack.config();\par
  794             \}\par
  795 \par
  796             if (ireneActive)\par
  797             \{\par
  798                 irene3000.config();\par
  799             \}\par
  800 \par
  801             if (externalSensorsActive)\par
  802             \{\par
  803                 externalSensors.config();\par
  804             \}\par
  805 \par
  806             delay(10);\par
  807             wifiManager.begin();\par
  808             delay(100);\par
  809             mqtt.begin();*/\par
  810 \par
  811                 //answering the update msg:\par
  812             //reported = received configuration\par
  813             //desired=null\par
  814         \par
  815             String updateAnswer;\par
  816             String tempString;\par
  817             \par
  818             stateDesired.printTo(tempString);\par
  819             updateAnswer="\{\\"state\\":\{\\"reported\\":";\par
  820             updateAnswer+=tempString;\par
  821             updateAnswer+=",\\"desired\\":null\}\}";\par
  822 \par
  823         #if DEBUG == 1\par
  824 \par
  825             Serial.println( F("preparing answer message ") );\par
  826             Serial.println();\par
  827             Serial.println( F("updateAnswer : ") );\par
  828             Serial.println(updateAnswer);\par
  829         \par
  830         #endif  \par
  831 \par
  832             {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAN" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABZ" }{}}{\fldrslt {\cs37\ul\cf2 publish}}}
(updateAnswer.c_str());\par
  833             \par
  834             {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAN" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACA" }{}}{\fldrslt {\cs37\ul\cf2 mqttLoop}}}
();\par
  835 \par
  836             delay(10);\par
  837             \par
  838             //restart the esp to apply the config\par
  839             ESP.restart();\par
  840     \}\par
  841     else\par
  842     \{\par
  843     \par
  844     #if DEBUG == 1\par
  845 \par
  846         Serial.println( F("Failed to parse update message( OR no message received )") );\par
  847         Serial.println();\par
  848     \par
  849     #endif\par
  850     \par
  851     \}\par
  852 \par
  853     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABY" }{}}{\fldrslt {\cs37\ul\cf2 strobe}}}
(153,76,0,0.5);//shade of brown\par
  854     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABG" }{}}{\fldrslt {\cs37\ul\cf2 fadeOut}}}
(153,76,0,0.5);//shade of brown                             \par
  855 \}\par
}
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolBoard_a8612756d3f73198cdde857a66f0fe690_cgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolBoard_a8612756d3f73198cdde857a66f0fe690_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v userData\:CoolBoard}
{\xe \v CoolBoard\:userData}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String CoolBoard::userData ()}}
\par
{\bkmkstart AAAAAAAACE}
{\bkmkend AAAAAAAACE}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACE" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::userData()}}}: This method is provided to return the user's data.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid json string of the user's data \par
}}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOR" }{}}{\fldrslt {\cs37\ul\cf2 957}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJH" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPG" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime::getESDate()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPH" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT::getUser()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANI" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANR" }{}}{\fldrslt {\cs37\ul\cf2 rtc}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOL" }{}}{\fldrslt {\cs37\ul\cf2 offLineMode()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOK" }{}}{\fldrslt {\cs37\ul\cf2 onLineMode()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   958 \{\par
  959 \par
  960 #if DEBUG == 1\par
  961 \par
  962     Serial.println( F("Entering CoolBoard.userData() ") );\par
  963     Serial.println();\par
  964 \par
  965 #endif\par
  966 \par
  967     String tempMAC = WiFi.macAddress();\par
  968 \par
  969     tempMAC.replace(":", "");\par
  970 \par
  971     String userJson = "\{\\"user\\":\\"";\par
  972 \par
  973     userJson += {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAN" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADA" }{}}{\fldrslt {\cs37\ul\cf2 getUser}}}
();\par
  974 \par
  975     userJson += "\\",\\"timestamp\\":\\"";\par
  976 \par
  977     userJson += {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABI" }{}}{\fldrslt {\cs37\ul\cf2 rtc}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADB" }{}}{\fldrslt {\cs37\ul\cf2 getESDate}}}
(); // "timestamp":"20yy-mm-ddThh:mm:ssZ"\par
  978 \par
  979     userJson += "\\",\\"mac\\":\\"";\par
  980 \par
  981     userJson += tempMAC;\par
  982 \par
  983     userJson += "\\"\}";\par
  984 \par
  985 #if DEBUG == 1\par
  986 \par
  987     Serial.println( F("userData is : ") );\par
  988     Serial.println(userJson);\par
  989     Serial.println();\par
  990 \par
  991 #endif  \par
  992     \par
  993     return(userJson);\par
  994     \par
  995 \}\par
}
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolBoard_ae7358fb6e623cfc81b775f5f1734909b_cgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolBoard_ae7358fb6e623cfc81b775f5f1734909b_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v answer\:CoolBoard}
{\xe \v CoolBoard\:answer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String CoolBoard::answer =""{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAABV}
{\bkmkend AAAAAAAABV}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOS" }{}}{\fldrslt {\cs37\ul\cf2 97}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJJ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOK" }{}}{\fldrslt {\cs37\ul\cf2 onLineMode()}}}
.}\par
}
{\xe \v coolBoardLed\:CoolBoard}
{\xe \v CoolBoard\:coolBoardLed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADO" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed}}}
 CoolBoard::coolBoardLed{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAAC}
{\bkmkend AAAAAAAAAC}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMZ" }{}}{\fldrslt {\cs37\ul\cf2 67}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJJ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMJ" }{}}{\fldrslt {\cs37\ul\cf2 begin()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANU" }{}}{\fldrslt {\cs37\ul\cf2 config()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMY" }{}}{\fldrslt {\cs37\ul\cf2 connect()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOL" }{}}{\fldrslt {\cs37\ul\cf2 offLineMode()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOK" }{}}{\fldrslt {\cs37\ul\cf2 onLineMode()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOP" }{}}{\fldrslt {\cs37\ul\cf2 readSensors()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPA" }{}}{\fldrslt {\cs37\ul\cf2 update()}}}
.}\par
}
{\xe \v coolBoardSensors\:CoolBoard}
{\xe \v CoolBoard\:coolBoardSensors}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADN" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors}}}
 CoolBoard::coolBoardSensors{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAAF}
{\bkmkend AAAAAAAAAF}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANA" }{}}{\fldrslt {\cs37\ul\cf2 65}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJJ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMJ" }{}}{\fldrslt {\cs37\ul\cf2 begin()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOP" }{}}{\fldrslt {\cs37\ul\cf2 readSensors()}}}
.}\par
}
{\xe \v data\:CoolBoard}
{\xe \v CoolBoard\:data}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String CoolBoard::data =""{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAABU}
{\bkmkend AAAAAAAABU}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOM" }{}}{\fldrslt {\cs37\ul\cf2 95}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJJ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOL" }{}}{\fldrslt {\cs37\ul\cf2 offLineMode()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOK" }{}}{\fldrslt {\cs37\ul\cf2 onLineMode()}}}
.}\par
}
{\xe \v externalSensors\:CoolBoard}
{\xe \v CoolBoard\:externalSensors}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADU" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors}}}
 CoolBoard::externalSensors{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAABC}
{\bkmkend AAAAAAAABC}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANB" }{}}{\fldrslt {\cs37\ul\cf2 79}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJJ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMJ" }{}}{\fldrslt {\cs37\ul\cf2 begin()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOP" }{}}{\fldrslt {\cs37\ul\cf2 readSensors()}}}
.}\par
}
{\xe \v externalSensorsActive\:CoolBoard}
{\xe \v CoolBoard\:externalSensorsActive}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool CoolBoard::externalSensorsActive =0{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAABB}
{\bkmkend AAAAAAAABB}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANC" }{}}{\fldrslt {\cs37\ul\cf2 87}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJJ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMJ" }{}}{\fldrslt {\cs37\ul\cf2 begin()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANU" }{}}{\fldrslt {\cs37\ul\cf2 config()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPB" }{}}{\fldrslt {\cs37\ul\cf2 printConf()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOP" }{}}{\fldrslt {\cs37\ul\cf2 readSensors()}}}
.}\par
}
{\xe \v fileSystem\:CoolBoard}
{\xe \v CoolBoard\:fileSystem}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADM" }{}}{\fldrslt {\cs37\ul\cf2 CoolFileSystem}}}
 CoolBoard::fileSystem{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAABW}
{\bkmkend AAAAAAAABW}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANZ" }{}}{\fldrslt {\cs37\ul\cf2 63}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJJ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANU" }{}}{\fldrslt {\cs37\ul\cf2 config()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOL" }{}}{\fldrslt {\cs37\ul\cf2 offLineMode()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOK" }{}}{\fldrslt {\cs37\ul\cf2 onLineMode()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPA" }{}}{\fldrslt {\cs37\ul\cf2 update()}}}
.}\par
}
{\xe \v irene3000\:CoolBoard}
{\xe \v CoolBoard\:irene3000}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADT" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000}}}
 CoolBoard::irene3000{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAAX}
{\bkmkend AAAAAAAAAX}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANE" }{}}{\fldrslt {\cs37\ul\cf2 77}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJJ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMJ" }{}}{\fldrslt {\cs37\ul\cf2 begin()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOP" }{}}{\fldrslt {\cs37\ul\cf2 readSensors()}}}
.}\par
}
{\xe \v ireneActive\:CoolBoard}
{\xe \v CoolBoard\:ireneActive}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool CoolBoard::ireneActive =0{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAAW}
{\bkmkend AAAAAAAAAW}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANF" }{}}{\fldrslt {\cs37\ul\cf2 83}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJJ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMJ" }{}}{\fldrslt {\cs37\ul\cf2 begin()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANU" }{}}{\fldrslt {\cs37\ul\cf2 config()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPB" }{}}{\fldrslt {\cs37\ul\cf2 printConf()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOP" }{}}{\fldrslt {\cs37\ul\cf2 readSensors()}}}
.}\par
}
{\xe \v jetPack\:CoolBoard}
{\xe \v CoolBoard\:jetPack}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADS" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack}}}
 CoolBoard::jetPack{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAAS}
{\bkmkend AAAAAAAAAS}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANG" }{}}{\fldrslt {\cs37\ul\cf2 75}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJJ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMJ" }{}}{\fldrslt {\cs37\ul\cf2 begin()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOL" }{}}{\fldrslt {\cs37\ul\cf2 offLineMode()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOK" }{}}{\fldrslt {\cs37\ul\cf2 onLineMode()}}}
.}\par
}
{\xe \v jetpackActive\:CoolBoard}
{\xe \v CoolBoard\:jetpackActive}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool CoolBoard::jetpackActive =0{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAAR}
{\bkmkend AAAAAAAAAR}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANH" }{}}{\fldrslt {\cs37\ul\cf2 85}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJJ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMJ" }{}}{\fldrslt {\cs37\ul\cf2 begin()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANU" }{}}{\fldrslt {\cs37\ul\cf2 config()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOL" }{}}{\fldrslt {\cs37\ul\cf2 offLineMode()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOK" }{}}{\fldrslt {\cs37\ul\cf2 onLineMode()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPB" }{}}{\fldrslt {\cs37\ul\cf2 printConf()}}}
.}\par
}
{\xe \v logInterval\:CoolBoard}
{\xe \v CoolBoard\:logInterval}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned long CoolBoard::logInterval =1{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAACS}
{\bkmkend AAAAAAAACS}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOA" }{}}{\fldrslt {\cs37\ul\cf2 91}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJJ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANU" }{}}{\fldrslt {\cs37\ul\cf2 config()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOH" }{}}{\fldrslt {\cs37\ul\cf2 getLogInterval()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPB" }{}}{\fldrslt {\cs37\ul\cf2 printConf()}}}
.}\par
}
{\xe \v mqtt\:CoolBoard}
{\xe \v CoolBoard\:mqtt}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADR" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT}}}
 CoolBoard::mqtt{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAAN}
{\bkmkend AAAAAAAAAN}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANI" }{}}{\fldrslt {\cs37\ul\cf2 73}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJJ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMJ" }{}}{\fldrslt {\cs37\ul\cf2 begin()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMY" }{}}{\fldrslt {\cs37\ul\cf2 connect()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOK" }{}}{\fldrslt {\cs37\ul\cf2 onLineMode()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPA" }{}}{\fldrslt {\cs37\ul\cf2 update()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOR" }{}}{\fldrslt {\cs37\ul\cf2 userData()}}}
.}\par
}
{\xe \v rtc\:CoolBoard}
{\xe \v CoolBoard\:rtc}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADP" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime}}}
 CoolBoard::rtc{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAABI}
{\bkmkend AAAAAAAABI}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANR" }{}}{\fldrslt {\cs37\ul\cf2 69}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJJ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMJ" }{}}{\fldrslt {\cs37\ul\cf2 begin()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOK" }{}}{\fldrslt {\cs37\ul\cf2 onLineMode()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOP" }{}}{\fldrslt {\cs37\ul\cf2 readSensors()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOR" }{}}{\fldrslt {\cs37\ul\cf2 userData()}}}
.}\par
}
{\xe \v serverTimeOut\:CoolBoard}
{\xe \v CoolBoard\:serverTimeOut}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int CoolBoard::serverTimeOut =180{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAACT}
{\bkmkend AAAAAAAACT}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOB" }{}}{\fldrslt {\cs37\ul\cf2 93}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJJ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANU" }{}}{\fldrslt {\cs37\ul\cf2 config()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPB" }{}}{\fldrslt {\cs37\ul\cf2 printConf()}}}
.}\par
}
{\xe \v sleepActive\:CoolBoard}
{\xe \v CoolBoard\:sleepActive}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool CoolBoard::sleepActive =0{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAACK}
{\bkmkend AAAAAAAACK}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOC" }{}}{\fldrslt {\cs37\ul\cf2 89}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJJ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANU" }{}}{\fldrslt {\cs37\ul\cf2 config()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOK" }{}}{\fldrslt {\cs37\ul\cf2 onLineMode()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPB" }{}}{\fldrslt {\cs37\ul\cf2 printConf()}}}
.}\par
}
{\xe \v userActive\:CoolBoard}
{\xe \v CoolBoard\:userActive}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool CoolBoard::userActive =0{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAACD}
{\bkmkend AAAAAAAACD}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOE" }{}}{\fldrslt {\cs37\ul\cf2 81}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJJ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANU" }{}}{\fldrslt {\cs37\ul\cf2 config()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOL" }{}}{\fldrslt {\cs37\ul\cf2 offLineMode()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOK" }{}}{\fldrslt {\cs37\ul\cf2 onLineMode()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPB" }{}}{\fldrslt {\cs37\ul\cf2 printConf()}}}
.}\par
}
{\xe \v wifiManager\:CoolBoard}
{\xe \v CoolBoard\:wifiManager}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADQ" }{}}{\fldrslt {\cs37\ul\cf2 CoolWifi}}}
 CoolBoard::wifiManager{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAAJ}
{\bkmkend AAAAAAAAAJ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANS" }{}}{\fldrslt {\cs37\ul\cf2 71}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJJ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMJ" }{}}{\fldrslt {\cs37\ul\cf2 begin()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMY" }{}}{\fldrslt {\cs37\ul\cf2 connect()}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAA" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard.h}}}
\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJF" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard.cpp}}}
\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
CoolBoardLed Class Reference\par \pard\plain 
{\tc\tcl2 \v CoolBoardLed}
{\xe \v CoolBoardLed}
{\bkmkstart AAAAAAAADO}
{\bkmkend AAAAAAAADO}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class handles the led in the Sensor Board. }}\par
{
{\f2 #include <CoolBoardLed.h>}}\par
Collaboration diagram for CoolBoardLed:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolBoardLed__coll__graph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACR" }{}}{\fldrslt {\cs37\ul\cf2 begin}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAE" }{}}{\fldrslt {\cs37\ul\cf2 write}}}
 (int R, int G, int B)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADX" }{}}{\fldrslt {\cs37\ul\cf2 end}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACQ" }{}}{\fldrslt {\cs37\ul\cf2 config}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAD" }{}}{\fldrslt {\cs37\ul\cf2 printConf}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACG" }{}}{\fldrslt {\cs37\ul\cf2 fade}}}
 (int R, int G, int B, float T)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABM" }{}}{\fldrslt {\cs37\ul\cf2 blink}}}
 (int R, int G, int B, float T)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABT" }{}}{\fldrslt {\cs37\ul\cf2 fadeIn}}}
 (int R, int G, int B, float T)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABG" }{}}{\fldrslt {\cs37\ul\cf2 fadeOut}}}
 (int R, int G, int B, float T)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABY" }{}}{\fldrslt {\cs37\ul\cf2 strobe}}}
 (int R, int G, int B, float T)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
NeoPixelBus< NeoGrbFeature, Neo800KbpsMethod > * {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADW" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
 = NULL\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
byte {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADV" }{}}{\fldrslt {\cs37\ul\cf2 ledActive}}}
 =0\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class handles the led in the Sensor Board. \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPI" }{}}{\fldrslt {\cs37\ul\cf2 20}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJO" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed.h}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v begin\:CoolBoardLed}
{\xe \v CoolBoardLed\:begin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CoolBoardLed::begin ()}}
\par
{\bkmkstart AAAAAAAACR}
{\bkmkend AAAAAAAACR}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACR" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed::begin()}}}: This method is provided to start the Led Object by setting the correct pin and creating a dynamic neoPixelBus \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANW" }{}}{\fldrslt {\cs37\ul\cf2 232}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJM" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPJ" }{}}{\fldrslt {\cs37\ul\cf2 ledActive}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPK" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANU" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::config()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   233 \{\par
  234 \par
  235 #if DEBUG == 1\par
  236 \par
  237     Serial.println( F("Entering CoolBoardLed.begin() ") );\par
  238 \par
  239 #endif\par
  240     yield();\par
  241     if(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADV" }{}}{\fldrslt {\cs37\ul\cf2 ledActive}}}
 == 1 )\par
  242     \{\par
  243         pinMode(5,OUTPUT);\par
  244         digitalWrite(5,HIGH);\par
  245         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADW" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
 = new NeoPixelBus<NeoGrbFeature, Neo800KbpsMethod>(1,2); \par
  246         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADW" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
->Begin();\par
  247         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADW" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
->Show();\par
  248 \par
  249     \}\par
  250 \par
  251 \} \par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolBoardLed_ae3cbde8affcc6f011cbd698c8ef911f6_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v blink\:CoolBoardLed}
{\xe \v CoolBoardLed\:blink}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CoolBoardLed::blink (int  {\i R}, int  {\i G}, int  {\i B}, float  {\i T})}}
\par
{\bkmkstart AAAAAAAABM}
{\bkmkend AAAAAAAABM}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
CoolBoardLed::blink( Red , Green , Blue , Time in seconds ): Blink animation: Led On for T seconds Led off \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMQ" }{}}{\fldrslt {\cs37\ul\cf2 74}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJM" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPJ" }{}}{\fldrslt {\cs37\ul\cf2 ledActive}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPK" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMJ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::begin()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANU" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::config()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMY" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::connect()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOL" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::offLineMode()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOK" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::onLineMode()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    75 \{\par
   76 \par
   77 #if DEBUG == 1\par
   78 \par
   79     Serial.println( F("Entering CoolBoardLed.blink()"));\par
   80     Serial.println();\par
   81     Serial.print( F("R : "));\par
   82     Serial.println(R);\par
   83     Serial.print( F("G : ") );\par
   84     Serial.println(G);\par
   85     Serial.print( F("B : ") );\par
   86     Serial.println(B);\par
   87     Serial.print( F("Time :") );\par
   88     Serial.println(T);\par
   89     Serial.println();\par
   90 \par
   91 #endif  \par
   92 \par
   93     if(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADV" }{}}{\fldrslt {\cs37\ul\cf2 ledActive}}}
 == 1 )\par
   94     \{\par
   95         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADW" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
->SetPixelColor(0, RgbColor(R, G, B));\par
   96         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADW" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
->Show();\par
   97         delay(T);\par
   98         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADW" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
->SetPixelColor(0, RgbColor(0, 0, 0));\par
   99         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADW" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
->Show();\par
  100     \}\par
  101 \}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolBoardLed_a96e1ea13003eee34c9dbcef340404426_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v config\:CoolBoardLed}
{\xe \v CoolBoardLed\:config}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool CoolBoardLed::config ()}}
\par
{\bkmkstart AAAAAAAACQ}
{\bkmkend AAAAAAAACQ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACQ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed::config()}}}: This method is provided to configure the Led Object : -ledActive=0 : deactivated -ledActive=1 : activated \par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid true if the configuration done, false otherwise \par
}}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANX" }{}}{\fldrslt {\cs37\ul\cf2 291}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJM" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPJ" }{}}{\fldrslt {\cs37\ul\cf2 ledActive}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANU" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::config()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   292 \{\par
  293 \par
  294 #if DEBUG == 1 \par
  295         \par
  296     Serial.println( F("Entering CoolBoardLed.config()") );\par
  297     Serial.println();\par
  298 \par
  299 #endif\par
  300     \par
  301     File coolBoardLedConfig = SPIFFS.open("/coolBoardLedConfig.json", "r");\par
  302 \par
  303     if (!coolBoardLedConfig) \par
  304     \{\par
  305     \par
  306     #if DEBUG == 1\par
  307 \par
  308         Serial.println( F("failed to read /coolBoardLedConfig.json") );\par
  309         Serial.println();\par
  310 \par
  311     #endif\par
  312 \par
  313         return(false);\par
  314     \}\par
  315     else\par
  316     \{\par
  317         size_t size = coolBoardLedConfig.size();\par
  318         // Allocate a buffer to store contents of the file.\par
  319         std::unique_ptr<char[]> buf(new char[size]);\par
  320 \par
  321         coolBoardLedConfig.readBytes(buf.get(), size);\par
  322         DynamicJsonBuffer jsonBuffer;\par
  323         JsonObject& json = jsonBuffer.parseObject(buf.get());\par
  324         if (!json.success()) \par
  325         \{\par
  326         \par
  327         #if DEBUG == 1\par
  328 \par
  329             Serial.println( F("failed to parse json") );\par
  330             Serial.println();\par
  331         \par
  332         #endif\par
  333 \par
  334             return(false);\par
  335         \} \par
  336         else\par
  337         \{\par
  338         \par
  339         #if DEBUG == 1\par
  340     \par
  341             Serial.println( F("read configuration file : ") );\par
  342             json.printTo(Serial);\par
  343             Serial.println();\par
  344             \par
  345             Serial.print(F("jsonBuffer size :"));\par
  346             Serial.println(jsonBuffer.size());\par
  347             Serial.println();\par
  348 \par
  349         #endif\par
  350   \par
  351             if(json["ledActive"].success() )\par
  352             \{\par
  353                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADV" }{}}{\fldrslt {\cs37\ul\cf2 ledActive}}}
 = json["ledActive"]; \par
  354             \}\par
  355             else\par
  356             \{\par
  357                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADV" }{}}{\fldrslt {\cs37\ul\cf2 ledActive}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADV" }{}}{\fldrslt {\cs37\ul\cf2 ledActive}}}
;            \par
  358             \}\par
  359             \par
  360             json["ledActive"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADV" }{}}{\fldrslt {\cs37\ul\cf2 ledActive}}}
;\par
  361             coolBoardLedConfig.close();\par
  362             \par
  363             coolBoardLedConfig = SPIFFS.open("/coolBoardLedConfig.json", "w");\par
  364             if(!coolBoardLedConfig)\par
  365             \{\par
  366             \par
  367             #if DEBUG == 1 \par
  368 \par
  369                 Serial.println( F("failed to write to /coolBoardLedConfig.json") );\par
  370                 Serial.println();\par
  371 \par
  372             #endif\par
  373 \par
  374                 return(false);          \par
  375             \}\par
  376 \par
  377             json.printTo(coolBoardLedConfig);\par
  378             coolBoardLedConfig.close();\par
  379 \par
  380         #if DEBUG == 1\par
  381     \par
  382             Serial.println( F("saved Led Config is : ") );\par
  383             json.printTo(Serial);\par
  384             Serial.println();\par
  385 \par
  386         #endif\par
  387 \par
  388             return(true); \par
  389         \}\par
  390     \}   \par
  391 \par
  392 \}               \par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolBoardLed_a1b60e5e30bea96c49ed62ed1bf1ffc8b_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v end\:CoolBoardLed}
{\xe \v CoolBoardLed\:end}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CoolBoardLed::end ()}}
\par
{\bkmkstart AAAAAAAADX}
{\bkmkend AAAAAAAADX}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADX" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed::end()}}} : this method is provided to delete the dynamically created neoPixelLed \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPL" }{}}{\fldrslt {\cs37\ul\cf2 213}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJM" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPK" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   214 \{\par
  215 \par
  216 #if DEBUG == 1 \par
  217     \par
  218     Serial.println( F("Entering CoolBoardLed.end()") );\par
  219 \par
  220 #endif\par
  221 \par
  222     delete {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADW" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
;\par
  223 \}\par
}
}
{\xe \v fade\:CoolBoardLed}
{\xe \v CoolBoardLed\:fade}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CoolBoardLed::fade (int  {\i R}, int  {\i G}, int  {\i B}, float  {\i T})}}
\par
{\bkmkstart AAAAAAAACG}
{\bkmkend AAAAAAAACG}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACG" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed::fade}}} ( Red , Green , Blue, Time in seconds ): fade animation: Fade In over T(seconds) Fade Out over T(seconds) \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOO" }{}}{\fldrslt {\cs37\ul\cf2 33}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJM" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPJ" }{}}{\fldrslt {\cs37\ul\cf2 ledActive}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPK" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOL" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::offLineMode()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOK" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::onLineMode()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    34 \{\par
   35 \par
   36 #if DEBUG == 1\par
   37 \par
   38     Serial.println( F("Entering CoolBoardLed.fade()") );\par
   39     Serial.println();\par
   40     Serial.print( F("R : ") );\par
   41     Serial.println(R);\par
   42     Serial.print( F("G : ") );\par
   43     Serial.println(G);\par
   44     Serial.print( F("B : ") );\par
   45     Serial.println(B);\par
   46     Serial.print( F("Time : ") );\par
   47     Serial.println(T);\par
   48     Serial.println();\par
   49 \par
   50 #endif  \par
   51     if(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADV" }{}}{\fldrslt {\cs37\ul\cf2 ledActive}}}
 == 1 )\par
   52     \{\par
   53         for (int k = 0; k < 1000; k++) \par
   54         \{\par
   55             {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADW" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
->SetPixelColor(0, RgbColor(k * R / 1000, k * G / 1000, k * B / 1000));\par
   56             {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADW" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
->Show();\par
   57             delay(T);\par
   58         \}\par
   59         \par
   60         for (int k = 1000; k >= 0; k--) \par
   61         \{\par
   62             {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADW" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
->SetPixelColor(0, RgbColor(k * R / 1000, k * G / 1000, k * B / 1000));\par
   63             {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADW" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
->Show();\par
   64             delay(T);\par
   65         \}\par
   66     \}\par
   67 \}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolBoardLed_af1cacbaa88db8bcf6042c1083ba41155_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v fadeIn\:CoolBoardLed}
{\xe \v CoolBoardLed\:fadeIn}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CoolBoardLed::fadeIn (int  {\i R}, int  {\i G}, int  {\i B}, float  {\i T})}}
\par
{\bkmkstart AAAAAAAABT}
{\bkmkend AAAAAAAABT}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
CoolBoardLed::fadeIn(Red , Green , Blue , Time in seconds) Fade In animation: gradual increase over T(seconds) \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANY" }{}}{\fldrslt {\cs37\ul\cf2 107}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJM" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPJ" }{}}{\fldrslt {\cs37\ul\cf2 ledActive}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPK" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANU" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::config()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOL" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::offLineMode()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOK" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::onLineMode()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOP" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::readSensors()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPA" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::update()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   108 \{\par
  109 \par
  110 #if DEBUG == 1\par
  111 \par
  112     Serial.println( F("Entering CoolBoardLed.fadeIn()") );\par
  113     Serial.println();\par
  114     Serial.print( F("R : ") );\par
  115     Serial.println(R);\par
  116     Serial.print( F("G : ") );\par
  117     Serial.println(G);\par
  118     Serial.print( F("B : ") );\par
  119     Serial.println(B);\par
  120     Serial.print( F("Time :") );\par
  121     Serial.println(T);\par
  122     Serial.println();\par
  123 \par
  124 #endif  \par
  125     \par
  126     if(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADV" }{}}{\fldrslt {\cs37\ul\cf2 ledActive}}}
 == 1 )\par
  127     \{\par
  128         for (int k = 0; k < 1000; k++) \par
  129         \{\par
  130             {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADW" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
->SetPixelColor(0, RgbColor(k * R / 1000, k * G / 1000, k * B / 1000));\par
  131             {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADW" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
->Show();\par
  132             delay(T);\par
  133         \}\par
  134     \}\par
  135 \par
  136 \}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolBoardLed_ab778f5e7bed0ab74e3906d82110493c3_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v fadeOut\:CoolBoardLed}
{\xe \v CoolBoardLed\:fadeOut}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CoolBoardLed::fadeOut (int  {\i R}, int  {\i G}, int  {\i B}, float  {\i T})}}
\par
{\bkmkstart AAAAAAAABG}
{\bkmkend AAAAAAAABG}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
CoolBoardLed::fadeOut( Red , Green , Blue , Time in seconds) Fade Out animation: gradual decrease over T(seconds) \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAND" }{}}{\fldrslt {\cs37\ul\cf2 142}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJM" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPJ" }{}}{\fldrslt {\cs37\ul\cf2 ledActive}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPK" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMJ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::begin()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANU" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::config()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOL" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::offLineMode()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOK" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::onLineMode()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOP" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::readSensors()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPA" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::update()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   143 \{\par
  144 \par
  145 #if DEBUG == 1 \par
  146 \par
  147     Serial.println( F("Entering CoolBoardLed.fadeOut()" ) );\par
  148     Serial.println();\par
  149     Serial.print( F("R : ") );\par
  150     Serial.println(R);\par
  151     Serial.print( F("G : ") );\par
  152     Serial.println(G);\par
  153     Serial.print( F("B : ") );\par
  154     Serial.println(B);\par
  155     Serial.print( F("Time :") );\par
  156     Serial.println(T);\par
  157     Serial.println();\par
  158 \par
  159 #endif  \par
  160 \par
  161     if(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADV" }{}}{\fldrslt {\cs37\ul\cf2 ledActive}}}
 == 1 )\par
  162     \{\par
  163         for (int k = 1000; k >= 0; k--) \par
  164         \{\par
  165             {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADW" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
->SetPixelColor(0, RgbColor(k * R / 1000, k * G / 1000, k * B / 1000));\par
  166             {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADW" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
->Show();\par
  167             delay(T);\par
  168         \}\par
  169     \}\par
  170 \}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolBoardLed_a93d545679237e8cc858324367149775c_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v printConf\:CoolBoardLed}
{\xe \v CoolBoardLed\:printConf}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CoolBoardLed::printConf ()}}
\par
{\bkmkstart AAAAAAAAAD}
{\bkmkend AAAAAAAAAD}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAD" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed::printConf()}}}: This method is provided to print the Led Object Configuration to the Serial Monitor \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANJ" }{}}{\fldrslt {\cs37\ul\cf2 400}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJM" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPJ" }{}}{\fldrslt {\cs37\ul\cf2 ledActive}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMJ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::begin()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   401 \{\par
  402 \par
  403 #if DEBUG == 1 \par
  404 \par
  405     Serial.println( F("Entering CoolBoardLed.printConf()") );\par
  406     Serial.println();\par
  407 \par
  408 #endif\par
  409 \par
  410     Serial.println("Led Configuration");\par
  411 \par
  412     Serial.print("ledActive : ");\par
  413     Serial.println({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADV" }{}}{\fldrslt {\cs37\ul\cf2 ledActive}}}
);\par
  414 \par
  415     Serial.println();   \par
  416 \}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolBoardLed_a8ed3053a36f0ed4a131f43b5b17efb61_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v strobe\:CoolBoardLed}
{\xe \v CoolBoardLed\:strobe}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CoolBoardLed::strobe (int  {\i R}, int  {\i G}, int  {\i B}, float  {\i T})}}
\par
{\bkmkstart AAAAAAAABY}
{\bkmkend AAAAAAAABY}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
CoolBoardLed::strobe(Red , Green , Blue , Time in seconds) Strobe animation: blinks over T(seconds) \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOD" }{}}{\fldrslt {\cs37\ul\cf2 176}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJM" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPJ" }{}}{\fldrslt {\cs37\ul\cf2 ledActive}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPK" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANU" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::config()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOK" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::onLineMode()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOP" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::readSensors()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPA" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::update()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   177 \{\par
  178 \par
  179 #if DEBUG == 1\par
  180 \par
  181     Serial.println( F("Entering CoolBoardLed.strobe()") );\par
  182     Serial.println();\par
  183     Serial.print( F("R : ") );\par
  184     Serial.println(R);\par
  185     Serial.print( F("G: ") );\par
  186     Serial.println(G);\par
  187     Serial.print( F("B : ") );\par
  188     Serial.println(B);\par
  189     Serial.print( F("Time :") );\par
  190     Serial.println(T);\par
  191     Serial.println();\par
  192 \par
  193 #endif  \par
  194 \par
  195     if(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADV" }{}}{\fldrslt {\cs37\ul\cf2 ledActive}}}
 == 1 )\par
  196     \{   \par
  197         for (int k = 1000; k >= 0; k--) \par
  198         \{\par
  199             {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADW" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
->SetPixelColor(0, RgbColor(R, G, B));\par
  200             {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADW" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
->Show();\par
  201             delay(T);\par
  202             {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADW" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
->SetPixelColor(0, RgbColor(0, 0, 0));\par
  203             {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADW" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
->Show();\par
  204             delay(T);\par
  205         \}\par
  206     \}\par
  207 \}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolBoardLed_ad5f0de4c628cbfbf49896042831c64ad_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v write\:CoolBoardLed}
{\xe \v CoolBoardLed\:write}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CoolBoardLed::write (int  {\i R}, int  {\i G}, int  {\i B})}}
\par
{\bkmkstart AAAAAAAAAE}
{\bkmkend AAAAAAAAAE}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
CoolBoardLed::write(Red,Green,Blue): This method is provided to set the Color of the Led \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANT" }{}}{\fldrslt {\cs37\ul\cf2 258}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJM" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPJ" }{}}{\fldrslt {\cs37\ul\cf2 ledActive}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPK" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMJ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::begin()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMY" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::connect()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   259 \{\par
  260 \par
  261 #if DEBUG == 1\par
  262 \par
  263     Serial.println( F("Entering CoolBoardLed.write()") );\par
  264     Serial.println();\par
  265     Serial.print( F("R : ") );\par
  266     Serial.println(R);\par
  267     Serial.print( F("G : ") );\par
  268     Serial.println(G);\par
  269     Serial.print( F("B : ") );\par
  270     Serial.println(B);\par
  271     Serial.println();   \par
  272 \par
  273 #endif\par
  274 \par
  275     if(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADV" }{}}{\fldrslt {\cs37\ul\cf2 ledActive}}}
 == 1 )\par
  276     \{\par
  277         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADW" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
->SetPixelColor(0, RgbColor(R, G, B));\par
  278         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADW" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
->Show();\par
  279     \}\par
  280 \par
  281 \}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolBoardLed_a30fadd4cbec17ceea428bf7a32207e87_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v ledActive\:CoolBoardLed}
{\xe \v CoolBoardLed\:ledActive}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
byte CoolBoardLed::ledActive =0{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADV}
{\bkmkend AAAAAAAADV}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPJ" }{}}{\fldrslt {\cs37\ul\cf2 55}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJO" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANW" }{}}{\fldrslt {\cs37\ul\cf2 begin()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMQ" }{}}{\fldrslt {\cs37\ul\cf2 blink()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANX" }{}}{\fldrslt {\cs37\ul\cf2 config()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOO" }{}}{\fldrslt {\cs37\ul\cf2 fade()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANY" }{}}{\fldrslt {\cs37\ul\cf2 fadeIn()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAND" }{}}{\fldrslt {\cs37\ul\cf2 fadeOut()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANJ" }{}}{\fldrslt {\cs37\ul\cf2 printConf()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOD" }{}}{\fldrslt {\cs37\ul\cf2 strobe()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANT" }{}}{\fldrslt {\cs37\ul\cf2 write()}}}
.}\par
}
{\xe \v neoPixelLed\:CoolBoardLed}
{\xe \v CoolBoardLed\:neoPixelLed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
NeoPixelBus<NeoGrbFeature, Neo800KbpsMethod>* CoolBoardLed::neoPixelLed = NULL{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADW}
{\bkmkend AAAAAAAADW}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPK" }{}}{\fldrslt {\cs37\ul\cf2 53}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJO" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANW" }{}}{\fldrslt {\cs37\ul\cf2 begin()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMQ" }{}}{\fldrslt {\cs37\ul\cf2 blink()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPL" }{}}{\fldrslt {\cs37\ul\cf2 end()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOO" }{}}{\fldrslt {\cs37\ul\cf2 fade()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANY" }{}}{\fldrslt {\cs37\ul\cf2 fadeIn()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAND" }{}}{\fldrslt {\cs37\ul\cf2 fadeOut()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOD" }{}}{\fldrslt {\cs37\ul\cf2 strobe()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANT" }{}}{\fldrslt {\cs37\ul\cf2 write()}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADE" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed.h}}}
\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJK" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed.cpp}}}
\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
CoolBoardSensors Class Reference\par \pard\plain 
{\tc\tcl2 \v CoolBoardSensors}
{\xe \v CoolBoardSensors}
{\bkmkstart AAAAAAAADN}
{\bkmkend AAAAAAAADN}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class handles the On-Board Sensors. }}\par
{
{\f2 #include <CoolBoardSensors.h>}}\par
Collaboration diagram for CoolBoardSensors:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolBoardSensors__coll__graph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEW" }{}}{\fldrslt {\cs37\ul\cf2 airActive}}}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEV" }{}}{\fldrslt {\cs37\ul\cf2 lightActive}}}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADY" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAH" }{}}{\fldrslt {\cs37\ul\cf2 begin}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACW" }{}}{\fldrslt {\cs37\ul\cf2 read}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEC" }{}}{\fldrslt {\cs37\ul\cf2 allActive}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEN" }{}}{\fldrslt {\cs37\ul\cf2 initReadI2C}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEU" }{}}{\fldrslt {\cs37\ul\cf2 stopReadI2C}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAER" }{}}{\fldrslt {\cs37\ul\cf2 end}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAG" }{}}{\fldrslt {\cs37\ul\cf2 config}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAI" }{}}{\fldrslt {\cs37\ul\cf2 printConf}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEP" }{}}{\fldrslt {\cs37\ul\cf2 setEnvSensorSettings}}}
 (uint8_t commInterface=I2C_MODE, uint8_t I2CAddress=0x76, uint8_t runMode=3, uint8_t tStandby=0, uint8_t filter=0, uint8_t tempOverSample=1, uint8_t pressOverSample=1, uint8_t humidOverSample=1)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAES" }{}}{\fldrslt {\cs37\ul\cf2 readVBat}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAET" }{}}{\fldrslt {\cs37\ul\cf2 readMoisture}}}
 ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
SI114X {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEO" }{}}{\fldrslt {\cs37\ul\cf2 lightSensor}}}
 = SI114X()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
BME280 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEQ" }{}}{\fldrslt {\cs37\ul\cf2 envSensor}}}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEV" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::lightActive}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAED" }{}}{\fldrslt {\cs37\ul\cf2 lightDataActive}}}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEW" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::airActive}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEH" }{}}{\fldrslt {\cs37\ul\cf2 airDataActive}}}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEA" }{}}{\fldrslt {\cs37\ul\cf2 EnMoisture}}}
 = 13\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADZ" }{}}{\fldrslt {\cs37\ul\cf2 AnMplex}}}
 = 12\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEB" }{}}{\fldrslt {\cs37\ul\cf2 EnI2C}}}
 = 5\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
byte {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEL" }{}}{\fldrslt {\cs37\ul\cf2 vbatActive}}}
 =0\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
byte {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEM" }{}}{\fldrslt {\cs37\ul\cf2 soilMoistureActive}}}
 =0\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class handles the On-Board Sensors. \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPM" }{}}{\fldrslt {\cs37\ul\cf2 24}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJT" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors.h}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v CoolBoardSensors\:CoolBoardSensors}
{\xe \v CoolBoardSensors\:CoolBoardSensors}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
CoolBoardSensors::CoolBoardSensors ()}}
\par
{\bkmkstart AAAAAAAADY}
{\bkmkend AAAAAAAADY}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADY" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::CoolBoardSensors()}}}: This Constructor is provided to start the I2C interface and Init the different used pins \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPN" }{}}{\fldrslt {\cs37\ul\cf2 35}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJR" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPO" }{}}{\fldrslt {\cs37\ul\cf2 AnMplex}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPP" }{}}{\fldrslt {\cs37\ul\cf2 EnI2C}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPQ" }{}}{\fldrslt {\cs37\ul\cf2 EnMoisture}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    36 \{\par
   37 \par
   38 #if DEBUG == 1\par
   39 \par
   40     Serial.println( F("Entering CoolBoardSensors Constructor") );\par
   41     Serial.println();\par
   42 \par
   43 #endif\par
   44     \par
   45     Wire.begin(2, 14);                       //I2C init Maybe change this to the CoolBoard?\par
   46 \par
   47     pinMode({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADZ" }{}}{\fldrslt {\cs37\ul\cf2 AnMplex}}}
, OUTPUT);                //Declare Analog Multiplexer OUTPUT\par
   48     pinMode({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEA" }{}}{\fldrslt {\cs37\ul\cf2 EnMoisture}}}
, OUTPUT);             //Declare Moisture enable Pin\par
   49     pinMode({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEB" }{}}{\fldrslt {\cs37\ul\cf2 EnI2C}}}
, OUTPUT);        //Declare I2C Enable pin \par
   50 \par
   51 \par
   52 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v allActive\:CoolBoardSensors}
{\xe \v CoolBoardSensors\:allActive}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CoolBoardSensors::allActive ()}}
\par
{\bkmkstart AAAAAAAAEC}
{\bkmkend AAAAAAAAEC}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEC" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::allActive()}}}: This method is provided to allow activation of all the sensor board sensors without passing by the configuration file/method \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPR" }{}}{\fldrslt {\cs37\ul\cf2 61}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJR" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEH" }{}}{\fldrslt {\cs37\ul\cf2 airDataActive}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPS" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::airActive::humidity}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPT" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::lightActive::ir}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAED" }{}}{\fldrslt {\cs37\ul\cf2 lightDataActive}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPU" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::airActive::pressure}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPV" }{}}{\fldrslt {\cs37\ul\cf2 soilMoistureActive}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPW" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::airActive::temperature}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPX" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::lightActive::uv}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPY" }{}}{\fldrslt {\cs37\ul\cf2 vbatActive}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPZ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::lightActive::visible}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    62 \{\par
   63 \par
   64 #if DEBUG == 1 \par
   65 \par
   66     Serial.println( F("Entering CoolBoardSensors.allActive()") );\par
   67     Serial.println();\par
   68 \par
   69 #endif\par
   70     \par
   71     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAED" }{}}{\fldrslt {\cs37\ul\cf2 lightDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEE" }{}}{\fldrslt {\cs37\ul\cf2 visible}}}
=1;\par
   72     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAED" }{}}{\fldrslt {\cs37\ul\cf2 lightDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEF" }{}}{\fldrslt {\cs37\ul\cf2 ir}}}
=1;\par
   73     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAED" }{}}{\fldrslt {\cs37\ul\cf2 lightDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEG" }{}}{\fldrslt {\cs37\ul\cf2 uv}}}
=1; \par
   74 \par
   75     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEH" }{}}{\fldrslt {\cs37\ul\cf2 airDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEI" }{}}{\fldrslt {\cs37\ul\cf2 temperature}}}
=1;\par
   76     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEH" }{}}{\fldrslt {\cs37\ul\cf2 airDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEJ" }{}}{\fldrslt {\cs37\ul\cf2 humidity}}}
=1;\par
   77     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEH" }{}}{\fldrslt {\cs37\ul\cf2 airDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEK" }{}}{\fldrslt {\cs37\ul\cf2 pressure}}}
=1;\par
   78 \par
   79 \par
   80     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEL" }{}}{\fldrslt {\cs37\ul\cf2 vbatActive}}}
=1;\par
   81 \par
   82     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEM" }{}}{\fldrslt {\cs37\ul\cf2 soilMoistureActive}}}
=1;\par
   83     \par
   84 \par
   85 \par
   86 \}\par
}
}
{\xe \v begin\:CoolBoardSensors}
{\xe \v CoolBoardSensors\:begin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CoolBoardSensors::begin ()}}
\par
{\bkmkstart AAAAAAAAAH}
{\bkmkend AAAAAAAAAH}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAH" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::begin()}}}: This method is provided to start the sensors that are on the sensor board \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMN" }{}}{\fldrslt {\cs37\ul\cf2 94}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJR" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQA" }{}}{\fldrslt {\cs37\ul\cf2 envSensor}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQB" }{}}{\fldrslt {\cs37\ul\cf2 initReadI2C()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQC" }{}}{\fldrslt {\cs37\ul\cf2 lightSensor}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQD" }{}}{\fldrslt {\cs37\ul\cf2 setEnvSensorSettings()}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMJ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::begin()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    95 \{  \par
   96 \par
   97 #if DEBUG == 1 \par
   98      \par
   99     Serial.println( F("Entering CoolBoardSensors.begin()") );\par
  100     Serial.println();\par
  101 \par
  102 #endif\par
  103 \par
  104     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEN" }{}}{\fldrslt {\cs37\ul\cf2 initReadI2C}}}
();\par
  105 \par
  106     while (!{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEO" }{}}{\fldrslt {\cs37\ul\cf2 lightSensor}}}
.Begin()) \par
  107     \{\par
  108     \par
  109     #if DEBUG == 1\par
  110 \par
  111         Serial.println( F("Si1145 is not ready!  1 second") );\par
  112 \par
  113     #endif\par
  114 \par
  115         delay(1000);\par
  116     \}\par
  117      \par
  118     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEP" }{}}{\fldrslt {\cs37\ul\cf2 setEnvSensorSettings}}}
();\par
  119     delay(10);  //Make sure sensor had enough time to turn on. BME280 requires 2ms to start up.\par
  120     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEQ" }{}}{\fldrslt {\cs37\ul\cf2 envSensor}}}
.begin();\par
  121     delay(10);  //Make sure sensor had enough time to turn on. BME280 requires 2ms to start up.\par
  122 \par
  123 #if DEBUG == 1 \par
  124     \par
  125     Serial.print( F("BME280 begin answer is :") );\par
  126     Serial.println({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEQ" }{}}{\fldrslt {\cs37\ul\cf2 envSensor}}}
.begin(), HEX);\par
  127     Serial.println();\par
  128 \par
  129 #endif\par
  130 \par
  131 \}\par
}
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolBoardSensors_a97095823ef7c8f5290812f1405b966b3_cgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolBoardSensors_a97095823ef7c8f5290812f1405b966b3_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v config\:CoolBoardSensors}
{\xe \v CoolBoardSensors\:config}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool CoolBoardSensors::config ()}}
\par
{\bkmkstart AAAAAAAAAG}
{\bkmkend AAAAAAAAAG}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAG" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::config()}}}: This method is provided to configure the sensor board : -activate 1 -deactivate 0\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid true if configuration is successful, false otherwise \par
}}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMX" }{}}{\fldrslt {\cs37\ul\cf2 289}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJR" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEH" }{}}{\fldrslt {\cs37\ul\cf2 airDataActive}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPS" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::airActive::humidity}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPT" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::lightActive::ir}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAED" }{}}{\fldrslt {\cs37\ul\cf2 lightDataActive}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPU" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::airActive::pressure}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPV" }{}}{\fldrslt {\cs37\ul\cf2 soilMoistureActive}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPW" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::airActive::temperature}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPX" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::lightActive::uv}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPY" }{}}{\fldrslt {\cs37\ul\cf2 vbatActive}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPZ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::lightActive::visible}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMJ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::begin()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   290 \{\par
  291 \par
  292 #if DEBUG == 1\par
  293 \par
  294     Serial.println( F("Entering CoolBoardSensors.config()") );\par
  295     Serial.println();\par
  296 \par
  297 #endif\par
  298 \par
  299     //read config file\par
  300     //update data\par
  301     File coolBoardSensorsConfig = SPIFFS.open("/coolBoardSensorsConfig.json", "r");\par
  302 \par
  303     if (!coolBoardSensorsConfig) \par
  304     \{\par
  305     \par
  306     #if DEBUG == 1\par
  307 \par
  308         Serial.println( F("failed to read /coolBoardSensorsConfig.json") );\par
  309         Serial.println();\par
  310     \par
  311     #endif\par
  312 \par
  313         return(false);\par
  314     \}\par
  315     else\par
  316     \{\par
  317         size_t size = coolBoardSensorsConfig.size();\par
  318         // Allocate a buffer to store contents of the file.\par
  319         std::unique_ptr<char[]> buf(new char[size]);\par
  320 \par
  321         coolBoardSensorsConfig.readBytes(buf.get(), size);\par
  322         DynamicJsonBuffer jsonBuffer;\par
  323         JsonObject& json = jsonBuffer.parseObject(buf.get());\par
  324         if (!json.success()) \par
  325         \{\par
  326         \par
  327         #if DEBUG == 1\par
  328 \par
  329             Serial.println( F("failed to parse coolBoardSensorsConfig json") );\par
  330             Serial.println();\par
  331         \par
  332         #endif\par
  333     \par
  334             return(false);\par
  335         \} \par
  336         else\par
  337         \{\par
  338 \par
  339         #if DEBUG == 1\par
  340 \par
  341             Serial.println( F("Configuration Json is :") );\par
  342             json.printTo(Serial);\par
  343             Serial.println();\par
  344 \par
  345             Serial.print(F("jsonBuffer size: "));\par
  346             Serial.println(jsonBuffer.size());\par
  347             Serial.println();\par
  348 \par
  349             \par
  350         \par
  351         #endif\par
  352             \par
  353             if(json["BME280"]["temperature"].success() )\par
  354             \{           \par
  355                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEH" }{}}{\fldrslt {\cs37\ul\cf2 airDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEI" }{}}{\fldrslt {\cs37\ul\cf2 temperature}}}
=json["BME280"]["temperature"];\par
  356             \}\par
  357             else\par
  358             \{\par
  359                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEH" }{}}{\fldrslt {\cs37\ul\cf2 airDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEI" }{}}{\fldrslt {\cs37\ul\cf2 temperature}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEH" }{}}{\fldrslt {\cs37\ul\cf2 airDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEI" }{}}{\fldrslt {\cs37\ul\cf2 temperature}}}
;            \par
  360             \}\par
  361             json["BME280"]["temperature"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEH" }{}}{\fldrslt {\cs37\ul\cf2 airDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEI" }{}}{\fldrslt {\cs37\ul\cf2 temperature}}}
;\par
  362             \par
  363             \par
  364             if(json["BME280"]["humidity"].success() )\par
  365             \{           \par
  366             \par
  367                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEH" }{}}{\fldrslt {\cs37\ul\cf2 airDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEJ" }{}}{\fldrslt {\cs37\ul\cf2 humidity}}}
=json["BME280"]["humidity"];\par
  368             \}\par
  369             else\par
  370             \{\par
  371                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEH" }{}}{\fldrslt {\cs37\ul\cf2 airDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEJ" }{}}{\fldrslt {\cs37\ul\cf2 humidity}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEH" }{}}{\fldrslt {\cs37\ul\cf2 airDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEJ" }{}}{\fldrslt {\cs37\ul\cf2 humidity}}}
;\par
  372             \}\par
  373             json["BME280"]["humidity"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEH" }{}}{\fldrslt {\cs37\ul\cf2 airDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEJ" }{}}{\fldrslt {\cs37\ul\cf2 humidity}}}
;\par
  374             \par
  375             \par
  376             if(json["BME280"]["pressure"].success() )\par
  377             \{\par
  378                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEH" }{}}{\fldrslt {\cs37\ul\cf2 airDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEK" }{}}{\fldrslt {\cs37\ul\cf2 pressure}}}
=json["BME280"]["pressure"];\par
  379             \}\par
  380             else\par
  381             \{\par
  382                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEH" }{}}{\fldrslt {\cs37\ul\cf2 airDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEK" }{}}{\fldrslt {\cs37\ul\cf2 pressure}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEH" }{}}{\fldrslt {\cs37\ul\cf2 airDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEK" }{}}{\fldrslt {\cs37\ul\cf2 pressure}}}
;\par
  383             \}\par
  384             json["BME280"]["pressure"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEH" }{}}{\fldrslt {\cs37\ul\cf2 airDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEK" }{}}{\fldrslt {\cs37\ul\cf2 pressure}}}
;\par
  385 \par
  386             \par
  387             if(json["SI114X"]["visible"].success() )\par
  388             \{\par
  389                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAED" }{}}{\fldrslt {\cs37\ul\cf2 lightDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEE" }{}}{\fldrslt {\cs37\ul\cf2 visible}}}
=json["SI114X"]["visible"];\par
  390             \}\par
  391             else\par
  392             \{\par
  393                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAED" }{}}{\fldrslt {\cs37\ul\cf2 lightDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEE" }{}}{\fldrslt {\cs37\ul\cf2 visible}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAED" }{}}{\fldrslt {\cs37\ul\cf2 lightDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEE" }{}}{\fldrslt {\cs37\ul\cf2 visible}}}
;\par
  394             \}\par
  395             json["SI114X"]["visible"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAED" }{}}{\fldrslt {\cs37\ul\cf2 lightDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEE" }{}}{\fldrslt {\cs37\ul\cf2 visible}}}
;\par
  396             \par
  397             \par
  398             if(json["SI114X"]["ir"].success() )\par
  399             \{           \par
  400                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAED" }{}}{\fldrslt {\cs37\ul\cf2 lightDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEF" }{}}{\fldrslt {\cs37\ul\cf2 ir}}}
=json["SI114X"]["ir"];\par
  401             \}\par
  402             else\par
  403             \{\par
  404                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAED" }{}}{\fldrslt {\cs37\ul\cf2 lightDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEF" }{}}{\fldrslt {\cs37\ul\cf2 ir}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAED" }{}}{\fldrslt {\cs37\ul\cf2 lightDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEF" }{}}{\fldrslt {\cs37\ul\cf2 ir}}}
;\par
  405             \}\par
  406             json["SI114X"]["ir"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAED" }{}}{\fldrslt {\cs37\ul\cf2 lightDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEF" }{}}{\fldrslt {\cs37\ul\cf2 ir}}}
;\par
  407 \par
  408             \par
  409             if(json["SI114X"]["uv"].success() )         \par
  410             \{           \par
  411                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAED" }{}}{\fldrslt {\cs37\ul\cf2 lightDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEG" }{}}{\fldrslt {\cs37\ul\cf2 uv}}}
=json["SI114X"]["uv"];\par
  412             \}\par
  413             else\par
  414             \{\par
  415                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAED" }{}}{\fldrslt {\cs37\ul\cf2 lightDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEG" }{}}{\fldrslt {\cs37\ul\cf2 uv}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAED" }{}}{\fldrslt {\cs37\ul\cf2 lightDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEG" }{}}{\fldrslt {\cs37\ul\cf2 uv}}}
;\par
  416             \}\par
  417             json["SI114X"]["uv"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAED" }{}}{\fldrslt {\cs37\ul\cf2 lightDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEG" }{}}{\fldrslt {\cs37\ul\cf2 uv}}}
;\par
  418 \par
  419 \par
  420             if(json["vbat"].success() )\par
  421             \{\par
  422                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEL" }{}}{\fldrslt {\cs37\ul\cf2 vbatActive}}}
=json["vbat"];\par
  423             \}\par
  424             else\par
  425             \{\par
  426                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEL" }{}}{\fldrslt {\cs37\ul\cf2 vbatActive}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEL" }{}}{\fldrslt {\cs37\ul\cf2 vbatActive}}}
;\par
  427             \}\par
  428             json["vbat"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEL" }{}}{\fldrslt {\cs37\ul\cf2 vbatActive}}}
;\par
  429 \par
  430             \par
  431             if(json["soilMoisture"].success() )\par
  432             \{           \par
  433                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEM" }{}}{\fldrslt {\cs37\ul\cf2 soilMoistureActive}}}
= json["soilMoisture"];\par
  434             \}\par
  435             else\par
  436             \{\par
  437                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEM" }{}}{\fldrslt {\cs37\ul\cf2 soilMoistureActive}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEM" }{}}{\fldrslt {\cs37\ul\cf2 soilMoistureActive}}}
;\par
  438             \}\par
  439             json["soilMoisture"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEM" }{}}{\fldrslt {\cs37\ul\cf2 soilMoistureActive}}}
;\par
  440 \par
  441             coolBoardSensorsConfig.close();         \par
  442             coolBoardSensorsConfig = SPIFFS.open("/coolBoardSensorsConfig.json", "w");          \par
  443             if(!coolBoardSensorsConfig)\par
  444             \{\par
  445             \par
  446             #if DEBUG == 1\par
  447 \par
  448                 Serial.println( F("failed to write to /coolBoardSensorsConfig.json") );\par
  449                 Serial.println();\par
  450             \par
  451             #endif\par
  452 \par
  453                 return(false);          \par
  454             \}  \par
  455 \par
  456             json.printTo(coolBoardSensorsConfig);\par
  457             coolBoardSensorsConfig.close();         \par
  458             \par
  459         #if DEBUG == 1\par
  460 \par
  461             Serial.println( F("Saved Configuration Json is : ") );\par
  462             json.printTo(Serial);\par
  463             Serial.println();\par
  464         \par
  465         #endif\par
  466 \par
  467             return(true); \par
  468         \}\par
  469     \}   \par
  470 \par
  471 \}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolBoardSensors_a9a218895c5423375c33c08f2c56fb23a_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v end\:CoolBoardSensors}
{\xe \v CoolBoardSensors\:end}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CoolBoardSensors::end ()}}
\par
{\bkmkstart AAAAAAAAER}
{\bkmkend AAAAAAAAER}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAER" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::end()}}}: This method is provided to end the sensors on the sensor board \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQE" }{}}{\fldrslt {\cs37\ul\cf2 138}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJR" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQC" }{}}{\fldrslt {\cs37\ul\cf2 lightSensor}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   139 \{\par
  140 \par
  141 #if DEBUG == 1  \par
  142     Serial.println( F("Entering CoolBoardSensors.end()") );\par
  143     Serial.println();\par
  144 \par
  145 #endif\par
  146 \par
  147     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEO" }{}}{\fldrslt {\cs37\ul\cf2 lightSensor}}}
.DeInit();\par
  148 \par
  149 \}\par
}
}
{\xe \v initReadI2C\:CoolBoardSensors}
{\xe \v CoolBoardSensors\:initReadI2C}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CoolBoardSensors::initReadI2C ()}}
\par
{\bkmkstart AAAAAAAAEN}
{\bkmkend AAAAAAAAEN}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEN" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::initReadI2C()}}}: This method is provided to enable the I2C Interface on the sensor board. \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQB" }{}}{\fldrslt {\cs37\ul\cf2 246}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJR" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPP" }{}}{\fldrslt {\cs37\ul\cf2 EnI2C}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMN" }{}}{\fldrslt {\cs37\ul\cf2 begin()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPE" }{}}{\fldrslt {\cs37\ul\cf2 read()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   247 \{\par
  248 \par
  249 #if DEBUG == 1\par
  250 \par
  251     Serial.println( F("Entering CoolBoardSensors.initReadI2C()") );\par
  252     Serial.println();\par
  253 \par
  254 #endif\par
  255  \par
  256     digitalWrite({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEB" }{}}{\fldrslt {\cs37\ul\cf2 EnI2C}}}
,HIGH);//HIGH= I2C Enable\par
  257 \par
  258 \}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolBoardSensors_acad6a8418c66d36868caca23c844ecb6_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v printConf\:CoolBoardSensors}
{\xe \v CoolBoardSensors\:printConf}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CoolBoardSensors::printConf ()}}
\par
{\bkmkstart AAAAAAAAAI}
{\bkmkend AAAAAAAAAI}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAI" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::printConf()}}}: This method is provided to print the configuration to the Serial Monitor \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANQ" }{}}{\fldrslt {\cs37\ul\cf2 479}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJR" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEH" }{}}{\fldrslt {\cs37\ul\cf2 airDataActive}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPS" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::airActive::humidity}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPT" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::lightActive::ir}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAED" }{}}{\fldrslt {\cs37\ul\cf2 lightDataActive}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPU" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::airActive::pressure}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPV" }{}}{\fldrslt {\cs37\ul\cf2 soilMoistureActive}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPW" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::airActive::temperature}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPX" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::lightActive::uv}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPY" }{}}{\fldrslt {\cs37\ul\cf2 vbatActive}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPZ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::lightActive::visible}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMJ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::begin()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   480 \{\par
  481 \par
  482 #if DEBUG == 1\par
  483 \par
  484     Serial.println( F("Entering CoolBoardSensors.printConf()") );\par
  485     Serial.println();\par
  486 \par
  487 #endif\par
  488 \par
  489     Serial.println("Sensors Configuration : ");\par
  490     \par
  491     Serial.print("airDataActive.temperature : ");\par
  492     Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEH" }{}}{\fldrslt {\cs37\ul\cf2 airDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEI" }{}}{\fldrslt {\cs37\ul\cf2 temperature}}}
);\par
  493 \par
  494     Serial.print("airDataActive.humidity : ");\par
  495     Serial.println({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEH" }{}}{\fldrslt {\cs37\ul\cf2 airDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEJ" }{}}{\fldrslt {\cs37\ul\cf2 humidity}}}
);\par
  496 \par
  497     Serial.print("airDataActive.pressure : ");\par
  498     Serial.println({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEH" }{}}{\fldrslt {\cs37\ul\cf2 airDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEK" }{}}{\fldrslt {\cs37\ul\cf2 pressure}}}
);\par
  499 \par
  500     Serial.print("lightDataActive.visible : ");\par
  501     Serial.println({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAED" }{}}{\fldrslt {\cs37\ul\cf2 lightDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEE" }{}}{\fldrslt {\cs37\ul\cf2 visible}}}
);\par
  502 \par
  503     Serial.print("lightDataActive.ir : ");\par
  504     Serial.println({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAED" }{}}{\fldrslt {\cs37\ul\cf2 lightDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEF" }{}}{\fldrslt {\cs37\ul\cf2 ir}}}
);\par
  505 \par
  506     Serial.print("lightDataActive.uv : ");\par
  507     Serial.println({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAED" }{}}{\fldrslt {\cs37\ul\cf2 lightDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEG" }{}}{\fldrslt {\cs37\ul\cf2 uv}}}
);\par
  508     \par
  509     Serial.print("vbatActive : ");\par
  510     Serial.println({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEL" }{}}{\fldrslt {\cs37\ul\cf2 vbatActive}}}
);\par
  511 \par
  512     Serial.print("soilMoitureActive : ");\par
  513     Serial.println({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEM" }{}}{\fldrslt {\cs37\ul\cf2 soilMoistureActive}}}
);\par
  514 \par
  515     Serial.println();\par
  516 \}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolBoardSensors_af6fd79505815b204c178617ecf54c873_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v read\:CoolBoardSensors}
{\xe \v CoolBoardSensors\:read}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String CoolBoardSensors::read ()}}
\par
{\bkmkstart AAAAAAAACW}
{\bkmkend AAAAAAAACW}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACW" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::read()}}}: This method is provided to return the data read by the sensor board\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid a json string containing the sensors data \par
}}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPE" }{}}{\fldrslt {\cs37\ul\cf2 159}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJR" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEH" }{}}{\fldrslt {\cs37\ul\cf2 airDataActive}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQA" }{}}{\fldrslt {\cs37\ul\cf2 envSensor}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPS" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::airActive::humidity}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQB" }{}}{\fldrslt {\cs37\ul\cf2 initReadI2C()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPT" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::lightActive::ir}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAED" }{}}{\fldrslt {\cs37\ul\cf2 lightDataActive}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQC" }{}}{\fldrslt {\cs37\ul\cf2 lightSensor}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPU" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::airActive::pressure}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQF" }{}}{\fldrslt {\cs37\ul\cf2 readMoisture()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQG" }{}}{\fldrslt {\cs37\ul\cf2 readVBat()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPV" }{}}{\fldrslt {\cs37\ul\cf2 soilMoistureActive}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPW" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::airActive::temperature}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPX" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::lightActive::uv}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPY" }{}}{\fldrslt {\cs37\ul\cf2 vbatActive}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPZ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::lightActive::visible}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOP" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::readSensors()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   160 \{\par
  161 \par
  162 #if DEBUG == 1 \par
  163     \par
  164     Serial.println( F("Entering CoolBoardSensors.read()") );\par
  165     Serial.println();\par
  166 \par
  167 #endif\par
  168 \par
  169     String data;\par
  170     DynamicJsonBuffer  jsonBuffer ;\par
  171     JsonObject& root = jsonBuffer.createObject();\par
  172     \par
  173     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEN" }{}}{\fldrslt {\cs37\ul\cf2 initReadI2C}}}
();\par
  174     delay(100);\par
  175     //light data\par
  176     if({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAED" }{}}{\fldrslt {\cs37\ul\cf2 lightDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEE" }{}}{\fldrslt {\cs37\ul\cf2 visible}}}
)\par
  177     \{\par
  178         root["visibleLight"] ={\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEO" }{}}{\fldrslt {\cs37\ul\cf2 lightSensor}}}
.ReadVisible() ;\par
  179     \}\par
  180     \par
  181     if({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAED" }{}}{\fldrslt {\cs37\ul\cf2 lightDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEF" }{}}{\fldrslt {\cs37\ul\cf2 ir}}}
)\par
  182     \{\par
  183         root["infraRed"] = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEO" }{}}{\fldrslt {\cs37\ul\cf2 lightSensor}}}
.ReadIR();\par
  184     \}\par
  185 \par
  186     if({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAED" }{}}{\fldrslt {\cs37\ul\cf2 lightDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEG" }{}}{\fldrslt {\cs37\ul\cf2 uv}}}
)\par
  187     \{\par
  188         float tempUV = (float){\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEO" }{}}{\fldrslt {\cs37\ul\cf2 lightSensor}}}
.ReadUV()/100 ;\par
  189         root["ultraViolet"] = tempUV;\par
  190     \}\par
  191     \par
  192     //BME280 data\par
  193     if({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEH" }{}}{\fldrslt {\cs37\ul\cf2 airDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEK" }{}}{\fldrslt {\cs37\ul\cf2 pressure}}}
)  \par
  194     \{\par
  195         root["Pressure"] ={\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEQ" }{}}{\fldrslt {\cs37\ul\cf2 envSensor}}}
.readFloatPressure();\par
  196     \}\par
  197     \par
  198         \par
  199     if({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEH" }{}}{\fldrslt {\cs37\ul\cf2 airDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEJ" }{}}{\fldrslt {\cs37\ul\cf2 humidity}}}
)  \par
  200     \{   \par
  201         root["Humidity"] ={\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEQ" }{}}{\fldrslt {\cs37\ul\cf2 envSensor}}}
.readFloatHumidity() ;\par
  202     \}   \par
  203     \par
  204     if({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEH" }{}}{\fldrslt {\cs37\ul\cf2 airDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEI" }{}}{\fldrslt {\cs37\ul\cf2 temperature}}}
)\par
  205     \{\par
  206         root["Temperature"]={\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEQ" }{}}{\fldrslt {\cs37\ul\cf2 envSensor}}}
.readTempC();\par
  207     \}\par
  208     \par
  209     //Vbat\par
  210     if({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEL" }{}}{\fldrslt {\cs37\ul\cf2 vbatActive}}}
)  \par
  211     \{   \par
  212         root["Vbat"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAES" }{}}{\fldrslt {\cs37\ul\cf2 readVBat}}}
();\par
  213     \}\par
  214     \par
  215     //earth Moisture\par
  216     if({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEM" }{}}{\fldrslt {\cs37\ul\cf2 soilMoistureActive}}}
)\par
  217     \{   \par
  218         root["soilMoisture"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAET" }{}}{\fldrslt {\cs37\ul\cf2 readMoisture}}}
();\par
  219     \}\par
  220     \par
  221     \par
  222     root.printTo(data);\par
  223 \par
  224 #if DEBUG == 1\par
  225 \par
  226     Serial.println( F("CoolBoardSensors data is :") );\par
  227     root.printTo(Serial);\par
  228     Serial.println();\par
  229     \par
  230     Serial.print(F("jsonBuffer size: "));\par
  231     Serial.println(jsonBuffer.size());\par
  232     Serial.println();\par
  233 \par
  234 #endif\par
  235 \par
  236     return(data);   \par
  237     \par
  238 \par
  239 \}\par
}
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolBoardSensors_a91badb2539d91fda8679f2a597874c48_cgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolBoardSensors_a91badb2539d91fda8679f2a597874c48_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v readMoisture\:CoolBoardSensors}
{\xe \v CoolBoardSensors\:readMoisture}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float CoolBoardSensors::readMoisture ()}}
\par
{\bkmkstart AAAAAAAAET}
{\bkmkend AAAAAAAAET}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAET" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::readMoisture()}}}: This method is provided to red the Soil Moisture\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid a float represnting the soil moisture \par
}}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQF" }{}}{\fldrslt {\cs37\ul\cf2 602}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJR" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPO" }{}}{\fldrslt {\cs37\ul\cf2 AnMplex}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPQ" }{}}{\fldrslt {\cs37\ul\cf2 EnMoisture}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPE" }{}}{\fldrslt {\cs37\ul\cf2 read()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   603 \{\par
  604 \par
  605 #if DEBUG == 1\par
  606     \par
  607     Serial.println( F("Entering CoolBoardSensors.readMoisture()") );\par
  608     Serial.println();\par
  609     \par
  610 #endif\par
  611 \par
  612     digitalWrite({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEA" }{}}{\fldrslt {\cs37\ul\cf2 EnMoisture}}}
, LOW);                 //enable moisture sensor and waith a bit\par
  613 \par
  614     digitalWrite({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADZ" }{}}{\fldrslt {\cs37\ul\cf2 AnMplex}}}
, HIGH);            //enable analog Switch to get the moisture\par
  615 \par
  616     delay(2000);\par
  617 \par
  618     int val = analogRead(A0);                       //read the value form the moisture sensor\par
  619 \par
  620     float result = (float)map(val, 0, 890, 0, 100); \par
  621 \par
  622     digitalWrite({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEA" }{}}{\fldrslt {\cs37\ul\cf2 EnMoisture}}}
, HIGH);                  //disable moisture sensor for minimum wear\par
  623     \par
  624 #if DEBUG == 1 \par
  625 \par
  626     Serial.println( F("Soil Moisture is : ") );\par
  627     Serial.println(result);\par
  628     Serial.println();\par
  629 \par
  630 #endif \par
  631 \par
  632     return (result);\par
  633 \}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolBoardSensors_a8761bff50373c485f4465c8db47d0633_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v readVBat\:CoolBoardSensors}
{\xe \v CoolBoardSensors\:readVBat}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float CoolBoardSensors::readVBat ()}}
\par
{\bkmkstart AAAAAAAAES}
{\bkmkend AAAAAAAAES}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAES" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::readVBat()}}}: This method is provided to read the Battery Voltage.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid a float representing the battery voltage \par
}}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQG" }{}}{\fldrslt {\cs37\ul\cf2 565}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJR" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPO" }{}}{\fldrslt {\cs37\ul\cf2 AnMplex}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPE" }{}}{\fldrslt {\cs37\ul\cf2 read()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   566 \{\par
  567 \par
  568 #if DEBUG == 1\par
  569 \par
  570     Serial.println( F("Entering CoolBoardSensors.readVBat()") );\par
  571     Serial.println();\par
  572 \par
  573 #endif\par
  574 \par
  575     digitalWrite(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADZ" }{}}{\fldrslt {\cs37\ul\cf2 AnMplex}}}
, LOW);                            //Enable Analog Switch to get the batterie tension\par
  576     \par
  577     delay(200);\par
  578     \par
  579     int raw = analogRead(A0);                                    //read in batterie tension\par
  580     \par
  581     float val = 6.04 / 1024 * raw;                               //convert it apprimatly right tension in volts\par
  582     \par
  583 #if DEBUG == 1\par
  584 \par
  585     Serial.println( F("Vbat is : ") );\par
  586     Serial.println(val);\par
  587     Serial.println();\par
  588 \par
  589 #endif\par
  590 \par
  591     return (val);   \par
  592 \}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolBoardSensors_a6944b6ea7bce8e2fce1b434acfd9d5f3_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v setEnvSensorSettings\:CoolBoardSensors}
{\xe \v CoolBoardSensors\:setEnvSensorSettings}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CoolBoardSensors::setEnvSensorSettings (uint8_t  {\i commInterface} = {\f2 I2C_MODE}, uint8_t  {\i I2CAddress} = {\f2 0x76}, uint8_t  {\i runMode} = {\f2 3}, uint8_t  {\i tStandby} = {\f2 0}, uint8_t  {\i filter} = {\f2 0}, uint8_t  {\i tempOverSample} = {\f2 1}, uint8_t  {\i pressOverSample} = {\f2 1}, uint8_t  {\i humidOverSample} = {\f2 1})}}
\par
{\bkmkstart AAAAAAAAEP}
{\bkmkend AAAAAAAAEP}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
CoolBoardSensors::setEnvSensorSetting(): This method is provided to set the enviornment sensor settings , if argument is ommitted , default value will be assigned \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQD" }{}}{\fldrslt {\cs37\ul\cf2 525}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJR" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQA" }{}}{\fldrslt {\cs37\ul\cf2 envSensor}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMN" }{}}{\fldrslt {\cs37\ul\cf2 begin()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   530 \{\par
  531 \par
  532 #if DEBUG == 1\par
  533     \par
  534     Serial.println( F("Entering CoolBoardSensors.setEnvSensorSettings()") );\par
  535     Serial.println();\par
  536 \par
  537 #endif\par
  538   \par
  539     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEQ" }{}}{\fldrslt {\cs37\ul\cf2 envSensor}}}
.settings.commInterface = commInterface;      \par
  540 \par
  541     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEQ" }{}}{\fldrslt {\cs37\ul\cf2 envSensor}}}
.settings.I2CAddress = I2CAddress;\par
  542 \par
  543     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEQ" }{}}{\fldrslt {\cs37\ul\cf2 envSensor}}}
.settings.runMode = runMode; \par
  544 \par
  545     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEQ" }{}}{\fldrslt {\cs37\ul\cf2 envSensor}}}
.settings.tStandby = tStandby; \par
  546 \par
  547     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEQ" }{}}{\fldrslt {\cs37\ul\cf2 envSensor}}}
.settings.filter = filter; \par
  548 \par
  549     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEQ" }{}}{\fldrslt {\cs37\ul\cf2 envSensor}}}
.settings.tempOverSample = tempOverSample;\par
  550 \par
  551     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEQ" }{}}{\fldrslt {\cs37\ul\cf2 envSensor}}}
.settings.pressOverSample = pressOverSample;\par
  552 \par
  553     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEQ" }{}}{\fldrslt {\cs37\ul\cf2 envSensor}}}
.settings.humidOverSample = humidOverSample;\par
  554 \par
  555 \}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolBoardSensors_a406307ffd70272282d91479c7ed8d66f_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v stopReadI2C\:CoolBoardSensors}
{\xe \v CoolBoardSensors\:stopReadI2C}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CoolBoardSensors::stopReadI2C ()}}
\par
{\bkmkstart AAAAAAAAEU}
{\bkmkend AAAAAAAAEU}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEU" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::stopReadI2C()}}}: This method is provided to disable the I2C Interface on the sensor board \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQH" }{}}{\fldrslt {\cs37\ul\cf2 265}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJR" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPP" }{}}{\fldrslt {\cs37\ul\cf2 EnI2C}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   266 \{\par
  267 \par
  268 #if DEBUG == 1\par
  269 \par
  270     Serial.println( F("Entering CoolBoardSensors.stopReadI2C()") );\par
  271     Serial.println();\par
  272 \par
  273 #endif\par
  274 \par
  275     digitalWrite({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEB" }{}}{\fldrslt {\cs37\ul\cf2 EnI2C}}}
,LOW);//HIGH= I2C Enable\par
  276 \par
  277 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v airDataActive\:CoolBoardSensors}
{\xe \v CoolBoardSensors\:airDataActive}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
struct {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEW" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::airActive}}}
 CoolBoardSensors::airDataActive{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAEH}
{\bkmkend AAAAAAAAEH}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPR" }{}}{\fldrslt {\cs37\ul\cf2 allActive()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMX" }{}}{\fldrslt {\cs37\ul\cf2 config()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANQ" }{}}{\fldrslt {\cs37\ul\cf2 printConf()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPE" }{}}{\fldrslt {\cs37\ul\cf2 read()}}}
.}\par
}
{\xe \v AnMplex\:CoolBoardSensors}
{\xe \v CoolBoardSensors\:AnMplex}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const int CoolBoardSensors::AnMplex = 12{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADZ}
{\bkmkend AAAAAAAADZ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPO" }{}}{\fldrslt {\cs37\ul\cf2 95}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJT" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPN" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQF" }{}}{\fldrslt {\cs37\ul\cf2 readMoisture()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQG" }{}}{\fldrslt {\cs37\ul\cf2 readVBat()}}}
.}\par
}
{\xe \v EnI2C\:CoolBoardSensors}
{\xe \v CoolBoardSensors\:EnI2C}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const int CoolBoardSensors::EnI2C = 5{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAEB}
{\bkmkend AAAAAAAAEB}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPP" }{}}{\fldrslt {\cs37\ul\cf2 96}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJT" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPN" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQB" }{}}{\fldrslt {\cs37\ul\cf2 initReadI2C()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQH" }{}}{\fldrslt {\cs37\ul\cf2 stopReadI2C()}}}
.}\par
}
{\xe \v EnMoisture\:CoolBoardSensors}
{\xe \v CoolBoardSensors\:EnMoisture}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const int CoolBoardSensors::EnMoisture = 13{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAEA}
{\bkmkend AAAAAAAAEA}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPQ" }{}}{\fldrslt {\cs37\ul\cf2 94}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJT" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPN" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQF" }{}}{\fldrslt {\cs37\ul\cf2 readMoisture()}}}
.}\par
}
{\xe \v envSensor\:CoolBoardSensors}
{\xe \v CoolBoardSensors\:envSensor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
BME280 CoolBoardSensors::envSensor}}
\par
{\bkmkstart AAAAAAAAEQ}
{\bkmkend AAAAAAAAEQ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQA" }{}}{\fldrslt {\cs37\ul\cf2 74}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJT" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMN" }{}}{\fldrslt {\cs37\ul\cf2 begin()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPE" }{}}{\fldrslt {\cs37\ul\cf2 read()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQD" }{}}{\fldrslt {\cs37\ul\cf2 setEnvSensorSettings()}}}
.}\par
}
{\xe \v lightDataActive\:CoolBoardSensors}
{\xe \v CoolBoardSensors\:lightDataActive}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
struct {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEV" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::lightActive}}}
 CoolBoardSensors::lightDataActive{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAED}
{\bkmkend AAAAAAAAED}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPR" }{}}{\fldrslt {\cs37\ul\cf2 allActive()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMX" }{}}{\fldrslt {\cs37\ul\cf2 config()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANQ" }{}}{\fldrslt {\cs37\ul\cf2 printConf()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPE" }{}}{\fldrslt {\cs37\ul\cf2 read()}}}
.}\par
}
{\xe \v lightSensor\:CoolBoardSensors}
{\xe \v CoolBoardSensors\:lightSensor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
SI114X CoolBoardSensors::lightSensor = SI114X()}}
\par
{\bkmkstart AAAAAAAAEO}
{\bkmkend AAAAAAAAEO}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQC" }{}}{\fldrslt {\cs37\ul\cf2 72}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJT" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMN" }{}}{\fldrslt {\cs37\ul\cf2 begin()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQE" }{}}{\fldrslt {\cs37\ul\cf2 end()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPE" }{}}{\fldrslt {\cs37\ul\cf2 read()}}}
.}\par
}
{\xe \v soilMoistureActive\:CoolBoardSensors}
{\xe \v CoolBoardSensors\:soilMoistureActive}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
byte CoolBoardSensors::soilMoistureActive =0{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAEM}
{\bkmkend AAAAAAAAEM}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPV" }{}}{\fldrslt {\cs37\ul\cf2 99}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJT" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPR" }{}}{\fldrslt {\cs37\ul\cf2 allActive()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMX" }{}}{\fldrslt {\cs37\ul\cf2 config()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANQ" }{}}{\fldrslt {\cs37\ul\cf2 printConf()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPE" }{}}{\fldrslt {\cs37\ul\cf2 read()}}}
.}\par
}
{\xe \v vbatActive\:CoolBoardSensors}
{\xe \v CoolBoardSensors\:vbatActive}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
byte CoolBoardSensors::vbatActive =0{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAEL}
{\bkmkend AAAAAAAAEL}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPY" }{}}{\fldrslt {\cs37\ul\cf2 98}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJT" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPR" }{}}{\fldrslt {\cs37\ul\cf2 allActive()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMX" }{}}{\fldrslt {\cs37\ul\cf2 config()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANQ" }{}}{\fldrslt {\cs37\ul\cf2 printConf()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPE" }{}}{\fldrslt {\cs37\ul\cf2 read()}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADD" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors.h}}}
\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJP" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors.cpp}}}
\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
CoolFileSystem Class Reference\par \pard\plain 
{\tc\tcl2 \v CoolFileSystem}
{\xe \v CoolFileSystem}
{\bkmkstart AAAAAAAADM}
{\bkmkend AAAAAAAADM}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class handles the file system. }}\par
{
{\f2 #include <CoolFileSystem.h>}}\par
Collaboration diagram for CoolFileSystem:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolFileSystem__coll__graph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACP" }{}}{\fldrslt {\cs37\ul\cf2 begin}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACV" }{}}{\fldrslt {\cs37\ul\cf2 updateConfigFiles}}}
 (String answer)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFA" }{}}{\fldrslt {\cs37\ul\cf2 fileUpdate}}}
 (String update, const char *path)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACN" }{}}{\fldrslt {\cs37\ul\cf2 saveSensorData}}}
 (const char *data)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEY" }{}}{\fldrslt {\cs37\ul\cf2 saveSensorDataCSV}}}
 (const char *data)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABX" }{}}{\fldrslt {\cs37\ul\cf2 isDataSaved}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACB" }{}}{\fldrslt {\cs37\ul\cf2 getSensorSavedData}}}
 ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEX" }{}}{\fldrslt {\cs37\ul\cf2 savedData}}}
 =0\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class handles the file system. \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQK" }{}}{\fldrslt {\cs37\ul\cf2 22}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJY" }{}}{\fldrslt {\cs37\ul\cf2 CoolFileSystem.h}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v begin\:CoolFileSystem}
{\xe \v CoolFileSystem\:begin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool CoolFileSystem::begin ()}}
\par
{\bkmkstart AAAAAAAACP}
{\bkmkend AAAAAAAACP}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACP" }{}}{\fldrslt {\cs37\ul\cf2 CoolFileSystem::begin()}}}: This method is provided to start the SPIFFS object.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid true if SPIFFS was initialized correctly, false otherwise \par
}}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANV" }{}}{\fldrslt {\cs37\ul\cf2 33}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJW" }{}}{\fldrslt {\cs37\ul\cf2 CoolFileSystem.cpp}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANU" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::config()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    34 \{\par
   35 \par
   36 #if DEBUG == 1\par
   37 \par
   38     Serial.println( F("Entering CoolFileSystem.begin()") );\par
   39     Serial.println();   \par
   40     Serial.print( F("SPIFFS success ? ") );\par
   41     Serial.println(SPIFFS.begin());\par
   42     Serial.println();\par
   43 \par
   44 #endif\par
   45 \par
   46     return( SPIFFS.begin() );                                   //Initialize Filesystem\par
   47 \par
   48 \}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolFileSystem_a6ba6f666ed4c530174f8569d2c636748_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v fileUpdate\:CoolFileSystem}
{\xe \v CoolFileSystem\:fileUpdate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool CoolFileSystem::fileUpdate (String  {\i update}, const char *  {\i path})}}
\par
{\bkmkstart AAAAAAAAFA}
{\bkmkend AAAAAAAAFA}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
CoolFileSystem::fileUpdate( update msg, file path): This method is provided to ensure the correct update for each configuration file in the File system\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid true if successful , false otherwise \par
}}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQL" }{}}{\fldrslt {\cs37\ul\cf2 900}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJW" }{}}{\fldrslt {\cs37\ul\cf2 CoolFileSystem.cpp}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALS" }{}}{\fldrslt {\cs37\ul\cf2 updateConfigFiles()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   901 \{\par
  902 \par
  903 #if DEBUG == 1\par
  904 \par
  905     Serial.println( F("Entering CoolFileSystem.fileUpdate()") );\par
  906     Serial.println();\par
  907     \par
  908     Serial.println(F("update msg is :"));\par
  909     Serial.println(update);\par
  910     \par
  911     Serial.println(F("file path is : "));\par
  912     Serial.println(path);   \par
  913 \par
  914 #endif\par
  915     //transfer update String to json\par
  916     DynamicJsonBuffer updateBuffer;\par
  917     JsonObject& updateJson = updateBuffer.parseObject(update.c_str() );\par
  918     \par
  919     if(updateJson.success())\par
  920     \{\par
  921     \par
  922     #if DEBUG ==1\par
  923         \par
  924         Serial.println(F("root parsing success :"));\par
  925         updateJson.printTo(Serial);\par
  926     \par
  927     #endif\par
  928 \par
  929     \}\par
  930     else\par
  931     \{\par
  932     \par
  933     #if DEBUG == 1 \par
  934     \par
  935         Serial.println(F("root parsing failure "));\par
  936     \par
  937     #endif\par
  938         \par
  939         return(false);  \par
  940 \par
  941     \}\par
  942     \par
  943     //open file in read mode\par
  944     File configFile = SPIFFS.open( path , "r");\par
  945     \par
  946     if(!configFile)\par
  947     \{   \par
  948     #if DEBUG == 1\par
  949         \par
  950         Serial.print( F("failed to read ") );\par
  951         Serial.println(path);\par
  952 \par
  953     #endif\par
  954         return(false);\par
  955     \}\par
  956 \par
  957     //copy file to a json\par
  958     size_t size = configFile.size();\par
  959 \par
  960     // Allocate a buffer to store contents of the file.\par
  961     std::unique_ptr < char[] > buf(new char[size]);\par
  962 \par
  963     configFile.readBytes(buf.get(), size);\par
  964 \par
  965     DynamicJsonBuffer fileBuffer;\par
  966 \par
  967     JsonObject & fileJson = fileBuffer.parseObject(buf.get());\par
  968 \par
  969     if (!fileJson.success())\par
  970     \{\par
  971 \par
  972     #if DEBUG == 1\par
  973 \par
  974         Serial.println( F("failed to parse json") );\par
  975 \par
  976     #endif\par
  977 \par
  978         return(false);\par
  979     \}\par
  980     \par
  981     //modify root to contain all the json keys: updated ones and non updated ones\par
  982     for (auto kv : fileJson) \par
  983     \{\par
  984         if( updateJson[kv.key].success() )\par
  985         \{\par
  986             fileJson[kv.key]=updateJson[kv.key];            \par
  987         \}\par
  988         else\par
  989         \{\par
  990             fileJson[kv.key]=fileJson[kv.key];\par
  991         \}\par
  992 \par
  993                 \par
  994     \}\par
  995 \par
  996 #if DEBUG == 1\par
  997 \par
  998     Serial.println(F("fileJson is now : "));\par
  999     fileJson.printTo(Serial);\par
 1000 \par
 1001 #endif\par
 1002 \par
 1003     //close the file\par
 1004     configFile.close();\par
 1005 \par
 1006     //open file in w mode\par
 1007     configFile = SPIFFS.open( path , "w");\par
 1008     \par
 1009     if(!configFile)\par
 1010     \{   \par
 1011     #if DEBUG == 1\par
 1012         \par
 1013         Serial.print( F("failed to open ") );\par
 1014         Serial.println(path);\par
 1015 \par
 1016     #endif\par
 1017         return(false);\par
 1018     \}\par
 1019     //print json to file    \par
 1020     \par
 1021     fileJson.printTo(configFile);\par
 1022     \par
 1023     //close file\par
 1024     configFile.close();\par
 1025 \par
 1026 \par
 1027 #if DEBUG == 1\par
 1028 \par
 1029     Serial.println( F("config is") );\par
 1030     fileJson.printTo(Serial);\par
 1031     Serial.println();\par
 1032 \par
 1033 #endif\par
 1034     \par
 1035     return(true);\par
 1036     \par
 1037 \}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolFileSystem_a13f2958f5b87757c31fc53797a30d23a_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v getSensorSavedData\:CoolFileSystem}
{\xe \v CoolFileSystem\:getSensorSavedData}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String CoolFileSystem::getSensorSavedData ()}}
\par
{\bkmkstart AAAAAAAACB}
{\bkmkend AAAAAAAACB}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
CoolFileSystem::getSensorData(): This method is provided to return the sensor data saved in the File System\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid string json of the saved sensor data file \par
}}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOT" }{}}{\fldrslt {\cs37\ul\cf2 789}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJW" }{}}{\fldrslt {\cs37\ul\cf2 CoolFileSystem.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQM" }{}}{\fldrslt {\cs37\ul\cf2 savedData}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOK" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::onLineMode()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   790 \{\par
  791 \par
  792 #if DEBUG == 1 \par
  793 \par
  794     Serial.println( F("Entering CoolFileSystem.getSensorSavedData()") );\par
  795     Serial.println();\par
  796 \par
  797 #endif\par
  798 \par
  799     //open sensors data file\par
  800     File sensorsData=SPIFFS.open("/sensorsData.json","r");\par
  801     \par
  802     if (!sensorsData)\par
  803     \{\par
  804 \par
  805     #if DEBUG == 1 \par
  806 \par
  807         Serial.println( F("Failed to read /sensorsData.json") );\par
  808 \par
  809     #endif\par
  810  \par
  811         return("failed to open file");\par
  812     \}\par
  813 \par
  814     else\par
  815     \{\par
  816         size_t size = sensorsData.size();\par
  817 \par
  818         // Allocate a buffer to store contents of the file.\par
  819         std::unique_ptr < char[] > buf(new char[size]);\par
  820 \par
  821         sensorsData.readBytes(buf.get(), size);\par
  822 \par
  823         DynamicJsonBuffer jsonBuffer;\par
  824 \par
  825         JsonObject & json = jsonBuffer.parseObject(buf.get());\par
  826         \par
  827         if (!json.success())\par
  828         \{\par
  829 \par
  830         #if DEBUG == 1\par
  831         \par
  832             Serial.println( F("failed to parse json") );\par
  833         \par
  834         #endif\par
  835         \par
  836             return("failed to parse json");\par
  837         \}\par
  838         else\par
  839         \{   \par
  840             //the return string\par
  841             String sensorDataString;\par
  842             \par
  843             //print the json to the string\par
  844             json.printTo(sensorDataString);\par
  845             \par
  846             //close the file\par
  847             sensorsData.close();\par
  848 \par
  849             //delete data in the file\par
  850             File sensorsData=SPIFFS.open("/sensorsData.json","w");\par
  851             File sensorsDataCSV=SPIFFS.open("/sensorsData.csv","w");\par
  852             if( (!sensorsData)||(!sensorsDataCSV) ) \par
  853             \{\par
  854             #if DEBUG == 1\par
  855         \par
  856                 Serial.println( F("failed to delete data in the file") );\par
  857         \par
  858             #endif\par
  859 \par
  860                 return("failed to delete data in the file");\par
  861             \}\par
  862 \par
  863             sensorsData.close();\par
  864             sensorsDataCSV.close();\par
  865 \par
  866             //position the saved data flag to false\par
  867             this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEX" }{}}{\fldrslt {\cs37\ul\cf2 savedData}}}
=false;  \par
  868             \par
  869         #if DEBUG == 1 \par
  870 \par
  871             Serial.println( F("saved data : ") );\par
  872             Serial.println(sensorDataString);\par
  873             Serial.println();\par
  874 \par
  875             Serial.print(F("jsonBuffer size: "));\par
  876             Serial.println(jsonBuffer.size());\par
  877             Serial.println();\par
  878 \par
  879         \par
  880         #endif\par
  881 \par
  882             //return the string\par
  883             return(sensorDataString);       \par
  884         \}\par
  885         \par
  886         \par
  887     \}\par
  888 \par
  889 \}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolFileSystem_a5c58bca3735c0ed3efb268d70ef998ef_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v isDataSaved\:CoolFileSystem}
{\xe \v CoolFileSystem\:isDataSaved}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool CoolFileSystem::isDataSaved ()}}
\par
{\bkmkstart AAAAAAAABX}
{\bkmkend AAAAAAAABX}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABX" }{}}{\fldrslt {\cs37\ul\cf2 CoolFileSystem::isDataSaved()}}}: This method is provided to report wether there is sensor data saved in the File System.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid true if there is data saved, false otherwise \par
}}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOU" }{}}{\fldrslt {\cs37\ul\cf2 724}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJW" }{}}{\fldrslt {\cs37\ul\cf2 CoolFileSystem.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQM" }{}}{\fldrslt {\cs37\ul\cf2 savedData}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOK" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::onLineMode()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   725 \{\par
  726 \par
  727 #if DEBUG == 1 \par
  728 \par
  729     Serial.println( F("Entering CoolFileSystem.isDataSaved()") );\par
  730     Serial.println();\par
  731 #endif\par
  732 \par
  733     File sensorsData=SPIFFS.open("/sensorsData.json","r");\par
  734     File sensorsDataCSV=SPIFFS.open("/sensorsData.csv","r");\par
  735     \par
  736     if( (!sensorsData)||(!sensorsDataCSV) ) \par
  737     \{\par
  738     #if DEBUG == 1\par
  739 \par
  740         Serial.println( F("failed to open files") );\par
  741 \par
  742     #endif\par
  743         \par
  744         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEX" }{}}{\fldrslt {\cs37\ul\cf2 savedData}}}
=false;\par
  745     \}\par
  746     else\par
  747     \{       \par
  748         #if DEBUG == 1\par
  749 \par
  750             Serial.print(F("sensors Data file size : "));\par
  751             Serial.println(sensorsData.size());\par
  752             Serial.println();\par
  753             \par
  754             Serial.print(F("sensors Data CSV file size : "));               \par
  755             Serial.println(sensorsDataCSV.size());\par
  756             Serial.println();\par
  757         #endif  \par
  758 \par
  759         if( (sensorsData.size()!=0) || (sensorsDataCSV.size()!=0) )\par
  760         \{\par
  761             this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEX" }{}}{\fldrslt {\cs37\ul\cf2 savedData}}}
=true;\par
  762         \}\par
  763         else\par
  764         \{\par
  765 \par
  766             this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEX" }{}}{\fldrslt {\cs37\ul\cf2 savedData}}}
=false;      \par
  767         \par
  768         \}   \par
  769     \}\par
  770 \par
  771 #if DEBUG == 1 \par
  772 \par
  773     Serial.print( F("savedData : ") );\par
  774     Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEX" }{}}{\fldrslt {\cs37\ul\cf2 savedData}}}
);\par
  775 \par
  776 #endif\par
  777 \par
  778     return( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEX" }{}}{\fldrslt {\cs37\ul\cf2 savedData}}}
 );\par
  779 \}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolFileSystem_a5a7eaeea7a9fbf8aaef651d862fa3b5b_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v saveSensorData\:CoolFileSystem}
{\xe \v CoolFileSystem\:saveSensorData}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool CoolFileSystem::saveSensorData (const char *  {\i data})}}
\par
{\bkmkstart AAAAAAAACN}
{\bkmkend AAAAAAAACN}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
CoolFileSystem::saveSensorData( data ): This method is provided to save the data on the local memory when there is no internet available\par
sets the saved data flag to TRUE when successful\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid true if the data was saved, false otherwise \par
}}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOQ" }{}}{\fldrslt {\cs37\ul\cf2 60}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJW" }{}}{\fldrslt {\cs37\ul\cf2 CoolFileSystem.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQM" }{}}{\fldrslt {\cs37\ul\cf2 savedData}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQN" }{}}{\fldrslt {\cs37\ul\cf2 saveSensorDataCSV()}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOL" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::offLineMode()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    61 \{\par
   62 \par
   63 #if DEBUG == 1\par
   64 \par
   65     Serial.println( F("Entering CoolFileSystem.saveSensorData()") );\par
   66     Serial.println();\par
   67 \par
   68 #endif\par
   69     \par
   70     File sensorsData=SPIFFS.open("/sensorsData.json","a");\par
   71 \par
   72     if(!sensorsData)\par
   73     \{\par
   74     \par
   75     #if DEBUG == 1\par
   76     \par
   77         Serial.println( F("failed to append to /sensorsData.json") );\par
   78         Serial.println();\par
   79     \par
   80     #endif\par
   81 \par
   82         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEX" }{}}{\fldrslt {\cs37\ul\cf2 savedData}}}
=false;\par
   83         return (false); \par
   84     \}   \par
   85 \par
   86     DynamicJsonBuffer jsonBuffer;\par
   87     JsonObject& root = jsonBuffer.parseObject(data);\par
   88 \par
   89     if( root.success() )\par
   90     \{\par
   91         root.printTo(sensorsData);\par
   92         sensorsData.println();\par
   93         sensorsData.close();\par
   94 \par
   95 \par
   96     #if DEBUG == 1\par
   97         \par
   98         Serial.print(F("jsonBuffer size: "));\par
   99         Serial.println(jsonBuffer.size());\par
  100         Serial.println();\par
  101 \par
  102         sensorsData=SPIFFS.open("/sensorsData.json","r");\par
  103         \par
  104         if(!sensorsData)\par
  105         \{\par
  106             \par
  107             Serial.println(F("failed to reopen /sensorsData.json"));\par
  108                         \par
  109         \}\par
  110     \par
  111         Serial.println( F("saved data is : ") );\par
  112         root.printTo(Serial);\par
  113         Serial.println();\par
  114 \par
  115         Serial.println(F("/sensorsData.json") );\par
  116         while (sensorsData.available()) \par
  117         \{\par
  118             Serial.println(sensorsData.readString()) ;\par
  119         \}\par
  120         \par
  121         Serial.println();\par
  122         \par
  123         sensorsData.close();\par
  124     \par
  125     #endif\par
  126 \par
  127         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEY" }{}}{\fldrslt {\cs37\ul\cf2 saveSensorDataCSV}}}
(data);      \par
  128 \par
  129         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEX" }{}}{\fldrslt {\cs37\ul\cf2 savedData}}}
=true;\par
  130         return (true);      \par
  131     \}\par
  132     else\par
  133     \{\par
  134     \par
  135     #if DEBUG == 1\par
  136 \par
  137         Serial.println( F("failed to parse json") );\par
  138     \par
  139     #endif\par
  140 \par
  141         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEX" }{}}{\fldrslt {\cs37\ul\cf2 savedData}}}
=false;\par
  142         return(false);\par
  143     \}\par
  144     \par
  145 \par
  146 \}\par
}
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolFileSystem_afa3a4feae94871d4d3b6bebb701c2e67_cgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolFileSystem_afa3a4feae94871d4d3b6bebb701c2e67_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v saveSensorDataCSV\:CoolFileSystem}
{\xe \v CoolFileSystem\:saveSensorDataCSV}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool CoolFileSystem::saveSensorDataCSV (const char *  {\i data})}}
\par
{\bkmkstart AAAAAAAAEY}
{\bkmkend AAAAAAAAEY}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
CoolFileSystem::saveSensorDataCSV( data ): This method is provided to save the data on the local memory in CSV format.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid true if the data was saved, false otherwise \par
}}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQN" }{}}{\fldrslt {\cs37\ul\cf2 157}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJW" }{}}{\fldrslt {\cs37\ul\cf2 CoolFileSystem.cpp}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOQ" }{}}{\fldrslt {\cs37\ul\cf2 saveSensorData()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   158 \{\par
  159 #if DEBUG == 1\par
  160 \par
  161     Serial.println( F("Entering CoolFileSystem.saveSensorDataCSV()") );\par
  162     Serial.println();\par
  163 \par
  164 #endif\par
  165     //parsing json\par
  166     DynamicJsonBuffer jsonBuffer;\par
  167     JsonObject& root = jsonBuffer.parseObject(data);\par
  168     String header="",values="";\par
  169     \par
  170     //if json parse success\par
  171     if( root.success() )\par
  172     \{       \par
  173         for (auto kv : root) \par
  174         \{\par
  175             //print the header(json keys ) to header string\par
  176             header+=kv.key;\par
  177             header+=',';\par
  178             \par
  179             //print the values to header string\par
  180             values+=( kv.value.as<char*>() );\par
  181             values+=',';\par
  182         \}\par
  183 \par
  184         header.remove(header.lastIndexOf(','), 1);\par
  185         values.remove(values.lastIndexOf(','), 1);      \par
  186     \par
  187     #if DEBUG == 1\par
  188     \par
  189         Serial.println( F(" data is : ") );\par
  190         root.printTo(Serial);\par
  191         Serial.println();\par
  192         \par
  193         Serial.println(F(" header is :" ) ) ;\par
  194         Serial.println(header);\par
  195         Serial.println(F(" values are : "));\par
  196         Serial.println(values);\par
  197         \par
  198         Serial.print(F("jsonBuffer size: "));\par
  199         Serial.println(jsonBuffer.size());\par
  200         Serial.println();\par
  201 \par
  202     \par
  203     #endif\par
  204     \par
  205     \}\par
  206     //failed to parse json\par
  207     else\par
  208     \{\par
  209     \par
  210     #if DEBUG == 1\par
  211 \par
  212         Serial.println( F("failed to parse json") );\par
  213     \par
  214     #endif\par
  215 \par
  216         return(false);\par
  217     \}\par
  218 \par
  219     //check if file exists\par
  220     File sensorsData=SPIFFS.open("/sensorsData.csv","r");\par
  221     \par
  222     //file doesn't exist\par
  223     if(!sensorsData)\par
  224     \{\par
  225     \par
  226     #if DEBUG == 1\par
  227     \par
  228         Serial.println( F("/sensorsData.csv not found") );\par
  229         Serial.println( F("creating /sensorsData.csv") );\par
  230         Serial.println();\par
  231     \par
  232     #endif\par
  233         //create file\par
  234         sensorsData=SPIFFS.open("/sensorsData.csv","w");\par
  235         \par
  236         if(!sensorsData)\par
  237         \{\par
  238 \par
  239         #if DEBUG == 1\par
  240         \par
  241             Serial.println( F("failed to create /sensorsData.csv") );\par
  242             Serial.println();\par
  243         \par
  244         #endif\par
  245         \par
  246             return(false);\par
  247 \par
  248         \}\par
  249         \par
  250         //print the header(json keys ) to the CSV file\par
  251         sensorsData.println(header);\par
  252 \par
  253         //print the values to the CSV file\par
  254         sensorsData.println(values);\par
  255         \par
  256         sensorsData.close();\par
  257     \par
  258     #if DEBUG == 1\par
  259 \par
  260         sensorsData=SPIFFS.open("/sensorsData.csv","r");\par
  261         \par
  262         if(!sensorsData)\par
  263         \{\par
  264             Serial.println(F("failed to reopen /sensorsData.csv "));\par
  265             return(false);      \par
  266         \}\par
  267 \par
  268         Serial.println( F("/sensorsData.csv : ") );\par
  269 \par
  270         while (sensorsData.available()) \par
  271         \{\par
  272             Serial.print(sensorsData.readString()) ;\par
  273         \}\par
  274         Serial.println();\par
  275 \par
  276         //close the file\par
  277         sensorsData.close();\par
  278 \par
  279     #endif\par
  280         \par
  281 \par
  282         \par
  283         return(true);\par
  284         \par
  285     \}\par
  286 \par
  287     //file exist\par
  288     else\par
  289     \{\par
  290 \par
  291     #if DEBUG == 1\par
  292     \par
  293         Serial.println( F("/sensorsData.csv  found") );\par
  294         Serial.println( F("appending to /sensorsData.csv") );\par
  295         Serial.println();\par
  296     \par
  297     #endif\par
  298 \par
  299         //append to file\par
  300         sensorsData=SPIFFS.open("/sensorsData.csv","a");\par
  301         \par
  302         if(!sensorsData)\par
  303         \{\par
  304         \par
  305         #if DEBUG == 1\par
  306             \par
  307             Serial.println( F("failed to open /sensorsData.csv") );\par
  308             Serial.println();\par
  309 \par
  310         #endif\par
  311             \par
  312             return(false);\par
  313         \par
  314         \}\par
  315 \par
  316         //print the values to the CSV file\par
  317         sensorsData.println(values);\par
  318         \par
  319         sensorsData.close();\par
  320 \par
  321     #if DEBUG == 1\par
  322 \par
  323         sensorsData=SPIFFS.open("/sensorsData.csv","r");\par
  324         \par
  325         if(!sensorsData)\par
  326         \{\par
  327             Serial.println(F("failed to reopen /sensorsData.csv "));\par
  328             return(false);      \par
  329         \}\par
  330 \par
  331         \par
  332         Serial.println( F("/sensorsData.csv : ") );\par
  333 \par
  334         while (sensorsData.available()) \par
  335         \{\par
  336             Serial.println(sensorsData.readString()) ;\par
  337         \}\par
  338         \par
  339         Serial.println();\par
  340         \par
  341         sensorsData.close();\par
  342         \par
  343     #endif      \par
  344         \par
  345         return(true);\par
  346     \par
  347     \}   \par
  348 \par
  349 \par
  350 \par
  351 \}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolFileSystem_ab78704d5d21ce10fc6f1138ab5ab46c8_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v updateConfigFiles\:CoolFileSystem}
{\xe \v CoolFileSystem\:updateConfigFiles}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool CoolFileSystem::updateConfigFiles (String  {\i answer})}}
\par
{\bkmkstart AAAAAAAACV}
{\bkmkend AAAAAAAACV}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
CoolFileSystem::updateConfigFiles( mqtt answer ): This method is provided to update the configuration files when the appropriate mqtt answer is received\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid true if the files are updated correctly, false otherwise \par
}}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALS" }{}}{\fldrslt {\cs37\ul\cf2 362}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJW" }{}}{\fldrslt {\cs37\ul\cf2 CoolFileSystem.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQL" }{}}{\fldrslt {\cs37\ul\cf2 fileUpdate()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALP" }{}}{\fldrslt {\cs37\ul\cf2 temp}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPA" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::update()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   363 \{\par
  364 \par
  365 #if DEBUG == 1\par
  366 \par
  367     Serial.println( F("Entering CoolFileSystem.updateConfigFiles") );\par
  368     Serial.println();\par
  369     \par
  370     Serial.println( F("input answer : ") );\par
  371     Serial.println(answer);\par
  372 #endif\par
  373 \par
  374     //total json object \par
  375     DynamicJsonBuffer jsonBuffer;\par
  376     JsonObject& root = jsonBuffer.parseObject( answer.c_str() );\par
  377 \par
  378 #if DEBUG == 1\par
  379     \par
  380     Serial.println( F("json object : ") );  \par
  381     root.printTo(Serial);\par
  382     Serial.println();\par
  383     \par
  384     Serial.print(F("jsonBuffer size: "));\par
  385     Serial.println(jsonBuffer.size());\par
  386     Serial.println();\par
  387 \par
  388 \par
  389 #endif\par
  390 \par
  391     if(! ( root.success() ))\par
  392     \{\par
  393     \par
  394     #if DEBUG == 1\par
  395 \par
  396         Serial.println( F("failed to parse root ") );\par
  397         Serial.println();\par
  398     \par
  399     #endif\par
  400 \par
  401         return(false);\par
  402     \}\par
  403     else\par
  404     \{\par
  405     #if DEBUG == 1\par
  406         \par
  407         Serial.println( F("success to parse root ") );\par
  408         Serial.println();\par
  409         \par
  410     #endif  \par
  411     \}\par
  412     \par
  413 #if DEBUG == 1\par
  414 \par
  415     Serial.println( F("input message is : ") );\par
  416     root.printTo(Serial);\par
  417     Serial.println();\par
  418 \par
  419 #endif\par
  420     //temp string\par
  421     String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEZ" }{}}{\fldrslt {\cs37\ul\cf2 temp}}}
;\par
  422 \par
  423     //CoolBoard Configuration File\par
  424 \par
  425         JsonObject& jsonCoolBoard=root["CoolBoard"];\par
  426 \par
  427 #if DEBUG == 1\par
  428 \par
  429     Serial.println( F("before config CoolBoard json") );\par
  430     jsonCoolBoard.printTo(Serial);\par
  431 \par
  432 #endif\par
  433 \par
  434     if(jsonCoolBoard.success())\par
  435     \{\par
  436         String update;\par
  437     \par
  438         jsonCoolBoard.printTo(update);\par
  439 \par
  440         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFA" }{}}{\fldrslt {\cs37\ul\cf2 fileUpdate}}}
(update,"/coolBoardConfig.json");       \par
  441         \par
  442     \}\par
  443     else\par
  444     \{\par
  445     \par
  446     #if DEBUG == 1 \par
  447 \par
  448         Serial.println( F("failed to parse CoolBoard ") );\par
  449     \par
  450     #endif\par
  451 \par
  452     \}       \par
  453 \par
  454     \par
  455     //Cool Board Sensors Configuration File\par
  456         JsonObject& jsonSensorsBoard=root["CoolSensorsBoard"];\par
  457 \par
  458 #if DEBUG == 1 \par
  459 \par
  460     Serial.println( F("before config CoolSensorsBoard json") );\par
  461     jsonSensorsBoard.printTo(Serial);\par
  462 \par
  463 #endif \par
  464     \par
  465     if(jsonSensorsBoard.success())\par
  466     \{   \par
  467         String update;\par
  468     \par
  469         jsonSensorsBoard.printTo(update);\par
  470 \par
  471         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFA" }{}}{\fldrslt {\cs37\ul\cf2 fileUpdate}}}
(update,"/coolBoardSensorsConfig.json");        \par
  472 \par
  473     \}\par
  474     else\par
  475     \{\par
  476 \par
  477     #if DEBUG == 1\par
  478 \par
  479         Serial.println( F("failed to parse CoolSensorsBoard sensors ") );   \par
  480     \par
  481     #endif\par
  482 \par
  483     \}\par
  484 \par
  485     \par
  486     //rtc configuration file\par
  487         JsonObject& jsonRTC=root["rtc"];\par
  488 \par
  489 #if DEBUG == 1 \par
  490     \par
  491     Serial.println( F("before config rtc json") );\par
  492     jsonRTC.printTo(Serial);\par
  493 \par
  494 #endif\par
  495     if(jsonRTC.success() )\par
  496     \{\par
  497         String update;\par
  498 \par
  499         jsonRTC.printTo(update);\par
  500 \par
  501         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFA" }{}}{\fldrslt {\cs37\ul\cf2 fileUpdate}}}
(update,"/rtcConfig.json");         \par
  502     \}\par
  503     else\par
  504     \{\par
  505     \par
  506     #if DEBUG == 1 \par
  507 \par
  508         Serial.println( F("failed to parse rtc ") );\par
  509     \par
  510     #endif\par
  511 \par
  512     \}\par
  513     \par
  514     \par
  515         //cool board led configuration\par
  516         JsonObject& jsonLedBoard=root["led"];\par
  517     \par
  518 #if DEBUG == 1 \par
  519 \par
  520     Serial.println( F("before config Led json") );\par
  521     jsonLedBoard.printTo(Serial);\par
  522 \par
  523 #endif\par
  524 \par
  525     if(jsonLedBoard.success())\par
  526     \{   \par
  527         String update;\par
  528     \par
  529         jsonLedBoard.printTo(update);\par
  530 \par
  531         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFA" }{}}{\fldrslt {\cs37\ul\cf2 fileUpdate}}}
(update,"/coolBoardLedConfig.json");        \par
  532 \par
  533     \par
  534     \}\par
  535     else\par
  536     \{\par
  537     \par
  538     #if DEBUG == 1 \par
  539 \par
  540         Serial.println( F("failed to parse led") );\par
  541     \par
  542     #endif \par
  543 \par
  544     \}\par
  545         \par
  546 \par
  547     \par
  548 \par
  549     //jetpack configuration\par
  550         JsonObject& jsonJetpack=root["jetPack"];\par
  551 \par
  552 #if DEBUG == 1 \par
  553 \par
  554     Serial.println( F("before config jetpack json") );\par
  555     jsonJetpack.printTo(Serial);\par
  556 \par
  557 #endif\par
  558 \par
  559     if(jsonJetpack.success())\par
  560     \{\par
  561     \par
  562         String update;\par
  563     \par
  564         jsonJetpack.printTo(update);\par
  565 \par
  566         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFA" }{}}{\fldrslt {\cs37\ul\cf2 fileUpdate}}}
(update,"/jetPackConfig.json");     \par
  567 \par
  568     \}\par
  569 \par
  570     else\par
  571     \{\par
  572     \par
  573     #if DEBUG == 1 \par
  574 \par
  575         Serial.println( F("failed to parse jetpack") ); \par
  576     \par
  577     #endif\par
  578 \par
  579     \}\par
  580     \par
  581     //irene configuration   \par
  582         JsonObject& jsonIrene=root["irene3000"];\par
  583     \par
  584 #if DEBUG == 1 \par
  585 \par
  586     Serial.println( F("before config irene json") );    \par
  587     jsonIrene.printTo(Serial);\par
  588 \par
  589 #endif \par
  590 \par
  591     if(jsonIrene.success())\par
  592     \{\par
  593 \par
  594         String update;\par
  595     \par
  596         jsonIrene.printTo(update);\par
  597 \par
  598         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFA" }{}}{\fldrslt {\cs37\ul\cf2 fileUpdate}}}
(update,"/irene3000Config.json");       \par
  599     \par
  600     \}\par
  601     else\par
  602     \{\par
  603     \par
  604     #if DEBUG == 1 \par
  605 \par
  606         Serial.println( F("failed to parse irene") );   \par
  607     \par
  608     #endif \par
  609 \par
  610 \par
  611     \}\par
  612     \par
  613     //external sensors\par
  614         JsonObject& jsonExternalSensors=root["externalSensors"];\par
  615 \par
  616 #if DEBUG == 1 \par
  617 \par
  618     Serial.println( F("before config external Sensors json") );\par
  619     jsonExternalSensors.printTo(Serial);\par
  620 \par
  621 #endif\par
  622 \par
  623     if(jsonExternalSensors.success())\par
  624     \{\par
  625 \par
  626         String update;\par
  627     \par
  628         jsonExternalSensors.printTo(update);\par
  629 \par
  630         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFA" }{}}{\fldrslt {\cs37\ul\cf2 fileUpdate}}}
(update,"/externalSensorsConfig.json");     \par
  631 \par
  632     \}\par
  633 \par
  634     else\par
  635     \{   \par
  636 \par
  637     #if DEBUG == 1\par
  638         \par
  639         Serial.println( F("failed to parse external sensors") );\par
  640 \par
  641     #endif\par
  642 \par
  643 \par
  644     \}\par
  645 \par
  646     \par
  647     //mqtt config\par
  648         JsonObject& jsonMQTT=root["mqtt"];\par
  649     \par
  650 #if DEBUG == 1 \par
  651 \par
  652     Serial.println( F("before config mqtt json") );\par
  653     jsonMQTT.printTo(Serial);\par
  654 \par
  655 #endif\par
  656 \par
  657     if(jsonMQTT.success())\par
  658     \{\par
  659 \par
  660         String update;\par
  661     \par
  662         jsonMQTT.printTo(update);\par
  663 \par
  664         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFA" }{}}{\fldrslt {\cs37\ul\cf2 fileUpdate}}}
(update,"/mqttConfig.json");        \par
  665 \par
  666     \}\par
  667     else\par
  668     \{\par
  669 \par
  670     #if DEBUG == 1 \par
  671 \par
  672         Serial.println( F("failed to parse mqtt") );\par
  673     \par
  674     #endif\par
  675 \par
  676     \par
  677     \}   \par
  678 \par
  679     //wifi config\par
  680         JsonObject& jsonWifi=root["wifi"];\par
  681     \par
  682 #if DEBUG == 1 \par
  683 \par
  684     Serial.println( F("before config wifi json") );\par
  685     jsonWifi.printTo(Serial);\par
  686 \par
  687 #endif\par
  688 \par
  689     if(jsonWifi.success())\par
  690     \{\par
  691 \par
  692         String update;\par
  693     \par
  694         jsonWifi.printTo(update);\par
  695 \par
  696         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFA" }{}}{\fldrslt {\cs37\ul\cf2 fileUpdate}}}
(update,"/wifiConfig.json");        \par
  697 \par
  698     \}\par
  699     else\par
  700     \{\par
  701 \par
  702     #if DEBUG == 1 \par
  703 \par
  704         Serial.println( F("failed to parse wifi") );\par
  705     \par
  706     #endif\par
  707 \par
  708     \par
  709     \}   \par
  710         \par
  711     return true;\par
  712 \par
  713 \}   \par
}
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolFileSystem_adfa8e2e80641ae6f0cceabd348a9b841_cgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolFileSystem_adfa8e2e80641ae6f0cceabd348a9b841_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v savedData\:CoolFileSystem}
{\xe \v CoolFileSystem\:savedData}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool CoolFileSystem::savedData =0{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAEX}
{\bkmkend AAAAAAAAEX}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQM" }{}}{\fldrslt {\cs37\ul\cf2 42}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJY" }{}}{\fldrslt {\cs37\ul\cf2 CoolFileSystem.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOT" }{}}{\fldrslt {\cs37\ul\cf2 getSensorSavedData()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOU" }{}}{\fldrslt {\cs37\ul\cf2 isDataSaved()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOQ" }{}}{\fldrslt {\cs37\ul\cf2 saveSensorData()}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADC" }{}}{\fldrslt {\cs37\ul\cf2 CoolFileSystem.h}}}
\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJU" }{}}{\fldrslt {\cs37\ul\cf2 CoolFileSystem.cpp}}}
\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
CoolMQTT Class Reference\par \pard\plain 
{\tc\tcl2 \v CoolMQTT}
{\xe \v CoolMQTT}
{\bkmkstart AAAAAAAADR}
{\bkmkend AAAAAAAADR}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class handles the mqtt client. }}\par
{
{\f2 #include <CoolMQTT.h>}}\par
Collaboration diagram for CoolMQTT:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolMQTT__coll__graph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAP" }{}}{\fldrslt {\cs37\ul\cf2 begin}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABQ" }{}}{\fldrslt {\cs37\ul\cf2 connect}}}
 (unsigned long keepAlive)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABZ" }{}}{\fldrslt {\cs37\ul\cf2 publish}}}
 (const char *data)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQO" }{}}{\fldrslt {\cs37\ul\cf2 publish}}}
 (const char *data, unsigned long logInterval)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACI" }{}}{\fldrslt {\cs37\ul\cf2 read}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAO" }{}}{\fldrslt {\cs37\ul\cf2 config}}}
 (const char {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFD" }{}}{\fldrslt {\cs37\ul\cf2 mqttServer}}}
[], const char {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFH" }{}}{\fldrslt {\cs37\ul\cf2 inTopic}}}
[], const char {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFI" }{}}{\fldrslt {\cs37\ul\cf2 outTopic}}}
[], const char {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFG" }{}}{\fldrslt {\cs37\ul\cf2 user}}}
[], int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFF" }{}}{\fldrslt {\cs37\ul\cf2 bufferSize}}}
)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFM" }{}}{\fldrslt {\cs37\ul\cf2 config}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFE" }{}}{\fldrslt {\cs37\ul\cf2 callback}}}
 (char *topic, byte *payload, unsigned int length)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAQ" }{}}{\fldrslt {\cs37\ul\cf2 printConf}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABP" }{}}{\fldrslt {\cs37\ul\cf2 state}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACA" }{}}{\fldrslt {\cs37\ul\cf2 mqttLoop}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADA" }{}}{\fldrslt {\cs37\ul\cf2 getUser}}}
 ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFD" }{}}{\fldrslt {\cs37\ul\cf2 mqttServer}}}
 [50] =\{'0'\}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFL" }{}}{\fldrslt {\cs37\ul\cf2 msg}}}
 =""\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFH" }{}}{\fldrslt {\cs37\ul\cf2 inTopic}}}
 [50] =\{'0'\}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFI" }{}}{\fldrslt {\cs37\ul\cf2 outTopic}}}
 [50] =\{'0'\}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFG" }{}}{\fldrslt {\cs37\ul\cf2 user}}}
 [50] =\{'0'\}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFF" }{}}{\fldrslt {\cs37\ul\cf2 bufferSize}}}
 =3000\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
WiFiClient {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFC" }{}}{\fldrslt {\cs37\ul\cf2 espClient}}}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
PubSubClient {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFB" }{}}{\fldrslt {\cs37\ul\cf2 client}}}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFK" }{}}{\fldrslt {\cs37\ul\cf2 newMsg}}}
 =0\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned long {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 previousLogTime}}}
 =0\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class handles the mqtt client. \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQP" }{}}{\fldrslt {\cs37\ul\cf2 22}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKD" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT.h}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v begin\:CoolMQTT}
{\xe \v CoolMQTT\:begin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CoolMQTT::begin ()}}
\par
{\bkmkstart AAAAAAAAAP}
{\bkmkend AAAAAAAAAP}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAP" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT::begin()}}}: This method is provided to set the mqtt client's parameters: -client -server -callback method -buffer size \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAML" }{}}{\fldrslt {\cs37\ul\cf2 39}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKB" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQQ" }{}}{\fldrslt {\cs37\ul\cf2 bufferSize}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALQ" }{}}{\fldrslt {\cs37\ul\cf2 callback()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQR" }{}}{\fldrslt {\cs37\ul\cf2 client}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQS" }{}}{\fldrslt {\cs37\ul\cf2 espClient}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQT" }{}}{\fldrslt {\cs37\ul\cf2 mqttServer}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMJ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::begin()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    40 \{ \par
   41 \par
   42 #if DEBUG == 1 \par
   43 \par
   44     Serial.println( F("Entering CoolMQTT.begin()") );\par
   45     Serial.println();\par
   46 \par
   47 #endif\par
   48 \par
   49     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFB" }{}}{\fldrslt {\cs37\ul\cf2 client}}}
.setClient({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFC" }{}}{\fldrslt {\cs37\ul\cf2 espClient}}}
);\par
   50     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFB" }{}}{\fldrslt {\cs37\ul\cf2 client}}}
.setServer({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFD" }{}}{\fldrslt {\cs37\ul\cf2 mqttServer}}}
, 1883); \par
   51     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFB" }{}}{\fldrslt {\cs37\ul\cf2 client}}}
.setCallback([this] (char* topic, byte* payload, unsigned int length) \{ this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFE" }{}}{\fldrslt {\cs37\ul\cf2 callback}}}
(topic, payload, length); \});\par
   52     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFB" }{}}{\fldrslt {\cs37\ul\cf2 client}}}
.setBufferSize((unsigned short){\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFF" }{}}{\fldrslt {\cs37\ul\cf2 bufferSize}}}
);\par
   53 \par
   54 \}\par
}
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolMQTT_ac9248808641ebf3054ed0620ea9d0100_cgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolMQTT_ac9248808641ebf3054ed0620ea9d0100_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v callback\:CoolMQTT}
{\xe \v CoolMQTT\:callback}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CoolMQTT::callback (char *  {\i topic}, byte *  {\i payload}, unsigned int  {\i length})}}
\par
{\bkmkstart AAAAAAAAFE}
{\bkmkend AAAAAAAAFE}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
CoolMQTT::callback(in topic, incoming message , message length): This method is provided to handle incoming messages from the subscribed inTopic.\par
Arguments are automatically assigned in client.setCallback() \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALQ" }{}}{\fldrslt {\cs37\ul\cf2 280}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKB" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQU" }{}}{\fldrslt {\cs37\ul\cf2 msg}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQV" }{}}{\fldrslt {\cs37\ul\cf2 newMsg}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALP" }{}}{\fldrslt {\cs37\ul\cf2 temp}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAML" }{}}{\fldrslt {\cs37\ul\cf2 begin()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   281 \{\par
  282 \par
  283 #if DEBUG == 1\par
  284 \par
  285     Serial.println( F("Entering CoolMQTT.callback() ") );\par
  286     Serial.println();\par
  287 \par
  288 #endif \par
  289 \par
  290     if(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFK" }{}}{\fldrslt {\cs37\ul\cf2 newMsg}}}
==false)\par
  291     \{\par
  292         char {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEZ" }{}}{\fldrslt {\cs37\ul\cf2 temp}}}
[length+1];\par
  293 \par
  294     #if DEBUG == 1\par
  295 \par
  296         Serial.println( F("received temp msg : ") );\par
  297         \par
  298     #endif\par
  299         \par
  300         for (unsigned int i = 0; i < length; i++) \par
  301         \{\par
  302             temp[i]=(char)payload[i];\par
  303         \par
  304         #if DEBUG == 1 \par
  305 \par
  306             Serial.print( (char)payload[i] );\par
  307         \par
  308         #endif\par
  309 \par
  310         \}\par
  311     \par
  312     #if DEBUG == 1 \par
  313 \par
  314         Serial.println();\par
  315         Serial.println( F("storing new message : ") );\par
  316 \par
  317         Serial.print(F("length : "));\par
  318         Serial.println(length);\par
  319         \par
  320         Serial.print(F("size : "));\par
  321         Serial.print(sizeof(payload));\par
  322         Serial.println();\par
  323     \par
  324     #endif\par
  325 \par
  326         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFK" }{}}{\fldrslt {\cs37\ul\cf2 newMsg}}}
=true;\par
  327 \par
  328         temp[length+1]='\\0';\par
  329 \par
  330         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFL" }{}}{\fldrslt {\cs37\ul\cf2 msg}}}
=String(temp);\par
  331         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFL" }{}}{\fldrslt {\cs37\ul\cf2 msg}}}
.remove(length,1);\par
  332     \par
  333     #if DEBUG == 1 \par
  334 \par
  335         Serial.println( F("stored message : ") );\par
  336         Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFL" }{}}{\fldrslt {\cs37\ul\cf2 msg}}}
);\par
  337     \par
  338     #endif\par
  339 \par
  340     \}\par
  341     else\par
  342     \{\par
  343     \par
  344     #if DEBUG == 1\par
  345 \par
  346         Serial.println( F("did not read last message") );\par
  347     \par
  348     #endif \par
  349         \par
  350     \}\par
  351 \par
  352 \}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolMQTT_a30d82ad665bfb603f46ecdbc290775df_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v config\:CoolMQTT}
{\xe \v CoolMQTT\:config}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CoolMQTT::config (const char  {\i mqttServer}[], const char  {\i inTopic}[], const char  {\i outTopic}[], const char  {\i user}[], int  {\i bufferSize})}}
\par
{\bkmkstart AAAAAAAAAO}
{\bkmkend AAAAAAAAAO}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
CoolMQTT::config(server,in topic, out topic , user Id, buffer size): This method is provided to manually configure the mqtt client \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMU" }{}}{\fldrslt {\cs37\ul\cf2 597}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKB" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQQ" }{}}{\fldrslt {\cs37\ul\cf2 bufferSize}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMJ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::begin()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   598 \{\par
  599 \par
  600 #if DEBUG == 1\par
  601 \par
  602     Serial.println( F("Entering CoolMQTT.config() , no SPIFFS variant") );\par
  603     Serial.println();\par
  604 \par
  605 #endif\par
  606 \par
  607     for(int i =0;i< 50 ;i++)\par
  608     \{\par
  609         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFD" }{}}{\fldrslt {\cs37\ul\cf2 mqttServer}}}
[i]={\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFD" }{}}{\fldrslt {\cs37\ul\cf2 mqttServer}}}
[i];\par
  610         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFH" }{}}{\fldrslt {\cs37\ul\cf2 inTopic}}}
[i]={\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFH" }{}}{\fldrslt {\cs37\ul\cf2 inTopic}}}
[i];\par
  611         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFI" }{}}{\fldrslt {\cs37\ul\cf2 outTopic}}}
[i]={\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFI" }{}}{\fldrslt {\cs37\ul\cf2 outTopic}}}
[i];\par
  612         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFG" }{}}{\fldrslt {\cs37\ul\cf2 user}}}
[i]={\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFG" }{}}{\fldrslt {\cs37\ul\cf2 user}}}
[i];\par
  613     \}\par
  614     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFF" }{}}{\fldrslt {\cs37\ul\cf2 bufferSize}}}
={\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFF" }{}}{\fldrslt {\cs37\ul\cf2 bufferSize}}}
;\par
  615     \par
  616 \par
  617 \}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolMQTT_a9b703de4f1358f0ee7a5e8c44979c648_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v config\:CoolMQTT}
{\xe \v CoolMQTT\:config}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool CoolMQTT::config ()}}
\par
{\bkmkstart AAAAAAAAFM}
{\bkmkend AAAAAAAAFM}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFM" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT::config()}}}: This method is provided to configure the mqttClient : -server -inTopic -outTopic -client Id -buffer size\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid true if successful,false otherwise \par
}}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQW" }{}}{\fldrslt {\cs37\ul\cf2 400}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKB" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQQ" }{}}{\fldrslt {\cs37\ul\cf2 bufferSize}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQX" }{}}{\fldrslt {\cs37\ul\cf2 inTopic}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQT" }{}}{\fldrslt {\cs37\ul\cf2 mqttServer}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQY" }{}}{\fldrslt {\cs37\ul\cf2 outTopic}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQZ" }{}}{\fldrslt {\cs37\ul\cf2 user}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   401 \{\par
  402 \par
  403 #if DEBUG == 1 \par
  404 \par
  405     Serial.println( F("Entering CoolMQTT.config()") );\par
  406     Serial.println();\par
  407 \par
  408 #endif\par
  409 \par
  410     //read config file\par
  411     //update data\par
  412     File configFile = SPIFFS.open("/mqttConfig.json", "r");\par
  413 \par
  414     if (!configFile) \par
  415     \{\par
  416     \par
  417     #if DEBUG == 1 \par
  418 \par
  419         Serial.println( F("failed to read /mqttConfig.json") );\par
  420         Serial.println();\par
  421 \par
  422     #endif\par
  423 \par
  424         return(false);\par
  425     \}\par
  426     else\par
  427     \{\par
  428         size_t size = configFile.size();\par
  429         // Allocate a buffer to store contents of the file.\par
  430         std::unique_ptr<char[]> buf(new char[size]);\par
  431 \par
  432         configFile.readBytes(buf.get(), size);\par
  433         DynamicJsonBuffer jsonBuffer;\par
  434         JsonObject& json = jsonBuffer.parseObject(buf.get());\par
  435         if (!json.success()) \par
  436         \{\par
  437         \par
  438         #if DEBUG == 1 \par
  439 \par
  440             Serial.println( F("failed to parse json ") );\par
  441             Serial.println();\par
  442         \par
  443         #endif\par
  444             \par
  445             return(false);\par
  446         \} \par
  447         else\par
  448         \{\par
  449         \par
  450         #if DEBUG == 1 \par
  451         \par
  452             Serial.println( F("configuration json is ") );\par
  453             json.printTo(Serial);\par
  454             Serial.println();\par
  455 \par
  456             Serial.print(F("jsonBuffer size: "));\par
  457             Serial.println(jsonBuffer.size());\par
  458             Serial.println();\par
  459 \par
  460 \par
  461         #endif\par
  462 \par
  463             if(json["mqttServer"].success() )\par
  464             \{           \par
  465                 const char* tempmqttServer = json["mqttServer"]; \par
  466                 for(int i =0;i< 50 ;i++)\par
  467                 \{\par
  468                     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFD" }{}}{\fldrslt {\cs37\ul\cf2 mqttServer}}}
[i]=tempmqttServer[i];\par
  469                 \}\par
  470             \}\par
  471             else\par
  472             \{\par
  473                 for(int i =0;i< 50 ;i++)\par
  474                 \{\par
  475                     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFD" }{}}{\fldrslt {\cs37\ul\cf2 mqttServer}}}
[i]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFD" }{}}{\fldrslt {\cs37\ul\cf2 mqttServer}}}
[i];\par
  476                 \}\par
  477 \par
  478             \}\par
  479             json["mqttServer"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFD" }{}}{\fldrslt {\cs37\ul\cf2 mqttServer}}}
;\par
  480 \par
  481             \par
  482             if(json["inTopic"].success() )\par
  483             \{\par
  484                 const char* tempInTopic = json["inTopic"]; \par
  485                 for(int i =0;i< 50;i++)\par
  486                 \{\par
  487                     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFH" }{}}{\fldrslt {\cs37\ul\cf2 inTopic}}}
[i]=tempInTopic[i];\par
  488                 \}\par
  489             \}\par
  490             else\par
  491             \{\par
  492                 String tempMAC = WiFi.macAddress();\par
  493                 tempMAC.replace(":","");\par
  494                 snprintf({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFH" }{}}{\fldrslt {\cs37\ul\cf2 inTopic}}}
, 50, "$aws/things/%s/shadow/update/delta", tempMAC.c_str());   \par
  495             \par
  496             #if DEBUG == 1              \par
  497                 \par
  498                 Serial.print( F("Set Incomming MQTT Channel to : ") );\par
  499                 Serial.println({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFH" }{}}{\fldrslt {\cs37\ul\cf2 inTopic}}}
);\par
  500             \par
  501             #endif  \par
  502 \par
  503             \}\par
  504             json["inTopic"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFH" }{}}{\fldrslt {\cs37\ul\cf2 inTopic}}}
;\par
  505             \par
  506             \par
  507             if(json["outTopic"].success() )\par
  508             \{\par
  509                 const char* tempOutTopic = json["outTopic"]; \par
  510                 for(int i =0;i<50;i++)\par
  511                 \{\par
  512                     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFI" }{}}{\fldrslt {\cs37\ul\cf2 outTopic}}}
[i]=tempOutTopic[i];\par
  513                 \}\par
  514             \}\par
  515             else\par
  516             \{\par
  517                 String tempMAC = WiFi.macAddress();\par
  518                 tempMAC.replace(":","");\par
  519                 snprintf({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFI" }{}}{\fldrslt {\cs37\ul\cf2 outTopic}}}
, 50, "$aws/things/%s/shadow/update", tempMAC.c_str());\par
  520             \par
  521             #if DEBUG == 1 \par
  522 \par
  523                 Serial.print( F("Set Outgoing MQTT Channel to : ") );\par
  524                 Serial.println({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFI" }{}}{\fldrslt {\cs37\ul\cf2 outTopic}}}
);\par
  525             \par
  526             #endif\par
  527 \par
  528             \}\par
  529             json["outTopic"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFI" }{}}{\fldrslt {\cs37\ul\cf2 outTopic}}}
;\par
  530         \par
  531             \par
  532             if(json["user"].success() )\par
  533             \{               \par
  534                 const char* tempUser = json["user"]; \par
  535                 for(int i =0;i<50;i++)\par
  536                 \{\par
  537                     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFG" }{}}{\fldrslt {\cs37\ul\cf2 user}}}
[i]=tempUser[i];\par
  538                 \}\par
  539             \}\par
  540             else\par
  541             \{\par
  542                 for(int i=0;i<50;i++)\par
  543                 \{\par
  544                     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFG" }{}}{\fldrslt {\cs37\ul\cf2 user}}}
[i]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFG" }{}}{\fldrslt {\cs37\ul\cf2 user}}}
[i];\par
  545                 \}               \par
  546             \}\par
  547             json["user"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFG" }{}}{\fldrslt {\cs37\ul\cf2 user}}}
;\par
  548             \par
  549             if(json["bufferSize"].success() )\par
  550             \{\par
  551                 int tempBufferSize = json["bufferSize"]; \par
  552                 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFF" }{}}{\fldrslt {\cs37\ul\cf2 bufferSize}}}
=tempBufferSize;\par
  553             \}\par
  554             else\par
  555             \{\par
  556                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFF" }{}}{\fldrslt {\cs37\ul\cf2 bufferSize}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFF" }{}}{\fldrslt {\cs37\ul\cf2 bufferSize}}}
;\par
  557             \}\par
  558             json["bufferSize"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFF" }{}}{\fldrslt {\cs37\ul\cf2 bufferSize}}}
;\par
  559 \par
  560             configFile.close();\par
  561             configFile = SPIFFS.open("/mqttConfig.json", "w");\par
  562             if(!configFile)\par
  563             \{\par
  564             \par
  565             #if DEBUG == 1 \par
  566 \par
  567                 Serial.println( F("failed to write to /mqttConfig.json") );\par
  568             \par
  569             #endif\par
  570 \par
  571                 return(false);              \par
  572             \}\par
  573             \par
  574             json.printTo(configFile);\par
  575             configFile.close();\par
  576 \par
  577         #if DEBUG == 1 \par
  578 \par
  579             Serial.println( F("saved configuration is :") );\par
  580             json.printTo(Serial);\par
  581             Serial.println();\par
  582         \par
  583         #endif\par
  584 \par
  585             return(true); \par
  586         \}\par
  587     \}   \par
  588     \par
  589 \par
  590 \}\par
}
}
{\xe \v connect\:CoolMQTT}
{\xe \v CoolMQTT\:connect}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int CoolMQTT::connect (unsigned long  {\i keepAlive})}}
\par
{\bkmkstart AAAAAAAABQ}
{\bkmkend AAAAAAAABQ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
CoolMQTT::connect( time to keep the connection alive in seconds ): This method is provided to connect the client to the server, publish to the out topic , subscribe to the in topic and set the keepAlive time.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid mqtt client state \par
}}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOF" }{}}{\fldrslt {\cs37\ul\cf2 95}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKB" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQR" }{}}{\fldrslt {\cs37\ul\cf2 client}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQX" }{}}{\fldrslt {\cs37\ul\cf2 inTopic}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOJ" }{}}{\fldrslt {\cs37\ul\cf2 state()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQZ" }{}}{\fldrslt {\cs37\ul\cf2 user}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMY" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::connect()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    96 \{       \par
   97 \par
   98     int i=0;\par
   99 \par
  100 #if DEBUG == 1 \par
  101 \par
  102     Serial.println( F("Entering CoolMQTT.connect()") );\par
  103     Serial.println( F("MQTT connecting...") );\par
  104 \par
  105 #endif\par
  106     \par
  107     while( ( !this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFB" }{}}{\fldrslt {\cs37\ul\cf2 client}}}
.connected() ) && ( i<100 ) ) \par
  108     \{\par
  109         // Attempt to connect\par
  110         if( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFB" }{}}{\fldrslt {\cs37\ul\cf2 client}}}
.connect( this-> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFG" }{}}{\fldrslt {\cs37\ul\cf2 user}}}
,keepAlive*10  ) )\par
  111         \{\par
  112             {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFB" }{}}{\fldrslt {\cs37\ul\cf2 client}}}
.subscribe( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFH" }{}}{\fldrslt {\cs37\ul\cf2 inTopic}}}
 );\par
  113 \par
  114         #if DEBUG == 1 \par
  115 \par
  116             Serial.println( F("MQTT connected") );\par
  117             Serial.println( F(" subscribed , leavin ") ) ;\par
  118         \par
  119         #endif\par
  120 \par
  121             return( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABP" }{}}{\fldrslt {\cs37\ul\cf2 state}}}
() );\par
  122         \}\par
  123 \par
  124         else\par
  125         \{\par
  126         \par
  127         #if DEBUG == 1 \par
  128 \par
  129             Serial.println( F("not connected , retrying") );\par
  130         \par
  131         #endif\par
  132 \par
  133             \par
  134         \}\par
  135 \par
  136     delay(5);\par
  137     i++;\par
  138     \}\par
  139     \par
  140     return( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABP" }{}}{\fldrslt {\cs37\ul\cf2 state}}}
() );\par
  141 \par
  142 \}\par
}
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolMQTT_a50075d0ab23a327ab897fd6adad20eda_cgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolMQTT_a50075d0ab23a327ab897fd6adad20eda_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v getUser\:CoolMQTT}
{\xe \v CoolMQTT\:getUser}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String CoolMQTT::getUser ()}}
\par
{\bkmkstart AAAAAAAADA}
{\bkmkend AAAAAAAADA}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADA" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT::getUser()}}}: This method is provided to get the user name \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPH" }{}}{\fldrslt {\cs37\ul\cf2 660}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKB" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQZ" }{}}{\fldrslt {\cs37\ul\cf2 user}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOR" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::userData()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   661 \{\par
  662 \par
  663 #if DEBUG == 1 \par
  664     Serial.println( F("Entering CoolMQTT.getUser()") );\par
  665     Serial.println();\par
  666     \par
  667     Serial.print( F("user : ") );\par
  668     Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFG" }{}}{\fldrslt {\cs37\ul\cf2 user}}}
);\par
  669 \par
  670 #endif\par
  671 \par
  672     return String(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFG" }{}}{\fldrslt {\cs37\ul\cf2 user}}}
);\par
  673 \}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolMQTT_a373cc92fca7760d886f02d8a6e5b3f63_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v mqttLoop\:CoolMQTT}
{\xe \v CoolMQTT\:mqttLoop}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool CoolMQTT::mqttLoop ()}}
\par
{\bkmkstart AAAAAAAACA}
{\bkmkend AAAAAAAACA}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACA" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT::mqttLoop()}}}: This method is provided to allow the client to process the data\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid true if successful,false otherwise \par
}}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOV" }{}}{\fldrslt {\cs37\ul\cf2 244}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKB" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQR" }{}}{\fldrslt {\cs37\ul\cf2 client}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOK" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::onLineMode()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPA" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::update()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   245 \{\par
  246 \par
  247     unsigned long lastTime=millis();\par
  248 \par
  249 #if DEBUG == 1\par
  250 \par
  251     Serial.println( F("Entering CoolMQTT.mqttLoop()") );\par
  252     Serial.println();\par
  253 \par
  254 #endif  \par
  255 \par
  256     while( ( millis() - lastTime ) < 1000)\par
  257     \{\par
  258         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFB" }{}}{\fldrslt {\cs37\ul\cf2 client}}}
.loop();\par
  259         yield();\par
  260     \}\par
  261 \par
  262 #if DEBUG == 1 \par
  263     \par
  264     Serial.print( F("loop result : ") );\par
  265     Serial.println( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFB" }{}}{\fldrslt {\cs37\ul\cf2 client}}}
.loop() );\par
  266     Serial.println();\par
  267 \par
  268 #endif\par
  269 \par
  270     return( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFB" }{}}{\fldrslt {\cs37\ul\cf2 client}}}
.loop() );\par
  271 \}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolMQTT_aa5eaae967b562b62cbcf2b8d81f6e5d5_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v printConf\:CoolMQTT}
{\xe \v CoolMQTT\:printConf}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CoolMQTT::printConf ()}}
\par
{\bkmkstart AAAAAAAAAQ}
{\bkmkend AAAAAAAAAQ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAQ" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT::printConf()}}}: This method is provided to print the configuration to the Serial Monitor \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANM" }{}}{\fldrslt {\cs37\ul\cf2 624}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKB" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQQ" }{}}{\fldrslt {\cs37\ul\cf2 bufferSize}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQX" }{}}{\fldrslt {\cs37\ul\cf2 inTopic}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQT" }{}}{\fldrslt {\cs37\ul\cf2 mqttServer}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQY" }{}}{\fldrslt {\cs37\ul\cf2 outTopic}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQZ" }{}}{\fldrslt {\cs37\ul\cf2 user}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMJ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::begin()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   625 \{\par
  626 \par
  627 #if DEBUG == 1 \par
  628 \par
  629     Serial.println( F("Entering CoolMQTT.printConf()") );\par
  630     Serial.println();   \par
  631 \par
  632 #endif\par
  633     \par
  634     Serial.println("MQTT configuration ");\par
  635 \par
  636     Serial.print("mqttServer : ");\par
  637     Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFD" }{}}{\fldrslt {\cs37\ul\cf2 mqttServer}}}
);\par
  638 \par
  639     Serial.print("inTopic : ");\par
  640     Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFH" }{}}{\fldrslt {\cs37\ul\cf2 inTopic}}}
);\par
  641 \par
  642     Serial.print("outTopic : ");\par
  643     Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFI" }{}}{\fldrslt {\cs37\ul\cf2 outTopic}}}
);\par
  644 \par
  645     Serial.print("user : ");\par
  646     Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFG" }{}}{\fldrslt {\cs37\ul\cf2 user}}}
);\par
  647 \par
  648     Serial.print("bufferSize : ");\par
  649     Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFF" }{}}{\fldrslt {\cs37\ul\cf2 bufferSize}}}
);\par
  650 \par
  651     Serial.println();\par
  652 \par
  653 \par
  654 \}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolMQTT_a40553a0ad4b5ecf1cb4411ab54ca85fb_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v publish\:CoolMQTT}
{\xe \v CoolMQTT\:publish}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool CoolMQTT::publish (const char *  {\i data})}}
\par
{\bkmkstart AAAAAAAABZ}
{\bkmkend AAAAAAAABZ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
CoolMQTT::publish(data): This method is provided to publish data to the out topic\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid true if publish successful, false otherwise \par
}}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOW" }{}}{\fldrslt {\cs37\ul\cf2 152}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKB" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQR" }{}}{\fldrslt {\cs37\ul\cf2 client}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQY" }{}}{\fldrslt {\cs37\ul\cf2 outTopic}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOK" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::onLineMode()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARA" }{}}{\fldrslt {\cs37\ul\cf2 publish()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPA" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::update()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   153 \{\par
  154 \par
  155 #if DEBUG == 1 \par
  156 \par
  157     Serial.println( F("Entering CoolMQTT.publish()") );\par
  158     Serial.println();\par
  159     //data is in JSON, publish it directly\par
  160 \par
  161     Serial.println( F("data to publish : ") );\par
  162     Serial.println(data);\par
  163     Serial.print( F("data size : ") );\par
  164     Serial.println(strlen(data));\par
  165 \par
  166     Serial.println();\par
  167 \par
  168 #endif\par
  169     \par
  170 \par
  171     bool pub={\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFB" }{}}{\fldrslt {\cs37\ul\cf2 client}}}
.publish( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFI" }{}}{\fldrslt {\cs37\ul\cf2 outTopic}}}
,(byte*) data,strlen(data),false  );\par
  172 \par
  173 #if DEBUG == 1 \par
  174 \par
  175     Serial.print( F("success : ") );\par
  176     Serial.println(pub);    \par
  177 \par
  178 #endif\par
  179 \par
  180     return(pub);\par
  181 \par
  182 \}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolMQTT_ace977b3e90ab14b1199fe5c4fb0a13ec_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v publish\:CoolMQTT}
{\xe \v CoolMQTT\:publish}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool CoolMQTT::publish (const char *  {\i data}, unsigned long  {\i logInterval})}}
\par
{\bkmkstart AAAAAAAAQO}
{\bkmkend AAAAAAAAQO}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
CoolMQTT::publish(data): This method is provided to publish data to the out topic every logInterval in seconds\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid true if publish successful, false otherwise \par
}}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARA" }{}}{\fldrslt {\cs37\ul\cf2 192}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKB" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARB" }{}}{\fldrslt {\cs37\ul\cf2 previousLogTime}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOW" }{}}{\fldrslt {\cs37\ul\cf2 publish()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   193 \{\par
  194 \par
  195 #if DEBUG == 1 \par
  196 \par
  197     Serial.println( F("Entering CoolMQTT.publish() every logInterval ") );\par
  198     Serial.println();\par
  199 \par
  200 #endif \par
  201     //log interval is passed in seconds, logInteral*1000 = logInterval in ms\par
  202     if( ( millis() - ( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 previousLogTime}}}
)  ) >=( logInterval*1000 ) )\par
  203     \{\par
  204     \par
  205     #if DEBUG == 1\par
  206 \par
  207         Serial.println( F("log Interval has passed ") );\par
  208         Serial.println();\par
  209     \par
  210     #endif\par
  211 \par
  212         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABZ" }{}}{\fldrslt {\cs37\ul\cf2 publish}}}
(data);\par
  213 \par
  214         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 previousLogTime}}}
=millis();\par
  215     \par
  216     #if DEBUG == 1 \par
  217 \par
  218         Serial.print( F("last log time : ") );\par
  219         Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 previousLogTime}}}
);\par
  220 \par
  221     #endif\par
  222 \par
  223         return(true);\par
  224     \}\par
  225 \par
  226 #if DEBUG == 1 \par
  227 \par
  228     Serial.println( F("log Interval still didn't pass ") ); \par
  229     Serial.println();\par
  230 \par
  231 #endif\par
  232 \par
  233     return(false);\par
  234 \}\par
}
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolMQTT_a613c5e3927ae85bb94fbf648d84d8780_cgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v read\:CoolMQTT}
{\xe \v CoolMQTT\:read}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String CoolMQTT::read ()}}
\par
{\bkmkstart AAAAAAAACI}
{\bkmkend AAAAAAAACI}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACI" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT::read()}}}: This method is provided to return the last read message. \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOX" }{}}{\fldrslt {\cs37\ul\cf2 359}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKB" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQU" }{}}{\fldrslt {\cs37\ul\cf2 msg}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQV" }{}}{\fldrslt {\cs37\ul\cf2 newMsg}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOK" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::onLineMode()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   360 \{   \par
  361 \par
  362 #if DEBUG == 1 \par
  363 \par
  364     Serial.println( F("Entering CoolMQTT.read()") );\par
  365     Serial.println();\par
  366 \par
  367 #endif \par
  368 \par
  369     if(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFK" }{}}{\fldrslt {\cs37\ul\cf2 newMsg}}}
==true)\par
  370     \{\par
  371         \par
  372         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFK" }{}}{\fldrslt {\cs37\ul\cf2 newMsg}}}
=false;\par
  373 \par
  374 #if DEBUG == 1 \par
  375         Serial.println( F("received new message") );\par
  376         Serial.println( F("message : ") );\par
  377         Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFL" }{}}{\fldrslt {\cs37\ul\cf2 msg}}}
);\par
  378         Serial.println();\par
  379 \par
  380 #endif\par
  381 \par
  382         return(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFL" }{}}{\fldrslt {\cs37\ul\cf2 msg}}}
);\par
  383         \par
  384     \}\par
  385     return("");\par
  386 \par
  387 \}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolMQTT_ae3c18f6ae9723746d32765f1c8f176ca_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v state\:CoolMQTT}
{\xe \v CoolMQTT\:state}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int CoolMQTT::state ()}}
\par
{\bkmkstart AAAAAAAABP}
{\bkmkend AAAAAAAABP}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABP" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT::state()}}}: This method is provided to return the mqtt client's state. \par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid mqtt client state: -4 : MQTT_CONNECTION_TIMEOUT - the server didn't respond within the keepalive time -3 : MQTT_CONNECTION_LOST - the network connection was broken -2 : MQTT_CONNECT_FAILED - the network connection failed -1 : MQTT_DISCONNECTED - the client is disconnected cleanly 0 : MQTT_CONNECTED - the cient is connected 1 : MQTT_CONNECT_BAD_PROTOCOL - the server doesn't support the requested version of MQTT 2 : MQTT_CONNECT_BAD_CLIENT_ID - the server rejected the client identifier 3 : MQTT_CONNECT_UNAVAILABLE - the server was unable to accept the connection 4 : MQTT_CONNECT_BAD_CREDENTIALS - the username/password were rejected 5 : MQTT_CONNECT_UNAUTHORIZED - the client was not authorized to connect \par
}}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOJ" }{}}{\fldrslt {\cs37\ul\cf2 72}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKB" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQR" }{}}{\fldrslt {\cs37\ul\cf2 client}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOF" }{}}{\fldrslt {\cs37\ul\cf2 connect()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMY" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::connect()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    73 \{\par
   74 \par
   75 #if DEBUG == 1 \par
   76 \par
   77     Serial.println( F("Entering CoolMQTT.state()") );\par
   78     Serial.println();   \par
   79     Serial.print( F("state : ") );\par
   80     Serial.println( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFB" }{}}{\fldrslt {\cs37\ul\cf2 client}}}
.state() );\par
   81 \par
   82 #endif\par
   83     \par
   84     return( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFB" }{}}{\fldrslt {\cs37\ul\cf2 client}}}
.state() );\par
   85 \}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolMQTT_a5d003307eff78efbd585e42b43b72b6d_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v bufferSize\:CoolMQTT}
{\xe \v CoolMQTT\:bufferSize}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int CoolMQTT::bufferSize =3000{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAFF}
{\bkmkend AAAAAAAAFF}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQQ" }{}}{\fldrslt {\cs37\ul\cf2 63}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKD" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAML" }{}}{\fldrslt {\cs37\ul\cf2 begin()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQW" }{}}{\fldrslt {\cs37\ul\cf2 config()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANM" }{}}{\fldrslt {\cs37\ul\cf2 printConf()}}}
.}\par
}
{\xe \v client\:CoolMQTT}
{\xe \v CoolMQTT\:client}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
PubSubClient CoolMQTT::client{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAFB}
{\bkmkend AAAAAAAAFB}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQR" }{}}{\fldrslt {\cs37\ul\cf2 67}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKD" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAML" }{}}{\fldrslt {\cs37\ul\cf2 begin()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOF" }{}}{\fldrslt {\cs37\ul\cf2 connect()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOV" }{}}{\fldrslt {\cs37\ul\cf2 mqttLoop()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOW" }{}}{\fldrslt {\cs37\ul\cf2 publish()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOJ" }{}}{\fldrslt {\cs37\ul\cf2 state()}}}
.}\par
}
{\xe \v espClient\:CoolMQTT}
{\xe \v CoolMQTT\:espClient}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
WiFiClient CoolMQTT::espClient{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAFC}
{\bkmkend AAAAAAAAFC}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQS" }{}}{\fldrslt {\cs37\ul\cf2 65}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKD" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAML" }{}}{\fldrslt {\cs37\ul\cf2 begin()}}}
.}\par
}
{\xe \v inTopic\:CoolMQTT}
{\xe \v CoolMQTT\:inTopic}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char CoolMQTT::inTopic[50] =\{'0'\}{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAFH}
{\bkmkend AAAAAAAAFH}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQX" }{}}{\fldrslt {\cs37\ul\cf2 57}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKD" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQW" }{}}{\fldrslt {\cs37\ul\cf2 config()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOF" }{}}{\fldrslt {\cs37\ul\cf2 connect()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANM" }{}}{\fldrslt {\cs37\ul\cf2 printConf()}}}
.}\par
}
{\xe \v mqttServer\:CoolMQTT}
{\xe \v CoolMQTT\:mqttServer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char CoolMQTT::mqttServer[50] =\{'0'\}{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAFD}
{\bkmkend AAAAAAAAFD}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQT" }{}}{\fldrslt {\cs37\ul\cf2 53}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKD" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAML" }{}}{\fldrslt {\cs37\ul\cf2 begin()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQW" }{}}{\fldrslt {\cs37\ul\cf2 config()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANM" }{}}{\fldrslt {\cs37\ul\cf2 printConf()}}}
.}\par
}
{\xe \v msg\:CoolMQTT}
{\xe \v CoolMQTT\:msg}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String CoolMQTT::msg =""{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAFL}
{\bkmkend AAAAAAAAFL}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQU" }{}}{\fldrslt {\cs37\ul\cf2 55}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKD" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALQ" }{}}{\fldrslt {\cs37\ul\cf2 callback()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOX" }{}}{\fldrslt {\cs37\ul\cf2 read()}}}
.}\par
}
{\xe \v newMsg\:CoolMQTT}
{\xe \v CoolMQTT\:newMsg}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool CoolMQTT::newMsg =0{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAFK}
{\bkmkend AAAAAAAAFK}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQV" }{}}{\fldrslt {\cs37\ul\cf2 69}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKD" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALQ" }{}}{\fldrslt {\cs37\ul\cf2 callback()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOX" }{}}{\fldrslt {\cs37\ul\cf2 read()}}}
.}\par
}
{\xe \v outTopic\:CoolMQTT}
{\xe \v CoolMQTT\:outTopic}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char CoolMQTT::outTopic[50] =\{'0'\}{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAFI}
{\bkmkend AAAAAAAAFI}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQY" }{}}{\fldrslt {\cs37\ul\cf2 59}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKD" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQW" }{}}{\fldrslt {\cs37\ul\cf2 config()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANM" }{}}{\fldrslt {\cs37\ul\cf2 printConf()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOW" }{}}{\fldrslt {\cs37\ul\cf2 publish()}}}
.}\par
}
{\xe \v previousLogTime\:CoolMQTT}
{\xe \v CoolMQTT\:previousLogTime}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned long CoolMQTT::previousLogTime =0{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAFJ}
{\bkmkend AAAAAAAAFJ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARB" }{}}{\fldrslt {\cs37\ul\cf2 71}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKD" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARA" }{}}{\fldrslt {\cs37\ul\cf2 publish()}}}
.}\par
}
{\xe \v user\:CoolMQTT}
{\xe \v CoolMQTT\:user}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char CoolMQTT::user[50] =\{'0'\}{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAFG}
{\bkmkend AAAAAAAAFG}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQZ" }{}}{\fldrslt {\cs37\ul\cf2 61}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKD" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQW" }{}}{\fldrslt {\cs37\ul\cf2 config()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOF" }{}}{\fldrslt {\cs37\ul\cf2 connect()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPH" }{}}{\fldrslt {\cs37\ul\cf2 getUser()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANM" }{}}{\fldrslt {\cs37\ul\cf2 printConf()}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADG" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT.h}}}
\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJZ" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT.cpp}}}
\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
CoolTime Class Reference\par \pard\plain 
{\tc\tcl2 \v CoolTime}
{\xe \v CoolTime}
{\bkmkstart AAAAAAAADP}
{\bkmkend AAAAAAAADP}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class manages the DS1337 RTC . }}\par
{
{\f2 #include <CoolTime.h>}}\par
Collaboration diagram for CoolTime:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolTime__coll__graph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABK" }{}}{\fldrslt {\cs37\ul\cf2 begin}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACC" }{}}{\fldrslt {\cs37\ul\cf2 update}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABJ" }{}}{\fldrslt {\cs37\ul\cf2 config}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARC" }{}}{\fldrslt {\cs37\ul\cf2 config}}}
 (IPAddress {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFZ" }{}}{\fldrslt {\cs37\ul\cf2 timeServer}}}
, unsigned int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFO" }{}}{\fldrslt {\cs37\ul\cf2 localPort}}}
)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABL" }{}}{\fldrslt {\cs37\ul\cf2 printConf}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFV" }{}}{\fldrslt {\cs37\ul\cf2 setDateTime}}}
 (int year, int month, int day, int hour, int minutes, int seconds)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
tmElements_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACZ" }{}}{\fldrslt {\cs37\ul\cf2 getTimeDate}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADB" }{}}{\fldrslt {\cs37\ul\cf2 getESDate}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned long {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFX" }{}}{\fldrslt {\cs37\ul\cf2 getLastSyncTime}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFP" }{}}{\fldrslt {\cs37\ul\cf2 isTimeSync}}}
 (unsigned long seconds=604800)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
time_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFR" }{}}{\fldrslt {\cs37\ul\cf2 getNtpTime}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFY" }{}}{\fldrslt {\cs37\ul\cf2 sendNTPpacket}}}
 (IPAddress &address)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFW" }{}}{\fldrslt {\cs37\ul\cf2 formatDigits}}}
 (int digits)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFU" }{}}{\fldrslt {\cs37\ul\cf2 saveTimeSync}}}
 ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned long {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFQ" }{}}{\fldrslt {\cs37\ul\cf2 timeSync}}}
 =0\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
IPAddress {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFZ" }{}}{\fldrslt {\cs37\ul\cf2 timeServer}}}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
WiFiUDP {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFN" }{}}{\fldrslt {\cs37\ul\cf2 Udp}}}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFO" }{}}{\fldrslt {\cs37\ul\cf2 localPort}}}
 =0\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
byte {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGB" }{}}{\fldrslt {\cs37\ul\cf2 packetBuffer}}}
 [{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGA" }{}}{\fldrslt {\cs37\ul\cf2 NTP_PACKET_SIZE}}}
]\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
tmElements_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFS" }{}}{\fldrslt {\cs37\ul\cf2 tmSet}}}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
DS1337RTC {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFT" }{}}{\fldrslt {\cs37\ul\cf2 rtc}}}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class manages the DS1337 RTC . \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARD" }{}}{\fldrslt {\cs37\ul\cf2 31}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKI" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime.h}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v begin\:CoolTime}
{\xe \v CoolTime\:begin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CoolTime::begin ()}}
\par
{\bkmkstart AAAAAAAABK}
{\bkmkend AAAAAAAABK}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABK" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime::begin()}}}: This method is provided to init the udp connection \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMO" }{}}{\fldrslt {\cs37\ul\cf2 41}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKG" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARE" }{}}{\fldrslt {\cs37\ul\cf2 localPort}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARF" }{}}{\fldrslt {\cs37\ul\cf2 Udp}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOZ" }{}}{\fldrslt {\cs37\ul\cf2 update()}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMJ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::begin()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    42 \{\par
   43 \par
   44 #if DEBUG == 1 \par
   45 \par
   46     Serial.println( F("Entering CoolTime.begin()") );\par
   47     Serial.println();\par
   48 \par
   49 #endif \par
   50 \par
   51 \par
   52     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFN" }{}}{\fldrslt {\cs37\ul\cf2 Udp}}}
.begin({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFO" }{}}{\fldrslt {\cs37\ul\cf2 localPort}}}
);\par
   53     \par
   54     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACC" }{}}{\fldrslt {\cs37\ul\cf2 update}}}
();\par
   55     \par
   56 \}\par
}
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolTime_ab1976cf718b950bc31e003c3323b8adb_cgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolTime_ab1976cf718b950bc31e003c3323b8adb_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v config\:CoolTime}
{\xe \v CoolTime\:config}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool CoolTime::config ()}}
\par
{\bkmkstart AAAAAAAABJ}
{\bkmkend AAAAAAAABJ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABJ" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime::config()}}}: This method is provided to configure the {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADP" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime}}} object through a configuration file.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid true if successful,false otherwise \par
}}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMV" }{}}{\fldrslt {\cs37\ul\cf2 424}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKG" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARE" }{}}{\fldrslt {\cs37\ul\cf2 localPort}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARG" }{}}{\fldrslt {\cs37\ul\cf2 timeServer}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARH" }{}}{\fldrslt {\cs37\ul\cf2 timeSync}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMJ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::begin()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   425 \{\par
  426 \par
  427 #if DEBUG == 1 \par
  428 \par
  429     Serial.println( F("Enter CoolTime.config()") );\par
  430     Serial.println();\par
  431 \par
  432 #endif \par
  433 \par
  434     File rtcConfig = SPIFFS.open("/rtcConfig.json", "r");\par
  435 \par
  436     if (!rtcConfig) \par
  437     \{\par
  438     \par
  439     #if DEBUG == 1 \par
  440 \par
  441         Serial.println( F("failed to read /rtcConfig.json") );\par
  442         Serial.println();\par
  443     \par
  444     #endif\par
  445 \par
  446         return(false);\par
  447     \}\par
  448     else\par
  449     \{\par
  450         size_t size = rtcConfig.size();\par
  451         // Allocate a buffer to store contents of the file.\par
  452         std::unique_ptr<char[]> buf(new char[size]);\par
  453 \par
  454         rtcConfig.readBytes(buf.get(), size);\par
  455         DynamicJsonBuffer jsonBuffer;\par
  456         JsonObject& json = jsonBuffer.parseObject(buf.get());\par
  457         if (!json.success()) \par
  458         \{\par
  459         \par
  460         #if DEBUG == 1 \par
  461 \par
  462             Serial.println( F("failed to parse json") );\par
  463             Serial.println();\par
  464         \par
  465         #endif \par
  466 \par
  467             return(false);\par
  468         \} \par
  469         else\par
  470         \{  \par
  471         \par
  472         #if DEBUG == 1 \par
  473 \par
  474             Serial.println( F("configuration json is :") );\par
  475             json.printTo(Serial);\par
  476             Serial.println();\par
  477 \par
  478             Serial.print(F("jsonBuffer size: "));\par
  479             Serial.println(jsonBuffer.size());\par
  480             Serial.println();\par
  481 \par
  482 \par
  483         #endif\par
  484 \par
  485             String ip;\par
  486             \par
  487             if(json["timeServer"].success() )\par
  488             \{           \par
  489                  ip=json["timeServer"].as<String>();\par
  490                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFZ" }{}}{\fldrslt {\cs37\ul\cf2 timeServer}}}
.fromString(ip);\par
  491                 \par
  492             \}\par
  493             else\par
  494             \{\par
  495                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFZ" }{}}{\fldrslt {\cs37\ul\cf2 timeServer}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFZ" }{}}{\fldrslt {\cs37\ul\cf2 timeServer}}}
;\par
  496             \}\par
  497             json["timeServer"]=ip;\par
  498             \par
  499             if(json["localPort"].success() )\par
  500             \{                       \par
  501                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFO" }{}}{\fldrslt {\cs37\ul\cf2 localPort}}}
=json["localPort"];\par
  502             \}\par
  503             else\par
  504             \{\par
  505                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFO" }{}}{\fldrslt {\cs37\ul\cf2 localPort}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFO" }{}}{\fldrslt {\cs37\ul\cf2 localPort}}}
;\par
  506             \}\par
  507             json["localPort"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFO" }{}}{\fldrslt {\cs37\ul\cf2 localPort}}}
;\par
  508 \par
  509 \par
  510             if( json["timeSync"].success() )\par
  511             \{\par
  512 \par
  513                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFQ" }{}}{\fldrslt {\cs37\ul\cf2 timeSync}}}
=json["timeSync"];\par
  514             \}\par
  515             else\par
  516             \{\par
  517                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFQ" }{}}{\fldrslt {\cs37\ul\cf2 timeSync}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFQ" }{}}{\fldrslt {\cs37\ul\cf2 timeSync}}}
;\par
  518             \}\par
  519             json["timeSync"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFQ" }{}}{\fldrslt {\cs37\ul\cf2 timeSync}}}
;\par
  520 \par
  521             rtcConfig.close();\par
  522             rtcConfig= SPIFFS.open("/rtcConfig.json", "w");\par
  523             \par
  524             if(!rtcConfig)\par
  525             \{\par
  526             \par
  527             #if DEBUG == 1\par
  528 \par
  529                 Serial.println( F("failed to write to /rtcConfig.json") );\par
  530                 Serial.println();\par
  531             \par
  532             #endif\par
  533 \par
  534                 return(false);\par
  535             \}\par
  536             \par
  537             json.printTo(rtcConfig);\par
  538             rtcConfig.close();\par
  539 \par
  540         #if DEBUG == 1 \par
  541 \par
  542             Serial.println( F("configuration is :") );\par
  543             json.printTo(Serial);\par
  544             Serial.println();\par
  545         \par
  546         #endif\par
  547         \par
  548             return(true); \par
  549         \}\par
  550     \}   \par
  551 \par
  552 \par
  553 \par
  554 \}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolTime_a87c28260c1bc77091162cbcf1ee2e129_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v config\:CoolTime}
{\xe \v CoolTime\:config}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CoolTime::config (IPAddress  {\i timeServer}, unsigned int  {\i localPort})}}
\par
{\bkmkstart AAAAAAAARC}
{\bkmkend AAAAAAAARC}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
CoolTime::config(Time server IP , udp Port): This method is provided to do manual configuration. \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARI" }{}}{\fldrslt {\cs37\ul\cf2 401}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKG" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARE" }{}}{\fldrslt {\cs37\ul\cf2 localPort}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARG" }{}}{\fldrslt {\cs37\ul\cf2 timeServer}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   402 \{\par
  403 \par
  404 #if DEBUG == 1 \par
  405 \par
  406     Serial.println( F("Enter CoomTime.config() , no SPIFFS variant ") );\par
  407     Serial.println();\par
  408 \par
  409 #endif \par
  410 \par
  411     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFZ" }{}}{\fldrslt {\cs37\ul\cf2 timeServer}}}
={\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFZ" }{}}{\fldrslt {\cs37\ul\cf2 timeServer}}}
;\par
  412     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFO" }{}}{\fldrslt {\cs37\ul\cf2 localPort}}}
={\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFO" }{}}{\fldrslt {\cs37\ul\cf2 localPort}}}
;\par
  413     \par
  414 \} \par
}
}
{\xe \v formatDigits\:CoolTime}
{\xe \v CoolTime\:formatDigits}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String CoolTime::formatDigits (int  {\i digits})}}
\par
{\bkmkstart AAAAAAAAFW}
{\bkmkend AAAAAAAAFW}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
CoolTime::printDigits(digit)\par
utility method for digital clock display adds leading 0\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid formatted string of the input digit \par
}}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARJ" }{}}{\fldrslt {\cs37\ul\cf2 716}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKG" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime.cpp}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPG" }{}}{\fldrslt {\cs37\ul\cf2 getESDate()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPC" }{}}{\fldrslt {\cs37\ul\cf2 getTimeDate()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARK" }{}}{\fldrslt {\cs37\ul\cf2 setDateTime()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   717 \{\par
  718 \par
  719 #if DEBUG == 1 \par
  720 \par
  721     Serial.println( F("Entering CoolTime.formatDigits()") );\par
  722     Serial.println();\par
  723 \par
  724 #endif \par
  725 \par
  726     if(digits < 10)\par
  727     \{\par
  728     \par
  729     #if DEBUG == 1\par
  730 \par
  731         Serial.println( F("output digit : ") );\par
  732         Serial.println( String("0") + String(digits) );\par
  733 \par
  734     #endif\par
  735 \par
  736         return( String("0") + String(digits) );\par
  737     \}\par
  738     \par
  739 #if DEBUG == 1 \par
  740 \par
  741     Serial.println( F("output digit : ") );\par
  742     Serial.println(digits);\par
  743 \par
  744 #endif\par
  745 \par
  746     return( String(digits) );\par
  747 \}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolTime_acd537cd4210d7bde4e1f5c47d2ac0456_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v getESDate\:CoolTime}
{\xe \v CoolTime\:getESDate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String CoolTime::getESDate ()}}
\par
{\bkmkstart AAAAAAAADB}
{\bkmkend AAAAAAAADB}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
CoolTime::getESD(): This method is provided to return an Elastic Search compatible date Format\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid date String in Elastic Search format \par
}}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPG" }{}}{\fldrslt {\cs37\ul\cf2 193}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKG" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARJ" }{}}{\fldrslt {\cs37\ul\cf2 formatDigits()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPC" }{}}{\fldrslt {\cs37\ul\cf2 getTimeDate()}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARK" }{}}{\fldrslt {\cs37\ul\cf2 setDateTime()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOR" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::userData()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   194 \{\par
  195 \par
  196 #if DEBUG == 1 \par
  197 \par
  198     Serial.println( F("Entering CoolTime.getESDate()") );\par
  199     Serial.println();\par
  200 \par
  201 #endif \par
  202 \par
  203     tmElements_t tm=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACZ" }{}}{\fldrslt {\cs37\ul\cf2 getTimeDate}}}
();\par
  204 \par
  205     //"20yy-mm-ddT00:00:00Z"\par
  206     String elasticSearchString =String(tm.Year+1970)+"-"+this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFW" }{}}{\fldrslt {\cs37\ul\cf2 formatDigits}}}
(tm.Month)+"-";\par
  207 \par
  208     elasticSearchString +=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFW" }{}}{\fldrslt {\cs37\ul\cf2 formatDigits}}}
(tm.Day)+"T"+this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFW" }{}}{\fldrslt {\cs37\ul\cf2 formatDigits}}}
(tm.Hour)+":";\par
  209     \par
  210     elasticSearchString +=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFW" }{}}{\fldrslt {\cs37\ul\cf2 formatDigits}}}
(tm.Minute)+":"+this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFW" }{}}{\fldrslt {\cs37\ul\cf2 formatDigits}}}
(tm.Second)+"Z";\par
  211 \par
  212 #if DEBUG == 1 \par
  213 \par
  214     Serial.print( F("elastic Search date : ") );\par
  215     Serial.println(elasticSearchString);\par
  216     Serial.println();\par
  217 \par
  218 #endif\par
  219 \par
  220     return (elasticSearchString);\par
  221 \}\par
}
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolTime_ac4f32ee513c1328d984306645e8785a4_cgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolTime_ac4f32ee513c1328d984306645e8785a4_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v getLastSyncTime\:CoolTime}
{\xe \v CoolTime\:getLastSyncTime}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned long CoolTime::getLastSyncTime ()}}
\par
{\bkmkstart AAAAAAAAFX}
{\bkmkend AAAAAAAAFX}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFX" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime::getLastSyncTime()}}}: This method is provided to get the last time we syncronised the time\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid unsigned long representation of last syncronisation time in seconds \par
}}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARL" }{}}{\fldrslt {\cs37\ul\cf2 231}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKG" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARH" }{}}{\fldrslt {\cs37\ul\cf2 timeSync}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARM" }{}}{\fldrslt {\cs37\ul\cf2 isTimeSync()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   232 \{\par
  233 \par
  234 #if DEBUG == 1 \par
  235 \par
  236     Serial.println( F("Entering CoolTime.getLastSyncTime()") );\par
  237     Serial.println();\par
  238     \par
  239     Serial.print( F("last sync time : ") );\par
  240     Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFQ" }{}}{\fldrslt {\cs37\ul\cf2 timeSync}}}
);\par
  241 \par
  242 #endif \par
  243 \par
  244     return(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFQ" }{}}{\fldrslt {\cs37\ul\cf2 timeSync}}}
);\par
  245 \}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolTime_a5d17f707a9d337720493b2bce9d41c21_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v getNtpTime\:CoolTime}
{\xe \v CoolTime\:getNtpTime}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
time_t CoolTime::getNtpTime ()}}
\par
{\bkmkstart AAAAAAAAFR}
{\bkmkend AAAAAAAAFR}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
CoolTime::getNtopTime(): This method is provided to get the Time through an NTP request to a Time Server\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid a time_t (unsigned long ) timestamp in seconds \par
}}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKK" }{}}{\fldrslt {\cs37\ul\cf2 299}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKG" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKJ" }{}}{\fldrslt {\cs37\ul\cf2 NTP_PACKET_SIZE}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARN" }{}}{\fldrslt {\cs37\ul\cf2 packetBuffer}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKL" }{}}{\fldrslt {\cs37\ul\cf2 sendNTPpacket()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARG" }{}}{\fldrslt {\cs37\ul\cf2 timeServer}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARF" }{}}{\fldrslt {\cs37\ul\cf2 Udp}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOZ" }{}}{\fldrslt {\cs37\ul\cf2 update()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   300 \{\par
  301 \par
  302 #if DEBUG == 1 \par
  303 \par
  304     Serial.println( F("Entering CoolTime.getNtpTime()") );\par
  305     Serial.println();\par
  306 \par
  307 #endif \par
  308 \par
  309     while ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFN" }{}}{\fldrslt {\cs37\ul\cf2 Udp}}}
.parsePacket() > 0) ; // discard any previously received packets\par
  310 \par
  311 #if DEBUG == 1 \par
  312     \par
  313     Serial.println( F("Transmit NTP Request") );\par
  314 \par
  315 #endif \par
  316 \par
  317     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFY" }{}}{\fldrslt {\cs37\ul\cf2 sendNTPpacket}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFZ" }{}}{\fldrslt {\cs37\ul\cf2 timeServer}}}
);\par
  318 \par
  319     uint32_t beginWait = millis();\par
  320 \par
  321     while (millis() - beginWait < 1500) \par
  322     \{\par
  323         int size = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFN" }{}}{\fldrslt {\cs37\ul\cf2 Udp}}}
.parsePacket();\par
  324         if (size >= {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGA" }{}}{\fldrslt {\cs37\ul\cf2 NTP_PACKET_SIZE}}}
) \par
  325         \{\par
  326         \par
  327         #if DEBUG == 1\par
  328 \par
  329             Serial.println( F("Receive NTP Response") );\par
  330         \par
  331         #endif\par
  332 \par
  333             {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFN" }{}}{\fldrslt {\cs37\ul\cf2 Udp}}}
.read({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGB" }{}}{\fldrslt {\cs37\ul\cf2 packetBuffer}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGA" }{}}{\fldrslt {\cs37\ul\cf2 NTP_PACKET_SIZE}}}
);  // read packet into the buffer\par
  334             unsigned long secsSince1900;\par
  335             // convert four bytes starting at location 40 to a long integer\par
  336             secsSince1900 =  (unsigned long){\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGB" }{}}{\fldrslt {\cs37\ul\cf2 packetBuffer}}}
[40] << 24;\par
  337             secsSince1900 |= (unsigned long){\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGB" }{}}{\fldrslt {\cs37\ul\cf2 packetBuffer}}}
[41] << 16;\par
  338             secsSince1900 |= (unsigned long){\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGB" }{}}{\fldrslt {\cs37\ul\cf2 packetBuffer}}}
[42] << 8;\par
  339             secsSince1900 |= (unsigned long){\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGB" }{}}{\fldrslt {\cs37\ul\cf2 packetBuffer}}}
[43];\par
  340         \par
  341         #if DEBUG == 1 \par
  342     \par
  343             Serial.print( F("received unix time : ") );\par
  344             Serial.println(secsSince1900 - 2208988800UL);\par
  345             Serial.println();\par
  346 \par
  347         #endif \par
  348 \par
  349             return secsSince1900 - 2208988800UL ;\par
  350         \}\par
  351     \}\par
  352     \par
  353 #if DEBUG == 1\par
  354 \par
  355     Serial.println( F("No NTP Response :-(") );\par
  356 \par
  357 #endif \par
  358 \par
  359     return 0; // return 0 if unable to get the time\par
  360 \}\par
}
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolTime_a41fbbbfd651c2079f54d4b2911e4c705_cgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolTime_a41fbbbfd651c2079f54d4b2911e4c705_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v getTimeDate\:CoolTime}
{\xe \v CoolTime\:getTimeDate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
tmElements_t CoolTime::getTimeDate ()}}
\par
{\bkmkstart AAAAAAAACZ}
{\bkmkend AAAAAAAACZ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACZ" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime::getTimeDate()}}}: This method is provided to get the RTC Time\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid a tmElements_t structre that has the time in it \par
}}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPC" }{}}{\fldrslt {\cs37\ul\cf2 150}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKG" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARJ" }{}}{\fldrslt {\cs37\ul\cf2 formatDigits()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARO" }{}}{\fldrslt {\cs37\ul\cf2 rtc}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPG" }{}}{\fldrslt {\cs37\ul\cf2 getESDate()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOP" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::readSensors()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   151 \{\par
  152 \par
  153 #if DEBUG == 1 \par
  154     \par
  155     Serial.println( F("Entering CoolTime.getTimeDate()") );\par
  156     Serial.println();\par
  157 \par
  158 #endif\par
  159 \par
  160     tmElements_t tm;\par
  161     time_t timeDate = this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFT" }{}}{\fldrslt {\cs37\ul\cf2 rtc}}}
.get(CLOCK_ADDRESS);\par
  162     breakTime(timeDate,tm);\par
  163 \par
  164 #if DEBUG == 1\par
  165     \par
  166     Serial.print( F("time is : ") );\par
  167     Serial.print(tm.Year+ 1970 );\par
  168     Serial.print( F("-") );\par
  169     Serial.print( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFW" }{}}{\fldrslt {\cs37\ul\cf2 formatDigits}}}
( tm.Month ) );\par
  170     Serial.print( F("-") );\par
  171     Serial.print( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFW" }{}}{\fldrslt {\cs37\ul\cf2 formatDigits}}}
( tm.Day ) );\par
  172     Serial.print( F("T") );\par
  173     Serial.print( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFW" }{}}{\fldrslt {\cs37\ul\cf2 formatDigits}}}
( tm.Hour ) );\par
  174     Serial.print( F(":") );\par
  175     Serial.print( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFW" }{}}{\fldrslt {\cs37\ul\cf2 formatDigits}}}
( tm.Minute ) );\par
  176     Serial.print( F(":") );\par
  177     Serial.print( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFW" }{}}{\fldrslt {\cs37\ul\cf2 formatDigits}}}
( tm.Second ) );\par
  178     Serial.print( F("Z") );\par
  179 \par
  180 #endif\par
  181     \par
  182     return(tm);\par
  183 \}\par
}
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolTime_a7a7501c5ca77dd1248bea704c44f986c_cgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolTime_a7a7501c5ca77dd1248bea704c44f986c_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v isTimeSync\:CoolTime}
{\xe \v CoolTime\:isTimeSync}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool CoolTime::isTimeSync (unsigned long  {\i seconds} = {\f2 604800})}}
\par
{\bkmkstart AAAAAAAAFP}
{\bkmkend AAAAAAAAFP}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
CoolTime::isTimeSync( time in seconds): This method is provided to test if the time is syncronised or not. By default we test once per week.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid true if time is syncronised,false otherwise \par
}}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARM" }{}}{\fldrslt {\cs37\ul\cf2 257}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKG" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARL" }{}}{\fldrslt {\cs37\ul\cf2 getLastSyncTime()}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOZ" }{}}{\fldrslt {\cs37\ul\cf2 update()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   258 \{\par
  259 \par
  260 #if DEBUG == 1\par
  261 \par
  262     Serial.println( F("Entering CoolTime.isTimeSync() ") );\par
  263     Serial.println();\par
  264 \par
  265 #endif \par
  266 \par
  267 \par
  268     //default is once per week we try to get a time update\par
  269     if( ( RTC.get(CLOCK_ADDRESS) - this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFX" }{}}{\fldrslt {\cs37\ul\cf2 getLastSyncTime}}}
() ) > ( seconds ) ) \par
  270     \{\par
  271 \par
  272     #if DEBUG == 1 \par
  273 \par
  274         Serial.println( F("time is not syncronised ") );\par
  275     \par
  276     #endif\par
  277 \par
  278         return(false);  \par
  279     \}\par
  280     \par
  281 #if DEBUG == 1 \par
  282 \par
  283     Serial.println( F("time is syncronised ") );\par
  284 \par
  285 #endif \par
  286 \par
  287     return(true);\par
  288 \}\par
}
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolTime_a5ae038a4498602b189f76a10bf02adf8_cgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolTime_a5ae038a4498602b189f76a10bf02adf8_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v printConf\:CoolTime}
{\xe \v CoolTime\:printConf}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CoolTime::printConf ()}}
\par
{\bkmkstart AAAAAAAABL}
{\bkmkend AAAAAAAABL}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABL" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime::printConf()}}}: This method is provided to print the {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADP" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime}}} configuration to the Serial Monitor \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANO" }{}}{\fldrslt {\cs37\ul\cf2 689}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKG" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARE" }{}}{\fldrslt {\cs37\ul\cf2 localPort}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARG" }{}}{\fldrslt {\cs37\ul\cf2 timeServer}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMJ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::begin()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   690 \{\par
  691 \par
  692 #if DEBUG == 1\par
  693 \par
  694     Serial.println( F("Entering CoolTime.printConf()") );\par
  695     Serial.println();\par
  696 \par
  697 #endif \par
  698 \par
  699     Serial.println("RTC Configuration") ;\par
  700 \par
  701     Serial.print("timeServer : ");\par
  702     Serial.println({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFZ" }{}}{\fldrslt {\cs37\ul\cf2 timeServer}}}
);\par
  703     \par
  704     Serial.print("localPort : :");\par
  705     Serial.println({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFO" }{}}{\fldrslt {\cs37\ul\cf2 localPort}}}
);\par
  706 \}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolTime_af355e7f9b3898211cd2ff25eab5933b1_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v saveTimeSync\:CoolTime}
{\xe \v CoolTime\:saveTimeSync}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool CoolTime::saveTimeSync ()}}
\par
{\bkmkstart AAAAAAAAFU}
{\bkmkend AAAAAAAAFU}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFU" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime::saveTimeSync()}}} This method is provided to save the last sync time in the SPIFFS.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid true if successful,false otherwise \par
}}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARP" }{}}{\fldrslt {\cs37\ul\cf2 565}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKG" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARE" }{}}{\fldrslt {\cs37\ul\cf2 localPort}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARG" }{}}{\fldrslt {\cs37\ul\cf2 timeServer}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARH" }{}}{\fldrslt {\cs37\ul\cf2 timeSync}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOZ" }{}}{\fldrslt {\cs37\ul\cf2 update()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   566 \{\par
  567     Serial.println( F("Enter CoolTime.saveTimeSync()") );\par
  568     Serial.println();\par
  569 \par
  570     File rtcConfig = SPIFFS.open("/rtcConfig.json", "r");\par
  571 \par
  572     if (!rtcConfig) \par
  573     \{\par
  574         Serial.println( F("failed to read /rtcConfig.json") );\par
  575         Serial.println();\par
  576 \par
  577         return(false);\par
  578     \}\par
  579     else\par
  580     \{\par
  581         size_t size = rtcConfig.size();\par
  582         // Allocate a buffer to store contents of the file.\par
  583         std::unique_ptr<char[]> buf(new char[size]);\par
  584 \par
  585         rtcConfig.readBytes(buf.get(), size);\par
  586         DynamicJsonBuffer jsonBuffer;\par
  587         JsonObject& json = jsonBuffer.parseObject(buf.get());\par
  588         if (!json.success()) \par
  589         \{\par
  590         #if DEBUG == 1\par
  591 \par
  592             Serial.println( F("failed to parse json") );\par
  593             Serial.println();\par
  594         \par
  595         #endif\par
  596 \par
  597             return(false);\par
  598         \} \par
  599         else\par
  600         \{\par
  601 \par
  602         #if DEBUG == 1\par
  603     \par
  604             Serial.println( F("configuration json is :") );\par
  605             json.printTo(Serial);\par
  606             Serial.println();\par
  607 \par
  608             Serial.print(F("jsonBuffer size: "));\par
  609             Serial.println(jsonBuffer.size());\par
  610             Serial.println();\par
  611 \par
  612         #endif\par
  613 \par
  614             String ip;\par
  615                     \par
  616             if(json["timeServer"].success() )\par
  617             \{           \par
  618                  ip=json["timeServer"].as<String>();\par
  619                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFZ" }{}}{\fldrslt {\cs37\ul\cf2 timeServer}}}
.fromString(ip);\par
  620                 \par
  621             \}\par
  622             else\par
  623             \{\par
  624                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFZ" }{}}{\fldrslt {\cs37\ul\cf2 timeServer}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFZ" }{}}{\fldrslt {\cs37\ul\cf2 timeServer}}}
;\par
  625             \}\par
  626             json["timeServer"]=ip;\par
  627             \par
  628             if(json["localPort"].success() )\par
  629             \{                       \par
  630                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFO" }{}}{\fldrslt {\cs37\ul\cf2 localPort}}}
=json["localPort"];\par
  631             \}\par
  632             else\par
  633             \{\par
  634                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFO" }{}}{\fldrslt {\cs37\ul\cf2 localPort}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFO" }{}}{\fldrslt {\cs37\ul\cf2 localPort}}}
;\par
  635             \}\par
  636             json["localPort"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFO" }{}}{\fldrslt {\cs37\ul\cf2 localPort}}}
;\par
  637 \par
  638 \par
  639             if( json["timeSync"].success() )\par
  640             \{\par
  641                 json["timeSync"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFQ" }{}}{\fldrslt {\cs37\ul\cf2 timeSync}}}
;\par
  642             \}\par
  643             else\par
  644             \{\par
  645                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFQ" }{}}{\fldrslt {\cs37\ul\cf2 timeSync}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFQ" }{}}{\fldrslt {\cs37\ul\cf2 timeSync}}}
;\par
  646             \}\par
  647             json["timeSync"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFQ" }{}}{\fldrslt {\cs37\ul\cf2 timeSync}}}
;\par
  648 \par
  649 \par
  650             rtcConfig.close();\par
  651             rtcConfig= SPIFFS.open("/rtcConfig.json", "w");\par
  652             \par
  653             if(!rtcConfig)\par
  654             \{\par
  655             #if DEBUG == 1\par
  656 \par
  657                 Serial.println( F("failed to write timeSync to /rtcConfig.json") );\par
  658                 Serial.println();\par
  659             \par
  660             #endif\par
  661 \par
  662                 return(false);\par
  663             \}\par
  664             \par
  665             json.printTo(rtcConfig);\par
  666             rtcConfig.close();\par
  667     \par
  668         #if DEBUG == 1\par
  669 \par
  670             Serial.println( F("configuration is :") );\par
  671             json.printTo(Serial);\par
  672             Serial.println();\par
  673         \par
  674         #endif\par
  675             return(true); \par
  676         \}\par
  677     \}   \par
  678 \par
  679 \par
  680 \par
  681 \}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolTime_ae9658c9b377510d469e3b88edf33ee85_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v sendNTPpacket\:CoolTime}
{\xe \v CoolTime\:sendNTPpacket}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CoolTime::sendNTPpacket (IPAddress &  {\i address})}}
\par
{\bkmkstart AAAAAAAAFY}
{\bkmkend AAAAAAAAFY}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
CoolTime::sendNTPpacket( Time Server IP address): This method is provided to send an NTP request to the time server at the given address \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKL" }{}}{\fldrslt {\cs37\ul\cf2 367}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKG" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKJ" }{}}{\fldrslt {\cs37\ul\cf2 NTP_PACKET_SIZE}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARN" }{}}{\fldrslt {\cs37\ul\cf2 packetBuffer}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARF" }{}}{\fldrslt {\cs37\ul\cf2 Udp}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKK" }{}}{\fldrslt {\cs37\ul\cf2 getNtpTime()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   368 \{\par
  369 \par
  370 #if DEBUG == 1 \par
  371 \par
  372     Serial.println( F("Enter CoolTime.sendNTPpacket()") );\par
  373     Serial.println();\par
  374 \par
  375 #endif\par
  376 \par
  377     memset({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGB" }{}}{\fldrslt {\cs37\ul\cf2 packetBuffer}}}
, 0, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGA" }{}}{\fldrslt {\cs37\ul\cf2 NTP_PACKET_SIZE}}}
);\par
  378     // Initialize values needed to form NTP request\par
  379     // (see URL above for details on the packets)\par
  380     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGB" }{}}{\fldrslt {\cs37\ul\cf2 packetBuffer}}}
[0] = 0b11100011;   // LI, Version, Mode\par
  381     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGB" }{}}{\fldrslt {\cs37\ul\cf2 packetBuffer}}}
[1] = 0;     // Stratum, or type of clock\par
  382     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGB" }{}}{\fldrslt {\cs37\ul\cf2 packetBuffer}}}
[2] = 6;     // Polling Interval\par
  383     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGB" }{}}{\fldrslt {\cs37\ul\cf2 packetBuffer}}}
[3] = 0xEC;  // Peer Clock Precision\par
  384     // 8 bytes of zero for Root Delay & Root Dispersion\par
  385     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGB" }{}}{\fldrslt {\cs37\ul\cf2 packetBuffer}}}
[12]  = 49;\par
  386     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGB" }{}}{\fldrslt {\cs37\ul\cf2 packetBuffer}}}
[13]  = 0x4E;\par
  387     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGB" }{}}{\fldrslt {\cs37\ul\cf2 packetBuffer}}}
[14]  = 49;\par
  388     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGB" }{}}{\fldrslt {\cs37\ul\cf2 packetBuffer}}}
[15]  = 52;\par
  389     // all NTP fields have been given values, now\par
  390     // you can send a packet requesting a timestamp:                 \par
  391     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFN" }{}}{\fldrslt {\cs37\ul\cf2 Udp}}}
.beginPacket(address, 123); //NTP requests are to port 123\par
  392     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFN" }{}}{\fldrslt {\cs37\ul\cf2 Udp}}}
.write({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGB" }{}}{\fldrslt {\cs37\ul\cf2 packetBuffer}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGA" }{}}{\fldrslt {\cs37\ul\cf2 NTP_PACKET_SIZE}}}
);\par
  393     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFN" }{}}{\fldrslt {\cs37\ul\cf2 Udp}}}
.endPacket();    \par
  394 \}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolTime_a236a38d120dc53bc67456d763838c5a1_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v setDateTime\:CoolTime}
{\xe \v CoolTime\:setDateTime}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CoolTime::setDateTime (int  {\i year}, int  {\i month}, int  {\i day}, int  {\i hour}, int  {\i minutes}, int  {\i seconds})}}
\par
{\bkmkstart AAAAAAAAFV}
{\bkmkend AAAAAAAAFV}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
CoolTime::setDateTime(year,month,dat,hour,minutes,seconds): This method is provided to manually set the RTc Time \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARK" }{}}{\fldrslt {\cs37\ul\cf2 96}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKG" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARJ" }{}}{\fldrslt {\cs37\ul\cf2 formatDigits()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPG" }{}}{\fldrslt {\cs37\ul\cf2 getESDate()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARO" }{}}{\fldrslt {\cs37\ul\cf2 rtc}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    97 \{ \par
   98 \par
   99 #if DEBUG == 1\par
  100 \par
  101     Serial.println( F("Entering CoolTime.setDateTime") );\par
  102     Serial.println();\par
  103 \par
  104 #endif\par
  105 \par
  106     tmElements_t tm;\par
  107     tm.Second=seconds; \par
  108     tm.Minute=minutes; \par
  109     tm.Hour=hour; \par
  110     tm.Day=day;\par
  111     tm.Month=month; \par
  112     tm.Year=year;\par
  113     \par
  114     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFT" }{}}{\fldrslt {\cs37\ul\cf2 rtc}}}
.set(makeTime(tm),CLOCK_ADDRESS);   \par
  115 \par
  116 #if DEBUG == 1\par
  117 \par
  118     Serial.print( F("setting time to : ") );//"20yy-mm-ddT00:00:00Z\par
  119 \par
  120     Serial.print(tm.Year);\par
  121     Serial.print( F("-") );\par
  122     Serial.print( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFW" }{}}{\fldrslt {\cs37\ul\cf2 formatDigits}}}
( tm.Month ) );\par
  123     Serial.print( F("-") );\par
  124     Serial.print( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFW" }{}}{\fldrslt {\cs37\ul\cf2 formatDigits}}}
( tm.Day ) );\par
  125     Serial.print( F("T") );\par
  126     Serial.print( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFW" }{}}{\fldrslt {\cs37\ul\cf2 formatDigits}}}
( tm.Hour ) );\par
  127     Serial.print( F(":") );\par
  128     Serial.print( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFW" }{}}{\fldrslt {\cs37\ul\cf2 formatDigits}}}
( tm.Minute ) );\par
  129     Serial.print( F(":") );\par
  130     Serial.print( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFW" }{}}{\fldrslt {\cs37\ul\cf2 formatDigits}}}
( tm.Second ) );\par
  131     Serial.print( F("Z") );\par
  132 \par
  133     Serial.println();\par
  134     \par
  135     Serial.print( F("time set to : ") );\par
  136     Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADB" }{}}{\fldrslt {\cs37\ul\cf2 getESDate}}}
());\par
  137     Serial.println();\par
  138 \par
  139 #endif\par
  140 \par
  141 \}\par
}
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolTime_ab81ea7fdaace111aa01cc1ec84c6d297_cgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v update\:CoolTime}
{\xe \v CoolTime\:update}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CoolTime::update ()}}
\par
{\bkmkstart AAAAAAAACC}
{\bkmkend AAAAAAAACC}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACC" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime::update()}}}: This method is provided to correct the rtc Time when it drifts,once every week. \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOZ" }{}}{\fldrslt {\cs37\ul\cf2 63}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKG" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKK" }{}}{\fldrslt {\cs37\ul\cf2 getNtpTime()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARM" }{}}{\fldrslt {\cs37\ul\cf2 isTimeSync()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARO" }{}}{\fldrslt {\cs37\ul\cf2 rtc}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARP" }{}}{\fldrslt {\cs37\ul\cf2 saveTimeSync()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARH" }{}}{\fldrslt {\cs37\ul\cf2 timeSync}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARQ" }{}}{\fldrslt {\cs37\ul\cf2 tmSet}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMO" }{}}{\fldrslt {\cs37\ul\cf2 begin()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOK" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::onLineMode()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    64 \{\par
   65 \par
   66 #if DEBUG == 1\par
   67 \par
   68     Serial.println( F("Entering CoolTime.update()") );\par
   69     Serial.println();\par
   70 \par
   71 #endif \par
   72 \par
   73     if( !( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFP" }{}}{\fldrslt {\cs37\ul\cf2 isTimeSync}}}
() ) )\par
   74     \{\par
   75     \par
   76     #if DEBUG == 1\par
   77 \par
   78         Serial.println( F("waiting for sync") );\par
   79         Serial.println();\par
   80 \par
   81     #endif \par
   82 \par
   83         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFQ" }{}}{\fldrslt {\cs37\ul\cf2 timeSync}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFR" }{}}{\fldrslt {\cs37\ul\cf2 getNtpTime}}}
();\par
   84         breakTime(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFR" }{}}{\fldrslt {\cs37\ul\cf2 getNtpTime}}}
(), this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFS" }{}}{\fldrslt {\cs37\ul\cf2 tmSet}}}
);\par
   85         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFT" }{}}{\fldrslt {\cs37\ul\cf2 rtc}}}
.set(makeTime(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFS" }{}}{\fldrslt {\cs37\ul\cf2 tmSet}}}
), CLOCK_ADDRESS); // set the clock\par
   86         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFU" }{}}{\fldrslt {\cs37\ul\cf2 saveTimeSync}}}
();\par
   87     \}\par
   88     \par
   89 \}\par
}
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolTime_aae601f795452cfa48d9fb337aed483a8_cgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolTime_aae601f795452cfa48d9fb337aed483a8_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v localPort\:CoolTime}
{\xe \v CoolTime\:localPort}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned int CoolTime::localPort =0{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAFO}
{\bkmkend AAAAAAAAFO}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARE" }{}}{\fldrslt {\cs37\ul\cf2 71}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKI" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMO" }{}}{\fldrslt {\cs37\ul\cf2 begin()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARI" }{}}{\fldrslt {\cs37\ul\cf2 config()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANO" }{}}{\fldrslt {\cs37\ul\cf2 printConf()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARP" }{}}{\fldrslt {\cs37\ul\cf2 saveTimeSync()}}}
.}\par
}
{\xe \v packetBuffer\:CoolTime}
{\xe \v CoolTime\:packetBuffer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
byte CoolTime::packetBuffer[{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGA" }{}}{\fldrslt {\cs37\ul\cf2 NTP_PACKET_SIZE}}}
]{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAGB}
{\bkmkend AAAAAAAAGB}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARN" }{}}{\fldrslt {\cs37\ul\cf2 73}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKI" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKK" }{}}{\fldrslt {\cs37\ul\cf2 getNtpTime()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKL" }{}}{\fldrslt {\cs37\ul\cf2 sendNTPpacket()}}}
.}\par
}
{\xe \v rtc\:CoolTime}
{\xe \v CoolTime\:rtc}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
DS1337RTC CoolTime::rtc{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAFT}
{\bkmkend AAAAAAAAFT}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARO" }{}}{\fldrslt {\cs37\ul\cf2 77}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKI" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPC" }{}}{\fldrslt {\cs37\ul\cf2 getTimeDate()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARK" }{}}{\fldrslt {\cs37\ul\cf2 setDateTime()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOZ" }{}}{\fldrslt {\cs37\ul\cf2 update()}}}
.}\par
}
{\xe \v timeServer\:CoolTime}
{\xe \v CoolTime\:timeServer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
IPAddress CoolTime::timeServer{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAFZ}
{\bkmkend AAAAAAAAFZ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARG" }{}}{\fldrslt {\cs37\ul\cf2 67}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKI" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARI" }{}}{\fldrslt {\cs37\ul\cf2 config()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKK" }{}}{\fldrslt {\cs37\ul\cf2 getNtpTime()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANO" }{}}{\fldrslt {\cs37\ul\cf2 printConf()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARP" }{}}{\fldrslt {\cs37\ul\cf2 saveTimeSync()}}}
.}\par
}
{\xe \v timeSync\:CoolTime}
{\xe \v CoolTime\:timeSync}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned long CoolTime::timeSync =0{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAFQ}
{\bkmkend AAAAAAAAFQ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARH" }{}}{\fldrslt {\cs37\ul\cf2 65}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKI" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMV" }{}}{\fldrslt {\cs37\ul\cf2 config()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARL" }{}}{\fldrslt {\cs37\ul\cf2 getLastSyncTime()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARP" }{}}{\fldrslt {\cs37\ul\cf2 saveTimeSync()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOZ" }{}}{\fldrslt {\cs37\ul\cf2 update()}}}
.}\par
}
{\xe \v tmSet\:CoolTime}
{\xe \v CoolTime\:tmSet}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
tmElements_t CoolTime::tmSet{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAFS}
{\bkmkend AAAAAAAAFS}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARQ" }{}}{\fldrslt {\cs37\ul\cf2 75}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKI" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOZ" }{}}{\fldrslt {\cs37\ul\cf2 update()}}}
.}\par
}
{\xe \v Udp\:CoolTime}
{\xe \v CoolTime\:Udp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
WiFiUDP CoolTime::Udp{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAFN}
{\bkmkend AAAAAAAAFN}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARF" }{}}{\fldrslt {\cs37\ul\cf2 69}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKI" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMO" }{}}{\fldrslt {\cs37\ul\cf2 begin()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKK" }{}}{\fldrslt {\cs37\ul\cf2 getNtpTime()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKL" }{}}{\fldrslt {\cs37\ul\cf2 sendNTPpacket()}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADF" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime.h}}}
\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKE" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime.cpp}}}
\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
CoolWifi Class Reference\par \pard\plain 
{\tc\tcl2 \v CoolWifi}
{\xe \v CoolWifi}
{\bkmkstart AAAAAAAADQ}
{\bkmkend AAAAAAAADQ}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class manages the WiFi connection . }}\par
{
{\f2 #include <CoolWifi.h>}}\par
Collaboration diagram for CoolWifi:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolWifi__coll__graph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAL" }{}}{\fldrslt {\cs37\ul\cf2 begin}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAK" }{}}{\fldrslt {\cs37\ul\cf2 config}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARR" }{}}{\fldrslt {\cs37\ul\cf2 config}}}
 (String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGE" }{}}{\fldrslt {\cs37\ul\cf2 ssid}}}
[], String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGF" }{}}{\fldrslt {\cs37\ul\cf2 pass}}}
[], int wifiNumber, int APTimeOut)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
wl_status_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABO" }{}}{\fldrslt {\cs37\ul\cf2 connect}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
wl_status_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABN" }{}}{\fldrslt {\cs37\ul\cf2 state}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAM" }{}}{\fldrslt {\cs37\ul\cf2 printConf}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGI" }{}}{\fldrslt {\cs37\ul\cf2 addWifi}}}
 (String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGE" }{}}{\fldrslt {\cs37\ul\cf2 ssid}}}
, String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGF" }{}}{\fldrslt {\cs37\ul\cf2 pass}}}
="")\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
WiFiManager {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGG" }{}}{\fldrslt {\cs37\ul\cf2 wifiManager}}}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
ESP8266WiFiMulti {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGD" }{}}{\fldrslt {\cs37\ul\cf2 wifiMulti}}}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGC" }{}}{\fldrslt {\cs37\ul\cf2 wifiCount}}}
 =0\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGE" }{}}{\fldrslt {\cs37\ul\cf2 ssid}}}
 [50] =\{"0"\}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGF" }{}}{\fldrslt {\cs37\ul\cf2 pass}}}
 [50] =\{"0"\}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGH" }{}}{\fldrslt {\cs37\ul\cf2 timeOut}}}
 =0\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class manages the WiFi connection . \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARS" }{}}{\fldrslt {\cs37\ul\cf2 29}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKQ" }{}}{\fldrslt {\cs37\ul\cf2 CoolWifi.h}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v addWifi\:CoolWifi}
{\xe \v CoolWifi\:addWifi}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool CoolWifi::addWifi (String  {\i ssid}, String  {\i pass} = {\f2 ""})}}
\par
{\bkmkstart AAAAAAAAGI}
{\bkmkend AAAAAAAAGI}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
CoolWifi::addWifi(ssid,pass) This method is provided to add new WiFi detected by the WiFiManager to the jsonConfig(if used )\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid true if successfull , false otherwise \par
}}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAART" }{}}{\fldrslt {\cs37\ul\cf2 447}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKO" }{}}{\fldrslt {\cs37\ul\cf2 CoolWifi.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARU" }{}}{\fldrslt {\cs37\ul\cf2 pass}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARV" }{}}{\fldrslt {\cs37\ul\cf2 ssid}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARW" }{}}{\fldrslt {\cs37\ul\cf2 timeOut}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARX" }{}}{\fldrslt {\cs37\ul\cf2 wifiCount}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOG" }{}}{\fldrslt {\cs37\ul\cf2 connect()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   448 \{\par
  449 \par
  450 #if DEBUG == 1\par
  451     \par
  452     Serial.println("Entering CoolWifi.addWifi() ") ;\par
  453 \par
  454 #endif  \par
  455     \par
  456     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGC" }{}}{\fldrslt {\cs37\ul\cf2 wifiCount}}}
++;\par
  457     if( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGC" }{}}{\fldrslt {\cs37\ul\cf2 wifiCount}}}
 >=50)\par
  458     \{\par
  459     \par
  460     #if DEBUG == 1\par
  461 \par
  462         Serial.println("You have reached the limit of 50");\par
  463         return(false);  \par
  464     \par
  465     #endif\par
  466 \par
  467     \}\par
  468 \par
  469     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGE" }{}}{\fldrslt {\cs37\ul\cf2 ssid}}}
[this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGC" }{}}{\fldrslt {\cs37\ul\cf2 wifiCount}}}
-1]={\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGE" }{}}{\fldrslt {\cs37\ul\cf2 ssid}}}
;\par
  470     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGF" }{}}{\fldrslt {\cs37\ul\cf2 pass}}}
[this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGC" }{}}{\fldrslt {\cs37\ul\cf2 wifiCount}}}
-1]={\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGF" }{}}{\fldrslt {\cs37\ul\cf2 pass}}}
;\par
  471     \par
  472     //read config file\par
  473     //update data\par
  474     File configFile = SPIFFS.open("/wifiConfig.json", "r");\par
  475 \par
  476     if (!configFile) \par
  477     \{\par
  478     \par
  479     #if DEBUG == 1 \par
  480 \par
  481         Serial.println( F("failed to read /wifiConfig.json") );\par
  482         Serial.println();\par
  483 \par
  484     #endif\par
  485     \}\par
  486     else\par
  487     \{\par
  488         size_t size = configFile.size();\par
  489         // Allocate a buffer to store contents of the file.\par
  490         std::unique_ptr<char[]> buf(new char[size]);\par
  491 \par
  492         configFile.readBytes(buf.get(), size);\par
  493         DynamicJsonBuffer jsonBuffer;\par
  494         JsonObject& json = jsonBuffer.parseObject(buf.get());\par
  495         if (!json.success()) \par
  496         \{\par
  497         \par
  498         #if DEBUG == 1 \par
  499 \par
  500             Serial.println( F("failed to parse json ") );\par
  501             Serial.println();\par
  502         \par
  503         #endif\par
  504         \} \par
  505         else\par
  506         \{\par
  507         \par
  508         #if DEBUG == 1 \par
  509         \par
  510             Serial.println( F("configuration json is ") );\par
  511             json.printTo(Serial);\par
  512             Serial.println();\par
  513 \par
  514             Serial.print(F("jsonBuffer size: "));\par
  515             Serial.println(jsonBuffer.size());\par
  516             Serial.println();\par
  517 \par
  518 \par
  519         #endif\par
  520             //wifiCount\par
  521             if(json["wifiCount"].success() )\par
  522             \{           \par
  523                 json["wifiCount"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGC" }{}}{\fldrslt {\cs37\ul\cf2 wifiCount}}}
;\par
  524             \}\par
  525             else\par
  526             \{\par
  527                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGC" }{}}{\fldrslt {\cs37\ul\cf2 wifiCount}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGC" }{}}{\fldrslt {\cs37\ul\cf2 wifiCount}}}
;\par
  528             \}\par
  529             json["wifiCount"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGC" }{}}{\fldrslt {\cs37\ul\cf2 wifiCount}}}
;\par
  530 \par
  531             \par
  532             //AP timeOut\par
  533             if(json["timeOut"].success() )\par
  534             \{\par
  535                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGH" }{}}{\fldrslt {\cs37\ul\cf2 timeOut}}}
=json["timeOut"];\par
  536             \}\par
  537             else\par
  538             \{\par
  539                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGH" }{}}{\fldrslt {\cs37\ul\cf2 timeOut}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGH" }{}}{\fldrslt {\cs37\ul\cf2 timeOut}}}
;\par
  540 \par
  541             \}\par
  542             json["timeOut"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGH" }{}}{\fldrslt {\cs37\ul\cf2 timeOut}}}
;\par
  543             \par
  544             \par
  545             //new Wifi SSID and PASS\par
  546             JsonObject& newWifi = json.createNestedObject( "Wifi"+String( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGC" }{}}{\fldrslt {\cs37\ul\cf2 wifiCount}}}
-1 ) );\par
  547             \par
  548             newWifi["ssid"] =this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGE" }{}}{\fldrslt {\cs37\ul\cf2 ssid}}}
[this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGC" }{}}{\fldrslt {\cs37\ul\cf2 wifiCount}}}
-1];\par
  549             newWifi["pass"] = this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGF" }{}}{\fldrslt {\cs37\ul\cf2 pass}}}
[this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGC" }{}}{\fldrslt {\cs37\ul\cf2 wifiCount}}}
-1];\par
  550             \par
  551 \par
  552             configFile.close();\par
  553             configFile = SPIFFS.open("/wifiConfig.json", "w");\par
  554             if(!configFile)\par
  555             \{\par
  556             \par
  557             #if DEBUG == 1 \par
  558 \par
  559                 Serial.println( F("failed to write to /wifiConfig.json") );\par
  560             \par
  561             #endif\par
  562 \par
  563             \}\par
  564             \par
  565             json.printTo(configFile);\par
  566             configFile.close();\par
  567 \par
  568         #if DEBUG == 1 \par
  569 \par
  570             Serial.println( F("saved configuration is :") );\par
  571             json.printTo(Serial);\par
  572             Serial.println();\par
  573         \par
  574         #endif\par
  575 \par
  576             return(true); \par
  577         \}\par
  578     \}   \par
  579 \par
  580     \par
  581     return(true);\par
  582     \par
  583 \}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolWifi_a914d7a1df14dd6b75345fb614c34e9d6_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v begin\:CoolWifi}
{\xe \v CoolWifi\:begin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CoolWifi::begin ()}}
\par
{\bkmkstart AAAAAAAAAL}
{\bkmkend AAAAAAAAAL}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAL" }{}}{\fldrslt {\cs37\ul\cf2 CoolWifi::begin()}}}: This method is provided to set the wifiMulti Access points and the wifiManager time out \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMM" }{}}{\fldrslt {\cs37\ul\cf2 37}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKO" }{}}{\fldrslt {\cs37\ul\cf2 CoolWifi.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARU" }{}}{\fldrslt {\cs37\ul\cf2 pass}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARV" }{}}{\fldrslt {\cs37\ul\cf2 ssid}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARW" }{}}{\fldrslt {\cs37\ul\cf2 timeOut}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARX" }{}}{\fldrslt {\cs37\ul\cf2 wifiCount}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARY" }{}}{\fldrslt {\cs37\ul\cf2 wifiManager}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARZ" }{}}{\fldrslt {\cs37\ul\cf2 wifiMulti}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMJ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::begin()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    38 \{ \par
   39 \par
   40 #if DEBUG == 1 \par
   41 \par
   42     Serial.println( F("Entering CoolWifi.begin()") );\par
   43     Serial.println();\par
   44 \par
   45 #endif\par
   46     for(int i =0;i<this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGC" }{}}{\fldrslt {\cs37\ul\cf2 wifiCount}}}
;i++)\par
   47     \{\par
   48          this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGD" }{}}{\fldrslt {\cs37\ul\cf2 wifiMulti}}}
.addAP(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGE" }{}}{\fldrslt {\cs37\ul\cf2 ssid}}}
[i].c_str() , this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGF" }{}}{\fldrslt {\cs37\ul\cf2 pass}}}
[i].c_str() ); \par
   49     \}\par
   50 \par
   51     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGG" }{}}{\fldrslt {\cs37\ul\cf2 wifiManager}}}
.setRemoveDuplicateAPs(true);\par
   52     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGG" }{}}{\fldrslt {\cs37\ul\cf2 wifiManager}}}
.setTimeout(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGH" }{}}{\fldrslt {\cs37\ul\cf2 timeOut}}}
);    \par
   53     \par
   54 \}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolWifi_a46942fed90e475112cc10b78a32e7aaa_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v config\:CoolWifi}
{\xe \v CoolWifi\:config}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool CoolWifi::config ()}}
\par
{\bkmkstart AAAAAAAAAK}
{\bkmkend AAAAAAAAAK}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAK" }{}}{\fldrslt {\cs37\ul\cf2 CoolWifi::config()}}}: This method is provided to set the wifi parameters : -ssid -pass -AP timeOut -wifiCount\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid true if successful,false otherwise \par
}}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMT" }{}}{\fldrslt {\cs37\ul\cf2 193}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKO" }{}}{\fldrslt {\cs37\ul\cf2 CoolWifi.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARU" }{}}{\fldrslt {\cs37\ul\cf2 pass}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARV" }{}}{\fldrslt {\cs37\ul\cf2 ssid}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARW" }{}}{\fldrslt {\cs37\ul\cf2 timeOut}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARX" }{}}{\fldrslt {\cs37\ul\cf2 wifiCount}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMJ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::begin()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   194 \{\par
  195 \par
  196 #if DEBUG == 1 \par
  197 \par
  198     Serial.println( F("Entering CoolWifi.config()") );\par
  199     Serial.println();\par
  200 \par
  201 #endif\par
  202 \par
  203     //read config file\par
  204     //update data\par
  205     File configFile = SPIFFS.open("/wifiConfig.json", "r");\par
  206 \par
  207     if (!configFile) \par
  208     \{\par
  209     \par
  210     #if DEBUG == 1 \par
  211 \par
  212         Serial.println( F("failed to read /wifiConfig.json") );\par
  213         Serial.println();\par
  214 \par
  215     #endif\par
  216 \par
  217         return(false);\par
  218     \}\par
  219     else\par
  220     \{\par
  221         size_t size = configFile.size();\par
  222         // Allocate a buffer to store contents of the file.\par
  223         std::unique_ptr<char[]> buf(new char[size]);\par
  224 \par
  225         configFile.readBytes(buf.get(), size);\par
  226         DynamicJsonBuffer jsonBuffer;\par
  227         JsonObject& json = jsonBuffer.parseObject(buf.get());\par
  228         if (!json.success()) \par
  229         \{\par
  230         \par
  231         #if DEBUG == 1 \par
  232 \par
  233             Serial.println( F("failed to parse json ") );\par
  234             Serial.println();\par
  235         \par
  236         #endif\par
  237             \par
  238             return(false);\par
  239         \} \par
  240         else\par
  241         \{\par
  242         \par
  243         #if DEBUG == 1 \par
  244         \par
  245             Serial.println( F("configuration json is ") );\par
  246             json.printTo(Serial);\par
  247             Serial.println();\par
  248 \par
  249             Serial.print(F("jsonBuffer size: "));\par
  250             Serial.println(jsonBuffer.size());\par
  251             Serial.println();\par
  252 \par
  253 \par
  254         #endif\par
  255             //wifiCount\par
  256             if(json["wifiCount"].success() )\par
  257             \{           \par
  258                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGC" }{}}{\fldrslt {\cs37\ul\cf2 wifiCount}}}
=json["wifiCount"];\par
  259             \}\par
  260             else\par
  261             \{\par
  262                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGC" }{}}{\fldrslt {\cs37\ul\cf2 wifiCount}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGC" }{}}{\fldrslt {\cs37\ul\cf2 wifiCount}}}
;\par
  263             \}\par
  264             json["wifiCount"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGC" }{}}{\fldrslt {\cs37\ul\cf2 wifiCount}}}
;\par
  265 \par
  266             \par
  267             //AP timeOut\par
  268             if(json["timeOut"].success() )\par
  269             \{\par
  270                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGH" }{}}{\fldrslt {\cs37\ul\cf2 timeOut}}}
=json["timeOut"];\par
  271             \}\par
  272             else\par
  273             \{\par
  274                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGH" }{}}{\fldrslt {\cs37\ul\cf2 timeOut}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGH" }{}}{\fldrslt {\cs37\ul\cf2 timeOut}}}
;\par
  275 \par
  276             \}\par
  277             json["timeOut"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGH" }{}}{\fldrslt {\cs37\ul\cf2 timeOut}}}
;\par
  278             \par
  279             \par
  280             //Wifis SSID and PASS\par
  281             for(int i =0; i<this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGC" }{}}{\fldrslt {\cs37\ul\cf2 wifiCount}}}
 ;i++)\par
  282             \{\par
  283                 if ( json["Wifi"+String(i)].success() )\par
  284                 \{\par
  285                     \par
  286                     if( json["Wifi"+String(i)]["ssid"].success() )\par
  287                     \{\par
  288                         const char* tempSsid=json["Wifi"+String(i)]["ssid"]; \par
  289                         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGE" }{}}{\fldrslt {\cs37\ul\cf2 ssid}}}
[i]=tempSsid;                 \par
  290                     \}\par
  291                     else\par
  292                     \{\par
  293                         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGE" }{}}{\fldrslt {\cs37\ul\cf2 ssid}}}
[i]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGE" }{}}{\fldrslt {\cs37\ul\cf2 ssid}}}
[i];                    \par
  294                     \}\par
  295                     json["Wifi"+String(i)]["ssid"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGE" }{}}{\fldrslt {\cs37\ul\cf2 ssid}}}
[i].c_str();\par
  296                     \par
  297                     \par
  298                     if( json["Wifi"+String(i)]["pass"].success() )\par
  299                     \{\par
  300                         const char* tempPass =json["Wifi"+String(i)]["pass"];\par
  301                         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGF" }{}}{\fldrslt {\cs37\ul\cf2 pass}}}
[i]=tempPass ;                    \par
  302                     \}\par
  303                     else\par
  304                     \{\par
  305                         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGF" }{}}{\fldrslt {\cs37\ul\cf2 pass}}}
[i]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGF" }{}}{\fldrslt {\cs37\ul\cf2 pass}}}
[i];                    \par
  306                     \}\par
  307                     json["Wifi"+String(i)]["pass"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGF" }{}}{\fldrslt {\cs37\ul\cf2 pass}}}
[i].c_str();           \par
  308                 \par
  309                 \}\par
  310                 else\par
  311                 \{\par
  312                     \par
  313                     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGE" }{}}{\fldrslt {\cs37\ul\cf2 ssid}}}
[i]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGE" }{}}{\fldrslt {\cs37\ul\cf2 ssid}}}
[i];\par
  314                     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGF" }{}}{\fldrslt {\cs37\ul\cf2 pass}}}
[i]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGF" }{}}{\fldrslt {\cs37\ul\cf2 pass}}}
[i];                    \par
  315                     \par
  316                 \}\par
  317                 json["Wifi"+String(i)]["ssid"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGE" }{}}{\fldrslt {\cs37\ul\cf2 ssid}}}
[i].c_str();\par
  318                 json["Wifi"+String(i)]["pass"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGF" }{}}{\fldrslt {\cs37\ul\cf2 pass}}}
[i].c_str();           \par
  319                         \par
  320             \}\par
  321 \par
  322             configFile.close();\par
  323             configFile = SPIFFS.open("/wifiConfig.json", "w");\par
  324             if(!configFile)\par
  325             \{\par
  326             \par
  327             #if DEBUG == 1 \par
  328 \par
  329                 Serial.println( F("failed to write to /wifiConfig.json") );\par
  330             \par
  331             #endif\par
  332 \par
  333                 return(false);              \par
  334             \}\par
  335             \par
  336             json.printTo(configFile);\par
  337             configFile.close();\par
  338 \par
  339         #if DEBUG == 1 \par
  340 \par
  341             Serial.println( F("saved configuration is :") );\par
  342             json.printTo(Serial);\par
  343             Serial.println();\par
  344         \par
  345         #endif\par
  346 \par
  347             return(true); \par
  348         \}\par
  349     \}   \par
  350     \par
  351 \par
  352 \}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolWifi_a4eb2f6b9b09dd588964b88b6c70122c0_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v config\:CoolWifi}
{\xe \v CoolWifi\:config}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool CoolWifi::config (String  {\i ssid}[], String  {\i pass}[], int  {\i wifiNumber}, int  {\i APTimeOut})}}
\par
{\bkmkstart AAAAAAAARR}
{\bkmkend AAAAAAAARR}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
CoolWifi::config(ssid array, pass array, number of wifis, AP timeout ); This method is provided to configure the Wifi without SPIFFS\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid true if successfull, false otherwise \par
}}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASA" }{}}{\fldrslt {\cs37\ul\cf2 360}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKO" }{}}{\fldrslt {\cs37\ul\cf2 CoolWifi.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARW" }{}}{\fldrslt {\cs37\ul\cf2 timeOut}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARX" }{}}{\fldrslt {\cs37\ul\cf2 wifiCount}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   361 \{\par
  362 \par
  363 #if DEBUG == 1 \par
  364     \par
  365     Serial.println("Entering CoolWifi.config(), no SPIFFS variant ") ;\par
  366     \par
  367 #endif\par
  368     \par
  369     if(wifiNumber>50)\par
  370     \{\par
  371     \par
  372     #if DEBUG == 1 \par
  373         \par
  374         Serial.println("the limit of WiFis is 50 " );\par
  375         \par
  376     #endif\par
  377         return(false);  \par
  378     \}\par
  379 \par
  380     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGC" }{}}{\fldrslt {\cs37\ul\cf2 wifiCount}}}
=wifiNumber;\par
  381 \par
  382     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGH" }{}}{\fldrslt {\cs37\ul\cf2 timeOut}}}
=APTimeOut;\par
  383     \par
  384     for(int i=0;i<wifiNumber;i++)\par
  385     \{\par
  386         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGE" }{}}{\fldrslt {\cs37\ul\cf2 ssid}}}
[i]={\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGE" }{}}{\fldrslt {\cs37\ul\cf2 ssid}}}
[i];\par
  387         \par
  388         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGF" }{}}{\fldrslt {\cs37\ul\cf2 pass}}}
[i]={\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGF" }{}}{\fldrslt {\cs37\ul\cf2 pass}}}
[i];\par
  389     \}\par
  390         \par
  391     return(true);\par
  392 \par
  393 \}\par
}
}
{\xe \v connect\:CoolWifi}
{\xe \v CoolWifi\:connect}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
wl_status_t CoolWifi::connect ()}}
\par
{\bkmkstart AAAAAAAABO}
{\bkmkend AAAAAAAABO}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABO" }{}}{\fldrslt {\cs37\ul\cf2 CoolWifi::connect( )}}}: This method is provided to connect to the strongest WiFi in the provided list of wiFis. If none are found , it starts the AP mode.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid wifi state \par
}}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOG" }{}}{\fldrslt {\cs37\ul\cf2 93}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKO" }{}}{\fldrslt {\cs37\ul\cf2 CoolWifi.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAART" }{}}{\fldrslt {\cs37\ul\cf2 addWifi()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARY" }{}}{\fldrslt {\cs37\ul\cf2 wifiManager}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARZ" }{}}{\fldrslt {\cs37\ul\cf2 wifiMulti}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMY" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::connect()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    94 \{       \par
   95 \par
   96     int i=0;\par
   97 \par
   98 #if DEBUG == 1 \par
   99 \par
  100     Serial.println( F("Entering CoolWifi.connect()") );\par
  101     Serial.println( F("Wifi connecting...") );\par
  102     \par
  103     Serial.println("entry time to multi : ");\par
  104     Serial.println(millis() ) ;\par
  105 \par
  106 #endif\par
  107     //Wifi MULTI\par
  108 \par
  109     while( ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGD" }{}}{\fldrslt {\cs37\ul\cf2 wifiMulti}}}
.run() != WL_CONNECTED) && (i<1000)  ) \par
  110     \{\par
  111 \par
  112     #if DEBUG == 1\par
  113 \par
  114             Serial.print(".");\par
  115         i++;\par
  116         delay(10);\par
  117     \par
  118     #endif\par
  119 \par
  120         \}   \par
  121 \par
  122 #if DEBUG == 1 \par
  123 \par
  124     Serial.println();   \par
  125     Serial.println("exit point from multi : ");\par
  126     Serial.println(millis() );\par
  127 \par
  128 \par
  129 #endif\par
  130 \par
  131     //Wifi Manager\par
  132     if( (i>=1000) ||  (WiFi.status() != WL_CONNECTED) ) \par
  133     \{\par
  134     \par
  135     #if DEBUG == 1 \par
  136         \par
  137         Serial.println(F("No matching wifi Found ") );\par
  138         Serial.println( F("Starting Access Point ") );  \par
  139         Serial.println();\par
  140     \par
  141     #endif\par
  142         if(!{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGG" }{}}{\fldrslt {\cs37\ul\cf2 wifiManager}}}
.autoConnect("CoolBoardAP")) \par
  143         \{\par
  144         \par
  145         #if DEBUG == 1\par
  146 \par
  147             Serial.println( F("failed to connect and hit timeout") );\par
  148         \par
  149         #endif\par
  150             delay(300);\par
  151 \par
  152         \} \par
  153 \par
  154           //if you get here you have connected to the WiFi\par
  155         #if DEBUG == 1\par
  156 \par
  157             Serial.println( F("connected...yeey :)" ));\par
  158             Serial.println("connected to ");\par
  159             Serial.println( WiFi.SSID() );\par
  160             Serial.println( WiFi.psk() ) ;\par
  161             \par
  162         #endif\par
  163             this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGI" }{}}{\fldrslt {\cs37\ul\cf2 addWifi}}}
( WiFi.SSID() , WiFi.psk() );\par
  164         \par
  165     \}\par
  166     else\par
  167     \{\par
  168 \par
  169     #if DEBUG == 1\par
  170 \par
  171         Serial.println("connected to ");\par
  172         Serial.println( WiFi.SSID() );\par
  173         Serial.println( WiFi.psk() ) ;\par
  174                 \par
  175     #endif\par
  176     \par
  177     \}\par
  178     \par
  179     return( WiFi.status() ) ;\par
  180 \par
  181 \}\par
}
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolWifi_ad060353050f40d032a2dbf9e54a768bf_cgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolWifi_ad060353050f40d032a2dbf9e54a768bf_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v printConf\:CoolWifi}
{\xe \v CoolWifi\:printConf}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CoolWifi::printConf ()}}
\par
{\bkmkstart AAAAAAAAAM}
{\bkmkend AAAAAAAAAM}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAM" }{}}{\fldrslt {\cs37\ul\cf2 CoolWifi::printConf()}}}: This method is provided to print the configuration to the Serial Monitor \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANN" }{}}{\fldrslt {\cs37\ul\cf2 401}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKO" }{}}{\fldrslt {\cs37\ul\cf2 CoolWifi.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARU" }{}}{\fldrslt {\cs37\ul\cf2 pass}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARV" }{}}{\fldrslt {\cs37\ul\cf2 ssid}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARW" }{}}{\fldrslt {\cs37\ul\cf2 timeOut}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARX" }{}}{\fldrslt {\cs37\ul\cf2 wifiCount}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMJ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::begin()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   402 \{\par
  403 \par
  404 #if DEBUG == 1 \par
  405 \par
  406     Serial.println( F("Entering CoolWifi.printConf()") );\par
  407     Serial.println();   \par
  408 \par
  409 #endif\par
  410     \par
  411     Serial.println("Wifi configuration ");\par
  412 \par
  413     \par
  414     Serial.println("wifiCount : ");\par
  415     Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGC" }{}}{\fldrslt {\cs37\ul\cf2 wifiCount}}}
);\par
  416     \par
  417     for(int i=0;i<this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGC" }{}}{\fldrslt {\cs37\ul\cf2 wifiCount}}}
;i++)\par
  418     \{   \par
  419         Serial.print("SSID");\par
  420         Serial.print(i);\par
  421         Serial.println(" : ");\par
  422         Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGE" }{}}{\fldrslt {\cs37\ul\cf2 ssid}}}
[i]);\par
  423                 \par
  424         Serial.print("PASS");\par
  425         Serial.print(i);\par
  426         Serial.println(" : ");\par
  427         Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGF" }{}}{\fldrslt {\cs37\ul\cf2 pass}}}
[i]);\par
  428         \par
  429     \}\par
  430     \par
  431     Serial.println("timeOut : ");\par
  432     Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGH" }{}}{\fldrslt {\cs37\ul\cf2 timeOut}}}
);\par
  433 \par
  434     Serial.println();\par
  435 \par
  436 \par
  437 \}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolWifi_a9e6105c6d13d35ec510f6633da9e0223_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v state\:CoolWifi}
{\xe \v CoolWifi\:state}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
wl_status_t CoolWifi::state ()}}
\par
{\bkmkstart AAAAAAAABN}
{\bkmkend AAAAAAAABN}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABN" }{}}{\fldrslt {\cs37\ul\cf2 CoolWifi::state()}}}: This method is provided to return the Wifi client's state. \par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid wifi client state: WL_NO_SHIELD = 255, WL_IDLE_STATUS = 0, WL_NO_SSID_AVAIL = 1, WL_SCAN_COMPLETED = 2, WL_CONNECTED = 3, WL_CONNECT_FAILED = 4, WL_CONNECTION_LOST = 5, WL_DISCONNECTED = 6 \par
}}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOI" }{}}{\fldrslt {\cs37\ul\cf2 70}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKO" }{}}{\fldrslt {\cs37\ul\cf2 CoolWifi.cpp}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMY" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::connect()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    71 \{\par
   72 \par
   73 #if DEBUG == 1 \par
   74 \par
   75     Serial.println( F("Entering CoolWifi.state()") );\par
   76     Serial.println();   \par
   77     Serial.print( F("state : ") );\par
   78     Serial.println( WiFi.status() );\par
   79 \par
   80 #endif\par
   81     \par
   82     return( WiFi.status() ) ;\par
   83 \}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCoolWifi_a1c7b4d82a4098d346e7593dce92039fa_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v pass\:CoolWifi}
{\xe \v CoolWifi\:pass}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String CoolWifi::pass[50] =\{"0"\}{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAGF}
{\bkmkend AAAAAAAAGF}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARU" }{}}{\fldrslt {\cs37\ul\cf2 57}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKQ" }{}}{\fldrslt {\cs37\ul\cf2 CoolWifi.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAART" }{}}{\fldrslt {\cs37\ul\cf2 addWifi()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMM" }{}}{\fldrslt {\cs37\ul\cf2 begin()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMT" }{}}{\fldrslt {\cs37\ul\cf2 config()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANN" }{}}{\fldrslt {\cs37\ul\cf2 printConf()}}}
.}\par
}
{\xe \v ssid\:CoolWifi}
{\xe \v CoolWifi\:ssid}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String CoolWifi::ssid[50] =\{"0"\}{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAGE}
{\bkmkend AAAAAAAAGE}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARV" }{}}{\fldrslt {\cs37\ul\cf2 55}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKQ" }{}}{\fldrslt {\cs37\ul\cf2 CoolWifi.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAART" }{}}{\fldrslt {\cs37\ul\cf2 addWifi()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMM" }{}}{\fldrslt {\cs37\ul\cf2 begin()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMT" }{}}{\fldrslt {\cs37\ul\cf2 config()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANN" }{}}{\fldrslt {\cs37\ul\cf2 printConf()}}}
.}\par
}
{\xe \v timeOut\:CoolWifi}
{\xe \v CoolWifi\:timeOut}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int CoolWifi::timeOut =0{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAGH}
{\bkmkend AAAAAAAAGH}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARW" }{}}{\fldrslt {\cs37\ul\cf2 59}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKQ" }{}}{\fldrslt {\cs37\ul\cf2 CoolWifi.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAART" }{}}{\fldrslt {\cs37\ul\cf2 addWifi()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMM" }{}}{\fldrslt {\cs37\ul\cf2 begin()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMT" }{}}{\fldrslt {\cs37\ul\cf2 config()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANN" }{}}{\fldrslt {\cs37\ul\cf2 printConf()}}}
.}\par
}
{\xe \v wifiCount\:CoolWifi}
{\xe \v CoolWifi\:wifiCount}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int CoolWifi::wifiCount =0{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAGC}
{\bkmkend AAAAAAAAGC}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARX" }{}}{\fldrslt {\cs37\ul\cf2 53}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKQ" }{}}{\fldrslt {\cs37\ul\cf2 CoolWifi.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAART" }{}}{\fldrslt {\cs37\ul\cf2 addWifi()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMM" }{}}{\fldrslt {\cs37\ul\cf2 begin()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMT" }{}}{\fldrslt {\cs37\ul\cf2 config()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANN" }{}}{\fldrslt {\cs37\ul\cf2 printConf()}}}
.}\par
}
{\xe \v wifiManager\:CoolWifi}
{\xe \v CoolWifi\:wifiManager}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
WiFiManager CoolWifi::wifiManager{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAGG}
{\bkmkend AAAAAAAAGG}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARY" }{}}{\fldrslt {\cs37\ul\cf2 49}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKQ" }{}}{\fldrslt {\cs37\ul\cf2 CoolWifi.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMM" }{}}{\fldrslt {\cs37\ul\cf2 begin()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOG" }{}}{\fldrslt {\cs37\ul\cf2 connect()}}}
.}\par
}
{\xe \v wifiMulti\:CoolWifi}
{\xe \v CoolWifi\:wifiMulti}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
ESP8266WiFiMulti CoolWifi::wifiMulti{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAGD}
{\bkmkend AAAAAAAAGD}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARZ" }{}}{\fldrslt {\cs37\ul\cf2 51}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKQ" }{}}{\fldrslt {\cs37\ul\cf2 CoolWifi.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMM" }{}}{\fldrslt {\cs37\ul\cf2 begin()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOG" }{}}{\fldrslt {\cs37\ul\cf2 connect()}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADK" }{}}{\fldrslt {\cs37\ul\cf2 CoolWifi.h}}}
\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKM" }{}}{\fldrslt {\cs37\ul\cf2 CoolWifi.cpp}}}
\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ExternalSensor< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v ExternalSensor< T >}
{\xe \v ExternalSensor< T >}
{\bkmkstart AAAAAAAAGN}
{\bkmkend AAAAAAAAGN}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
template<class SensorClass> class External Sensor: Derived class from {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGJ" }{}}{\fldrslt {\cs37\ul\cf2 BaseExternalSensor}}}. }}\par
{
{\f2 #include <ExternalSensor.h>}}\par
Inheritance diagram for ExternalSensor< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classExternalSensor__inherit__graph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for ExternalSensor< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classExternalSensor__coll__graph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGO" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual uint8_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGQ" }{}}{\fldrslt {\cs37\ul\cf2 begin}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGR" }{}}{\fldrslt {\cs37\ul\cf2 read}}}
 ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
T {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGP" }{}}{\fldrslt {\cs37\ul\cf2 sensor}}}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
template<class T>\par
class ExternalSensor< T >\par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
template<class SensorClass> class External Sensor: Derived class from {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGJ" }{}}{\fldrslt {\cs37\ul\cf2 BaseExternalSensor}}}. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This is the generic Template for an external sensor This class works automatically with sensors that provide the following methods :{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
constructor(void);\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t/bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGQ" }{}}{\fldrslt {\cs37\ul\cf2 begin(void)}}};\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGR" }{}}{\fldrslt {\cs37\ul\cf2 read(void)}}};\par}
If your sensor doesn't provide these methods or is not present in the specialized templates feel free to implement your own specializiation, following the provided generic template , or contact us and we will be glad to expand our list of supported external sensors \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASB" }{}}{\fldrslt {\cs37\ul\cf2 122}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKS" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor.h}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v ExternalSensor\:ExternalSensor}
{\xe \v ExternalSensor\:ExternalSensor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGN" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor}}}
< T >::{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGN" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor}}}
 (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAGO}
{\bkmkend AAAAAAAAGO}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Generic Constructor \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASC" }{}}{\fldrslt {\cs37\ul\cf2 128}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKS" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor.h}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASD" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor< T >::sensor}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   129     \{\par
  130     \par
  131     #if DEBUG == 1 \par
  132 \par
  133         Serial.println( "ExternalSensor <Generic> Constructor" );\par
  134         Serial.println();\par
  135     \par
  136     #endif\par
  137 \par
  138         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGP" }{}}{\fldrslt {\cs37\ul\cf2 sensor}}}
();\par
  139     \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v begin\:ExternalSensor}
{\xe \v ExternalSensor\:begin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > virtual uint8_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGN" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor}}}
< T >::begin (void ){\f2 [inline]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAGQ}
{\bkmkend AAAAAAAAGQ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Generic begin method \par
}{
Reimplemented from {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGL" }{}}{\fldrslt {\cs37\ul\cf2 BaseExternalSensor}}}
.}\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASE" }{}}{\fldrslt {\cs37\ul\cf2 146}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKS" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor.h}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASD" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor< T >::sensor}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   147     \{\par
  148     \par
  149     #if DEBUG == 1 \par
  150 \par
  151         Serial.println( "ExternalSensor <Generic> begin()" );\par
  152         Serial.println();\par
  153     \par
  154     #endif\par
  155 \par
  156         return({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGP" }{}}{\fldrslt {\cs37\ul\cf2 sensor}}}
.begin() );    \par
  157     \}\par
}
}
{\xe \v read\:ExternalSensor}
{\xe \v ExternalSensor\:read}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > virtual float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGN" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor}}}
< T >::read (void ){\f2 [inline]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAGR}
{\bkmkend AAAAAAAAGR}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Generic read method \par
}{
Reimplemented from {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGM" }{}}{\fldrslt {\cs37\ul\cf2 BaseExternalSensor}}}
.}\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASF" }{}}{\fldrslt {\cs37\ul\cf2 162}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKS" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor.h}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASD" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor< T >::sensor}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   163     \{\par
  164     \par
  165     #if DEBUG == 1 \par
  166 \par
  167         Serial.println( "ExternalSensor <Generic> read() " );\par
  168         Serial.println();\par
  169         \par
  170     #endif\par
  171 \par
  172         return({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGP" }{}}{\fldrslt {\cs37\ul\cf2 sensor}}}
.read());\par
  173     \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v sensor\:ExternalSensor}
{\xe \v ExternalSensor\:sensor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > T {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGN" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor}}}
< T >::sensor{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAGP}
{\bkmkend AAAAAAAAGP}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASD" }{}}{\fldrslt {\cs37\ul\cf2 179}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKS" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASE" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor< T >::begin()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASG" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor< NDIR_I2C >::begin()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASH" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor< DallasTemperature >::begin()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASC" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor< T >::ExternalSensor()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASI" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor< NDIR_I2C >::ExternalSensor()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASJ" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor< DallasTemperature >::ExternalSensor()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASF" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor< T >::read()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASK" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor< NDIR_I2C >::read()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASL" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor< DallasTemperature >::read()}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGZ" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor.h}}}
\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ExternalSensor< DallasTemperature > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v ExternalSensor< DallasTemperature >}
{\xe \v ExternalSensor< DallasTemperature >}
{\bkmkstart AAAAAAAAHE}
{\bkmkend AAAAAAAAHE}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
DallasTemperature Specialization Class This is the template specialization for the Dallas Temperature sensor. }}\par
{
{\f2 #include <ExternalSensor.h>}}\par
Inheritance diagram for ExternalSensor< DallasTemperature >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classExternalSensor_3_01DallasTemperature_01_4__inherit__graph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for ExternalSensor< DallasTemperature >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classExternalSensor_3_01DallasTemperature_01_4__coll__graph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGV" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual uint8_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGW" }{}}{\fldrslt {\cs37\ul\cf2 begin}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGX" }{}}{\fldrslt {\cs37\ul\cf2 read}}}
 ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
DallasTemperature {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASM" }{}}{\fldrslt {\cs37\ul\cf2 sensor}}}
 =NULL\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
DeviceAddress {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGY" }{}}{\fldrslt {\cs37\ul\cf2 dallasAddress}}}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
template<>\par
class ExternalSensor< DallasTemperature >\par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
DallasTemperature Specialization Class This is the template specialization for the Dallas Temperature sensor. \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASN" }{}}{\fldrslt {\cs37\ul\cf2 315}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKS" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor.h}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v ExternalSensor\:ExternalSensor< DallasTemperature >}
{\xe \v ExternalSensor< DallasTemperature >\:ExternalSensor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGN" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor}}}
< DallasTemperature >::{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGN" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor}}}
 (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAGV}
{\bkmkend AAAAAAAAGV}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGV" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor()}}}: DallasTemperature specific constructor \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASJ" }{}}{\fldrslt {\cs37\ul\cf2 322}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKS" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor.h}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASD" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor< T >::sensor}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   323     \{\par
  324         \par
  325     #if DEBUG == 1 \par
  326 \par
  327         Serial.println( "ExternalSensor <DallasTemperature> constructor" );\par
  328         Serial.println();\par
  329     \par
  330     #endif\par
  331 \par
  332         OneWire oneWire(0);\par
  333         \par
  334         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASM" }{}}{\fldrslt {\cs37\ul\cf2 sensor}}}
=DallasTemperature(&oneWire);\par
  335     \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v begin\:ExternalSensor< DallasTemperature >}
{\xe \v ExternalSensor< DallasTemperature >\:begin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual uint8_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGN" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor}}}
< DallasTemperature >::begin (void ){\f2 [inline]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAGW}
{\bkmkend AAAAAAAAGW}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGW" }{}}{\fldrslt {\cs37\ul\cf2 begin()}}}: DallasTemperature specific begin method\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid true if successful \par
}}{
Reimplemented from {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGL" }{}}{\fldrslt {\cs37\ul\cf2 BaseExternalSensor}}}
.}\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASH" }{}}{\fldrslt {\cs37\ul\cf2 343}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKS" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor.h}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASD" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor< T >::sensor}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   344     \{\par
  345     \par
  346     #if DEBUG == 1 \par
  347 \par
  348         Serial.println( "ExternalSensor <DallasTemperature> begin()" );\par
  349         Serial.println();\par
  350     \par
  351     #endif\par
  352     \par
  353         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASM" }{}}{\fldrslt {\cs37\ul\cf2 sensor}}}
.begin(); \par
  354         delay(5);\par
  355         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASM" }{}}{\fldrslt {\cs37\ul\cf2 sensor}}}
.getAddress(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGY" }{}}{\fldrslt {\cs37\ul\cf2 dallasAddress}}}
, 1);  \par
  356         return(true);\par
  357     \}\par
}
}
{\xe \v read\:ExternalSensor< DallasTemperature >}
{\xe \v ExternalSensor< DallasTemperature >\:read}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGN" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor}}}
< DallasTemperature >::read (void ){\f2 [inline]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAGX}
{\bkmkend AAAAAAAAGX}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGX" }{}}{\fldrslt {\cs37\ul\cf2 read()}}}: DallasTemperature specific read method\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid the temperature in \'B0C \par
}}{
Reimplemented from {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGM" }{}}{\fldrslt {\cs37\ul\cf2 BaseExternalSensor}}}
.}\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASL" }{}}{\fldrslt {\cs37\ul\cf2 364}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKS" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor.h}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASD" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor< T >::sensor}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   365     \{\par
  366     \par
  367     #if DEBUG == 1 \par
  368 \par
  369         Serial.println( "ExternalSensor <DallasTemperature> read()" );\par
  370         Serial.println();\par
  371 \par
  372         Serial.print( "temperature : ");\par
  373         Serial.print( (float) {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASM" }{}}{\fldrslt {\cs37\ul\cf2 sensor}}}
.getTempC(this->dallasAddress) );\par
  374         Serial.print( "\'B0C" );\par
  375         Serial.println();\par
  376     \par
  377     #endif\par
  378         \par
  379         return( (float) {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASM" }{}}{\fldrslt {\cs37\ul\cf2 sensor}}}
.getTempC(this->dallasAddress) );\par
  380     \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v dallasAddress\:ExternalSensor< DallasTemperature >}
{\xe \v ExternalSensor< DallasTemperature >\:dallasAddress}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
DeviceAddress {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGN" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor}}}
< DallasTemperature >::dallasAddress{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAGY}
{\bkmkend AAAAAAAAGY}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASO" }{}}{\fldrslt {\cs37\ul\cf2 385}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKS" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor.h}}}
.}\par
}
{\xe \v sensor\:ExternalSensor< DallasTemperature >}
{\xe \v ExternalSensor< DallasTemperature >\:sensor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
DallasTemperature {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGN" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor}}}
< DallasTemperature >::sensor =NULL{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAASM}
{\bkmkend AAAAAAAASM}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASP" }{}}{\fldrslt {\cs37\ul\cf2 384}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKS" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor.h}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGZ" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor.h}}}
\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ExternalSensor< NDIR_I2C > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v ExternalSensor< NDIR_I2C >}
{\xe \v ExternalSensor< NDIR_I2C >}
{\bkmkstart AAAAAAAAHC}
{\bkmkend AAAAAAAAHC}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
NDIR_I2C Specialization Class This is the template specialization for the NDIR_I2C CO2 sensor. }}\par
{
{\f2 #include <ExternalSensor.h>}}\par
Inheritance diagram for ExternalSensor< NDIR_I2C >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classExternalSensor_3_01NDIR__I2C_01_4__inherit__graph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for ExternalSensor< NDIR_I2C >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classExternalSensor_3_01NDIR__I2C_01_4__coll__graph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGS" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor}}}
 (uint8_t i2c_addr)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual uint8_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGT" }{}}{\fldrslt {\cs37\ul\cf2 begin}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGU" }{}}{\fldrslt {\cs37\ul\cf2 read}}}
 ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
NDIR_I2C {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASQ" }{}}{\fldrslt {\cs37\ul\cf2 sensor}}}
 =NULL\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
template<>\par
class ExternalSensor< NDIR_I2C >\par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
NDIR_I2C Specialization Class This is the template specialization for the NDIR_I2C CO2 sensor. \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASR" }{}}{\fldrslt {\cs37\ul\cf2 190}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKS" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor.h}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v ExternalSensor\:ExternalSensor< NDIR_I2C >}
{\xe \v ExternalSensor< NDIR_I2C >\:ExternalSensor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGN" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor}}}
< NDIR_I2C >::{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGN" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor}}}
 (uint8_t  {\i i2c_addr}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAGS}
{\bkmkend AAAAAAAAGS}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGN" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor(I2C address)}}}: NDIR_I2C specific constructor \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASI" }{}}{\fldrslt {\cs37\ul\cf2 198}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKS" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor.h}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASD" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor< T >::sensor}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   199     \{\par
  200     \par
  201     #if DEBUG == 1 \par
  202 \par
  203         Serial.println( "ExternalSensor <NDIR_I2C> constructor");\par
  204         Serial.println();\par
  205     \par
  206     #endif\par
  207 \par
  208         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASQ" }{}}{\fldrslt {\cs37\ul\cf2 sensor}}}
=NDIR_I2C(i2c_addr);\par
  209     \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v begin\:ExternalSensor< NDIR_I2C >}
{\xe \v ExternalSensor< NDIR_I2C >\:begin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual uint8_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGN" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor}}}
< NDIR_I2C >::begin (void ){\f2 [inline]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAGT}
{\bkmkend AAAAAAAAGT}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGT" }{}}{\fldrslt {\cs37\ul\cf2 begin()}}}: NDIR_I2C specific begin method\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid true if successful, false otherwise \par
}}{
Reimplemented from {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGL" }{}}{\fldrslt {\cs37\ul\cf2 BaseExternalSensor}}}
.}\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASG" }{}}{\fldrslt {\cs37\ul\cf2 218}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKS" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor.h}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASD" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor< T >::sensor}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   219     \{\par
  220     \par
  221     #if DEBUG == 1 \par
  222 \par
  223         Serial.println( "ExternalSensor <NDIR_I2C> begin()" );\par
  224         Serial.println();\par
  225     \par
  226     #endif \par
  227 \par
  228         if ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASQ" }{}}{\fldrslt {\cs37\ul\cf2 sensor}}}
.begin()) \par
  229         \{\par
  230         \par
  231         #if DEBUG == 1 \par
  232             \par
  233             Serial.println( "NDIR_I2C init : wait 10 seconds" );\par
  234             Serial.println();\par
  235         \par
  236         #endif\par
  237 \par
  238             delay(10000);\par
  239             return(true);\par
  240 \par
  241             \}\par
  242         else \par
  243         \{\par
  244         \par
  245         #if DEBUG == 1 \par
  246 \par
  247             Serial.println( "NDIR_I2C init : fail " );\par
  248             Serial.println();\par
  249         \par
  250         #endif\par
  251 \par
  252             return(false);\par
  253         \}   \par
  254     \}\par
}
}
{\xe \v read\:ExternalSensor< NDIR_I2C >}
{\xe \v ExternalSensor< NDIR_I2C >\:read}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGN" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor}}}
< NDIR_I2C >::read (void ){\f2 [inline]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAGU}
{\bkmkend AAAAAAAAGU}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGU" }{}}{\fldrslt {\cs37\ul\cf2 read()}}}: NDIR_I2C specific read method\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid the ppm value if successful, else return -42 \par
}}{
Reimplemented from {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGM" }{}}{\fldrslt {\cs37\ul\cf2 BaseExternalSensor}}}
.}\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASK" }{}}{\fldrslt {\cs37\ul\cf2 263}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKS" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor.h}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASD" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor< T >::sensor}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   264     \{\par
  265         \par
  266     #if DEBUG == 1 \par
  267         \par
  268         Serial.println( "ExternalSensor <NDIR_I2C> read()" );\par
  269         Serial.println();\par
  270 \par
  271     #endif\par
  272 \par
  273         if ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASQ" }{}}{\fldrslt {\cs37\ul\cf2 sensor}}}
.measure())\par
  274         \{\par
  275         \par
  276         #if DEBUG == 1 \par
  277 \par
  278             Serial.print( "NDIR_I2C ppm :" );\par
  279             Serial.println( (float) {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASQ" }{}}{\fldrslt {\cs37\ul\cf2 sensor}}}
.ppm);\par
  280             \par
  281             Serial.println();           \par
  282 \par
  283         #endif\par
  284 \par
  285             return( (float) {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASQ" }{}}{\fldrslt {\cs37\ul\cf2 sensor}}}
.ppm);\par
  286             \par
  287         \}\par
  288         \par
  289         else\par
  290         \{\par
  291         \par
  292         #if DEBUG == 1 \par
  293 \par
  294             Serial.println( "NDIR_I2C read fail " );\par
  295             Serial.println();\par
  296         \par
  297         #endif\par
  298 \par
  299             return(-42);\par
  300         \}\par
  301     \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v sensor\:ExternalSensor< NDIR_I2C >}
{\xe \v ExternalSensor< NDIR_I2C >\:sensor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
NDIR_I2C {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGN" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor}}}
< NDIR_I2C >::sensor =NULL{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAASQ}
{\bkmkend AAAAAAAASQ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASS" }{}}{\fldrslt {\cs37\ul\cf2 305}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKS" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor.h}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGZ" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor.h}}}
\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ExternalSensors Class Reference\par \pard\plain 
{\tc\tcl2 \v ExternalSensors}
{\xe \v ExternalSensors}
{\bkmkstart AAAAAAAADU}
{\bkmkend AAAAAAAADU}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class handles the external sensors run time defintion , configuartion and actions. }}\par
{
{\f2 #include <ExternalSensors.h>}}\par
Collaboration diagram for ExternalSensors:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classExternalSensors__coll__graph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHI" }{}}{\fldrslt {\cs37\ul\cf2 sensor}}}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABE" }{}}{\fldrslt {\cs37\ul\cf2 begin}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACX" }{}}{\fldrslt {\cs37\ul\cf2 read}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABD" }{}}{\fldrslt {\cs37\ul\cf2 config}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABF" }{}}{\fldrslt {\cs37\ul\cf2 printConf}}}
 ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHI" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors::sensor}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
 [50]\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHA" }{}}{\fldrslt {\cs37\ul\cf2 sensorsNumber}}}
 =0\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class handles the external sensors run time defintion , configuartion and actions. \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAST" }{}}{\fldrslt {\cs37\ul\cf2 26}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKY" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors.h}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v begin\:ExternalSensors}
{\xe \v ExternalSensors\:begin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ExternalSensors::begin (void )}}
\par
{\bkmkstart AAAAAAAABE}
{\bkmkend AAAAAAAABE}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABE" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors::begin()}}}: This method is provided to initialise the external sensors. \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMG" }{}}{\fldrslt {\cs37\ul\cf2 43}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKW" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMF" }{}}{\fldrslt {\cs37\ul\cf2 BaseExternalSensor::begin()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASU" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors::sensor::exSensor}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASV" }{}}{\fldrslt {\cs37\ul\cf2 sensorsNumber}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMJ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::begin()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    44 \{\par
   45 \par
   46 #if DEBUG == 1\par
   47 \par
   48     Serial.println( F("Enter ExternalSensors.begin()") );\par
   49     Serial.println();\par
   50 \par
   51 #endif \par
   52 \par
   53     for(int i=0;i< this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHA" }{}}{\fldrslt {\cs37\ul\cf2 sensorsNumber}}}
 ; i++)\par
   54     \{\par
   55         if( ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].reference) == "NDIR_I2C" )\par
   56         \{   \par
   57             std::unique_ptr< ExternalSensor<NDIR_I2C> > sensorCO2(new {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHC" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor<NDIR_I2C>}}}
( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].address) );\par
   58 \par
   59 \par
   60             {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHD" }{}}{\fldrslt {\cs37\ul\cf2 exSensor}}}
= sensorCO2.release();\par
   61             {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHD" }{}}{\fldrslt {\cs37\ul\cf2 exSensor}}}
->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGL" }{}}{\fldrslt {\cs37\ul\cf2 begin}}}
();\par
   62 \par
   63         \}\par
   64         if( ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].reference) == "DallasTemperature")\par
   65         \{\par
   66             OneWire oneWire(0);\par
   67             std::unique_ptr< ExternalSensor<DallasTemperature> > dallasTemp(new {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHE" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor<DallasTemperature>}}}
 ());\par
   68              ;\par
   69             {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHD" }{}}{\fldrslt {\cs37\ul\cf2 exSensor}}}
=dallasTemp.release();\par
   70             {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHD" }{}}{\fldrslt {\cs37\ul\cf2 exSensor}}}
->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGL" }{}}{\fldrslt {\cs37\ul\cf2 begin}}}
();\par
   71             \par
   72         \}\par
   73         \par
   74         \par
   75     \}\par
   76 \}\par
}
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classExternalSensors_a58ede0d786a86417254708870f04a21e_cgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classExternalSensors_a58ede0d786a86417254708870f04a21e_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v config\:ExternalSensors}
{\xe \v ExternalSensors\:config}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool ExternalSensors::config ()}}
\par
{\bkmkstart AAAAAAAABD}
{\bkmkend AAAAAAAABD}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABD" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors::config()}}}: This method is provided to configure the externalSensors through a configuration file\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid true if successful,false otherwise \par
}}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMS" }{}}{\fldrslt {\cs37\ul\cf2 159}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKW" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASW" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors::sensor::address}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASX" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors::sensor::reference}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASV" }{}}{\fldrslt {\cs37\ul\cf2 sensorsNumber}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASY" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors::sensor::type}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMJ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::begin()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   160 \{\par
  161     //read config file\par
  162     //update data\par
  163     File externalSensorsConfig = SPIFFS.open("/externalSensorsConfig.json", "r");\par
  164 \par
  165     if (!externalSensorsConfig) \par
  166     \{\par
  167     \par
  168     #if DEBUG == 1\par
  169         \par
  170         Serial.println( F("failed to read /externalSensorsConfig.json") );\par
  171         Serial.println();\par
  172     \par
  173     #endif\par
  174         \par
  175         return(false);\par
  176     \}\par
  177     else\par
  178     \{\par
  179         size_t size = externalSensorsConfig.size();\par
  180         // Allocate a buffer to store contents of the file.\par
  181         std::unique_ptr<char[]> buf(new char[size]);\par
  182 \par
  183         externalSensorsConfig.readBytes(buf.get(), size);\par
  184         DynamicJsonBuffer jsonBuffer;\par
  185         JsonObject& json = jsonBuffer.parseObject(buf.get());\par
  186 \par
  187         if (!json.success()) \par
  188         \{\par
  189         \par
  190         #if DEBUG == 1 \par
  191 \par
  192             Serial.println( F("failed to parse json") );\par
  193             Serial.println();\par
  194         \par
  195         #endif\par
  196 \par
  197             return(false);\par
  198         \} \par
  199         else\par
  200         \{\par
  201         \par
  202         #if DEBUG == 1 \par
  203     \par
  204             Serial.println( F("configuration json is : ") );\par
  205             json.printTo(Serial);\par
  206             Serial.println();\par
  207 \par
  208             Serial.print(F("jsonBuffer size: "));\par
  209             Serial.println(jsonBuffer.size());\par
  210             Serial.println();\par
  211 \par
  212         \par
  213         #endif          \par
  214             if(json["sensorsNumber"]!=NULL)\par
  215             \{\par
  216                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHA" }{}}{\fldrslt {\cs37\ul\cf2 sensorsNumber}}}
 = json["sensorsNumber"];\par
  217                 \par
  218                 \par
  219 \par
  220                 for(int i=0;i<{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHA" }{}}{\fldrslt {\cs37\ul\cf2 sensorsNumber}}}
;i++)\par
  221                 \{   String name="sensor"+String(i);\par
  222                     \par
  223                     if(json[name].success())\par
  224                     \{  \par
  225                         JsonObject& sensorJson=json[name];\par
  226                         \par
  227                         if(sensorJson["reference"].success() )\par
  228                         \{  \par
  229                             this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHG" }{}}{\fldrslt {\cs37\ul\cf2 reference}}}
 =sensorJson["reference"].as<String>();\par
  230                         \}\par
  231                         else\par
  232                         \{\par
  233                             this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHG" }{}}{\fldrslt {\cs37\ul\cf2 reference}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHG" }{}}{\fldrslt {\cs37\ul\cf2 reference}}}
;                          \par
  234                                     \par
  235                         \}\par
  236                         sensorJson["reference"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHG" }{}}{\fldrslt {\cs37\ul\cf2 reference}}}
;\par
  237 \par
  238                     \par
  239                         if(sensorJson["type"].success() )\par
  240                         \{                   \par
  241                             this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHF" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
=sensorJson["type"].as<String>();\par
  242                         \}\par
  243                         else\par
  244                         \{\par
  245                             this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHF" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHF" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
;\par
  246 \par
  247                         \}\par
  248                         sensorJson["type"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHF" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
;\par
  249                     \par
  250                         if(sensorJson["address"].success() )\par
  251                         \{                   \par
  252                             this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHH" }{}}{\fldrslt {\cs37\ul\cf2 address}}}
=sensorJson["address"];\par
  253                         \}\par
  254                         else\par
  255                         \{   \par
  256                             this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHH" }{}}{\fldrslt {\cs37\ul\cf2 address}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHH" }{}}{\fldrslt {\cs37\ul\cf2 address}}}
;\par
  257 \par
  258                         \}\par
  259                         sensorJson["address"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHH" }{}}{\fldrslt {\cs37\ul\cf2 address}}}
;\par
  260                     \par
  261     \par
  262                     \}\par
  263                     else\par
  264                     \{\par
  265                         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i];                  \par
  266                     \}\par
  267                                             \par
  268                     json[name]["reference"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHG" }{}}{\fldrslt {\cs37\ul\cf2 reference}}}
;\par
  269                     json[name]["type"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHF" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
;\par
  270                     json[name]["address"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHH" }{}}{\fldrslt {\cs37\ul\cf2 address}}}
;\par
  271                 \}\par
  272  \par
  273             \}\par
  274             else\par
  275             \{\par
  276                 this->sensorsNumber=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHA" }{}}{\fldrslt {\cs37\ul\cf2 sensorsNumber}}}
;\par
  277             \}\par
  278             json["sensorsNumber"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHA" }{}}{\fldrslt {\cs37\ul\cf2 sensorsNumber}}}
;\par
  279 \par
  280             externalSensorsConfig.close();\par
  281             externalSensorsConfig = SPIFFS.open("/externalSensorsConfig.json", "w");\par
  282 \par
  283             if(!externalSensorsConfig)\par
  284             \{\par
  285             \par
  286             #if DEBUG == 1 \par
  287 \par
  288                 Serial.println( F("failed to write to /externalSensorsConfig.json") );\par
  289                 Serial.println();\par
  290             \par
  291             #endif\par
  292 \par
  293                 return(false);\par
  294             \}\par
  295             \par
  296             json.printTo(externalSensorsConfig);\par
  297             externalSensorsConfig.close();\par
  298             \par
  299         #if DEBUG == 1 \par
  300 \par
  301             Serial.println( F("saved configuration is : ") );\par
  302             json.printTo(Serial);\par
  303             Serial.println();\par
  304         \par
  305         #endif\par
  306 \par
  307             return(true); \par
  308         \}\par
  309     \}   \par
  310     \par
  311 \par
  312 \par
  313 \par
  314 \}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classExternalSensors_a862a4bd11346b37270d0244c2adabe5a_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v printConf\:ExternalSensors}
{\xe \v ExternalSensors\:printConf}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ExternalSensors::printConf ()}}
\par
{\bkmkstart AAAAAAAABF}
{\bkmkend AAAAAAAABF}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABF" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors::printConf()}}}: This method is provided to print the configuration to the Serial Monitor \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANL" }{}}{\fldrslt {\cs37\ul\cf2 321}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKW" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASV" }{}}{\fldrslt {\cs37\ul\cf2 sensorsNumber}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMJ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::begin()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   322 \{\par
  323 \par
  324 #if DEBUG == 1\par
  325 \par
  326     Serial.println( F("Entering ExternalSensors.printConf()") );\par
  327     Serial.println();\par
  328 \par
  329 #endif \par
  330 \par
  331     Serial.println("External Sensors configuration ");\par
  332 \par
  333     Serial.print("sensorsNumber : ");\par
  334     Serial.println({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHA" }{}}{\fldrslt {\cs37\ul\cf2 sensorsNumber}}}
);\par
  335 \par
  336     for(int i=0;i<{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHA" }{}}{\fldrslt {\cs37\ul\cf2 sensorsNumber}}}
;i++)\par
  337     \{\par
  338         Serial.print("sensor ");\par
  339         Serial.print(i);\par
  340         Serial.print(" reference : ");\par
  341         Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].reference);\par
  342 \par
  343         Serial.print("sensor ");\par
  344         Serial.print(i);\par
  345         Serial.print(" type : ");\par
  346         Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].type);\par
  347                 \par
  348         Serial.print("sensor ");\par
  349         Serial.print(i);\par
  350         Serial.print(" address : ");\par
  351         Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].address);\par
  352     \par
  353     \}\par
  354 \}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classExternalSensors_a78c2bf55084435dd51d3c559b2d3c6f3_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v read\:ExternalSensors}
{\xe \v ExternalSensors\:read}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String ExternalSensors::read (void )}}
\par
{\bkmkstart AAAAAAAACX}
{\bkmkend AAAAAAAACX}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACX" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors::read()}}}: This method is provided to read the data from the external sensors\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid json string that contains the sensors data \par
}}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPD" }{}}{\fldrslt {\cs37\ul\cf2 86}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKW" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASV" }{}}{\fldrslt {\cs37\ul\cf2 sensorsNumber}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASY" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors::sensor::type}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOP" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::readSensors()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    87 \{\par
   88 \par
   89 #if DEBUG == 1\par
   90 \par
   91     Serial.println( F("Entering ExternalSensors.read()") );\par
   92     Serial.println();\par
   93 \par
   94 #endif \par
   95 \par
   96     String data;\par
   97     DynamicJsonBuffer  jsonBuffer ;\par
   98     JsonObject& root = jsonBuffer.createObject();\par
   99 \par
  100     if(!root.success() )\par
  101     \{\par
  102  \par
  103     #if DEBUG == 1\par
  104 \par
  105         Serial.println( F("failed to create json ") );\par
  106     \par
  107     #endif \par
  108 \par
  109         return("00");\par
  110     \}\par
  111     else\par
  112     \{\par
  113         if({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHA" }{}}{\fldrslt {\cs37\ul\cf2 sensorsNumber}}}
>0)\par
  114         \{\par
  115             for(int i=0;i<{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHA" }{}}{\fldrslt {\cs37\ul\cf2 sensorsNumber}}}
;i++)\par
  116             \{\par
  117                 if({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].exSensor != NULL )\par
  118                 \{\par
  119                     root[{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHF" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
]=sensors[i].exSensor->read();      \par
  120                 \}\par
  121             \par
  122             #if DEBUG == 1\par
  123                 else\par
  124                 \{\par
  125                     Serial.println(F("null pointer "));\par
  126                 \}\par
  127             #endif  \par
  128             \}\par
  129         \}   \par
  130         \par
  131         root.printTo(data);\par
  132     \par
  133     #if DEBUG == 1\par
  134 \par
  135         Serial.println( F("sensors data :") );\par
  136         Serial.println(data);\par
  137         Serial.println();\par
  138 \par
  139         Serial.print(F("jsonBuffer size: "));\par
  140         Serial.println(jsonBuffer.size());\par
  141         Serial.println();\par
  142 \par
  143     \par
  144     #endif\par
  145     \par
  146         return(data);\par
  147     \}\par
  148 \par
  149 \}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classExternalSensors_a53177b81eca3be89508b5511ddcd00fc_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v sensors\:ExternalSensors}
{\xe \v ExternalSensors\:sensors}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
struct {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHI" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors::sensor}}}
 ExternalSensors::sensors[50]{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAHB}
{\bkmkend AAAAAAAAHB}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMG" }{}}{\fldrslt {\cs37\ul\cf2 begin()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMS" }{}}{\fldrslt {\cs37\ul\cf2 config()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANL" }{}}{\fldrslt {\cs37\ul\cf2 printConf()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPD" }{}}{\fldrslt {\cs37\ul\cf2 read()}}}
.}\par
}
{\xe \v sensorsNumber\:ExternalSensors}
{\xe \v ExternalSensors\:sensorsNumber}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int ExternalSensors::sensorsNumber =0{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAHA}
{\bkmkend AAAAAAAAHA}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASV" }{}}{\fldrslt {\cs37\ul\cf2 47}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKY" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMG" }{}}{\fldrslt {\cs37\ul\cf2 begin()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMS" }{}}{\fldrslt {\cs37\ul\cf2 config()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANL" }{}}{\fldrslt {\cs37\ul\cf2 printConf()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPD" }{}}{\fldrslt {\cs37\ul\cf2 read()}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADJ" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors.h}}}
\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKU" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors.cpp}}}
\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Irene3000 Class Reference\par \pard\plain 
{\tc\tcl2 \v Irene3000}
{\xe \v Irene3000}
{\bkmkstart AAAAAAAADT}
{\bkmkend AAAAAAAADT}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class is provided to manage the {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADT" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000}}} Ph/Temperature Shield. }}\par
{
{\f2 #include <Irene3000.h>}}\par
Collaboration diagram for Irene3000:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classIrene3000__coll__graph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIN" }{}}{\fldrslt {\cs37\ul\cf2 parameters_T}}}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIO" }{}}{\fldrslt {\cs37\ul\cf2 state}}}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAZ" }{}}{\fldrslt {\cs37\ul\cf2 begin}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAY" }{}}{\fldrslt {\cs37\ul\cf2 config}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABA" }{}}{\fldrslt {\cs37\ul\cf2 printConf}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACY" }{}}{\fldrslt {\cs37\ul\cf2 read}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHU" }{}}{\fldrslt {\cs37\ul\cf2 readButton}}}
 (adsGain_t gain)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHV" }{}}{\fldrslt {\cs37\ul\cf2 setGain}}}
 (adsGain_t gain)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHS" }{}}{\fldrslt {\cs37\ul\cf2 readADSChannel2}}}
 (adsGain_t gain)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHP" }{}}{\fldrslt {\cs37\ul\cf2 readPh}}}
 (adsGain_t gain)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHM" }{}}{\fldrslt {\cs37\ul\cf2 readTemp}}}
 (adsGain_t gain)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIK" }{}}{\fldrslt {\cs37\ul\cf2 resetParams}}}
 (void)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIG" }{}}{\fldrslt {\cs37\ul\cf2 calibratepH7}}}
 (adsGain_t gain)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAII" }{}}{\fldrslt {\cs37\ul\cf2 calibratepH4}}}
 (adsGain_t gain)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIH" }{}}{\fldrslt {\cs37\ul\cf2 calcpHSlope}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
adsGain_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHT" }{}}{\fldrslt {\cs37\ul\cf2 gainConvert}}}
 (uint16_t tempGain)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Adafruit_ADS1115 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHJ" }{}}{\fldrslt {\cs37\ul\cf2 ads}}}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIN" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::parameters_T}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIB" }{}}{\fldrslt {\cs37\ul\cf2 params}}}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIO" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::state}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHK" }{}}{\fldrslt {\cs37\ul\cf2 waterTemp}}}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIO" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::state}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHO" }{}}{\fldrslt {\cs37\ul\cf2 phProbe}}}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIO" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::state}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHQ" }{}}{\fldrslt {\cs37\ul\cf2 adc2}}}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIA" }{}}{\fldrslt {\cs37\ul\cf2 vRef}}}
 = 1.024\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAID" }{}}{\fldrslt {\cs37\ul\cf2 opampGain}}}
 = 5.25\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class is provided to manage the {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADT" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000}}} Ph/Temperature Shield. \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATA" }{}}{\fldrslt {\cs37\ul\cf2 35}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALF" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000.h}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v begin\:Irene3000}
{\xe \v Irene3000\:begin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Irene3000::begin (void )}}
\par
{\bkmkstart AAAAAAAAAZ}
{\bkmkend AAAAAAAAAZ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAZ" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::begin()}}}: This method is provided to start the {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADT" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000}}} ADS chip \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMP" }{}}{\fldrslt {\cs37\ul\cf2 38}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALC" }{}}{\fldrslt {\cs37\ul\cf2 irene3000.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATB" }{}}{\fldrslt {\cs37\ul\cf2 ads}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMJ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::begin()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    39 \{\par
   40 \par
   41 #if DEBUG == 1 \par
   42 \par
   43     Serial.println( F("Entering Irene3000.begin()") );\par
   44     Serial.println();\par
   45 \par
   46 #endif\par
   47 \par
   48     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHJ" }{}}{\fldrslt {\cs37\ul\cf2 ads}}}
.begin();\par
   49 \}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classIrene3000_ad5891806c500ae1007afe52b9e304c2b_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v calcpHSlope\:Irene3000}
{\xe \v Irene3000\:calcpHSlope}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Irene3000::calcpHSlope ()}}
\par
{\bkmkstart AAAAAAAAIH}
{\bkmkend AAAAAAAAIH}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Irene3000::calcpHSlop(): This method is provided to calculate th PH slope \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATC" }{}}{\fldrslt {\cs37\ul\cf2 585}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALC" }{}}{\fldrslt {\cs37\ul\cf2 irene3000.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATD" }{}}{\fldrslt {\cs37\ul\cf2 opampGain}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIB" }{}}{\fldrslt {\cs37\ul\cf2 params}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATE" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::parameters_T::pH4Cal}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATE" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::parameters_T::pH7Cal}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATF" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::parameters_T::pHStep}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATG" }{}}{\fldrslt {\cs37\ul\cf2 vRef}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALN" }{}}{\fldrslt {\cs37\ul\cf2 calibratepH4()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALO" }{}}{\fldrslt {\cs37\ul\cf2 calibratepH7()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   586 \{\par
  587 \par
  588 #if DEBUG == 1 \par
  589 \par
  590     Serial.println( F("Entering Irene3000.calcpHSlope()") );\par
  591     Serial.println();\par
  592 \par
  593 #endif \par
  594 \par
  595     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIB" }{}}{\fldrslt {\cs37\ul\cf2 params}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIE" }{}}{\fldrslt {\cs37\ul\cf2 pHStep}}}
 = (((({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIA" }{}}{\fldrslt {\cs37\ul\cf2 vRef}}}
 * (float)({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIB" }{}}{\fldrslt {\cs37\ul\cf2 params}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIC" }{}}{\fldrslt {\cs37\ul\cf2 pH7Cal}}}
 - {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIB" }{}}{\fldrslt {\cs37\ul\cf2 params}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIJ" }{}}{\fldrslt {\cs37\ul\cf2 pH4Cal}}}
)) / 32767) * 1000) / {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAID" }{}}{\fldrslt {\cs37\ul\cf2 opampGain}}}
) / 3;\par
  596 \par
  597  \par
  598 \}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classIrene3000_a81f6a79e546679692053f7ac1af49613_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v calibratepH4\:Irene3000}
{\xe \v Irene3000\:calibratepH4}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Irene3000::calibratepH4 (adsGain_t  {\i gain})}}
\par
{\bkmkstart AAAAAAAAII}
{\bkmkend AAAAAAAAII}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Irene3000::calibratepH4(gain): This method is provided to calibrate the PH probe to 4 \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALN" }{}}{\fldrslt {\cs37\ul\cf2 560}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALC" }{}}{\fldrslt {\cs37\ul\cf2 irene3000.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATB" }{}}{\fldrslt {\cs37\ul\cf2 ads}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATC" }{}}{\fldrslt {\cs37\ul\cf2 calcpHSlope()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIB" }{}}{\fldrslt {\cs37\ul\cf2 params}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALM" }{}}{\fldrslt {\cs37\ul\cf2 ph}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATE" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::parameters_T::pH4Cal}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATH" }{}}{\fldrslt {\cs37\ul\cf2 setGain()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   561 \{\par
  562 \par
  563 #if DEBUG == 1 \par
  564 \par
  565     Serial.println( F("Entering Irene3000.calibraph4()") );\par
  566     Serial.println();\par
  567 \par
  568 #endif \par
  569     \par
  570     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHV" }{}}{\fldrslt {\cs37\ul\cf2 setGain}}}
(gain);\par
  571 \par
  572     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIB" }{}}{\fldrslt {\cs37\ul\cf2 params}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIJ" }{}}{\fldrslt {\cs37\ul\cf2 pH4Cal}}}
 =  {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHJ" }{}}{\fldrslt {\cs37\ul\cf2 ads}}}
.readADC_SingleEnded({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHY" }{}}{\fldrslt {\cs37\ul\cf2 ph}}}
);\par
  573 \par
  574     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIH" }{}}{\fldrslt {\cs37\ul\cf2 calcpHSlope}}}
();\par
  575 \par
  576 \par
  577 \par
  578 \}\par
}
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classIrene3000_a9772eeea2305fad6236a82e33e93892e_cgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v calibratepH7\:Irene3000}
{\xe \v Irene3000\:calibratepH7}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Irene3000::calibratepH7 (adsGain_t  {\i gain})}}
\par
{\bkmkstart AAAAAAAAIG}
{\bkmkend AAAAAAAAIG}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Irene3000::calibratepH7(gain): This method is provided to calibrate the PH probe to 7 \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALO" }{}}{\fldrslt {\cs37\ul\cf2 536}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALC" }{}}{\fldrslt {\cs37\ul\cf2 irene3000.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATB" }{}}{\fldrslt {\cs37\ul\cf2 ads}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATC" }{}}{\fldrslt {\cs37\ul\cf2 calcpHSlope()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIB" }{}}{\fldrslt {\cs37\ul\cf2 params}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALM" }{}}{\fldrslt {\cs37\ul\cf2 ph}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATE" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::parameters_T::pH7Cal}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATH" }{}}{\fldrslt {\cs37\ul\cf2 setGain()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   537 \{\par
  538 \par
  539 #if DEBUG == 1 \par
  540 \par
  541     Serial.println( F("Entering Irene3000.calibratepH7() ") );\par
  542     Serial.println();\par
  543 \par
  544 #endif \par
  545 \par
  546     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHV" }{}}{\fldrslt {\cs37\ul\cf2 setGain}}}
(gain);\par
  547         \par
  548     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIB" }{}}{\fldrslt {\cs37\ul\cf2 params}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIC" }{}}{\fldrslt {\cs37\ul\cf2 pH7Cal}}}
 = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHJ" }{}}{\fldrslt {\cs37\ul\cf2 ads}}}
.readADC_SingleEnded({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHY" }{}}{\fldrslt {\cs37\ul\cf2 ph}}}
);\par
  549  \par
  550     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIH" }{}}{\fldrslt {\cs37\ul\cf2 calcpHSlope}}}
();\par
  551 \par
  552 \par
  553 \}\par
}
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classIrene3000_a2e810ddfa8b95eaa2446a408761c6bdc_cgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v config\:Irene3000}
{\xe \v Irene3000\:config}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Irene3000::config ()}}
\par
{\bkmkstart AAAAAAAAAY}
{\bkmkend AAAAAAAAAY}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAY" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::config()}}}: This method is provided to configure the {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADT" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000}}} shield through a configuration file\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid true if successful,false otherwise \par
}}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMW" }{}}{\fldrslt {\cs37\ul\cf2 129}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALC" }{}}{\fldrslt {\cs37\ul\cf2 irene3000.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATI" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::state::active}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHQ" }{}}{\fldrslt {\cs37\ul\cf2 adc2}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATJ" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::state::gain}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATK" }{}}{\fldrslt {\cs37\ul\cf2 gainConvert()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHO" }{}}{\fldrslt {\cs37\ul\cf2 phProbe}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATL" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::state::type}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHK" }{}}{\fldrslt {\cs37\ul\cf2 waterTemp}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMJ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::begin()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   130 \{\par
  131 \par
  132 #if DEBUG == 1 \par
  133 \par
  134     Serial.println( F("Entering Irene3000.config()") );\par
  135     Serial.println();\par
  136 \par
  137 #endif\par
  138 \par
  139     File irene3000Config = SPIFFS.open("/irene3000Config.json", "r");\par
  140 \par
  141     if (!irene3000Config) \par
  142     \{\par
  143     \par
  144     #if DEBUG == 1 \par
  145 \par
  146         Serial.println( F("failed to read /irene3000Config.json") );\par
  147         Serial.println();\par
  148     \par
  149     #endif\par
  150 \par
  151         return(false);\par
  152     \}\par
  153     else\par
  154     \{\par
  155         size_t size = irene3000Config.size();\par
  156         // Allocate a buffer to store contents of the file.\par
  157         std::unique_ptr<char[]> buf(new char[size]);\par
  158             uint16_t tempGain;\par
  159         irene3000Config.readBytes(buf.get(), size);\par
  160         DynamicJsonBuffer jsonBuffer;\par
  161         JsonObject& json = jsonBuffer.parseObject(buf.get());\par
  162         if (!json.success()) \par
  163         \{\par
  164         \par
  165         #if DEBUG == 1 \par
  166 \par
  167             Serial.println( F("failed to parse json ") );\par
  168             Serial.println();\par
  169         \par
  170         #endif\par
  171             \par
  172             return(false);\par
  173         \} \par
  174         else\par
  175         \{\par
  176         \par
  177         #if DEBUG == 1 \par
  178     \par
  179             Serial.println( F("read configuration file ") );\par
  180             json.printTo(Serial);\par
  181             Serial.println();\par
  182 \par
  183             Serial.print(F("jsonBuffer size: "));\par
  184             Serial.println(jsonBuffer.size());\par
  185             Serial.println();\par
  186 \par
  187         \par
  188 \par
  189         #endif          \par
  190             if(json["waterTemp"]["active"].success() )\par
  191             \{           \par
  192                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHK" }{}}{\fldrslt {\cs37\ul\cf2 waterTemp}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHL" }{}}{\fldrslt {\cs37\ul\cf2 active}}}
 = json["waterTemp"]["active"]; \par
  193             \}\par
  194             else\par
  195             \{\par
  196                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHK" }{}}{\fldrslt {\cs37\ul\cf2 waterTemp}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHL" }{}}{\fldrslt {\cs37\ul\cf2 active}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHK" }{}}{\fldrslt {\cs37\ul\cf2 waterTemp}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHL" }{}}{\fldrslt {\cs37\ul\cf2 active}}}
;\par
  197             \}\par
  198             json["waterTemp"]["active"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHK" }{}}{\fldrslt {\cs37\ul\cf2 waterTemp}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHL" }{}}{\fldrslt {\cs37\ul\cf2 active}}}
;\par
  199 \par
  200             \par
  201             if(json["waterTemp"]["gain"].success() )\par
  202             \{           \par
  203                 tempGain = json["waterTemp"]["gain"]; \par
  204                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHK" }{}}{\fldrslt {\cs37\ul\cf2 waterTemp}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHN" }{}}{\fldrslt {\cs37\ul\cf2 gain}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHT" }{}}{\fldrslt {\cs37\ul\cf2 gainConvert}}}
(tempGain);\par
  205             \}\par
  206             else\par
  207             \{\par
  208                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHK" }{}}{\fldrslt {\cs37\ul\cf2 waterTemp}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHN" }{}}{\fldrslt {\cs37\ul\cf2 gain}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHK" }{}}{\fldrslt {\cs37\ul\cf2 waterTemp}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHN" }{}}{\fldrslt {\cs37\ul\cf2 gain}}}
;\par
  209             \}\par
  210             json["waterTemp"]["gain"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHK" }{}}{\fldrslt {\cs37\ul\cf2 waterTemp}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHN" }{}}{\fldrslt {\cs37\ul\cf2 gain}}}
;\par
  211 \par
  212             \par
  213             if(json["phProbe"]["active"].success())\par
  214             \{\par
  215                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHO" }{}}{\fldrslt {\cs37\ul\cf2 phProbe}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHL" }{}}{\fldrslt {\cs37\ul\cf2 active}}}
=json["phProbe"]["active"];\par
  216             \}\par
  217             else\par
  218             \{\par
  219                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHO" }{}}{\fldrslt {\cs37\ul\cf2 phProbe}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHL" }{}}{\fldrslt {\cs37\ul\cf2 active}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHO" }{}}{\fldrslt {\cs37\ul\cf2 phProbe}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHL" }{}}{\fldrslt {\cs37\ul\cf2 active}}}
;\par
  220             \}\par
  221             json["phProbe"]["active"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHO" }{}}{\fldrslt {\cs37\ul\cf2 phProbe}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHL" }{}}{\fldrslt {\cs37\ul\cf2 active}}}
;\par
  222     \par
  223             \par
  224             if(json["phProbe"]["gain"].success() )\par
  225             \{       \par
  226                 tempGain=json["phProbe"]["gain"];\par
  227                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHO" }{}}{\fldrslt {\cs37\ul\cf2 phProbe}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHN" }{}}{\fldrslt {\cs37\ul\cf2 gain}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHT" }{}}{\fldrslt {\cs37\ul\cf2 gainConvert}}}
(tempGain);         \par
  228             \}\par
  229             else\par
  230             \{\par
  231                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHO" }{}}{\fldrslt {\cs37\ul\cf2 phProbe}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHN" }{}}{\fldrslt {\cs37\ul\cf2 gain}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHO" }{}}{\fldrslt {\cs37\ul\cf2 phProbe}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHN" }{}}{\fldrslt {\cs37\ul\cf2 gain}}}
;\par
  232             \}\par
  233             json["phProbe"]["gain"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHO" }{}}{\fldrslt {\cs37\ul\cf2 phProbe}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHN" }{}}{\fldrslt {\cs37\ul\cf2 gain}}}
;\par
  234 \par
  235             \par
  236             if(json["adc2"]["active"].success() )\par
  237             \{\par
  238                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHQ" }{}}{\fldrslt {\cs37\ul\cf2 adc2}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHL" }{}}{\fldrslt {\cs37\ul\cf2 active}}}
=json["adc2"]["active"];\par
  239             \}\par
  240             else\par
  241             \{\par
  242                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHQ" }{}}{\fldrslt {\cs37\ul\cf2 adc2}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHL" }{}}{\fldrslt {\cs37\ul\cf2 active}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHQ" }{}}{\fldrslt {\cs37\ul\cf2 adc2}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHL" }{}}{\fldrslt {\cs37\ul\cf2 active}}}
;\par
  243             \}\par
  244             json["adc2"]["active"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHQ" }{}}{\fldrslt {\cs37\ul\cf2 adc2}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHL" }{}}{\fldrslt {\cs37\ul\cf2 active}}}
;\par
  245 \par
  246             \par
  247             if(json["adc2"]["gain"].success() )\par
  248             \{           \par
  249                 tempGain=json["adc2"]["gain"];\par
  250                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHQ" }{}}{\fldrslt {\cs37\ul\cf2 adc2}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHN" }{}}{\fldrslt {\cs37\ul\cf2 gain}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHT" }{}}{\fldrslt {\cs37\ul\cf2 gainConvert}}}
(tempGain);\par
  251             \}\par
  252             else\par
  253             \{\par
  254                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHQ" }{}}{\fldrslt {\cs37\ul\cf2 adc2}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHN" }{}}{\fldrslt {\cs37\ul\cf2 gain}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHQ" }{}}{\fldrslt {\cs37\ul\cf2 adc2}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHN" }{}}{\fldrslt {\cs37\ul\cf2 gain}}}
;\par
  255             \}\par
  256             json["adc2"]["gain"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHQ" }{}}{\fldrslt {\cs37\ul\cf2 adc2}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHN" }{}}{\fldrslt {\cs37\ul\cf2 gain}}}
;\par
  257 \par
  258             \par
  259             if(json["adc2"]["type"].success() )\par
  260             \{\par
  261                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHQ" }{}}{\fldrslt {\cs37\ul\cf2 adc2}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHR" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
=json["adc2"]["type"].as<String>(); \par
  262             \}\par
  263             else\par
  264             \{\par
  265                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHQ" }{}}{\fldrslt {\cs37\ul\cf2 adc2}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHR" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHQ" }{}}{\fldrslt {\cs37\ul\cf2 adc2}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHR" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
;\par
  266             \}\par
  267             json["adc2"]["type"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHQ" }{}}{\fldrslt {\cs37\ul\cf2 adc2}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHR" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
;\par
  268 \par
  269             irene3000Config.close();\par
  270             irene3000Config = SPIFFS.open("/irene3000Config.json", "w");\par
  271 \par
  272             if(!irene3000Config)\par
  273             \{\par
  274             \par
  275             #if DEBUG == 1\par
  276 \par
  277                 Serial.println( F("failed to write to /irene3000Config.json") );\par
  278                 Serial.println();\par
  279             \par
  280             #endif \par
  281 \par
  282                 return(false);\par
  283             \}\par
  284 \par
  285             json.printTo(irene3000Config);\par
  286             irene3000Config.close();\par
  287             \par
  288         #if DEBUG == 1 \par
  289 \par
  290             Serial.println( F("saved configuration file :")  );\par
  291             json.printTo(Serial);\par
  292             Serial.println();\par
  293         \par
  294         #endif\par
  295 \par
  296             return(true); \par
  297         \}\par
  298     \}   \par
  299 \par
  300 \}\par
}
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classIrene3000_afed5c35e4b23963c157847ef27c11e9c_cgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classIrene3000_afed5c35e4b23963c157847ef27c11e9c_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v gainConvert\:Irene3000}
{\xe \v Irene3000\:gainConvert}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
adsGain_t Irene3000::gainConvert (uint16_t  {\i tempGain})}}
\par
{\bkmkstart AAAAAAAAHT}
{\bkmkend AAAAAAAAHT}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHT" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::gainConvert}}}( gain : \{ 2/3,1,2,4,8,16 \} ) This method is provided to convert the gain to Internal Constants\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid internal representation of the ADS gain \par
}}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATK" }{}}{\fldrslt {\cs37\ul\cf2 632}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALC" }{}}{\fldrslt {\cs37\ul\cf2 irene3000.cpp}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMW" }{}}{\fldrslt {\cs37\ul\cf2 config()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   633 \{\par
  634 \par
  635 #if DEBUG == 1 \par
  636 \par
  637     Serial.println( F("Entering Irene3000.gainConvert()") );\par
  638     Serial.println();\par
  639 \par
  640 #endif \par
  641     \par
  642     switch(tempGain)\par
  643     \{\par
  644         case(2/3): return(GAIN_TWOTHIRDS);\par
  645         case(1): return (GAIN_ONE);\par
  646         case(2) : return(GAIN_TWO);\par
  647         case(4): return(GAIN_FOUR) ;   \par
  648         case(8):return(GAIN_EIGHT)  ;  \par
  649         case(16):return(GAIN_SIXTEEN);  \par
  650     \}\par
  651 \par
  652 \par
  653 \par
  654 \}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classIrene3000_abcad62d1201a59f8dd3ba87048002728_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v printConf\:Irene3000}
{\xe \v Irene3000\:printConf}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Irene3000::printConf ()}}
\par
{\bkmkstart AAAAAAAABA}
{\bkmkend AAAAAAAABA}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABA" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::printConf()}}}: This method is provided to print the configuration to the Serial Monitor \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANP" }{}}{\fldrslt {\cs37\ul\cf2 307}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALC" }{}}{\fldrslt {\cs37\ul\cf2 irene3000.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATI" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::state::active}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHQ" }{}}{\fldrslt {\cs37\ul\cf2 adc2}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATJ" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::state::gain}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHO" }{}}{\fldrslt {\cs37\ul\cf2 phProbe}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATL" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::state::type}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHK" }{}}{\fldrslt {\cs37\ul\cf2 waterTemp}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMJ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::begin()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   308 \{\par
  309 \par
  310 #if DEBUG == 1 \par
  311 \par
  312     Serial.println( F("Entering Irene3000.printConf()") );\par
  313     Serial.println();\par
  314 \par
  315 #endif \par
  316 \par
  317     Serial.println("Irene Configuration ");\par
  318 \par
  319     Serial.print("waterTemp.active : ");\par
  320     Serial.println({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHK" }{}}{\fldrslt {\cs37\ul\cf2 waterTemp}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHL" }{}}{\fldrslt {\cs37\ul\cf2 active}}}
);\par
  321 \par
  322     Serial.print("waterTemp.gain : ");\par
  323     Serial.println({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHK" }{}}{\fldrslt {\cs37\ul\cf2 waterTemp}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHN" }{}}{\fldrslt {\cs37\ul\cf2 gain}}}
,HEX); \par
  324 \par
  325     Serial.print("phProbe.active : ");\par
  326     Serial.println({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHO" }{}}{\fldrslt {\cs37\ul\cf2 phProbe}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHL" }{}}{\fldrslt {\cs37\ul\cf2 active}}}
);\par
  327 \par
  328     Serial.print("phProbe.gain : ");\par
  329     Serial.println({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHO" }{}}{\fldrslt {\cs37\ul\cf2 phProbe}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHN" }{}}{\fldrslt {\cs37\ul\cf2 gain}}}
,HEX);\par
  330     \par
  331     Serial.print("adc2.active : ");\par
  332     Serial.println({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHQ" }{}}{\fldrslt {\cs37\ul\cf2 adc2}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHL" }{}}{\fldrslt {\cs37\ul\cf2 active}}}
);\par
  333 \par
  334     Serial.print("adc2.gain : ");\par
  335     Serial.println({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHQ" }{}}{\fldrslt {\cs37\ul\cf2 adc2}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHN" }{}}{\fldrslt {\cs37\ul\cf2 gain}}}
,HEX);\par
  336 \par
  337     Serial.print("adc2.type : ");\par
  338     Serial.println({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHQ" }{}}{\fldrslt {\cs37\ul\cf2 adc2}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHR" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
);\par
  339 \par
  340     Serial.println();\par
  341 \}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classIrene3000_a7bc2414100b5e19eacc6630fa34b2654_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v read\:Irene3000}
{\xe \v Irene3000\:read}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String Irene3000::read (void )}}
\par
{\bkmkstart AAAAAAAACY}
{\bkmkend AAAAAAAACY}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADT" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000}}}:{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACY" }{}}{\fldrslt {\cs37\ul\cf2 read()}}}: This method is provided to read the {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADT" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000}}} sensors data\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid json string of the sensors data \par
}}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPF" }{}}{\fldrslt {\cs37\ul\cf2 59}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALC" }{}}{\fldrslt {\cs37\ul\cf2 irene3000.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATI" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::state::active}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHQ" }{}}{\fldrslt {\cs37\ul\cf2 adc2}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATJ" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::state::gain}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHO" }{}}{\fldrslt {\cs37\ul\cf2 phProbe}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALL" }{}}{\fldrslt {\cs37\ul\cf2 readADSChannel2()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALH" }{}}{\fldrslt {\cs37\ul\cf2 readPh()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALR" }{}}{\fldrslt {\cs37\ul\cf2 readTemp()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATL" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::state::type}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHK" }{}}{\fldrslt {\cs37\ul\cf2 waterTemp}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOP" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::readSensors()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    60 \{\par
   61 \par
   62 #if DEBUG == 1 \par
   63     \par
   64     Serial.println( F("Entering Irene3000.read()") );\par
   65     Serial.println();\par
   66 \par
   67 #endif \par
   68 \par
   69     String data;\par
   70     DynamicJsonBuffer jsonBuffer;\par
   71     JsonObject& root = jsonBuffer.createObject();\par
   72     if( !( root.success()) )\par
   73     \{\par
   74     \par
   75     #if DEBUG == 1 \par
   76 \par
   77         Serial.println( F("failed to create json") );\par
   78     \par
   79     #endif \par
   80 \par
   81         return("");\par
   82     \}\par
   83 \par
   84         \par
   85     if({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHK" }{}}{\fldrslt {\cs37\ul\cf2 waterTemp}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHL" }{}}{\fldrslt {\cs37\ul\cf2 active}}}
)\par
   86     \{\par
   87         root["waterTemp"] = this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHM" }{}}{\fldrslt {\cs37\ul\cf2 readTemp}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHK" }{}}{\fldrslt {\cs37\ul\cf2 waterTemp}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHN" }{}}{\fldrslt {\cs37\ul\cf2 gain}}}
);\par
   88 \par
   89         if({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHO" }{}}{\fldrslt {\cs37\ul\cf2 phProbe}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHL" }{}}{\fldrslt {\cs37\ul\cf2 active}}}
)\par
   90         \{\par
   91             root["ph"] =this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHP" }{}}{\fldrslt {\cs37\ul\cf2 readPh}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHO" }{}}{\fldrslt {\cs37\ul\cf2 phProbe}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHN" }{}}{\fldrslt {\cs37\ul\cf2 gain}}}
) ;\par
   92         \}\par
   93 \par
   94     \}\par
   95 \par
   96     if({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHQ" }{}}{\fldrslt {\cs37\ul\cf2 adc2}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHL" }{}}{\fldrslt {\cs37\ul\cf2 active}}}
)\par
   97     \{\par
   98         root[{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHQ" }{}}{\fldrslt {\cs37\ul\cf2 adc2}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHR" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
] =this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHS" }{}}{\fldrslt {\cs37\ul\cf2 readADSChannel2}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHQ" }{}}{\fldrslt {\cs37\ul\cf2 adc2}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHN" }{}}{\fldrslt {\cs37\ul\cf2 gain}}}
);\par
   99     \}\par
  100     \par
  101     root.printTo(data);\par
  102     \par
  103 #if DEBUG == 1 \par
  104 \par
  105     Serial.println( F("Irene data : ") );\par
  106     Serial.println(data);\par
  107     Serial.println();\par
  108 \par
  109     Serial.print(F("jsonBuffer size: "));\par
  110     Serial.println(jsonBuffer.size());\par
  111     Serial.println();\par
  112 \par
  113 \par
  114 #endif\par
  115     \par
  116     return(data);\par
  117     \par
  118     \par
  119 \par
  120 \}\par
}
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classIrene3000_a852a170feea994ea1df01c6b245b5d9a_cgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classIrene3000_a852a170feea994ea1df01c6b245b5d9a_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v readADSChannel2\:Irene3000}
{\xe \v Irene3000\:readADSChannel2}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Irene3000::readADSChannel2 (adsGain_t  {\i gain})}}
\par
{\bkmkstart AAAAAAAAHS}
{\bkmkend AAAAAAAAHS}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Irene3000::readADSChannel2(gain): This method is provided to read from the ADS channel 2 . ADS Channel 2 is free and the user can connect another analog sensor to it.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid the ADS Channel 2 value \par
}}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALL" }{}}{\fldrslt {\cs37\ul\cf2 400}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALC" }{}}{\fldrslt {\cs37\ul\cf2 irene3000.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATB" }{}}{\fldrslt {\cs37\ul\cf2 ads}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALK" }{}}{\fldrslt {\cs37\ul\cf2 freeAdc}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATH" }{}}{\fldrslt {\cs37\ul\cf2 setGain()}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPF" }{}}{\fldrslt {\cs37\ul\cf2 read()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   401 \{   \par
  402 \par
  403 #if DEBUG == 1 \par
  404     \par
  405     Serial.println( F("Entering Irene3000.readADSChannel2()") );\par
  406     Serial.println();\par
  407 \par
  408 #endif\par
  409 \par
  410     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHV" }{}}{\fldrslt {\cs37\ul\cf2 setGain}}}
(gain);\par
  411 \par
  412 #if DEBUG == 1 \par
  413     \par
  414     Serial.println( F("adc2 value : ") );\par
  415     Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHJ" }{}}{\fldrslt {\cs37\ul\cf2 ads}}}
.readADC_SingleEnded({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHX" }{}}{\fldrslt {\cs37\ul\cf2 freeAdc}}}
) );\par
  416     Serial.println();\par
  417 \par
  418 #endif\par
  419 \par
  420     return( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHJ" }{}}{\fldrslt {\cs37\ul\cf2 ads}}}
.readADC_SingleEnded({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHX" }{}}{\fldrslt {\cs37\ul\cf2 freeAdc}}}
) ) ;\par
  421 \}\par
}
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classIrene3000_ae73bd2ed14a199a7e83f4d6458476a7c_cgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classIrene3000_ae73bd2ed14a199a7e83f4d6458476a7c_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v readButton\:Irene3000}
{\xe \v Irene3000\:readButton}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Irene3000::readButton (adsGain_t  {\i gain})}}
\par
{\bkmkstart AAAAAAAAHU}
{\bkmkend AAAAAAAAHU}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Irene3000::readButton(gain): This method is provided to read the {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADT" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000}}} button\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid the button value \par
}}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALJ" }{}}{\fldrslt {\cs37\ul\cf2 350}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALC" }{}}{\fldrslt {\cs37\ul\cf2 irene3000.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATB" }{}}{\fldrslt {\cs37\ul\cf2 ads}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALI" }{}}{\fldrslt {\cs37\ul\cf2 button}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATH" }{}}{\fldrslt {\cs37\ul\cf2 setGain()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   351 \{\par
  352 \par
  353 #if DEBUG == 1 \par
  354 \par
  355     Serial.println( F("Entering Irene3000.readButton()" ) );\par
  356     Serial.println();\par
  357 \par
  358 #endif \par
  359 \par
  360     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHV" }{}}{\fldrslt {\cs37\ul\cf2 setGain}}}
(gain);\par
  361 \par
  362 #if DEBUG == 1\par
  363     \par
  364     Serial.println( F("button value : ") );\par
  365     Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHJ" }{}}{\fldrslt {\cs37\ul\cf2 ads}}}
.readADC_SingleEnded({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHW" }{}}{\fldrslt {\cs37\ul\cf2 button}}}
) );\par
  366 \par
  367 #endif \par
  368 \par
  369     return( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHJ" }{}}{\fldrslt {\cs37\ul\cf2 ads}}}
.readADC_SingleEnded({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHW" }{}}{\fldrslt {\cs37\ul\cf2 button}}}
) );\par
  370     \par
  371 \}\par
}
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classIrene3000_ae0e0a5b773c3625b44c1d113c76a1540_cgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v readPh\:Irene3000}
{\xe \v Irene3000\:readPh}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Irene3000::readPh (adsGain_t  {\i gain})}}
\par
{\bkmkstart AAAAAAAAHP}
{\bkmkend AAAAAAAAHP}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Irene3000::readPh(gain): This method is provided to read the PH probe note that for the best results, PH must be correlated to Temperature.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid the PH probe value \par
}}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALH" }{}}{\fldrslt {\cs37\ul\cf2 431}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALC" }{}}{\fldrslt {\cs37\ul\cf2 irene3000.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALG" }{}}{\fldrslt {\cs37\ul\cf2 ADC_MAXIMUM_VALUE}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATB" }{}}{\fldrslt {\cs37\ul\cf2 ads}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATD" }{}}{\fldrslt {\cs37\ul\cf2 opampGain}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIB" }{}}{\fldrslt {\cs37\ul\cf2 params}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALM" }{}}{\fldrslt {\cs37\ul\cf2 ph}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATE" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::parameters_T::pH7Cal}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATF" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::parameters_T::pHStep}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATH" }{}}{\fldrslt {\cs37\ul\cf2 setGain()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATG" }{}}{\fldrslt {\cs37\ul\cf2 vRef}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPF" }{}}{\fldrslt {\cs37\ul\cf2 read()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   432 \{\par
  433 \par
  434 #if DEBUG == 1 \par
  435 \par
  436     Serial.println( F("Entering Irene3000.readPh()") );\par
  437     Serial.println();\par
  438 \par
  439 #endif \par
  440 \par
  441     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHV" }{}}{\fldrslt {\cs37\ul\cf2 setGain}}}
(gain);\par
  442 \par
  443     double Voltage =  gain * ( {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHJ" }{}}{\fldrslt {\cs37\ul\cf2 ads}}}
.readADC_SingleEnded({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHY" }{}}{\fldrslt {\cs37\ul\cf2 ph}}}
) ) / {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHZ" }{}}{\fldrslt {\cs37\ul\cf2 ADC_MAXIMUM_VALUE}}}
;\par
  444 \par
  445     float miliVolts = Voltage * 1000;\par
  446     float temporary = (((({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIA" }{}}{\fldrslt {\cs37\ul\cf2 vRef}}}
 * (float){\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIB" }{}}{\fldrslt {\cs37\ul\cf2 params}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIC" }{}}{\fldrslt {\cs37\ul\cf2 pH7Cal}}}
) / 32767) * 1000) - miliVolts) / {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAID" }{}}{\fldrslt {\cs37\ul\cf2 opampGain}}}
;\par
  447 \par
  448 #if DEBUG == 1 \par
  449 \par
  450     Serial.println( F("ph is : ") );\par
  451     Serial.println( 7 - (temporary / {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIB" }{}}{\fldrslt {\cs37\ul\cf2 params}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIE" }{}}{\fldrslt {\cs37\ul\cf2 pHStep}}}
) ) ;\par
  452 \par
  453 #endif \par
  454 \par
  455     return( 7 - (temporary / {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIB" }{}}{\fldrslt {\cs37\ul\cf2 params}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIE" }{}}{\fldrslt {\cs37\ul\cf2 pHStep}}}
) );\par
  456 \par
  457 \}\par
}
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classIrene3000_abf3db725fabb0634ec889b32068a5eec_cgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classIrene3000_abf3db725fabb0634ec889b32068a5eec_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v readTemp\:Irene3000}
{\xe \v Irene3000\:readTemp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double Irene3000::readTemp (adsGain_t  {\i gain})}}
\par
{\bkmkstart AAAAAAAAHM}
{\bkmkend AAAAAAAAHM}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Irene3000::readTemp(gain): This method is provided to read the Temeperature probe\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid the Temperature probe value \par
}}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALR" }{}}{\fldrslt {\cs37\ul\cf2 466}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALC" }{}}{\fldrslt {\cs37\ul\cf2 irene3000.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATB" }{}}{\fldrslt {\cs37\ul\cf2 ads}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATH" }{}}{\fldrslt {\cs37\ul\cf2 setGain()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALP" }{}}{\fldrslt {\cs37\ul\cf2 temp}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALV" }{}}{\fldrslt {\cs37\ul\cf2 V_GAIN_8}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPF" }{}}{\fldrslt {\cs37\ul\cf2 read()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   467 \{\par
  468 \par
  469 #if DEBUG == 1 \par
  470 \par
  471     Serial.println( F("Entering Irene3000.readTemp()") );\par
  472     Serial.println();\par
  473 \par
  474 #endif\par
  475 \par
  476     const double A = 3.9083E-3;\par
  477     const double B = -5.775E-7;\par
  478     double T;\par
  479 \par
  480     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHV" }{}}{\fldrslt {\cs37\ul\cf2 setGain}}}
(gain);\par
  481     double adc0 = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHJ" }{}}{\fldrslt {\cs37\ul\cf2 ads}}}
.readADC_SingleEnded({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEZ" }{}}{\fldrslt {\cs37\ul\cf2 temp}}}
);\par
  482 \par
  483 \par
  484     double R = ( ( adc0 * {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIF" }{}}{\fldrslt {\cs37\ul\cf2 V_GAIN_8}}}
 ) / 0.095 ) / 1000 ;\par
  485 \par
  486     T = 0.0 - A;\par
  487     T += sqrt((A * A) - 4.0 * B * (1.0 - R));\par
  488     T /= (2.0 * B);\par
  489 \par
  490     if (T > 0 && T < 200) \par
  491     \{\par
  492 \par
  493     #if DEBUG == 1 \par
  494 \par
  495         Serial.print( F(" temperature : ") );\par
  496         Serial.println(T);\par
  497         Serial.println();\par
  498     \par
  499     #endif \par
  500         if(isnan(T))\par
  501         \{\par
  502             return(-300);           \par
  503         \}\par
  504 \par
  505         return T;\par
  506     \}\par
  507     else \par
  508     \{\par
  509         T = 0.0 - A;\par
  510         T -= sqrt((A * A) - 4.0 * B * (1.0 - R));\par
  511         T /= (2.0 * B);\par
  512     \par
  513     #if DEBUG == 1 \par
  514     \par
  515         Serial.println( F("temperature : ") );\par
  516         Serial.println(T);\par
  517         Serial.println();\par
  518     \par
  519     #endif\par
  520         if(isnan(T))\par
  521         \{\par
  522             return(-400);           \par
  523         \}\par
  524 \par
  525         return T;\par
  526     \}\par
  527 \par
  528 \}\par
}
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classIrene3000_a94ad40f281d83ad1be20bf1edd6fe802_cgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classIrene3000_a94ad40f281d83ad1be20bf1edd6fe802_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v resetParams\:Irene3000}
{\xe \v Irene3000\:resetParams}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Irene3000::resetParams (void )}}
\par
{\bkmkstart AAAAAAAAIK}
{\bkmkend AAAAAAAAIK}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIK" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::resetParams()}}}: This method is provided to reset the PH configuration, assuming Ideal configuration \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALX" }{}}{\fldrslt {\cs37\ul\cf2 606}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALC" }{}}{\fldrslt {\cs37\ul\cf2 irene3000.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIB" }{}}{\fldrslt {\cs37\ul\cf2 params}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATE" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::parameters_T::pH4Cal}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATE" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::parameters_T::pH7Cal}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATF" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::parameters_T::pHStep}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALW" }{}}{\fldrslt {\cs37\ul\cf2 Write_Check}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATM" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::parameters_T::WriteCheck}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   607 \{\par
  608 \par
  609 #if DEBUG == 1 \par
  610 \par
  611     Serial.println( F("Entering Irene3000.resetParams()") );\par
  612     Serial.println();\par
  613 \par
  614 #endif \par
  615 \par
  616     //Restore to default set of parameters!\par
  617     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIB" }{}}{\fldrslt {\cs37\ul\cf2 params}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIL" }{}}{\fldrslt {\cs37\ul\cf2 WriteCheck}}}
 = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIM" }{}}{\fldrslt {\cs37\ul\cf2 Write_Check}}}
;\par
  618     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIB" }{}}{\fldrslt {\cs37\ul\cf2 params}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIC" }{}}{\fldrslt {\cs37\ul\cf2 pH7Cal}}}
 = 16384; //assume ideal probe and amp conditions 1/2 of 4096\par
  619     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIB" }{}}{\fldrslt {\cs37\ul\cf2 params}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIJ" }{}}{\fldrslt {\cs37\ul\cf2 pH4Cal}}}
 = 8192; //using ideal probe slope we end up this many 12bit units away on the 4 scale\par
  620     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIB" }{}}{\fldrslt {\cs37\ul\cf2 params}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIE" }{}}{\fldrslt {\cs37\ul\cf2 pHStep}}}
 = 59.16;//ideal probe slope\par
  621 \par
  622 \par
  623 \}\par
}
}
{\xe \v setGain\:Irene3000}
{\xe \v Irene3000\:setGain}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Irene3000::setGain (adsGain_t  {\i gain})}}
\par
{\bkmkstart AAAAAAAAHV}
{\bkmkend AAAAAAAAHV}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Irene3000::setGain(gain): This method is provided to set the ADS chip gain \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATH" }{}}{\fldrslt {\cs37\ul\cf2 378}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALC" }{}}{\fldrslt {\cs37\ul\cf2 irene3000.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATB" }{}}{\fldrslt {\cs37\ul\cf2 ads}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALN" }{}}{\fldrslt {\cs37\ul\cf2 calibratepH4()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALO" }{}}{\fldrslt {\cs37\ul\cf2 calibratepH7()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALL" }{}}{\fldrslt {\cs37\ul\cf2 readADSChannel2()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALJ" }{}}{\fldrslt {\cs37\ul\cf2 readButton()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALH" }{}}{\fldrslt {\cs37\ul\cf2 readPh()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALR" }{}}{\fldrslt {\cs37\ul\cf2 readTemp()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   379 \{\par
  380 \par
  381 #if DEBUG == 1  \par
  382 \par
  383     Serial.println( F("Entering Irene3000.setGain()") );\par
  384     Serial.println();\par
  385 \par
  386 #endif\par
  387 \par
  388     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHJ" }{}}{\fldrslt {\cs37\ul\cf2 ads}}}
.setGain(gain);\par
  389 \}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classIrene3000_aff7c5da186b388e7272e63ff88a20c34_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v adc2\:Irene3000}
{\xe \v Irene3000\:adc2}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
struct {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIO" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::state}}}
 Irene3000::adc2{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAHQ}
{\bkmkend AAAAAAAAHQ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMW" }{}}{\fldrslt {\cs37\ul\cf2 config()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANP" }{}}{\fldrslt {\cs37\ul\cf2 printConf()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPF" }{}}{\fldrslt {\cs37\ul\cf2 read()}}}
.}\par
}
{\xe \v ads\:Irene3000}
{\xe \v Irene3000\:ads}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Adafruit_ADS1115 Irene3000::ads{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAHJ}
{\bkmkend AAAAAAAAHJ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATB" }{}}{\fldrslt {\cs37\ul\cf2 70}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALF" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMP" }{}}{\fldrslt {\cs37\ul\cf2 begin()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALN" }{}}{\fldrslt {\cs37\ul\cf2 calibratepH4()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALO" }{}}{\fldrslt {\cs37\ul\cf2 calibratepH7()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALL" }{}}{\fldrslt {\cs37\ul\cf2 readADSChannel2()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALJ" }{}}{\fldrslt {\cs37\ul\cf2 readButton()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALH" }{}}{\fldrslt {\cs37\ul\cf2 readPh()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALR" }{}}{\fldrslt {\cs37\ul\cf2 readTemp()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATH" }{}}{\fldrslt {\cs37\ul\cf2 setGain()}}}
.}\par
}
{\xe \v opampGain\:Irene3000}
{\xe \v Irene3000\:opampGain}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const float Irene3000::opampGain = 5.25{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAID}
{\bkmkend AAAAAAAAID}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATD" }{}}{\fldrslt {\cs37\ul\cf2 89}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALF" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATC" }{}}{\fldrslt {\cs37\ul\cf2 calcpHSlope()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALH" }{}}{\fldrslt {\cs37\ul\cf2 readPh()}}}
.}\par
}
{\xe \v params\:Irene3000}
{\xe \v Irene3000\:params}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
struct {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIN" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::parameters_T}}}
 Irene3000::params{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAIB}
{\bkmkend AAAAAAAAIB}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATC" }{}}{\fldrslt {\cs37\ul\cf2 calcpHSlope()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALN" }{}}{\fldrslt {\cs37\ul\cf2 calibratepH4()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALO" }{}}{\fldrslt {\cs37\ul\cf2 calibratepH7()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALH" }{}}{\fldrslt {\cs37\ul\cf2 readPh()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALX" }{}}{\fldrslt {\cs37\ul\cf2 resetParams()}}}
.}\par
}
{\xe \v phProbe\:Irene3000}
{\xe \v Irene3000\:phProbe}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
struct {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIO" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::state}}}
  Irene3000::phProbe{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAHO}
{\bkmkend AAAAAAAAHO}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMW" }{}}{\fldrslt {\cs37\ul\cf2 config()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANP" }{}}{\fldrslt {\cs37\ul\cf2 printConf()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPF" }{}}{\fldrslt {\cs37\ul\cf2 read()}}}
.}\par
}
{\xe \v vRef\:Irene3000}
{\xe \v Irene3000\:vRef}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const float Irene3000::vRef = 1.024{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAIA}
{\bkmkend AAAAAAAAIA}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATG" }{}}{\fldrslt {\cs37\ul\cf2 87}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALF" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATC" }{}}{\fldrslt {\cs37\ul\cf2 calcpHSlope()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALH" }{}}{\fldrslt {\cs37\ul\cf2 readPh()}}}
.}\par
}
{\xe \v waterTemp\:Irene3000}
{\xe \v Irene3000\:waterTemp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
struct {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIO" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::state}}}
  Irene3000::waterTemp{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAHK}
{\bkmkend AAAAAAAAHK}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMW" }{}}{\fldrslt {\cs37\ul\cf2 config()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANP" }{}}{\fldrslt {\cs37\ul\cf2 printConf()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPF" }{}}{\fldrslt {\cs37\ul\cf2 read()}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADI" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000.h}}}
\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKZ" }{}}{\fldrslt {\cs37\ul\cf2 irene3000.cpp}}}
\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Jetpack Class Reference\par \pard\plain 
{\tc\tcl2 \v Jetpack}
{\xe \v Jetpack}
{\bkmkstart AAAAAAAADS}
{\bkmkend AAAAAAAADS}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class manages the {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADS" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack}}} shield. }}\par
{
{\f2 #include <Jetpack.h>}}\par
Collaboration diagram for Jetpack:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classJetpack__coll__graph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIV" }{}}{\fldrslt {\cs37\ul\cf2 state}}}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAU" }{}}{\fldrslt {\cs37\ul\cf2 begin}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIS" }{}}{\fldrslt {\cs37\ul\cf2 write}}}
 (byte {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIT" }{}}{\fldrslt {\cs37\ul\cf2 action}}}
)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIU" }{}}{\fldrslt {\cs37\ul\cf2 writeBit}}}
 (byte pin, bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIV" }{}}{\fldrslt {\cs37\ul\cf2 state}}}
)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACH" }{}}{\fldrslt {\cs37\ul\cf2 doAction}}}
 (const char *data)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAT" }{}}{\fldrslt {\cs37\ul\cf2 config}}}
 ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAV" }{}}{\fldrslt {\cs37\ul\cf2 printConf}}}
 ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
byte {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIT" }{}}{\fldrslt {\cs37\ul\cf2 action}}}
 = B00000000\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIV" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack::state}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
 [8]\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIR" }{}}{\fldrslt {\cs37\ul\cf2 clockPin}}}
 = 4\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIQ" }{}}{\fldrslt {\cs37\ul\cf2 dataPin}}}
 = 15\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIP" }{}}{\fldrslt {\cs37\ul\cf2 EnI2C}}}
 =5\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class manages the {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADS" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack}}} shield. \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATP" }{}}{\fldrslt {\cs37\ul\cf2 21}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMC" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack.h}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v begin\:Jetpack}
{\xe \v Jetpack\:begin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Jetpack::begin (void )}}
\par
{\bkmkstart AAAAAAAAAU}
{\bkmkend AAAAAAAAAU}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAU" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack::begin()}}}: This method is provided to initialise the pin that control the {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADS" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack}}} shield \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMK" }{}}{\fldrslt {\cs37\ul\cf2 32}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMA" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATQ" }{}}{\fldrslt {\cs37\ul\cf2 clockPin}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATR" }{}}{\fldrslt {\cs37\ul\cf2 dataPin}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATS" }{}}{\fldrslt {\cs37\ul\cf2 EnI2C}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMJ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::begin()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    33 \{\par
   34 \par
   35 #if DEBUG == 1 \par
   36  \par
   37     Serial.println( F("Entering Jetpack.begin() ") );\par
   38     Serial.println();\par
   39 \par
   40 #endif\par
   41 \par
   42     pinMode({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIP" }{}}{\fldrslt {\cs37\ul\cf2 EnI2C}}}
,OUTPUT);\par
   43     pinMode({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIQ" }{}}{\fldrslt {\cs37\ul\cf2 dataPin}}}
,OUTPUT);\par
   44     pinMode({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIR" }{}}{\fldrslt {\cs37\ul\cf2 clockPin}}}
,OUTPUT);\par
   45     \par
   46     \par
   47 \par
   48 \}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classJetpack_a5a53e1ebf7aaf3bf3e0d37ea64ca09a7_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v config\:Jetpack}
{\xe \v Jetpack\:config}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Jetpack::config ()}}
\par
{\bkmkstart AAAAAAAAAT}
{\bkmkend AAAAAAAAAT}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAT" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack::config()}}}: This method is provided to configure the {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADS" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack}}} with a configuration file\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid true if successful,false otherwise \par
}}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMR" }{}}{\fldrslt {\cs37\ul\cf2 356}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMA" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATT" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack::state::actif}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATU" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack::state::high}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATV" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack::state::inverted}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATW" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack::state::low}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATX" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack::state::temporal}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATY" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack::state::type}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMJ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::begin()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   357 \{\par
  358 \par
  359 #if DEBUG == 1 \par
  360 \par
  361     Serial.println( F("Entering Jetpack.config() ") );\par
  362     Serial.println();\par
  363 \par
  364 #endif\par
  365 \par
  366     File jetPackConfig = SPIFFS.open("/jetPackConfig.json", "r");\par
  367 \par
  368     if (!jetPackConfig) \par
  369     \{\par
  370 \par
  371     #if DEBUG == 1 \par
  372 \par
  373         Serial.println( F("failed to read /jetPackConfig.json ") );\par
  374         Serial.println();\par
  375 \par
  376     #endif\par
  377 \par
  378         return(false);\par
  379     \}\par
  380     else\par
  381     \{\par
  382         size_t size = jetPackConfig.size();\par
  383         // Allocate a buffer to store contents of the file.\par
  384         std::unique_ptr<char[]> buf(new char[size]);\par
  385 \par
  386         jetPackConfig.readBytes(buf.get(), size);\par
  387         DynamicJsonBuffer jsonBuffer;\par
  388         JsonObject& json = jsonBuffer.parseObject(buf.get());\par
  389         if (!json.success()) \par
  390         \{\par
  391         \par
  392         #if DEBUG == 1 \par
  393 \par
  394             Serial.println( F("failed to parse jetpack config json from file ") );\par
  395             Serial.println();\par
  396 \par
  397         #endif\par
  398 \par
  399             return(false);\par
  400         \} \par
  401         else\par
  402         \{ \par
  403         \par
  404         #if DEBUG == 1 \par
  405 \par
  406             Serial.println( F("read configuration file : ") );\par
  407             json.printTo(Serial);\par
  408             Serial.println();\par
  409 \par
  410             Serial.print(F("jsonBuffer size: "));\par
  411             Serial.println(jsonBuffer.size());\par
  412             Serial.println();\par
  413 \par
  414         \par
  415         #endif\par
  416   \par
  417             for(int i=0;i<8;i++)\par
  418             \{   \par
  419                 if(json[String("Act")+String(i)].success())\par
  420                 \{\par
  421                     if(json[String("Act")+String(i)]["actif"].success() )\par
  422                     \{\par
  423                         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIX" }{}}{\fldrslt {\cs37\ul\cf2 actif}}}
=json[String("Act")+String(i)]["actif"];\par
  424                     \}\par
  425                     else\par
  426                     \{\par
  427                         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIX" }{}}{\fldrslt {\cs37\ul\cf2 actif}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIX" }{}}{\fldrslt {\cs37\ul\cf2 actif}}}
;\par
  428                     \}\par
  429                     json[String("Act")+String(i)]["actif"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIX" }{}}{\fldrslt {\cs37\ul\cf2 actif}}}
;\par
  430 \par
  431 \par
  432                     if(json[String("Act")+String(i)]["low"].success() )\par
  433                     \{                   \par
  434                         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJA" }{}}{\fldrslt {\cs37\ul\cf2 low}}}
=json[String("Act")+String(i)]["low"];\par
  435                     \}\par
  436                     else\par
  437                     \{\par
  438                         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJA" }{}}{\fldrslt {\cs37\ul\cf2 low}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJA" }{}}{\fldrslt {\cs37\ul\cf2 low}}}
;                    \par
  439                     \}\par
  440                     json[String("Act")+String(i)]["low"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJA" }{}}{\fldrslt {\cs37\ul\cf2 low}}}
;\par
  441 \par
  442                 \par
  443                     if(json[String("Act")+String(i)]["high"].success() )\par
  444                     \{               \par
  445                         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJB" }{}}{\fldrslt {\cs37\ul\cf2 high}}}
=json[String("Act")+String(i)]["high"];\par
  446                     \}\par
  447                     else\par
  448                     \{\par
  449                         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJB" }{}}{\fldrslt {\cs37\ul\cf2 high}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJB" }{}}{\fldrslt {\cs37\ul\cf2 high}}}
;\par
  450                     \}\par
  451                     json[String("Act")+String(i)]["high"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJB" }{}}{\fldrslt {\cs37\ul\cf2 high}}}
;\par
  452 \par
  453                 \par
  454                     if(json[String("Act")+String(i)]["type"].success() )\par
  455                     \{               \par
  456                         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJC" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
=String( json[String("Act")+String(i)]["type"].as<const char*>() ); \par
  457                     \}\par
  458                     else\par
  459                     \{\par
  460                         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJC" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJC" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
;\par
  461                     \}\par
  462                     json[String("Act")+String(i)]["type"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJC" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
.c_str();\par
  463 \par
  464 \par
  465                     if(json[String("Act")+String(i)]["temporal"].success() )\par
  466                     \{\par
  467                         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJD" }{}}{\fldrslt {\cs37\ul\cf2 temporal}}}
=json[String("Act")+String(i)]["temporal"];                                                     \par
  468                     \}\par
  469                     else\par
  470                     \{\par
  471                         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJD" }{}}{\fldrslt {\cs37\ul\cf2 temporal}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJD" }{}}{\fldrslt {\cs37\ul\cf2 temporal}}}
; \par
  472                     \}   \par
  473                     json[String("Act")+String(i)]["temporal"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJD" }{}}{\fldrslt {\cs37\ul\cf2 temporal}}}
;\par
  474 \par
  475                     \par
  476                     if(json[String("Act")+String(i)]["inverted"].success() )\par
  477                     \{\par
  478                         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJE" }{}}{\fldrslt {\cs37\ul\cf2 inverted}}}
=json[String("Act")+String(i)]["inverted"];                                                     \par
  479                     \}\par
  480                     else\par
  481                     \{\par
  482                         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJE" }{}}{\fldrslt {\cs37\ul\cf2 inverted}}}
=json[String("Act")+String(i)]["inverted"]; \par
  483                     \}   \par
  484                     json[String("Act")+String(i)]["inverted"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJE" }{}}{\fldrslt {\cs37\ul\cf2 inverted}}}
;\par
  485 \par
  486                     \par
  487                      \par
  488                 \}\par
  489                 else\par
  490                 \{\par
  491                     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i];\par
  492                 \}\par
  493                 \par
  494                 json[String("Act")+String(i)]["actif"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIX" }{}}{\fldrslt {\cs37\ul\cf2 actif}}}
;\par
  495                 json[String("Act")+String(i)]["low"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJA" }{}}{\fldrslt {\cs37\ul\cf2 low}}}
;\par
  496                 json[String("Act")+String(i)]["high"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJB" }{}}{\fldrslt {\cs37\ul\cf2 high}}}
;\par
  497                 json[String("Act")+String(i)]["type"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJC" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
;\par
  498                 json[String("Act")+String(i)]["temporal"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJD" }{}}{\fldrslt {\cs37\ul\cf2 temporal}}}
;\par
  499                 json[String("Act")+String(i)]["inverted"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJE" }{}}{\fldrslt {\cs37\ul\cf2 inverted}}}
; \par
  500             \}\par
  501             \par
  502 \par
  503             jetPackConfig.close();          \par
  504             jetPackConfig = SPIFFS.open("/jetPackConfig.json", "w");            \par
  505             if(!jetPackConfig)\par
  506             \{\par
  507             \par
  508             #if DEBUG == 1 \par
  509 \par
  510                 Serial.println( F("failed to write to /jetPackConfig.json ") );\par
  511                 Serial.println();\par
  512             \par
  513             #endif\par
  514                 \par
  515                 return(false);          \par
  516             \}  \par
  517 \par
  518             json.printTo(jetPackConfig);\par
  519             jetPackConfig.close();\par
  520 \par
  521         #if DEBUG == 1 \par
  522             \par
  523             Serial.println(F("saved configuration : "));\par
  524             json.printTo(Serial );\par
  525             Serial.println();       \par
  526         \par
  527         #endif\par
  528 \par
  529             return(true); \par
  530         \}\par
  531     \}   \par
  532     \par
  533 \par
  534 \}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classJetpack_ab065ee83e244265a2223a22f3ee4a719_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v doAction\:Jetpack}
{\xe \v Jetpack\:doAction}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Jetpack::doAction (const char *  {\i data})}}
\par
{\bkmkstart AAAAAAAACH}
{\bkmkend AAAAAAAACH}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Jetpack::doAction(sensor data ): This method is provided to automate the {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADS" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack}}}. exemple: initial state: current Temperature = 23 \'B0C actors[0].actif=1 actors[0].low=25 \'B0C actors[0].high=30 \'B0C actors[0].type="Temperature"\par
condition verified: root["Temperature"] < actors[0].low\par
action: invert the state of actors[0]: bitWrite( action,0,!( bitRead ( action,0 ) ) ) write(action) \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAON" }{}}{\fldrslt {\cs37\ul\cf2 134}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMA" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATT" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack::state::actif}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATZ" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack::state::actifTime}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUA" }{}}{\fldrslt {\cs37\ul\cf2 action}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUB" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack::state::inactifTime}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUC" }{}}{\fldrslt {\cs37\ul\cf2 write()}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOL" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::offLineMode()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOK" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::onLineMode()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   135 \{\par
  136 \par
  137 #if DEBUG == 1 \par
  138 \par
  139     Serial.println( F("Entering Jetpack.doAction()") );\par
  140     Serial.println();\par
  141 \par
  142     Serial.println( F("input data is :") );\par
  143     Serial.println(data);\par
  144     Serial.println();\par
  145 \par
  146 #endif \par
  147 \par
  148     DynamicJsonBuffer jsonBuffer;\par
  149     JsonObject& root = jsonBuffer.parseObject(data);\par
  150     \par
  151     if (!root.success()) \par
  152     \{\par
  153     \par
  154     #if DEBUG == 1 \par
  155 \par
  156         Serial.println( F("failed to parse json object ") );\par
  157         Serial.println();\par
  158     \par
  159     #endif \par
  160 \par
  161     \}\par
  162     else\par
  163     \{\par
  164     \par
  165     #if DEBUG == 1 \par
  166 \par
  167         Serial.println( F("created Json object :") );\par
  168         root.printTo(Serial);\par
  169         Serial.println();\par
  170 \par
  171         Serial.print(F("jsonBuffer size: "));\par
  172         Serial.println(jsonBuffer.size());\par
  173         Serial.println();\par
  174 \par
  175     \par
  176     #endif \par
  177 \par
  178         //invert the current action state for each actor\par
  179         //if the value is outside the limits\par
  180         for(int i=0;i<8;i++)\par
  181         \{\par
  182             //check if the actor is actif \par
  183             if(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].actif==1)\par
  184             \{   \par
  185                 //if the actor is not temporal\par
  186                 if( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].temporal==0 ) \par
  187                 \{   \par
  188                     //regular actor\par
  189                     if( (this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].inverted) == 0 )\par
  190                     \{\par
  191                         //measure >= high limit : stop actor\par
  192                         if( ( root[this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].type] ) >= ( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].high ) )    \par
  193                         \{   \par
  194                             bitWrite( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIT" }{}}{\fldrslt {\cs37\ul\cf2 action}}}
 , i , 0 ) ;  \par
  195                         \}\par
  196                         //measure <= low limit : start actor\par
  197                         else if( ( root[ this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].type ] ) <= ( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].low ) )\par
  198                         \{\par
  199                             bitWrite( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIT" }{}}{\fldrslt {\cs37\ul\cf2 action}}}
 , i , 1 ) ;                  \par
  200                         \}\par
  201                     \}\par
  202                     //inverted actor\par
  203                     else if( (this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].inverted) == 1 )\par
  204                     \{\par
  205                         //measure >= high limit : start actor\par
  206                         if( ( root[this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].type] ) >= ( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].high ) )    \par
  207                         \{   \par
  208                             bitWrite( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIT" }{}}{\fldrslt {\cs37\ul\cf2 action}}}
 , i , 1 ) ;  \par
  209                         \}\par
  210                         //measure <= low limit : stop actor\par
  211                         else if( ( root[ this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].type ] ) <= ( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].low ) )\par
  212                         \{\par
  213                             bitWrite( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIT" }{}}{\fldrslt {\cs37\ul\cf2 action}}}
 , i , 0 ) ;                  \par
  214                         \}\par
  215 \par
  216                     \par
  217                     \}\par
  218                 \}\par
  219 \par
  220                 //if the actor is temporal\par
  221                 else\par
  222                 \{\par
  223                     //actor of type hour\par
  224                     if( ( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].type ) == ( "hour" ) )    \par
  225                     \{\par
  226                     \par
  227                     #if DEBUG == 1\par
  228                         \par
  229                         Serial.println("hour actor ");\par
  230                         Serial.println(i);\par
  231                         Serial.println();\par
  232                     #endif\par
  233 \par
  234                         //time >= high : stop actor\par
  235                         if( ( root[this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].type] ) >= ( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].low ) )     \par
  236                         \{\par
  237                         \par
  238                         #if DEBUG == 1 \par
  239                             \par
  240                             Serial.print("deactive ");\par
  241                             Serial.println(i);\par
  242                         \par
  243                         #endif  \par
  244                             bitWrite( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIT" }{}}{\fldrslt {\cs37\ul\cf2 action}}}
 , i , 0 ) ;  \par
  245                         \}\par
  246                         //time >= low : start actor\par
  247                         else if( ( root[ this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].type ] ) >= ( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].high ) )\par
  248                         \{\par
  249                         \par
  250                         #if DEBUG == 1 \par
  251                         \par
  252                             Serial.print("active ");\par
  253                             Serial.println(i);\par
  254                         \par
  255                         #endif\par
  256                             bitWrite( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIT" }{}}{\fldrslt {\cs37\ul\cf2 action}}}
 , i , 1 ) ;                  \par
  257                         \}\par
  258                         \par
  259                     \}\par
  260                     //actor not of type hour\par
  261                     else if( ( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].type ) != ( "hour" ) )    \par
  262                     \{\par
  263                     \par
  264                     #if DEBUG == 1 \par
  265                         \par
  266                         Serial.println("not hour temporal actor");\par
  267                         Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].type);\par
  268                         Serial.println(i);\par
  269                         Serial.println("actifTime : ");\par
  270                         Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].actifTime);\par
  271                         Serial.println("millis : ");\par
  272                         Serial.println(millis() );\par
  273                         Serial.println(" high : ");\par
  274                         Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].high );\par
  275                         Serial.println();\par
  276                     \par
  277                     #endif\par
  278                         //if the actor was actif for highTime or more :\par
  279                         if( ( millis()- this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].actifTime  ) >= ( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].high  ) )\par
  280                         \{\par
  281                             //stop the actor\par
  282                             bitWrite( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIT" }{}}{\fldrslt {\cs37\ul\cf2 action}}}
 , i , 0) ;\par
  283 \par
  284                             //make the actor inactif:\par
  285                             this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIX" }{}}{\fldrslt {\cs37\ul\cf2 actif}}}
=0;\par
  286 \par
  287                             //start the low timer\par
  288                             this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIY" }{}}{\fldrslt {\cs37\ul\cf2 inactifTime}}}
=millis();               \par
  289                         \}\par
  290                     \}           \par
  291                             \par
  292                 \}\par
  293             \}\par
  294             //check if actor is inactif\par
  295             else if(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].actif==0)\par
  296             \{   //check if actor is temporal\par
  297                 if(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].temporal==1)\par
  298                 \{\par
  299                     //if the actor was inactif for lowTime or more :\par
  300                     if( ( millis() - this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].inactifTime ) >= ( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].low  ) )\par
  301                     \{\par
  302                         //start the actor\par
  303                         bitWrite( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIT" }{}}{\fldrslt {\cs37\ul\cf2 action}}}
 , i , 1) ;\par
  304 \par
  305                         //make the actor actif:\par
  306                         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIX" }{}}{\fldrslt {\cs37\ul\cf2 actif}}}
=1;\par
  307 \par
  308                         //start the low timer\par
  309                         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIZ" }{}}{\fldrslt {\cs37\ul\cf2 actifTime}}}
=millis();\par
  310 \par
  311                     #if DEBUG == 1 \par
  312                         \par
  313                         Serial.println("inactif temporal actor");\par
  314                         Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].type);\par
  315                         Serial.print("temporal : ");\par
  316                         Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].temporal);\par
  317                         Serial.println(i);\par
  318                         Serial.println("inactifTime : ");\par
  319                         Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].inactifTime);\par
  320                         Serial.println("millis : ");\par
  321                         Serial.println(millis() );\par
  322                         Serial.println(" low : ");\par
  323                         Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].low );\par
  324                         Serial.println();\par
  325 \par
  326                         Serial.println();\par
  327                     \par
  328                     #endif\par
  329                 \par
  330                     \}           \par
  331             \par
  332                 \}\par
  333             \}\par
  334         \}\par
  335     \par
  336     #if DEBUG == 1 \par
  337 \par
  338         Serial.println( F("new action is : ") );\par
  339         Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIT" }{}}{\fldrslt {\cs37\ul\cf2 action}}}
,BIN);\par
  340         Serial.println();\par
  341     \par
  342     #endif \par
  343 \par
  344         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIS" }{}}{\fldrslt {\cs37\ul\cf2 write}}}
(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIT" }{}}{\fldrslt {\cs37\ul\cf2 action}}}
);\par
  345 \par
  346     \} \par
  347 \}\par
}
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classJetpack_a9e703197093094b963f9ad57817495b8_cgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classJetpack_a9e703197093094b963f9ad57817495b8_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v printConf\:Jetpack}
{\xe \v Jetpack\:printConf}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Jetpack::printConf ()}}
\par
{\bkmkstart AAAAAAAAAV}
{\bkmkend AAAAAAAAAV}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAV" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack::printConf()}}}: This method is provided to print the configuration to the Serial Monitor \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANK" }{}}{\fldrslt {\cs37\ul\cf2 542}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMA" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMJ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::begin()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   543 \{\par
  544 \par
  545 #if DEBUG == 1 \par
  546 \par
  547     Serial.println( F("Enter Jetpack.printConf() ") );\par
  548     Serial.println();\par
  549 \par
  550 #endif \par
  551     Serial.println( "Jetpack configuration " ) ;\par
  552  \par
  553         for(int i=0;i<8;i++)\par
  554     \{   \par
  555         Serial.print("actor N\'B0");\par
  556         Serial.print(i);\par
  557         Serial.print(" actif :");\par
  558         Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].actif);\par
  559 \par
  560         Serial.print("actor N\'B0");\par
  561         Serial.print(i);\par
  562         Serial.print(" low :");\par
  563         Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].low);\par
  564 \par
  565         Serial.print("actor N\'B0");\par
  566         Serial.print(i);\par
  567         Serial.print(" high :");\par
  568         Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].high);\par
  569 \par
  570         Serial.print("actor N\'B0");\par
  571         Serial.print(i);\par
  572         Serial.print(" type :");\par
  573         Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].type);\par
  574         \par
  575         Serial.print("actor N\'B0");\par
  576         Serial.print(i);\par
  577         Serial.print(" temporal :");\par
  578         Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].temporal);\par
  579 \par
  580         Serial.print("actor N\'B0");\par
  581         Serial.print(i);\par
  582         Serial.print(" inverted :");\par
  583         Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].inverted);\par
  584 \par
  585  \par
  586 \par
  587     \}\par
  588 \par
  589     Serial.println();\par
  590 \}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classJetpack_ac54a7bb4f9166bee32052253d9b1d306_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v write\:Jetpack}
{\xe \v Jetpack\:write}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Jetpack::write (byte  {\i action})}}
\par
{\bkmkstart AAAAAAAAIS}
{\bkmkend AAAAAAAAIS}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Jetpack::write(action): This method is provided to write the given action to the entire {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADS" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack}}} action is a Byte (8 bits ), each bit goes to an output. MSBFirst \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUC" }{}}{\fldrslt {\cs37\ul\cf2 59}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMA" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUA" }{}}{\fldrslt {\cs37\ul\cf2 action}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATQ" }{}}{\fldrslt {\cs37\ul\cf2 clockPin}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATR" }{}}{\fldrslt {\cs37\ul\cf2 dataPin}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATS" }{}}{\fldrslt {\cs37\ul\cf2 EnI2C}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAON" }{}}{\fldrslt {\cs37\ul\cf2 doAction()}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    60 \{\par
   61 \par
   62 #if DEBUG == 1\par
   63 \par
   64     Serial.println( F("Entering Jetpack.write()") );\par
   65     Serial.println();\par
   66 \par
   67     Serial.println( F("writing this action : ") );\par
   68     Serial.println({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIT" }{}}{\fldrslt {\cs37\ul\cf2 action}}}
,BIN);\par
   69     Serial.println();\par
   70 \par
   71 #endif \par
   72 \par
   73     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIT" }{}}{\fldrslt {\cs37\ul\cf2 action}}}
={\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIT" }{}}{\fldrslt {\cs37\ul\cf2 action}}}
;\par
   74 \par
   75     \par
   76     digitalWrite({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIP" }{}}{\fldrslt {\cs37\ul\cf2 EnI2C}}}
, LOW);\par
   77     \par
   78     shiftOut({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIQ" }{}}{\fldrslt {\cs37\ul\cf2 dataPin}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIR" }{}}{\fldrslt {\cs37\ul\cf2 clockPin}}}
, MSBFIRST, this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIT" }{}}{\fldrslt {\cs37\ul\cf2 action}}}
);\par
   79 \par
   80     digitalWrite({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIP" }{}}{\fldrslt {\cs37\ul\cf2 EnI2C}}}
, HIGH);\par
   81 \par
   82 \}   \par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classJetpack_a338f1af8cbc6504ac69b47c7328569b5_icgraph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v writeBit\:Jetpack}
{\xe \v Jetpack\:writeBit}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Jetpack::writeBit (byte  {\i pin}, bool  {\i state})}}
\par
{\bkmkstart AAAAAAAAIU}
{\bkmkend AAAAAAAAIU}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Jetpack::writeBit(pin,state): This method is provided to write the given state to the given pin \par
}{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUD" }{}}{\fldrslt {\cs37\ul\cf2 89}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMA" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack.cpp}}}
.}\par
{
References {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUA" }{}}{\fldrslt {\cs37\ul\cf2 action}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATQ" }{}}{\fldrslt {\cs37\ul\cf2 clockPin}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATR" }{}}{\fldrslt {\cs37\ul\cf2 dataPin}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATS" }{}}{\fldrslt {\cs37\ul\cf2 EnI2C}}}
.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    90 \{\par
   91 \par
   92 #if DEBUG == 1 \par
   93 \par
   94     Serial.println( F("Entering Jetpack.writeBit() ") );\par
   95 \par
   96     Serial.print( F("Writing ") );\par
   97     Serial.print(state);\par
   98 \par
   99     Serial.print( F("to pin N\'B0") );\par
  100     Serial.print(pin);\par
  101 \par
  102     Serial.println();\par
  103 \par
  104 #endif\par
  105 \par
  106     bitWrite(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIT" }{}}{\fldrslt {\cs37\ul\cf2 action}}}
, pin, state);\par
  107     digitalWrite({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIP" }{}}{\fldrslt {\cs37\ul\cf2 EnI2C}}}
, LOW);\par
  108     \par
  109     shiftOut({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIQ" }{}}{\fldrslt {\cs37\ul\cf2 dataPin}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIR" }{}}{\fldrslt {\cs37\ul\cf2 clockPin}}}
, MSBFIRST, this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIT" }{}}{\fldrslt {\cs37\ul\cf2 action}}}
);\par
  110 \par
  111     digitalWrite({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIP" }{}}{\fldrslt {\cs37\ul\cf2 EnI2C}}}
, HIGH);\par
  112 \par
  113 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v action\:Jetpack}
{\xe \v Jetpack\:action}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
byte Jetpack::action = B00000000{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAIT}
{\bkmkend AAAAAAAAIT}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUA" }{}}{\fldrslt {\cs37\ul\cf2 39}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMC" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAON" }{}}{\fldrslt {\cs37\ul\cf2 doAction()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUC" }{}}{\fldrslt {\cs37\ul\cf2 write()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUD" }{}}{\fldrslt {\cs37\ul\cf2 writeBit()}}}
.}\par
}
{\xe \v actors\:Jetpack}
{\xe \v Jetpack\:actors}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
struct {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIV" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack::state}}}
 Jetpack::actors[8]{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAIW}
{\bkmkend AAAAAAAAIW}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMR" }{}}{\fldrslt {\cs37\ul\cf2 config()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAON" }{}}{\fldrslt {\cs37\ul\cf2 doAction()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANK" }{}}{\fldrslt {\cs37\ul\cf2 printConf()}}}
.}\par
}
{\xe \v clockPin\:Jetpack}
{\xe \v Jetpack\:clockPin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const int Jetpack::clockPin = 4{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAIR}
{\bkmkend AAAAAAAAIR}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATQ" }{}}{\fldrslt {\cs37\ul\cf2 63}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMC" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMK" }{}}{\fldrslt {\cs37\ul\cf2 begin()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUC" }{}}{\fldrslt {\cs37\ul\cf2 write()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUD" }{}}{\fldrslt {\cs37\ul\cf2 writeBit()}}}
.}\par
}
{\xe \v dataPin\:Jetpack}
{\xe \v Jetpack\:dataPin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const int Jetpack::dataPin = 15{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAIQ}
{\bkmkend AAAAAAAAIQ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATR" }{}}{\fldrslt {\cs37\ul\cf2 65}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMC" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMK" }{}}{\fldrslt {\cs37\ul\cf2 begin()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUC" }{}}{\fldrslt {\cs37\ul\cf2 write()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUD" }{}}{\fldrslt {\cs37\ul\cf2 writeBit()}}}
.}\par
}
{\xe \v EnI2C\:Jetpack}
{\xe \v Jetpack\:EnI2C}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const int Jetpack::EnI2C =5{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAIP}
{\bkmkend AAAAAAAAIP}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATS" }{}}{\fldrslt {\cs37\ul\cf2 67}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMC" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMK" }{}}{\fldrslt {\cs37\ul\cf2 begin()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUC" }{}}{\fldrslt {\cs37\ul\cf2 write()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUD" }{}}{\fldrslt {\cs37\ul\cf2 writeBit()}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADH" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack.h}}}
\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALY" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack.cpp}}}
\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
CoolBoardSensors::lightActive Struct Reference\par \pard\plain 
{\tc\tcl2 \v CoolBoardSensors::lightActive}
{\xe \v CoolBoardSensors::lightActive}
{\bkmkstart AAAAAAAAEV}
{\bkmkend AAAAAAAAEV}
Collaboration diagram for CoolBoardSensors::lightActive:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structCoolBoardSensors_1_1lightActive__coll__graph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
byte {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEE" }{}}{\fldrslt {\cs37\ul\cf2 visible}}}
 =0\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
byte {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEF" }{}}{\fldrslt {\cs37\ul\cf2 ir}}}
 =0\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
byte {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEG" }{}}{\fldrslt {\cs37\ul\cf2 uv}}}
 =0\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 78}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJT" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors.h}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v ir\:CoolBoardSensors::lightActive}
{\xe \v CoolBoardSensors::lightActive\:ir}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
byte CoolBoardSensors::lightActive::ir =0}}
\par
{\bkmkstart AAAAAAAAEF}
{\bkmkend AAAAAAAAEF}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPT" }{}}{\fldrslt {\cs37\ul\cf2 81}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJT" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPR" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::allActive()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMX" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::config()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANQ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::printConf()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPE" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::read()}}}
.}\par
}
{\xe \v uv\:CoolBoardSensors::lightActive}
{\xe \v CoolBoardSensors::lightActive\:uv}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
byte CoolBoardSensors::lightActive::uv =0}}
\par
{\bkmkstart AAAAAAAAEG}
{\bkmkend AAAAAAAAEG}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPX" }{}}{\fldrslt {\cs37\ul\cf2 82}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJT" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPR" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::allActive()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMX" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::config()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANQ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::printConf()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPE" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::read()}}}
.}\par
}
{\xe \v visible\:CoolBoardSensors::lightActive}
{\xe \v CoolBoardSensors::lightActive\:visible}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
byte CoolBoardSensors::lightActive::visible =0}}
\par
{\bkmkstart AAAAAAAAEE}
{\bkmkend AAAAAAAAEE}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPZ" }{}}{\fldrslt {\cs37\ul\cf2 80}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJT" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPR" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::allActive()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMX" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::config()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANQ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::printConf()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPE" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::read()}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADD" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors.h}}}
\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Irene3000::parameters_T Struct Reference\par \pard\plain 
{\tc\tcl2 \v Irene3000::parameters_T}
{\xe \v Irene3000::parameters_T}
{\bkmkstart AAAAAAAAIN}
{\bkmkend AAAAAAAAIN}
Collaboration diagram for Irene3000::parameters_T:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structIrene3000_1_1parameters__T__coll__graph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIL" }{}}{\fldrslt {\cs37\ul\cf2 WriteCheck}}}
 =0\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIC" }{}}{\fldrslt {\cs37\ul\cf2 pH7Cal}}}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIJ" }{}}{\fldrslt {\cs37\ul\cf2 pH4Cal}}}
 =0\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIE" }{}}{\fldrslt {\cs37\ul\cf2 pHStep}}}
 =1\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATN" }{}}{\fldrslt {\cs37\ul\cf2 73}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALF" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000.h}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v pH4Cal\:Irene3000::parameters_T}
{\xe \v Irene3000::parameters_T\:pH4Cal}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Irene3000::parameters_T::pH4Cal =0}}
\par
{\bkmkstart AAAAAAAAIJ}
{\bkmkend AAAAAAAAIJ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATE" }{}}{\fldrslt {\cs37\ul\cf2 76}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALF" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATC" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::calcpHSlope()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALN" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::calibratepH4()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALX" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::resetParams()}}}
.}\par
}
{\xe \v pH7Cal\:Irene3000::parameters_T}
{\xe \v Irene3000::parameters_T\:pH7Cal}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Irene3000::parameters_T::pH7Cal}}
\par
{\bkmkstart AAAAAAAAIC}
{\bkmkend AAAAAAAAIC}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATE" }{}}{\fldrslt {\cs37\ul\cf2 76}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALF" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATC" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::calcpHSlope()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALO" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::calibratepH7()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALH" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::readPh()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALX" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::resetParams()}}}
.}\par
}
{\xe \v pHStep\:Irene3000::parameters_T}
{\xe \v Irene3000::parameters_T\:pHStep}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Irene3000::parameters_T::pHStep =1}}
\par
{\bkmkstart AAAAAAAAIE}
{\bkmkend AAAAAAAAIE}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATF" }{}}{\fldrslt {\cs37\ul\cf2 77}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALF" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATC" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::calcpHSlope()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALH" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::readPh()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALX" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::resetParams()}}}
.}\par
}
{\xe \v WriteCheck\:Irene3000::parameters_T}
{\xe \v Irene3000::parameters_T\:WriteCheck}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned int Irene3000::parameters_T::WriteCheck =0}}
\par
{\bkmkstart AAAAAAAAIL}
{\bkmkend AAAAAAAAIL}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATM" }{}}{\fldrslt {\cs37\ul\cf2 75}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALF" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALX" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::resetParams()}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADI" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000.h}}}
\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ExternalSensors::sensor Struct Reference\par \pard\plain 
{\tc\tcl2 \v ExternalSensors::sensor}
{\xe \v ExternalSensors::sensor}
{\bkmkstart AAAAAAAAHI}
{\bkmkend AAAAAAAAHI}
Collaboration diagram for ExternalSensors::sensor:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structExternalSensors_1_1sensor__coll__graph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHG" }{}}{\fldrslt {\cs37\ul\cf2 reference}}}
 =""\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHF" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
 =""\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHH" }{}}{\fldrslt {\cs37\ul\cf2 address}}}
 =0\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGJ" }{}}{\fldrslt {\cs37\ul\cf2 BaseExternalSensor}}}
 * {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHD" }{}}{\fldrslt {\cs37\ul\cf2 exSensor}}}
 =NULL\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASZ" }{}}{\fldrslt {\cs37\ul\cf2 39}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKY" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors.h}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v address\:ExternalSensors::sensor}
{\xe \v ExternalSensors::sensor\:address}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t ExternalSensors::sensor::address =0}}
\par
{\bkmkstart AAAAAAAAHH}
{\bkmkend AAAAAAAAHH}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASW" }{}}{\fldrslt {\cs37\ul\cf2 43}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKY" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMS" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors::config()}}}
.}\par
}
{\xe \v exSensor\:ExternalSensors::sensor}
{\xe \v ExternalSensors::sensor\:exSensor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGJ" }{}}{\fldrslt {\cs37\ul\cf2 BaseExternalSensor}}}
* ExternalSensors::sensor::exSensor =NULL}}
\par
{\bkmkstart AAAAAAAAHD}
{\bkmkend AAAAAAAAHD}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASU" }{}}{\fldrslt {\cs37\ul\cf2 44}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKY" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMG" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors::begin()}}}
.}\par
}
{\xe \v reference\:ExternalSensors::sensor}
{\xe \v ExternalSensors::sensor\:reference}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String ExternalSensors::sensor::reference =""}}
\par
{\bkmkstart AAAAAAAAHG}
{\bkmkend AAAAAAAAHG}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASX" }{}}{\fldrslt {\cs37\ul\cf2 41}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKY" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMS" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors::config()}}}
.}\par
}
{\xe \v type\:ExternalSensors::sensor}
{\xe \v ExternalSensors::sensor\:type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String ExternalSensors::sensor::type =""}}
\par
{\bkmkstart AAAAAAAAHF}
{\bkmkend AAAAAAAAHF}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASY" }{}}{\fldrslt {\cs37\ul\cf2 42}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKY" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMS" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors::config()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPD" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors::read()}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADJ" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors.h}}}
\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Irene3000::state Struct Reference\par \pard\plain 
{\tc\tcl2 \v Irene3000::state}
{\xe \v Irene3000::state}
{\bkmkstart AAAAAAAAIO}
{\bkmkend AAAAAAAAIO}
Collaboration diagram for Irene3000::state:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structIrene3000_1_1state__coll__graph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
byte {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHL" }{}}{\fldrslt {\cs37\ul\cf2 active}}}
 =0\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
adsGain_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHN" }{}}{\fldrslt {\cs37\ul\cf2 gain}}}
 =GAIN_ONE\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHR" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
 =""\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATO" }{}}{\fldrslt {\cs37\ul\cf2 80}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALF" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000.h}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v active\:Irene3000::state}
{\xe \v Irene3000::state\:active}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
byte Irene3000::state::active =0}}
\par
{\bkmkstart AAAAAAAAHL}
{\bkmkend AAAAAAAAHL}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATI" }{}}{\fldrslt {\cs37\ul\cf2 82}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALF" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMW" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::config()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANP" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::printConf()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPF" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::read()}}}
.}\par
}
{\xe \v gain\:Irene3000::state}
{\xe \v Irene3000::state\:gain}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
adsGain_t Irene3000::state::gain =GAIN_ONE}}
\par
{\bkmkstart AAAAAAAAHN}
{\bkmkend AAAAAAAAHN}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATJ" }{}}{\fldrslt {\cs37\ul\cf2 83}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALF" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMW" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::config()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANP" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::printConf()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPF" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::read()}}}
.}\par
}
{\xe \v type\:Irene3000::state}
{\xe \v Irene3000::state\:type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String Irene3000::state::type =""}}
\par
{\bkmkstart AAAAAAAAHR}
{\bkmkend AAAAAAAAHR}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATL" }{}}{\fldrslt {\cs37\ul\cf2 84}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALF" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMW" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::config()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANP" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::printConf()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPF" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::read()}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADI" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000.h}}}
\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Jetpack::state Struct Reference\par \pard\plain 
{\tc\tcl2 \v Jetpack::state}
{\xe \v Jetpack::state}
{\bkmkstart AAAAAAAAIV}
{\bkmkend AAAAAAAAIV}
Collaboration diagram for Jetpack::state:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structJetpack_1_1state__coll__graph.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJC" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIX" }{}}{\fldrslt {\cs37\ul\cf2 actif}}}
 =0\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJA" }{}}{\fldrslt {\cs37\ul\cf2 low}}}
 =0\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJB" }{}}{\fldrslt {\cs37\ul\cf2 high}}}
 =0\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJD" }{}}{\fldrslt {\cs37\ul\cf2 temporal}}}
 =0\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned long {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIZ" }{}}{\fldrslt {\cs37\ul\cf2 actifTime}}}
 =0\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned long {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIY" }{}}{\fldrslt {\cs37\ul\cf2 inactifTime}}}
 =0\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJE" }{}}{\fldrslt {\cs37\ul\cf2 inverted}}}
 =0\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUE" }{}}{\fldrslt {\cs37\ul\cf2 41}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMC" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack.h}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v actif\:Jetpack::state}
{\xe \v Jetpack::state\:actif}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Jetpack::state::actif =0}}
\par
{\bkmkstart AAAAAAAAIX}
{\bkmkend AAAAAAAAIX}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATT" }{}}{\fldrslt {\cs37\ul\cf2 45}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMC" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMR" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack::config()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAON" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack::doAction()}}}
.}\par
}
{\xe \v actifTime\:Jetpack::state}
{\xe \v Jetpack::state\:actifTime}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned long Jetpack::state::actifTime =0}}
\par
{\bkmkstart AAAAAAAAIZ}
{\bkmkend AAAAAAAAIZ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATZ" }{}}{\fldrslt {\cs37\ul\cf2 55}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMC" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAON" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack::doAction()}}}
.}\par
}
{\xe \v high\:Jetpack::state}
{\xe \v Jetpack::state\:high}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Jetpack::state::high =0}}
\par
{\bkmkstart AAAAAAAAJB}
{\bkmkend AAAAAAAAJB}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATU" }{}}{\fldrslt {\cs37\ul\cf2 50}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMC" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMR" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack::config()}}}
.}\par
}
{\xe \v inactifTime\:Jetpack::state}
{\xe \v Jetpack::state\:inactifTime}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned long Jetpack::state::inactifTime =0}}
\par
{\bkmkstart AAAAAAAAIY}
{\bkmkend AAAAAAAAIY}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUB" }{}}{\fldrslt {\cs37\ul\cf2 57}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMC" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAON" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack::doAction()}}}
.}\par
}
{\xe \v inverted\:Jetpack::state}
{\xe \v Jetpack::state\:inverted}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Jetpack::state::inverted =0}}
\par
{\bkmkstart AAAAAAAAJE}
{\bkmkend AAAAAAAAJE}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATV" }{}}{\fldrslt {\cs37\ul\cf2 59}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMC" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMR" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack::config()}}}
.}\par
}
{\xe \v low\:Jetpack::state}
{\xe \v Jetpack::state\:low}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Jetpack::state::low =0}}
\par
{\bkmkstart AAAAAAAAJA}
{\bkmkend AAAAAAAAJA}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATW" }{}}{\fldrslt {\cs37\ul\cf2 47}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMC" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMR" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack::config()}}}
.}\par
}
{\xe \v temporal\:Jetpack::state}
{\xe \v Jetpack::state\:temporal}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Jetpack::state::temporal =0}}
\par
{\bkmkstart AAAAAAAAJD}
{\bkmkend AAAAAAAAJD}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATX" }{}}{\fldrslt {\cs37\ul\cf2 53}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMC" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMR" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack::config()}}}
.}\par
}
{\xe \v type\:Jetpack::state}
{\xe \v Jetpack::state\:type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String Jetpack::state::type}}
\par
{\bkmkstart AAAAAAAAJC}
{\bkmkend AAAAAAAAJC}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATY" }{}}{\fldrslt {\cs37\ul\cf2 43}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMC" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMR" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack::config()}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADH" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack.h}}}
\par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Documentation{\tc \v File Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/CoolBoard.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v /home/ashiroji/Arduino/libraries/CoolBoard/CoolBoard.cpp}
{\xe \v /home/ashiroji/Arduino/libraries/CoolBoard/CoolBoard.cpp}
{\bkmkstart AAAAAAAAJF}
{\bkmkend AAAAAAAAJF}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADL" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard}}} Source file. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "FS.h"}\par
{\f2 #include "Arduino.h"}\par
{\f2 #include "CoolBoard.h"}\par
{\f2 #include "ArduinoJson.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for CoolBoard.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "CoolBoard_8cpp__incl.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJG" }{}}{\fldrslt {\cs37\ul\cf2 DEBUG}}}
\~ 1\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADL" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard}}} Source file. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid Mehdi Zemzem \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 1.0 \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Date:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 27/06/2017 \par
}}{
Definition in file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJH" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard.cpp}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v DEBUG\:CoolBoard.cpp}
{\xe \v CoolBoard.cpp\:DEBUG}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DEBUG\~ 1}}
\par
{\bkmkstart AAAAAAAAJG}
{\bkmkend AAAAAAAAJG}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJI" }{}}{\fldrslt {\cs37\ul\cf2 18}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJH" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard.cpp}}}
.}\par
}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/CoolBoard.cpp\par \pard\plain 
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     1 \par
   10 #include "FS.h"\par
   11 #include "Arduino.h"\par
   12 #include "{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAA" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard.h}}}
"\par
   13 #include "ArduinoJson.h"\par
   14 \par
   15 \par
   16 \par
   17 \par
   18 #define DEBUG 1 \par
   19 \par
   20 #ifndef DEBUG\par
   21 \par
   22 #define DEBUG 0\par
   23 \par
   24 #endif\par
   25 \par
   26 \par
   27 \par
   28 \par
   37 void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAB" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::begin}}}
()\par
   38 \{\par
   39 \par
   40 #if DEBUG == 1\par
   41 \par
   42     Serial.println( F("Starting the CoolBoard  ")  );\par
   43     Serial.println( F("Entering CoolBoard.begin() ")  );\par
   44     Serial.println();\par
   45 #endif  \par
   46     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAD" }{}}{\fldrslt {\cs37\ul\cf2 printConf}}}
();\par
   47     delay(100);\par
   48     \par
   49     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAE" }{}}{\fldrslt {\cs37\ul\cf2 write}}}
(255,128,0);//orange\par
   50     \par
   51     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAF" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardSensors}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAG" }{}}{\fldrslt {\cs37\ul\cf2 config}}}
();\par
   52     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAF" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardSensors}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAH" }{}}{\fldrslt {\cs37\ul\cf2 begin}}}
();\par
   53     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAF" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardSensors}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAI" }{}}{\fldrslt {\cs37\ul\cf2 printConf}}}
();\par
   54     delay(100);\par
   55     \par
   56     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAJ" }{}}{\fldrslt {\cs37\ul\cf2 wifiManager}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAK" }{}}{\fldrslt {\cs37\ul\cf2 config}}}
();\par
   57     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAJ" }{}}{\fldrslt {\cs37\ul\cf2 wifiManager}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAL" }{}}{\fldrslt {\cs37\ul\cf2 begin}}}
();\par
   58     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAJ" }{}}{\fldrslt {\cs37\ul\cf2 wifiManager}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAM" }{}}{\fldrslt {\cs37\ul\cf2 printConf}}}
();\par
   59     delay(100);\par
   60 \par
   61     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAN" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAO" }{}}{\fldrslt {\cs37\ul\cf2 config}}}
();\par
   62     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAN" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAP" }{}}{\fldrslt {\cs37\ul\cf2 begin}}}
();\par
   63     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAN" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAQ" }{}}{\fldrslt {\cs37\ul\cf2 printConf}}}
();\par
   64     delay(100);\par
   65 \par
   66     if ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAR" }{}}{\fldrslt {\cs37\ul\cf2 jetpackActive}}}
)\par
   67     \{\par
   68         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAS" }{}}{\fldrslt {\cs37\ul\cf2 jetPack}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAT" }{}}{\fldrslt {\cs37\ul\cf2 config}}}
();\par
   69         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAS" }{}}{\fldrslt {\cs37\ul\cf2 jetPack}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAU" }{}}{\fldrslt {\cs37\ul\cf2 begin}}}
();\par
   70         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAS" }{}}{\fldrslt {\cs37\ul\cf2 jetPack}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAV" }{}}{\fldrslt {\cs37\ul\cf2 printConf}}}
();\par
   71         delay(100);\par
   72     \}\par
   73 \par
   74     if ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAW" }{}}{\fldrslt {\cs37\ul\cf2 ireneActive}}}
)\par
   75     \{\par
   76         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAX" }{}}{\fldrslt {\cs37\ul\cf2 irene3000}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAY" }{}}{\fldrslt {\cs37\ul\cf2 config}}}
();\par
   77         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAX" }{}}{\fldrslt {\cs37\ul\cf2 irene3000}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAZ" }{}}{\fldrslt {\cs37\ul\cf2 begin}}}
();\par
   78         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAX" }{}}{\fldrslt {\cs37\ul\cf2 irene3000}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABA" }{}}{\fldrslt {\cs37\ul\cf2 printConf}}}
();\par
   79         delay(100);\par
   80     \}\par
   81 \par
   82     if ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABB" }{}}{\fldrslt {\cs37\ul\cf2 externalSensorsActive}}}
)\par
   83     \{\par
   84         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABC" }{}}{\fldrslt {\cs37\ul\cf2 externalSensors}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABD" }{}}{\fldrslt {\cs37\ul\cf2 config}}}
();\par
   85         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABC" }{}}{\fldrslt {\cs37\ul\cf2 externalSensors}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABE" }{}}{\fldrslt {\cs37\ul\cf2 begin}}}
();\par
   86         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABC" }{}}{\fldrslt {\cs37\ul\cf2 externalSensors}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABF" }{}}{\fldrslt {\cs37\ul\cf2 printConf}}}
();\par
   87         delay(100);\par
   88     \}\par
   89     \par
   90     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABG" }{}}{\fldrslt {\cs37\ul\cf2 fadeOut}}}
(255,128,0,0.5);//orange\par
   91 \par
   92     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABH" }{}}{\fldrslt {\cs37\ul\cf2 connect}}}
();\par
   93     delay(100);\par
   94 \par
   95     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABI" }{}}{\fldrslt {\cs37\ul\cf2 rtc}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABJ" }{}}{\fldrslt {\cs37\ul\cf2 config}}}
();\par
   96     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABI" }{}}{\fldrslt {\cs37\ul\cf2 rtc}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABK" }{}}{\fldrslt {\cs37\ul\cf2 begin}}}
();\par
   97     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABI" }{}}{\fldrslt {\cs37\ul\cf2 rtc}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABL" }{}}{\fldrslt {\cs37\ul\cf2 printConf}}}
();\par
   98     delay(100);\par
   99     \par
  100     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABM" }{}}{\fldrslt {\cs37\ul\cf2 blink}}}
(0,255,0,0.5);//green\par
  101 \par
  102 \}\par
  103 \par
  111 int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABH" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::connect}}}
()\par
  112 \{\par
  113 \par
  114 #if DEBUG == 1  \par
  115 \par
  116     Serial.println( F("Entering CoolBoard.connect ") );\par
  117     Serial.println();\par
  118     Serial.println( F("Connecting the CoolBoard  ") );\par
  119     delay(100);\par
  120 \par
  121 #endif\par
  122     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAE" }{}}{\fldrslt {\cs37\ul\cf2 write}}}
(0,0,255);//blue\par
  123 \par
  124     if ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAJ" }{}}{\fldrslt {\cs37\ul\cf2 wifiManager}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABN" }{}}{\fldrslt {\cs37\ul\cf2 state}}}
() != WL_CONNECTED)\par
  125     \{       \par
  126     \par
  127     #if DEBUG == 1      \par
  128 \par
  129         Serial.println( F("CoolBoard not connected to WiFi ") );\par
  130         Serial.println( F("Launching CoolWifi") );\par
  131         Serial.println();\par
  132 \par
  133     #endif\par
  134         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAJ" }{}}{\fldrslt {\cs37\ul\cf2 wifiManager}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABO" }{}}{\fldrslt {\cs37\ul\cf2 connect}}}
();\par
  135         delay(100);\par
  136     \}\par
  137 \par
  138 \par
  139     \par
  140     if ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAN" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABP" }{}}{\fldrslt {\cs37\ul\cf2 state}}}
() != 0)\par
  141     \{   \par
  142     \par
  143     #if DEBUG == 1  \par
  144     \par
  145         Serial.println( F("CoolBoard not connected to MQTT ") );\par
  146         Serial.println( F("Launching mqtt.connect()") );\par
  147         Serial.println();\par
  148 \par
  149     #endif  \par
  150         //logInterval in seconds\par
  151         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAN" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABQ" }{}}{\fldrslt {\cs37\ul\cf2 connect}}}
(this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABR" }{}}{\fldrslt {\cs37\ul\cf2 getLogInterval}}}
());\par
  152         delay(100);\par
  153         \par
  154     \}\par
  155     \par
  156 #if DEBUG == 1\par
  157 \par
  158     Serial.println( F("mqtt state is :") );\par
  159     Serial.println({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAN" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABP" }{}}{\fldrslt {\cs37\ul\cf2 state}}}
());\par
  160     Serial.println();\par
  161     delay(100);\par
  162 \par
  163 #endif\par
  164 \par
  165     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABM" }{}}{\fldrslt {\cs37\ul\cf2 blink}}}
(0,0,255,0.5);//blue\par
  166 \par
  167     return({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAN" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABP" }{}}{\fldrslt {\cs37\ul\cf2 state}}}
());\par
  168 \}\par
  169 \par
  180 void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABS" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::onLineMode}}}
()\par
  181 \{\par
  182 \par
  183     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABT" }{}}{\fldrslt {\cs37\ul\cf2 fadeIn}}}
(128,255,50,0.5);//shade of green\par
  184 \par
  185 #if DEBUG == 1\par
  186 \par
  187     Serial.println( F("Entering CoolBoard.onLineMode() ") );\par
  188     Serial.println();\par
  189 \par
  190 #endif\par
  191 \par
  192     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABU" }{}}{\fldrslt {\cs37\ul\cf2 data}}}
="";\par
  193     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABV" }{}}{\fldrslt {\cs37\ul\cf2 answer}}}
="";\par
  194 \par
  195     //send saved data if any\par
  196     if({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABW" }{}}{\fldrslt {\cs37\ul\cf2 fileSystem}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABX" }{}}{\fldrslt {\cs37\ul\cf2 isDataSaved}}}
())\par
  197     \{\par
  198 \par
  199         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABT" }{}}{\fldrslt {\cs37\ul\cf2 fadeIn}}}
(128,128,255,0.5);//shade of blue\par
  200 \par
  201     #if DEBUG == 1\par
  202 \par
  203         Serial.println( F("There is data saved on the File System") );\par
  204         Serial.println( F("Sending saved data over MQTT ") );\par
  205         Serial.println();\par
  206     \par
  207     #endif  \par
  208         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABY" }{}}{\fldrslt {\cs37\ul\cf2 strobe}}}
(128,128,255,0.5);//shade of blue \par
  209 \par
  210         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAN" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABZ" }{}}{\fldrslt {\cs37\ul\cf2 publish}}}
("sending saved data");\par
  211         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAN" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACA" }{}}{\fldrslt {\cs37\ul\cf2 mqttLoop}}}
();\par
  212 \par
  213         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABU" }{}}{\fldrslt {\cs37\ul\cf2 data}}}
+={\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABW" }{}}{\fldrslt {\cs37\ul\cf2 fileSystem}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACB" }{}}{\fldrslt {\cs37\ul\cf2 getSensorSavedData}}}
();//\{..,..,..\}\par
  214 \par
  215         //formatting data:\par
  216         String jsonData = "\{\\"state\\":\{\\"reported\\":";\par
  217         jsonData += {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABU" }{}}{\fldrslt {\cs37\ul\cf2 data}}}
; // \{"state":\{"reported":\{..,..,..,..,..,..,..,..\}\par
  218         jsonData += " \} \}"; // \{"state":\{"reported":\{..,..,..,..,..,..,..,..\}  \} \}\par
  219         \par
  220         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABY" }{}}{\fldrslt {\cs37\ul\cf2 strobe}}}
(128,128,255,0.5);//shade of blue\par
  221         \par
  222         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAN" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABZ" }{}}{\fldrslt {\cs37\ul\cf2 publish}}}
( {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABU" }{}}{\fldrslt {\cs37\ul\cf2 data}}}
.c_str() );\par
  223         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAN" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACA" }{}}{\fldrslt {\cs37\ul\cf2 mqttLoop}}}
();\par
  224         \par
  225         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABG" }{}}{\fldrslt {\cs37\ul\cf2 fadeOut}}}
(128,128,255,0.5);//shade of blue       \par
  226     \par
  227     #if DEBUG == 1\par
  228 \par
  229         Serial.println( F("Saved data sent ") );\par
  230         Serial.println();\par
  231     \par
  232     #endif\par
  233 \par
  234     \}\par
  235 \par
  236     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABM" }{}}{\fldrslt {\cs37\ul\cf2 blink}}}
(128,255,50,0.5);//shade of green\par
  237 \par
  238     //clock update\par
  239     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABI" }{}}{\fldrslt {\cs37\ul\cf2 rtc}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACC" }{}}{\fldrslt {\cs37\ul\cf2 update}}}
();\par
  240 \par
  241     //read user data if user is active\par
  242     if({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 userActive}}}
)\par
  243     \{\par
  244         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABT" }{}}{\fldrslt {\cs37\ul\cf2 fadeIn}}}
(245,237,27,0.5);//shade of yellow\par
  245     \par
  246     #if DEBUG == 1\par
  247 \par
  248         Serial.println( F("User is Active") );\par
  249         Serial.println( F("Collecting User's data ( mac,username,timeStamp )") );\par
  250         Serial.println();\par
  251     \par
  252     #endif  \par
  253         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABM" }{}}{\fldrslt {\cs37\ul\cf2 blink}}}
(245,237,27,0.5);//shade of yellow    \par
  254 \par
  255         //reading user data\par
  256         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABU" }{}}{\fldrslt {\cs37\ul\cf2 data}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACE" }{}}{\fldrslt {\cs37\ul\cf2 userData}}}
();//\{"":"","":"","",""\}\par
  257 \par
  258         //formatting json \par
  259         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABU" }{}}{\fldrslt {\cs37\ul\cf2 data}}}
.setCharAt( {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABU" }{}}{\fldrslt {\cs37\ul\cf2 data}}}
.lastIndexOf('\}') , ',');//\{"":"","":"","","",\par
  260                 \par
  261         //read sensors data\par
  262     #if DEBUG == 1\par
  263 \par
  264         Serial.println( F("Collecting sensors data ") );\par
  265         Serial.println();\par
  266     \par
  267     #endif\par
  268 \par
  269         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABU" }{}}{\fldrslt {\cs37\ul\cf2 data}}}
+=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACF" }{}}{\fldrslt {\cs37\ul\cf2 readSensors}}}
();//\{"":"","":"","","",\{.......\}        \par
  270 \par
  271         //formatting json correctly\par
  272         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABU" }{}}{\fldrslt {\cs37\ul\cf2 data}}}
.remove({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABU" }{}}{\fldrslt {\cs37\ul\cf2 data}}}
.lastIndexOf('\{'), 1);//\{"":"","":"","","",.......\}\par
  273         \par
  274         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABG" }{}}{\fldrslt {\cs37\ul\cf2 fadeOut}}}
(245,237,27,0.5);//shade of yellow\par
  275                 \par
  276     \}   \par
  277     else\par
  278     \{\par
  279         //read sensors data\par
  280     #if DEBUG == 1\par
  281 \par
  282         Serial.println( F("Collecting sensors data ") );\par
  283         Serial.println();\par
  284     \par
  285     #endif\par
  286         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACG" }{}}{\fldrslt {\cs37\ul\cf2 fade}}}
(190,100,150,0.5);//shade of violet        \par
  287         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABU" }{}}{\fldrslt {\cs37\ul\cf2 data}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACF" }{}}{\fldrslt {\cs37\ul\cf2 readSensors}}}
();//\{..,..,..\}\par
  288     \}\par
  289     \par
  290     //do action\par
  291     if ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAR" }{}}{\fldrslt {\cs37\ul\cf2 jetpackActive}}}
)\par
  292     \{\par
  293     \par
  294     #if DEBUG ==1\par
  295 \par
  296         Serial.println( F("jetpack is Active ") );\par
  297         Serial.println( F("jetpack doing action ") );\par
  298         Serial.println();\par
  299 \par
  300     #endif\par
  301         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACG" }{}}{\fldrslt {\cs37\ul\cf2 fade}}}
(100,100,150,0.5);//dark shade of blue     \par
  302         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAS" }{}}{\fldrslt {\cs37\ul\cf2 jetPack}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACH" }{}}{\fldrslt {\cs37\ul\cf2 doAction}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABU" }{}}{\fldrslt {\cs37\ul\cf2 data}}}
.c_str());\par
  303     \}\par
  304     \par
  305     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABT" }{}}{\fldrslt {\cs37\ul\cf2 fadeIn}}}
(128,255,50,0.5);//shade of green\par
  306 \par
  307     //formatting data:\par
  308     String jsonData = "\{\\"state\\":\{\\"reported\\":";\par
  309     jsonData += {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABU" }{}}{\fldrslt {\cs37\ul\cf2 data}}}
; // \{"state":\{"reported":\{..,..,..,..,..,..,..,..\}\par
  310     jsonData += " \} \}"; // \{"state":\{"reported":\{..,..,..,..,..,..,..,..\}  \} \}\par
  311     \par
  312     //mqtt client loop to allow data handling\par
  313     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAN" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACA" }{}}{\fldrslt {\cs37\ul\cf2 mqttLoop}}}
();\par
  314 \par
  315     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABM" }{}}{\fldrslt {\cs37\ul\cf2 blink}}}
(128,255,50,0.5);//shade of green \par
  316 \par
  317     //read mqtt answer\par
  318     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABV" }{}}{\fldrslt {\cs37\ul\cf2 answer}}}
 = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAN" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACI" }{}}{\fldrslt {\cs37\ul\cf2 read}}}
();\par
  319 \par
  320 #if DEBUG == 1 \par
  321 \par
  322     Serial.println( F("checking if there's an MQTT message ")  );\par
  323     Serial.println( F("answer is : ") );    \par
  324     Serial.println({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABV" }{}}{\fldrslt {\cs37\ul\cf2 answer}}}
); \par
  325     Serial.println();\par
  326 \par
  327 #endif  \par
  328 \par
  329     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABG" }{}}{\fldrslt {\cs37\ul\cf2 fadeOut}}}
(128,255,50,0.5);//shade of green   \par
  330 \par
  331     //check if the configuration needs update \par
  332     //and update it if needed \par
  333     this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACJ" }{}}{\fldrslt {\cs37\ul\cf2 update}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABV" }{}}{\fldrslt {\cs37\ul\cf2 answer}}}
.c_str());\par
  334     \par
  335     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABT" }{}}{\fldrslt {\cs37\ul\cf2 fadeIn}}}
(128,255,50,0.5);//shade of green    \par
  336 \par
  337     //publishing data   \par
  338     if( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACK" }{}}{\fldrslt {\cs37\ul\cf2 sleepActive}}}
==0)   \par
  339     \{   \par
  340         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABY" }{}}{\fldrslt {\cs37\ul\cf2 strobe}}}
(255,0,230,0.5);//shade of pink\par
  341         \par
  342         //logInterval in seconds\par
  343         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAN" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABZ" }{}}{\fldrslt {\cs37\ul\cf2 publish}}}
( jsonData.c_str(), this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABR" }{}}{\fldrslt {\cs37\ul\cf2 getLogInterval}}}
() );\par
  344         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAN" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACA" }{}}{\fldrslt {\cs37\ul\cf2 mqttLoop}}}
();\par
  345     \par
  346     \}\par
  347     else\par
  348     \{\par
  349         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABY" }{}}{\fldrslt {\cs37\ul\cf2 strobe}}}
(230,255,0,0.5);//shade of yellow    \par
  350 \par
  351         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAN" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABZ" }{}}{\fldrslt {\cs37\ul\cf2 publish}}}
(jsonData.c_str());     \par
  352         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAN" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACA" }{}}{\fldrslt {\cs37\ul\cf2 mqttLoop}}}
();\par
  353         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABV" }{}}{\fldrslt {\cs37\ul\cf2 answer}}}
 = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAN" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACI" }{}}{\fldrslt {\cs37\ul\cf2 read}}}
();\par
  354         this ->update({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABV" }{}}{\fldrslt {\cs37\ul\cf2 answer}}}
.c_str());\par
  355 \par
  356         //logInterval in seconds\par
  357         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACL" }{}}{\fldrslt {\cs37\ul\cf2 sleep}}}
( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABR" }{}}{\fldrslt {\cs37\ul\cf2 getLogInterval}}}
() ) ;\par
  358     \}\par
  359 \par
  360     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABG" }{}}{\fldrslt {\cs37\ul\cf2 fadeOut}}}
(128,255,50,0.5);//shade of green       \par
  361 \par
  362     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAN" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACA" }{}}{\fldrslt {\cs37\ul\cf2 mqttLoop}}}
();\par
  363 \par
  364     //read mqtt answer\par
  365     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABV" }{}}{\fldrslt {\cs37\ul\cf2 answer}}}
 = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAN" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACI" }{}}{\fldrslt {\cs37\ul\cf2 read}}}
();\par
  366     this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACJ" }{}}{\fldrslt {\cs37\ul\cf2 update}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABV" }{}}{\fldrslt {\cs37\ul\cf2 answer}}}
.c_str()); \par
  367 \par
  368     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABM" }{}}{\fldrslt {\cs37\ul\cf2 blink}}}
(128,255,50,0.5);//shade of green \par
  369 \par
  370 \par
  371 \}\par
  372 \par
  373 \par
  381 void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACM" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::offLineMode}}}
()\par
  382 \{\par
  383     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACG" }{}}{\fldrslt {\cs37\ul\cf2 fade}}}
(51,100,50,0.5);//dark shade of green  \par
  384 #if DEBUG == 1  \par
  385     \par
  386     Serial.println( F("Entering off line mode ") ); \par
  387     \par
  388 #endif\par
  389 \par
  390     //read user data if user is active\par
  391     if({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 userActive}}}
)\par
  392     \{\par
  393 \par
  394         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABT" }{}}{\fldrslt {\cs37\ul\cf2 fadeIn}}}
(245,237,27,0.5);//shade of yellow\par
  395 \par
  396     #if DEBUG == 1\par
  397         \par
  398         Serial.println( F("User is Active") );\par
  399         Serial.println( F("Collecting User's data ( mac,username,timeStamp )") );\par
  400         Serial.println();\par
  401 \par
  402     #endif\par
  403 \par
  404         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABM" }{}}{\fldrslt {\cs37\ul\cf2 blink}}}
(245,237,27,0.5);//shade of yellow    \par
  405 \par
  406         //reading user data\par
  407         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABU" }{}}{\fldrslt {\cs37\ul\cf2 data}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACE" }{}}{\fldrslt {\cs37\ul\cf2 userData}}}
();//\{"":"","":"","",""\}\par
  408 \par
  409         //formatting json \par
  410         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABU" }{}}{\fldrslt {\cs37\ul\cf2 data}}}
.setCharAt( {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABU" }{}}{\fldrslt {\cs37\ul\cf2 data}}}
.lastIndexOf('\}') , ',');//\{"":"","":"","","",\par
  411         \par
  412                 \par
  413         //read sensors data\par
  414     #if DEBUG == 1\par
  415 \par
  416         Serial.println( F("Collecting sensors data ") );\par
  417         Serial.println();\par
  418 \par
  419     #endif\par
  420 \par
  421         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABU" }{}}{\fldrslt {\cs37\ul\cf2 data}}}
+=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACF" }{}}{\fldrslt {\cs37\ul\cf2 readSensors}}}
();//\{"":"","":"","","",\{.......\}\par
  422 \par
  423         \par
  424 \par
  425         //formatting json correctly\par
  426         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABU" }{}}{\fldrslt {\cs37\ul\cf2 data}}}
.remove({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABU" }{}}{\fldrslt {\cs37\ul\cf2 data}}}
.lastIndexOf('\{'), 1);//\{"":"","":"","","",.......\}\par
  427 \par
  428         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABG" }{}}{\fldrslt {\cs37\ul\cf2 fadeOut}}}
(245,237,27,0.5);//shade of yellow\par
  429                 \par
  430     \}   \par
  431     else\par
  432     \{\par
  433         //read sensors data\par
  434     #if DEBUG == 1\par
  435 \par
  436         Serial.println( F("Collecting sensors data ") );\par
  437         Serial.println();\par
  438 \par
  439     #endif\par
  440 \par
  441         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACG" }{}}{\fldrslt {\cs37\ul\cf2 fade}}}
(190,100,150,0.5);//shade of violet        \par
  442 \par
  443         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABU" }{}}{\fldrslt {\cs37\ul\cf2 data}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACF" }{}}{\fldrslt {\cs37\ul\cf2 readSensors}}}
();//\{..,..,..\}\par
  444     \}\par
  445 \par
  446     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACG" }{}}{\fldrslt {\cs37\ul\cf2 fade}}}
(51,100,50,0.5);//dark shade of green  \par
  447 \par
  448     //do action\par
  449     if ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAR" }{}}{\fldrslt {\cs37\ul\cf2 jetpackActive}}}
)\par
  450     \{\par
  451 \par
  452     #if DEBUG == 1\par
  453 \par
  454         Serial.println( F("jetpack is Active ") );\par
  455         Serial.println( F("jetpack doing action ") );\par
  456         Serial.println();\par
  457     \par
  458     #endif\par
  459         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACG" }{}}{\fldrslt {\cs37\ul\cf2 fade}}}
(100,100,150,0.5);//dark shade of blue \par
  460     \par
  461         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAS" }{}}{\fldrslt {\cs37\ul\cf2 jetPack}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACH" }{}}{\fldrslt {\cs37\ul\cf2 doAction}}}
( {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABU" }{}}{\fldrslt {\cs37\ul\cf2 data}}}
.c_str() );\par
  462     \}\par
  463     \par
  464     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACG" }{}}{\fldrslt {\cs37\ul\cf2 fade}}}
(51,100,50,0.5);//dark shade of green  \par
  465     \par
  466     //saving data in the file system\par
  467     \par
  468     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABW" }{}}{\fldrslt {\cs37\ul\cf2 fileSystem}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACN" }{}}{\fldrslt {\cs37\ul\cf2 saveSensorData}}}
( {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABU" }{}}{\fldrslt {\cs37\ul\cf2 data}}}
.c_str() );\par
  469 \par
  470     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABG" }{}}{\fldrslt {\cs37\ul\cf2 fadeOut}}}
(51,100,50,0.5);//dark shade of green   \par
  471 \par
  472 \}\par
  473 \par
  486 bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACO" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::config}}}
()\par
  487 \{\par
  488 \par
  489 #if DEBUG == 1\par
  490 \par
  491     Serial.println( F("Entering CoolBoard.config() ") );\par
  492     Serial.println();\par
  493 \par
  494 #endif\par
  495 \par
  496     //open file system\par
  497     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABW" }{}}{\fldrslt {\cs37\ul\cf2 fileSystem}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACP" }{}}{\fldrslt {\cs37\ul\cf2 begin}}}
();\par
  498     \par
  499     //start the led\par
  500     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACQ" }{}}{\fldrslt {\cs37\ul\cf2 config}}}
();\par
  501     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACR" }{}}{\fldrslt {\cs37\ul\cf2 begin}}}
();\par
  502     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABT" }{}}{\fldrslt {\cs37\ul\cf2 fadeIn}}}
(243,171,46,0.5);//shade of orange       \par
  503 \par
  504     \par
  505     //open configuration file\par
  506     File configFile = SPIFFS.open("/coolBoardConfig.json", "r");\par
  507     \par
  508     if (!configFile)\par
  509 \par
  510     \{\par
  511     \par
  512     #if DEBUG == 1\par
  513 \par
  514         Serial.println( F("failed to read /coolBoardConfig.json  ") );\par
  515 \par
  516     #endif\par
  517         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABM" }{}}{\fldrslt {\cs37\ul\cf2 blink}}}
(255,0,0,0.5);//shade of red      \par
  518         return(false);\par
  519     \}\par
  520 \par
  521     else\par
  522     \{\par
  523         size_t size = configFile.size();\par
  524 \par
  525         // Allocate a buffer to store contents of the file.\par
  526         std::unique_ptr < char[] > buf(new char[size]);\par
  527 \par
  528         configFile.readBytes(buf.get(), size);\par
  529 \par
  530         DynamicJsonBuffer jsonBuffer;\par
  531 \par
  532         JsonObject & json = jsonBuffer.parseObject(buf.get());\par
  533 \par
  534         if (!json.success())\par
  535         \{\par
  536         \par
  537         #if DEBUG == 1\par
  538 \par
  539             Serial.println( F("failed to parse CoolBoard Config json object ") );\par
  540     \par
  541         #endif\par
  542             {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABM" }{}}{\fldrslt {\cs37\ul\cf2 blink}}}
(255,0,0,0.5);//shade of red      \par
  543             return(false);\par
  544         \}\par
  545 \par
  546         else\par
  547         \{   \par
  548         \par
  549         #if DEBUG == 1\par
  550             \par
  551             Serial.println( F("configuration json : ") );\par
  552             json.printTo(Serial);\par
  553             Serial.println();\par
  554             \par
  555             Serial.print(F("jsonBuffer size : "));\par
  556             Serial.print(jsonBuffer.size());\par
  557             Serial.println();\par
  558 \par
  559         #endif\par
  560             \par
  561             //parsing userActive Key\par
  562             if (json["userActive"].success())\par
  563             \{\par
  564                 this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 userActive}}}
 = json["userActive"];\par
  565             \}\par
  566 \par
  567             else\par
  568             \{\par
  569                 this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 userActive}}}
 = this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 userActive}}}
;\par
  570             \}\par
  571             json["userActive"] = this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 userActive}}}
;\par
  572 \par
  573             //parsing logInterval key\par
  574             if (json["logInterval"].success())\par
  575             \{\par
  576                 this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACS" }{}}{\fldrslt {\cs37\ul\cf2 logInterval}}}
 = json["logInterval"];\par
  577             \}\par
  578             else\par
  579             \{\par
  580                 this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACS" }{}}{\fldrslt {\cs37\ul\cf2 logInterval}}}
 = this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACS" }{}}{\fldrslt {\cs37\ul\cf2 logInterval}}}
;\par
  581             \}\par
  582             json["logInterval"] = this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACS" }{}}{\fldrslt {\cs37\ul\cf2 logInterval}}}
;\par
  583             \par
  584             //parsing ireneActive key           \par
  585             if (json["ireneActive"].success())\par
  586             \{\par
  587                 this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAW" }{}}{\fldrslt {\cs37\ul\cf2 ireneActive}}}
 = json["ireneActive"];\par
  588             \}\par
  589             else\par
  590             \{\par
  591                 this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAW" }{}}{\fldrslt {\cs37\ul\cf2 ireneActive}}}
 = this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAW" }{}}{\fldrslt {\cs37\ul\cf2 ireneActive}}}
;\par
  592             \}\par
  593             json["ireneActive"] = this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAW" }{}}{\fldrslt {\cs37\ul\cf2 ireneActive}}}
;\par
  594             \par
  595             //parsing jetpackActive key\par
  596             if (json["jetpackActive"].success())\par
  597             \{\par
  598                 this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAR" }{}}{\fldrslt {\cs37\ul\cf2 jetpackActive}}}
 = json["jetpackActive"];\par
  599             \}\par
  600             else\par
  601             \{\par
  602                 this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAR" }{}}{\fldrslt {\cs37\ul\cf2 jetpackActive}}}
 = this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAR" }{}}{\fldrslt {\cs37\ul\cf2 jetpackActive}}}
;\par
  603             \}\par
  604             json["jetpackActive"] = this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAR" }{}}{\fldrslt {\cs37\ul\cf2 jetpackActive}}}
;\par
  605 \par
  606             //parsing externalSensorsActive key\par
  607             if (json["externalSensorsActive"].success())\par
  608             \{\par
  609                 this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABB" }{}}{\fldrslt {\cs37\ul\cf2 externalSensorsActive}}}
 = json["externalSensorsActive"];\par
  610             \}\par
  611             else\par
  612             \{\par
  613                 this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABB" }{}}{\fldrslt {\cs37\ul\cf2 externalSensorsActive}}}
 = this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABB" }{}}{\fldrslt {\cs37\ul\cf2 externalSensorsActive}}}
;\par
  614             \}\par
  615             json["externalSensorsActive"] = this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABB" }{}}{\fldrslt {\cs37\ul\cf2 externalSensorsActive}}}
;\par
  616 \par
  617             //parsing serverTimeOut key\par
  618             if (json["serverTimeOut"].success())\par
  619             \{\par
  620                 this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACT" }{}}{\fldrslt {\cs37\ul\cf2 serverTimeOut}}}
 = json["serverTimeOut"];\par
  621             \}\par
  622             else\par
  623             \{\par
  624                 this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACT" }{}}{\fldrslt {\cs37\ul\cf2 serverTimeOut}}}
 = this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACT" }{}}{\fldrslt {\cs37\ul\cf2 serverTimeOut}}}
;\par
  625             \}\par
  626             json["serverTimeOut"] = this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACT" }{}}{\fldrslt {\cs37\ul\cf2 serverTimeOut}}}
;\par
  627             \par
  628             //parsing sleepActive key\par
  629             if (json["sleepActive"].success())\par
  630             \{\par
  631                 this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACK" }{}}{\fldrslt {\cs37\ul\cf2 sleepActive}}}
 = json["sleepActive"];\par
  632             \}\par
  633             else\par
  634             \{\par
  635                 this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACK" }{}}{\fldrslt {\cs37\ul\cf2 sleepActive}}}
 = this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACK" }{}}{\fldrslt {\cs37\ul\cf2 sleepActive}}}
;\par
  636             \}\par
  637             json["sleepActive"] = this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACK" }{}}{\fldrslt {\cs37\ul\cf2 sleepActive}}}
;\par
  638 \par
  639             //saving the current/correct configuration\par
  640             configFile.close();\par
  641             configFile = SPIFFS.open("/coolBoardConfig.json", "w");\par
  642             if (!configFile)\par
  643             \{\par
  644             \par
  645             #if DEBUG == 1\par
  646 \par
  647                 Serial.println( F("failed to write to /coolBoardConfig.json") );\par
  648                 Serial.println();\par
  649             \par
  650             #endif\par
  651                 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABM" }{}}{\fldrslt {\cs37\ul\cf2 blink}}}
(255,0,0,0.5);//shade of red      \par
  652                 return(false);\par
  653             \}\par
  654 \par
  655             json.printTo(configFile);\par
  656             configFile.close();\par
  657             return(true);\par
  658         \}\par
  659     \}\par
  660 \par
  661     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABY" }{}}{\fldrslt {\cs37\ul\cf2 strobe}}}
(243,171,46,0.5);//shade of orange\par
  662     \par
  663     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABG" }{}}{\fldrslt {\cs37\ul\cf2 fadeOut}}}
(243,171,46,0.5);//shade of orange              \par
  664 \}\par
  665 \par
  673 void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACU" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::printConf}}}
()\par
  674 \{\par
  675 \par
  676 #if DEBUG == 1\par
  677     \par
  678     Serial.println( F("Entering CoolBoard.printConf() ") );\par
  679     Serial.println();\par
  680 \par
  681 #endif\par
  682 \par
  683     Serial.println("Printing Cool Board Configuration ");\par
  684     Serial.print("log interval      : ");\par
  685     Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACS" }{}}{\fldrslt {\cs37\ul\cf2 logInterval}}}
);\par
  686 \par
  687     Serial.print("irene active      : ");\par
  688     Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAW" }{}}{\fldrslt {\cs37\ul\cf2 ireneActive}}}
);\par
  689 \par
  690     Serial.print("jetpack active        : ");\par
  691     Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAR" }{}}{\fldrslt {\cs37\ul\cf2 jetpackActive}}}
);\par
  692 \par
  693     Serial.print("external sensors active   : ");\par
  694     Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABB" }{}}{\fldrslt {\cs37\ul\cf2 externalSensorsActive}}}
);\par
  695 \par
  696     Serial.print("access point timeOut  : ");\par
  697     Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACT" }{}}{\fldrslt {\cs37\ul\cf2 serverTimeOut}}}
);\par
  698 \par
  699     Serial.print("sleept active         : ");\par
  700     Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACK" }{}}{\fldrslt {\cs37\ul\cf2 sleepActive}}}
);\par
  701 \par
  702     Serial.print("user active       : ");\par
  703     Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 userActive}}}
);\par
  704 \par
  705     Serial.println();\par
  706 \par
  707 \par
  708 \par
  709 \par
  710 \}\par
  711 \par
  717 void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACJ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::update}}}
(const char * answer)\par
  718 \{\par
  719     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABT" }{}}{\fldrslt {\cs37\ul\cf2 fadeIn}}}
(153,76,0,0.5);//shade of brown      \par
  720 \par
  721 #if DEBUG == 1\par
  722 \par
  723     Serial.println( F("Entering CoolBoard.update() ") );\par
  724     Serial.println();\par
  725     Serial.println( F("message is : ") );\par
  726     Serial.println(answer);\par
  727     Serial.println();\par
  728 \par
  729 #endif\par
  730 \par
  731     DynamicJsonBuffer jsonBuffer;\par
  732     JsonObject & root = jsonBuffer.parseObject(answer);\par
  733     JsonObject & stateDesired = root["state"];\par
  734 \par
  735 #if DEBUG == 1\par
  736 \par
  737     Serial.println( F("root json : ") );\par
  738     root.printTo(Serial);\par
  739     Serial.println();\par
  740 \par
  741     Serial.println(F("stateDesired json : "));\par
  742     stateDesired.printTo(Serial);\par
  743     Serial.println();\par
  744     \par
  745     Serial.print(F("jsonBuffer size : "));\par
  746     Serial.println(jsonBuffer.size());\par
  747 \par
  748 #endif\par
  749 \par
  750     if (stateDesired.success())\par
  751     \{\par
  752     \par
  753     #if DEBUG == 1\par
  754 \par
  755         Serial.println( F("update message parsing : success") );\par
  756         Serial.println();\par
  757     \par
  758     #endif\par
  759 \par
  760             String answerDesired;\par
  761         \par
  762             stateDesired.printTo(answerDesired);\par
  763             \par
  764         #if DEBUG == 1      \par
  765         \par
  766             Serial.println( F("update is ok ") );\par
  767             Serial.println( F("desired update is : ") );            \par
  768             Serial.println(answerDesired);\par
  769             Serial.println("json size is : ");\par
  770             Serial.println(jsonBuffer.size() ) ;                \par
  771             Serial.println();\par
  772 \par
  773         \par
  774         #endif\par
  775             //saving the new configuration\par
  776             {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABW" }{}}{\fldrslt {\cs37\ul\cf2 fileSystem}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACV" }{}}{\fldrslt {\cs37\ul\cf2 updateConfigFiles}}}
(answerDesired);\par
  777 \par
  778             //applying the configuration    \par
  779             /*this -> config();\par
  780 \par
  781             coolBoardSensors.config();\par
  782 \par
  783             rtc.config();\par
  784 \par
  785             coolBoardLed.config();\par
  786             \par
  787             wifiManager.config();\par
  788 \par
  789             mqtt.config();\par
  790 \par
  791             if (jetpackActive)\par
  792             \{\par
  793                 jetPack.config();\par
  794             \}\par
  795 \par
  796             if (ireneActive)\par
  797             \{\par
  798                 irene3000.config();\par
  799             \}\par
  800 \par
  801             if (externalSensorsActive)\par
  802             \{\par
  803                 externalSensors.config();\par
  804             \}\par
  805 \par
  806             delay(10);\par
  807             wifiManager.begin();\par
  808             delay(100);\par
  809             mqtt.begin();*/\par
  810 \par
  811                 //answering the update msg:\par
  812             //reported = received configuration\par
  813             //desired=null\par
  814         \par
  815             String updateAnswer;\par
  816             String tempString;\par
  817             \par
  818             stateDesired.printTo(tempString);\par
  819             updateAnswer="\{\\"state\\":\{\\"reported\\":";\par
  820             updateAnswer+=tempString;\par
  821             updateAnswer+=",\\"desired\\":null\}\}";\par
  822 \par
  823         #if DEBUG == 1\par
  824 \par
  825             Serial.println( F("preparing answer message ") );\par
  826             Serial.println();\par
  827             Serial.println( F("updateAnswer : ") );\par
  828             Serial.println(updateAnswer);\par
  829         \par
  830         #endif  \par
  831 \par
  832             {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAN" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABZ" }{}}{\fldrslt {\cs37\ul\cf2 publish}}}
(updateAnswer.c_str());\par
  833             \par
  834             {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAN" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACA" }{}}{\fldrslt {\cs37\ul\cf2 mqttLoop}}}
();\par
  835 \par
  836             delay(10);\par
  837             \par
  838             //restart the esp to apply the config\par
  839             ESP.restart();\par
  840     \}\par
  841     else\par
  842     \{\par
  843     \par
  844     #if DEBUG == 1\par
  845 \par
  846         Serial.println( F("Failed to parse update message( OR no message received )") );\par
  847         Serial.println();\par
  848     \par
  849     #endif\par
  850     \par
  851     \}\par
  852 \par
  853     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABY" }{}}{\fldrslt {\cs37\ul\cf2 strobe}}}
(153,76,0,0.5);//shade of brown\par
  854     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABG" }{}}{\fldrslt {\cs37\ul\cf2 fadeOut}}}
(153,76,0,0.5);//shade of brown                             \par
  855 \}\par
  856 \par
  864 unsigned long {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABR" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::getLogInterval}}}
()\par
  865 \{\par
  866 \par
  867 #if DEBUG == 1\par
  868 \par
  869     Serial.println( F("Entering CoolBoard.getLogInterval() ") );\par
  870     Serial.println();\par
  871     Serial.println( F("log Interval is :") );\par
  872     Serial.println({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACS" }{}}{\fldrslt {\cs37\ul\cf2 logInterval}}}
);\par
  873     Serial.println();\par
  874 \par
  875 #endif\par
  876 \par
  877     return(this -> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACS" }{}}{\fldrslt {\cs37\ul\cf2 logInterval}}}
);\par
  878 \}\par
  879 \par
  888 String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACF" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::readSensors}}}
()\par
  889 \{\par
  890 \par
  891     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABT" }{}}{\fldrslt {\cs37\ul\cf2 fadeIn}}}
(128,255,0,0.5);//light shade of green\par
  892                 \par
  893 #if DEBUG == 1\par
  894 \par
  895     Serial.println( F("Entering CoolBoard.readSensors()") );\par
  896     Serial.println();\par
  897 \par
  898 #endif\par
  899     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABY" }{}}{\fldrslt {\cs37\ul\cf2 strobe}}}
(128,255,0,0.5);//light shade of green\par
  900 \par
  901     String sensorsData;\par
  902 \par
  903     sensorsData = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAF" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardSensors}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACW" }{}}{\fldrslt {\cs37\ul\cf2 read}}}
(); // \{..,..,..\}\par
  904     \par
  905     if ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABB" }{}}{\fldrslt {\cs37\ul\cf2 externalSensorsActive}}}
)\par
  906     \{\par
  907         sensorsData += {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABC" }{}}{\fldrslt {\cs37\ul\cf2 externalSensors}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACX" }{}}{\fldrslt {\cs37\ul\cf2 read}}}
(); // \{..,..,..\}\{..,..\}\par
  908 \par
  909         sensorsData.setCharAt(sensorsData.lastIndexOf('\}'), ','); // \{..,..,..\}\{..,..,\par
  910         sensorsData.setCharAt(sensorsData.lastIndexOf('\{'), ','); // \{..,..,..\},..,..,\par
  911         sensorsData.remove(sensorsData.lastIndexOf('\}'), 1); // \{..,..,..,..,..,\par
  912         sensorsData.setCharAt(sensorsData.lastIndexOf(','), '\}'); // \{..,..,..,..,..\}\par
  913 \par
  914     \}\par
  915     if ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAW" }{}}{\fldrslt {\cs37\ul\cf2 ireneActive}}}
)\par
  916     \{\par
  917         sensorsData += {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAX" }{}}{\fldrslt {\cs37\ul\cf2 irene3000}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACY" }{}}{\fldrslt {\cs37\ul\cf2 read}}}
(); // \{..,..,..,..,..\}\{..,..,..\}\par
  918 \par
  919         sensorsData.setCharAt(sensorsData.lastIndexOf('\}'), ','); // \{..,..,..,..,..\}\{..,..,..,\par
  920         sensorsData.setCharAt(sensorsData.lastIndexOf('\{'), ','); // \{..,..,..,..,..\},..,..,..,\par
  921         sensorsData.remove(sensorsData.lastIndexOf('\}'), 1); // \{..,..,..,..,..,..,..,..,\par
  922         sensorsData.setCharAt(sensorsData.lastIndexOf(','), '\}'); // \{..,..,..,..,..,..,..,..\}      \par
  923         \par
  924         \par
  925     \}\par
  926 \par
  927     //getting Hour:\par
  928     tmElements_t tm;\par
  929     tm={\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABI" }{}}{\fldrslt {\cs37\ul\cf2 rtc}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACZ" }{}}{\fldrslt {\cs37\ul\cf2 getTimeDate}}}
();\par
  930     \par
  931     //adding Hour\par
  932     sensorsData.remove(sensorsData.lastIndexOf('\}'), 1); // \{..,..,..,..,..,..,..,..,   \par
  933     sensorsData+=",\\"hour\\":";  \par
  934     sensorsData+=tm.Hour;\par
  935     sensorsData+="\}";\par
  936     \par
  937 #if DEBUG == 1\par
  938     Serial.println();\par
  939     Serial.println( F("sensors data is ") );\par
  940     Serial.println(sensorsData);\par
  941     Serial.println();\par
  942 \par
  943 #endif\par
  944     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABG" }{}}{\fldrslt {\cs37\ul\cf2 fadeOut}}}
(128,255,0,0.5);//light shade of green\par
  945 \par
  946     return(sensorsData);\par
  947 \par
  948 \}\par
  949 \par
  957 String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACE" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::userData}}}
()\par
  958 \{\par
  959 \par
  960 #if DEBUG == 1\par
  961 \par
  962     Serial.println( F("Entering CoolBoard.userData() ") );\par
  963     Serial.println();\par
  964 \par
  965 #endif\par
  966 \par
  967     String tempMAC = WiFi.macAddress();\par
  968 \par
  969     tempMAC.replace(":", "");\par
  970 \par
  971     String userJson = "\{\\"user\\":\\"";\par
  972 \par
  973     userJson += {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAN" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADA" }{}}{\fldrslt {\cs37\ul\cf2 getUser}}}
();\par
  974 \par
  975     userJson += "\\",\\"timestamp\\":\\"";\par
  976 \par
  977     userJson += {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABI" }{}}{\fldrslt {\cs37\ul\cf2 rtc}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADB" }{}}{\fldrslt {\cs37\ul\cf2 getESDate}}}
(); // "timestamp":"20yy-mm-ddThh:mm:ssZ"\par
  978 \par
  979     userJson += "\\",\\"mac\\":\\"";\par
  980 \par
  981     userJson += tempMAC;\par
  982 \par
  983     userJson += "\\"\}";\par
  984 \par
  985 #if DEBUG == 1\par
  986 \par
  987     Serial.println( F("userData is : ") );\par
  988     Serial.println(userJson);\par
  989     Serial.println();\par
  990 \par
  991 #endif  \par
  992     \par
  993     return(userJson);\par
  994     \par
  995 \}\par
  996 \par
  997 \par
 1004 void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACL" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard::sleep}}}
(unsigned long interval)\par
 1005 \{\par
 1006 \par
 1007 #if DEBUG == 1\par
 1008 \par
 1009     Serial.println( F("Entering CoolBoard.sleep() ") );\par
 1010     Serial.print( F("going to sleep for ") );\par
 1011     Serial.print(interval);\par
 1012     Serial.println(F("s") );\par
 1013     Serial.println();\par
 1014 \par
 1015 #endif\par
 1016     //interval is in seconds , interval*1000*1000 in \'B5S\par
 1017     ESP.deepSleep ( ( interval * 1000 * 1000 ), WAKE_RF_DEFAULT) ;\par
 1018 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/CoolBoard.h File Reference\par \pard\plain 
{\tc\tcl2 \v /home/ashiroji/Arduino/libraries/CoolBoard/CoolBoard.h}
{\xe \v /home/ashiroji/Arduino/libraries/CoolBoard/CoolBoard.h}
{\bkmkstart AAAAAAAAAA}
{\bkmkend AAAAAAAAAA}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADL" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard}}} Header file. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "CoolFileSystem.h"}\par
{\f2 #include "CoolBoardSensors.h"}\par
{\f2 #include "CoolBoardLed.h"}\par
{\f2 #include "CoolTime.h"}\par
{\f2 #include "CoolMQTT.h"}\par
{\f2 #include "Jetpack.h"}\par
{\f2 #include "Irene3000.h"}\par
{\f2 #include "ExternalSensors.h"}\par
{\f2 #include "CoolWifi.h"}\par
{\f2 #include "Arduino.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for CoolBoard.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "CoolBoard_8h__incl.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "CoolBoard_8h__dep__incl.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADL" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard}}}
\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class manages the {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADL" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard}}} and all of Its functions. }}}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADL" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard}}} Header file. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid Mehdi Zemzem \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 1.0 \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Date:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 27/06/2017 \par
}}{
Definition in file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJJ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard.h}}}
.}\par
}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/CoolBoard.h\par \pard\plain 
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     1 \par
   11 #ifndef CoolBoard_H\par
   12 #define CoolBoard_H\par
   13 \par
   14 \par
   15 #include"{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADC" }{}}{\fldrslt {\cs37\ul\cf2 CoolFileSystem.h}}}
"  //CoolBoard File System Manager\par
   16 #include"{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADD" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors.h}}}
"    //CoolBoard Sensor Board Manager\par
   17 #include"{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADE" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed.h}}}
"    //CoolBoard Led Manager\par
   18 #include"{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADF" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime.h}}}
"        //CoolBoard Real Time Clock Manager\par
   19 #include"{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADG" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT.h}}}
"        //CoolBoard MQTT Manager\par
   20 #include"{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADH" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack.h}}}
"     //CoolBoard Jetpack Manager\par
   21 #include"{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADI" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000.h}}}
"       //CoolBoard Irene3000 Manager\par
   22 #include"{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADJ" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors.h}}}
" //CoolBoard External Sensors Manager\par
   23 #include"{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADK" }{}}{\fldrslt {\cs37\ul\cf2 CoolWifi.h}}}
"\par
   24 \par
   25 #include"Arduino.h"     //Arduino Defs\par
   26 \par
   33 class {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADL" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoard}}}
\par
   34 \{\par
   35 \par
   36 public:\par
   37 \par
   38     void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAB" }{}}{\fldrslt {\cs37\ul\cf2 begin}}}
(); \par
   39     \par
   40     bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACO" }{}}{\fldrslt {\cs37\ul\cf2 config}}}
();\par
   41 \par
   42     void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACJ" }{}}{\fldrslt {\cs37\ul\cf2 update}}}
(const char*{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABV" }{}}{\fldrslt {\cs37\ul\cf2 answer}}}
 );\par
   43 \par
   44     void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACM" }{}}{\fldrslt {\cs37\ul\cf2 offLineMode}}}
();\par
   45 \par
   46     void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABS" }{}}{\fldrslt {\cs37\ul\cf2 onLineMode}}}
();\par
   47 \par
   48     int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABH" }{}}{\fldrslt {\cs37\ul\cf2 connect}}}
();\par
   49 \par
   50     unsigned long {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABR" }{}}{\fldrslt {\cs37\ul\cf2 getLogInterval}}}
();\par
   51 \par
   52     void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACU" }{}}{\fldrslt {\cs37\ul\cf2 printConf}}}
();\par
   53 \par
   54     void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACL" }{}}{\fldrslt {\cs37\ul\cf2 sleep}}}
(unsigned long interval);\par
   55 \par
   56     String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACF" }{}}{\fldrslt {\cs37\ul\cf2 readSensors}}}
();\par
   57     \par
   58     String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACE" }{}}{\fldrslt {\cs37\ul\cf2 userData}}}
();\par
   59 \par
   60 \par
   61 private:\par
   62 \par
   63     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADM" }{}}{\fldrslt {\cs37\ul\cf2 CoolFileSystem}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABW" }{}}{\fldrslt {\cs37\ul\cf2 fileSystem}}}
; \par
   64 \par
   65     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADN" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAF" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardSensors}}}
;\par
   66 \par
   67     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADO" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 coolBoardLed}}}
;\par
   68 \par
   69     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADP" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABI" }{}}{\fldrslt {\cs37\ul\cf2 rtc}}}
;\par
   70     \par
   71     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADQ" }{}}{\fldrslt {\cs37\ul\cf2 CoolWifi}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAJ" }{}}{\fldrslt {\cs37\ul\cf2 wifiManager}}}
;\par
   72 \par
   73     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADR" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAN" }{}}{\fldrslt {\cs37\ul\cf2 mqtt}}}
;\par
   74 \par
   75     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADS" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAS" }{}}{\fldrslt {\cs37\ul\cf2 jetPack}}}
;\par
   76 \par
   77     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADT" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAX" }{}}{\fldrslt {\cs37\ul\cf2 irene3000}}}
;\par
   78 \par
   79     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADU" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABC" }{}}{\fldrslt {\cs37\ul\cf2 externalSensors}}}
;\par
   80 \par
   81     bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 userActive}}}
=0;\par
   82 \par
   83     bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAW" }{}}{\fldrslt {\cs37\ul\cf2 ireneActive}}}
=0;\par
   84 \par
   85     bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAR" }{}}{\fldrslt {\cs37\ul\cf2 jetpackActive}}}
=0;\par
   86 \par
   87     bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABB" }{}}{\fldrslt {\cs37\ul\cf2 externalSensorsActive}}}
=0;       \par
   88 \par
   89     bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACK" }{}}{\fldrslt {\cs37\ul\cf2 sleepActive}}}
=0; \par
   90 \par
   91     unsigned long {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACS" }{}}{\fldrslt {\cs37\ul\cf2 logInterval}}}
=1;//s\par
   92 \par
   93     int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACT" }{}}{\fldrslt {\cs37\ul\cf2 serverTimeOut}}}
=180;\par
   94 \par
   95     String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABU" }{}}{\fldrslt {\cs37\ul\cf2 data}}}
="";\par
   96 \par
   97     String answer="";\par
   98 \par
   99 \par
  100 \};\par
  101 \par
  102 #endif\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/CoolBoardLed.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v /home/ashiroji/Arduino/libraries/CoolBoard/CoolBoardLed.cpp}
{\xe \v /home/ashiroji/Arduino/libraries/CoolBoard/CoolBoardLed.cpp}
{\bkmkstart AAAAAAAAJK}
{\bkmkend AAAAAAAAJK}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADO" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed}}} Source File. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "FS.h"}\par
{\f2 #include "Arduino.h"}\par
{\f2 #include <NeoPixelBus.h>}\par
{\f2 #include "CoolBoardLed.h"}\par
{\f2 #include "ArduinoJson.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for CoolBoardLed.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "CoolBoardLed_8cpp__incl.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJL" }{}}{\fldrslt {\cs37\ul\cf2 DEBUG}}}
\~ 1\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADO" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed}}} Source File. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid Mehdi Zemzem \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 1.0 \par
}}{
Definition in file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJM" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed.cpp}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v DEBUG\:CoolBoardLed.cpp}
{\xe \v CoolBoardLed.cpp\:DEBUG}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DEBUG\~ 1}}
\par
{\bkmkstart AAAAAAAAJL}
{\bkmkend AAAAAAAAJL}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJN" }{}}{\fldrslt {\cs37\ul\cf2 18}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJM" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed.cpp}}}
.}\par
}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/CoolBoardLed.cpp\par \pard\plain 
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     1 \par
    9 #include "FS.h"\par
   10 #include "Arduino.h"\par
   11 \par
   12 #include <NeoPixelBus.h>\par
   13 #include "{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADE" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed.h}}}
"\par
   14 #include "ArduinoJson.h"\par
   15 \par
   16 \par
   17 \par
   18 #define DEBUG 1\par
   19 \par
   20 #ifndef DEBUG\par
   21 \par
   22 #define DEBUG 0\par
   23 \par
   24 #endif\par
   25 \par
   26 \par
   27 \par
   33 void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACG" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed::fade}}}
(int R, int G, int B, float T) \par
   34 \{\par
   35 \par
   36 #if DEBUG == 1\par
   37 \par
   38     Serial.println( F("Entering CoolBoardLed.fade()") );\par
   39     Serial.println();\par
   40     Serial.print( F("R : ") );\par
   41     Serial.println(R);\par
   42     Serial.print( F("G : ") );\par
   43     Serial.println(G);\par
   44     Serial.print( F("B : ") );\par
   45     Serial.println(B);\par
   46     Serial.print( F("Time : ") );\par
   47     Serial.println(T);\par
   48     Serial.println();\par
   49 \par
   50 #endif  \par
   51     if(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADV" }{}}{\fldrslt {\cs37\ul\cf2 ledActive}}}
 == 1 )\par
   52     \{\par
   53         for (int k = 0; k < 1000; k++) \par
   54         \{\par
   55             {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADW" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
->SetPixelColor(0, RgbColor(k * R / 1000, k * G / 1000, k * B / 1000));\par
   56             {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADW" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
->Show();\par
   57             delay(T);\par
   58         \}\par
   59         \par
   60         for (int k = 1000; k >= 0; k--) \par
   61         \{\par
   62             {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADW" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
->SetPixelColor(0, RgbColor(k * R / 1000, k * G / 1000, k * B / 1000));\par
   63             {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADW" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
->Show();\par
   64             delay(T);\par
   65         \}\par
   66     \}\par
   67 \}\par
   68 \par
   74 void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABM" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed::blink}}}
(int R, int G, int B, float T) \par
   75 \{\par
   76 \par
   77 #if DEBUG == 1\par
   78 \par
   79     Serial.println( F("Entering CoolBoardLed.blink()"));\par
   80     Serial.println();\par
   81     Serial.print( F("R : "));\par
   82     Serial.println(R);\par
   83     Serial.print( F("G : ") );\par
   84     Serial.println(G);\par
   85     Serial.print( F("B : ") );\par
   86     Serial.println(B);\par
   87     Serial.print( F("Time :") );\par
   88     Serial.println(T);\par
   89     Serial.println();\par
   90 \par
   91 #endif  \par
   92 \par
   93     if(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADV" }{}}{\fldrslt {\cs37\ul\cf2 ledActive}}}
 == 1 )\par
   94     \{\par
   95         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADW" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
->SetPixelColor(0, RgbColor(R, G, B));\par
   96         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADW" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
->Show();\par
   97         delay(T);\par
   98         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADW" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
->SetPixelColor(0, RgbColor(0, 0, 0));\par
   99         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADW" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
->Show();\par
  100     \}\par
  101 \}\par
  102 \par
  107 void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABT" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed::fadeIn}}}
(int R, int G, int B, float T) \par
  108 \{\par
  109 \par
  110 #if DEBUG == 1\par
  111 \par
  112     Serial.println( F("Entering CoolBoardLed.fadeIn()") );\par
  113     Serial.println();\par
  114     Serial.print( F("R : ") );\par
  115     Serial.println(R);\par
  116     Serial.print( F("G : ") );\par
  117     Serial.println(G);\par
  118     Serial.print( F("B : ") );\par
  119     Serial.println(B);\par
  120     Serial.print( F("Time :") );\par
  121     Serial.println(T);\par
  122     Serial.println();\par
  123 \par
  124 #endif  \par
  125     \par
  126     if(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADV" }{}}{\fldrslt {\cs37\ul\cf2 ledActive}}}
 == 1 )\par
  127     \{\par
  128         for (int k = 0; k < 1000; k++) \par
  129         \{\par
  130             {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADW" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
->SetPixelColor(0, RgbColor(k * R / 1000, k * G / 1000, k * B / 1000));\par
  131             {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADW" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
->Show();\par
  132             delay(T);\par
  133         \}\par
  134     \}\par
  135 \par
  136 \}\par
  137 \par
  142 void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABG" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed::fadeOut}}}
(int R, int G, int B, float T) \par
  143 \{\par
  144 \par
  145 #if DEBUG == 1 \par
  146 \par
  147     Serial.println( F("Entering CoolBoardLed.fadeOut()" ) );\par
  148     Serial.println();\par
  149     Serial.print( F("R : ") );\par
  150     Serial.println(R);\par
  151     Serial.print( F("G : ") );\par
  152     Serial.println(G);\par
  153     Serial.print( F("B : ") );\par
  154     Serial.println(B);\par
  155     Serial.print( F("Time :") );\par
  156     Serial.println(T);\par
  157     Serial.println();\par
  158 \par
  159 #endif  \par
  160 \par
  161     if(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADV" }{}}{\fldrslt {\cs37\ul\cf2 ledActive}}}
 == 1 )\par
  162     \{\par
  163         for (int k = 1000; k >= 0; k--) \par
  164         \{\par
  165             {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADW" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
->SetPixelColor(0, RgbColor(k * R / 1000, k * G / 1000, k * B / 1000));\par
  166             {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADW" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
->Show();\par
  167             delay(T);\par
  168         \}\par
  169     \}\par
  170 \}\par
  171 \par
  176 void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABY" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed::strobe}}}
(int R, int G, int B, float T) \par
  177 \{\par
  178 \par
  179 #if DEBUG == 1\par
  180 \par
  181     Serial.println( F("Entering CoolBoardLed.strobe()") );\par
  182     Serial.println();\par
  183     Serial.print( F("R : ") );\par
  184     Serial.println(R);\par
  185     Serial.print( F("G: ") );\par
  186     Serial.println(G);\par
  187     Serial.print( F("B : ") );\par
  188     Serial.println(B);\par
  189     Serial.print( F("Time :") );\par
  190     Serial.println(T);\par
  191     Serial.println();\par
  192 \par
  193 #endif  \par
  194 \par
  195     if(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADV" }{}}{\fldrslt {\cs37\ul\cf2 ledActive}}}
 == 1 )\par
  196     \{   \par
  197         for (int k = 1000; k >= 0; k--) \par
  198         \{\par
  199             {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADW" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
->SetPixelColor(0, RgbColor(R, G, B));\par
  200             {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADW" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
->Show();\par
  201             delay(T);\par
  202             {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADW" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
->SetPixelColor(0, RgbColor(0, 0, 0));\par
  203             {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADW" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
->Show();\par
  204             delay(T);\par
  205         \}\par
  206     \}\par
  207 \}\par
  208 \par
  213 void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADX" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed::end}}}
()\par
  214 \{\par
  215 \par
  216 #if DEBUG == 1 \par
  217     \par
  218     Serial.println( F("Entering CoolBoardLed.end()") );\par
  219 \par
  220 #endif\par
  221 \par
  222     delete {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADW" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
;\par
  223 \}\par
  224 \par
  225 \par
  232 void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACR" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed::begin}}}
( )\par
  233 \{\par
  234 \par
  235 #if DEBUG == 1\par
  236 \par
  237     Serial.println( F("Entering CoolBoardLed.begin() ") );\par
  238 \par
  239 #endif\par
  240     yield();\par
  241     if(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADV" }{}}{\fldrslt {\cs37\ul\cf2 ledActive}}}
 == 1 )\par
  242     \{\par
  243         pinMode(5,OUTPUT);\par
  244         digitalWrite(5,HIGH);\par
  245         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADW" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
 = new NeoPixelBus<NeoGrbFeature, Neo800KbpsMethod>(1,2); \par
  246         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADW" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
->Begin();\par
  247         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADW" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
->Show();\par
  248 \par
  249     \}\par
  250 \par
  251 \} \par
  252 \par
  258 void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAE" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed::write}}}
(int R, int G, int B)\par
  259 \{\par
  260 \par
  261 #if DEBUG == 1\par
  262 \par
  263     Serial.println( F("Entering CoolBoardLed.write()") );\par
  264     Serial.println();\par
  265     Serial.print( F("R : ") );\par
  266     Serial.println(R);\par
  267     Serial.print( F("G : ") );\par
  268     Serial.println(G);\par
  269     Serial.print( F("B : ") );\par
  270     Serial.println(B);\par
  271     Serial.println();   \par
  272 \par
  273 #endif\par
  274 \par
  275     if(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADV" }{}}{\fldrslt {\cs37\ul\cf2 ledActive}}}
 == 1 )\par
  276     \{\par
  277         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADW" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
->SetPixelColor(0, RgbColor(R, G, B));\par
  278         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADW" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
->Show();\par
  279     \}\par
  280 \par
  281 \}\par
  282 \par
  291 bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACQ" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed::config}}}
()\par
  292 \{\par
  293 \par
  294 #if DEBUG == 1 \par
  295         \par
  296     Serial.println( F("Entering CoolBoardLed.config()") );\par
  297     Serial.println();\par
  298 \par
  299 #endif\par
  300     \par
  301     File coolBoardLedConfig = SPIFFS.open("/coolBoardLedConfig.json", "r");\par
  302 \par
  303     if (!coolBoardLedConfig) \par
  304     \{\par
  305     \par
  306     #if DEBUG == 1\par
  307 \par
  308         Serial.println( F("failed to read /coolBoardLedConfig.json") );\par
  309         Serial.println();\par
  310 \par
  311     #endif\par
  312 \par
  313         return(false);\par
  314     \}\par
  315     else\par
  316     \{\par
  317         size_t size = coolBoardLedConfig.size();\par
  318         // Allocate a buffer to store contents of the file.\par
  319         std::unique_ptr<char[]> buf(new char[size]);\par
  320 \par
  321         coolBoardLedConfig.readBytes(buf.get(), size);\par
  322         DynamicJsonBuffer jsonBuffer;\par
  323         JsonObject& json = jsonBuffer.parseObject(buf.get());\par
  324         if (!json.success()) \par
  325         \{\par
  326         \par
  327         #if DEBUG == 1\par
  328 \par
  329             Serial.println( F("failed to parse json") );\par
  330             Serial.println();\par
  331         \par
  332         #endif\par
  333 \par
  334             return(false);\par
  335         \} \par
  336         else\par
  337         \{\par
  338         \par
  339         #if DEBUG == 1\par
  340     \par
  341             Serial.println( F("read configuration file : ") );\par
  342             json.printTo(Serial);\par
  343             Serial.println();\par
  344             \par
  345             Serial.print(F("jsonBuffer size :"));\par
  346             Serial.println(jsonBuffer.size());\par
  347             Serial.println();\par
  348 \par
  349         #endif\par
  350   \par
  351             if(json["ledActive"].success() )\par
  352             \{\par
  353                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADV" }{}}{\fldrslt {\cs37\ul\cf2 ledActive}}}
 = json["ledActive"]; \par
  354             \}\par
  355             else\par
  356             \{\par
  357                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADV" }{}}{\fldrslt {\cs37\ul\cf2 ledActive}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADV" }{}}{\fldrslt {\cs37\ul\cf2 ledActive}}}
;            \par
  358             \}\par
  359             \par
  360             json["ledActive"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADV" }{}}{\fldrslt {\cs37\ul\cf2 ledActive}}}
;\par
  361             coolBoardLedConfig.close();\par
  362             \par
  363             coolBoardLedConfig = SPIFFS.open("/coolBoardLedConfig.json", "w");\par
  364             if(!coolBoardLedConfig)\par
  365             \{\par
  366             \par
  367             #if DEBUG == 1 \par
  368 \par
  369                 Serial.println( F("failed to write to /coolBoardLedConfig.json") );\par
  370                 Serial.println();\par
  371 \par
  372             #endif\par
  373 \par
  374                 return(false);          \par
  375             \}\par
  376 \par
  377             json.printTo(coolBoardLedConfig);\par
  378             coolBoardLedConfig.close();\par
  379 \par
  380         #if DEBUG == 1\par
  381     \par
  382             Serial.println( F("saved Led Config is : ") );\par
  383             json.printTo(Serial);\par
  384             Serial.println();\par
  385 \par
  386         #endif\par
  387 \par
  388             return(true); \par
  389         \}\par
  390     \}   \par
  391 \par
  392 \}               \par
  393 \par
  400 void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAD" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed::printConf}}}
()\par
  401 \{\par
  402 \par
  403 #if DEBUG == 1 \par
  404 \par
  405     Serial.println( F("Entering CoolBoardLed.printConf()") );\par
  406     Serial.println();\par
  407 \par
  408 #endif\par
  409 \par
  410     Serial.println("Led Configuration");\par
  411 \par
  412     Serial.print("ledActive : ");\par
  413     Serial.println({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADV" }{}}{\fldrslt {\cs37\ul\cf2 ledActive}}}
);\par
  414 \par
  415     Serial.println();   \par
  416 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/CoolBoardLed.h File Reference\par \pard\plain 
{\tc\tcl2 \v /home/ashiroji/Arduino/libraries/CoolBoard/CoolBoardLed.h}
{\xe \v /home/ashiroji/Arduino/libraries/CoolBoard/CoolBoardLed.h}
{\bkmkstart AAAAAAAADE}
{\bkmkend AAAAAAAADE}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADO" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed}}} Header File. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Arduino.h"}\par
{\f2 #include <NeoPixelBus.h>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for CoolBoardLed.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "CoolBoardLed_8h__incl.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "CoolBoardLed_8h__dep__incl.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADO" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed}}}
\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class handles the led in the Sensor Board. }}}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADO" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed}}} Header File. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid Mehdi Zemzem \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 1.0 \par
}}{
Definition in file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJO" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed.h}}}
.}\par
}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/CoolBoardLed.h\par \pard\plain 
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     1 \par
    8 #ifndef CoolOnBoardLed_H\par
    9 #define CoolOnBoardLed_H\par
   10 \par
   11 #include"Arduino.h"\par
   12 \par
   13 #include <NeoPixelBus.h>\par
   14 \par
   15 \par
   20 class {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADO" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardLed}}}
\par
   21 \par
   22 \{\par
   23 \par
   24 public:\par
   25 \par
   26     void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACR" }{}}{\fldrslt {\cs37\ul\cf2 begin}}}
();            \par
   27 \par
   28 \par
   29     void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAE" }{}}{\fldrslt {\cs37\ul\cf2 write}}}
(int R, int G, int B);       \par
   30 \par
   31     void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADX" }{}}{\fldrslt {\cs37\ul\cf2 end}}}
();             //delete the dynamic led;\par
   32 \par
   33     bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACQ" }{}}{\fldrslt {\cs37\ul\cf2 config}}}
();\par
   34     void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAD" }{}}{\fldrslt {\cs37\ul\cf2 printConf}}}
();\par
   35 \par
   36 \par
   37     //Neo Pixel Led methods :\par
   38     void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACG" }{}}{\fldrslt {\cs37\ul\cf2 fade}}}
(int R, int G, int B, float T);\par
   39 \par
   40     void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABM" }{}}{\fldrslt {\cs37\ul\cf2 blink}}}
(int R, int G, int B, float T);\par
   41 \par
   42     void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABT" }{}}{\fldrslt {\cs37\ul\cf2 fadeIn}}}
(int R, int G, int B, float T);\par
   43 \par
   44     void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABG" }{}}{\fldrslt {\cs37\ul\cf2 fadeOut}}}
(int R, int G, int B, float T);\par
   45 \par
   46     void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABY" }{}}{\fldrslt {\cs37\ul\cf2 strobe}}}
(int R, int G, int B, float T); \par
   47 \par
   48 \par
   49 \par
   50 private:\par
   51 \par
   52 \par
   53     NeoPixelBus<NeoGrbFeature, Neo800KbpsMethod>* {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADW" }{}}{\fldrslt {\cs37\ul\cf2 neoPixelLed}}}
 = NULL; //template instance must be dynamic\par
   54 \par
   55     byte {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADV" }{}}{\fldrslt {\cs37\ul\cf2 ledActive}}}
=0;\par
   56 \par
   57 \};\par
   58 \par
   59 #endif\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/CoolBoardSensors.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v /home/ashiroji/Arduino/libraries/CoolBoard/CoolBoardSensors.cpp}
{\xe \v /home/ashiroji/Arduino/libraries/CoolBoard/CoolBoardSensors.cpp}
{\bkmkstart AAAAAAAAJP}
{\bkmkend AAAAAAAAJP}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADN" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors}}} Source File. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "FS.h"}\par
{\f2 #include "Arduino.h"}\par
{\f2 #include <stdint.h>}\par
{\f2 #include "Wire.h"}\par
{\f2 #include "ArduinoJson.h"}\par
{\f2 #include "CoolBoardSensors.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for CoolBoardSensors.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "CoolBoardSensors_8cpp__incl.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJQ" }{}}{\fldrslt {\cs37\ul\cf2 DEBUG}}}
\~ 1\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADN" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors}}} Source File. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid Mehdi Zemzem \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 1.0 \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Date:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 27/06/2017 \par
}}{
Definition in file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJR" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors.cpp}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v DEBUG\:CoolBoardSensors.cpp}
{\xe \v CoolBoardSensors.cpp\:DEBUG}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DEBUG\~ 1}}
\par
{\bkmkstart AAAAAAAAJQ}
{\bkmkend AAAAAAAAJQ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJS" }{}}{\fldrslt {\cs37\ul\cf2 18}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJR" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors.cpp}}}
.}\par
}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/CoolBoardSensors.cpp\par \pard\plain 
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     1 \par
    9 #include "FS.h"\par
   10 #include "Arduino.h"\par
   11 #include <stdint.h>        \par
   12 #include "Wire.h"\par
   13 #include "ArduinoJson.h"\par
   14 #include "{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADD" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors.h}}}
"\par
   15 \par
   16 \par
   17 \par
   18 #define DEBUG 1\par
   19 \par
   20 #ifndef DEBUG\par
   21 \par
   22 #define DEBUG 0\par
   23 \par
   24 #endif\par
   25 \par
   26 \par
   27 \par
   28 \par
   35 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADY" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::CoolBoardSensors}}}
()\par
   36 \{\par
   37 \par
   38 #if DEBUG == 1\par
   39 \par
   40     Serial.println( F("Entering CoolBoardSensors Constructor") );\par
   41     Serial.println();\par
   42 \par
   43 #endif\par
   44     \par
   45     Wire.begin(2, 14);                       //I2C init Maybe change this to the CoolBoard?\par
   46 \par
   47     pinMode({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADZ" }{}}{\fldrslt {\cs37\ul\cf2 AnMplex}}}
, OUTPUT);                //Declare Analog Multiplexer OUTPUT\par
   48     pinMode({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEA" }{}}{\fldrslt {\cs37\ul\cf2 EnMoisture}}}
, OUTPUT);             //Declare Moisture enable Pin\par
   49     pinMode({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEB" }{}}{\fldrslt {\cs37\ul\cf2 EnI2C}}}
, OUTPUT);        //Declare I2C Enable pin \par
   50 \par
   51 \par
   52 \}\par
   53 \par
   54 \par
   61 void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEC" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::allActive}}}
()\par
   62 \{\par
   63 \par
   64 #if DEBUG == 1 \par
   65 \par
   66     Serial.println( F("Entering CoolBoardSensors.allActive()") );\par
   67     Serial.println();\par
   68 \par
   69 #endif\par
   70     \par
   71     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAED" }{}}{\fldrslt {\cs37\ul\cf2 lightDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEE" }{}}{\fldrslt {\cs37\ul\cf2 visible}}}
=1;\par
   72     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAED" }{}}{\fldrslt {\cs37\ul\cf2 lightDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEF" }{}}{\fldrslt {\cs37\ul\cf2 ir}}}
=1;\par
   73     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAED" }{}}{\fldrslt {\cs37\ul\cf2 lightDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEG" }{}}{\fldrslt {\cs37\ul\cf2 uv}}}
=1; \par
   74 \par
   75     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEH" }{}}{\fldrslt {\cs37\ul\cf2 airDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEI" }{}}{\fldrslt {\cs37\ul\cf2 temperature}}}
=1;\par
   76     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEH" }{}}{\fldrslt {\cs37\ul\cf2 airDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEJ" }{}}{\fldrslt {\cs37\ul\cf2 humidity}}}
=1;\par
   77     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEH" }{}}{\fldrslt {\cs37\ul\cf2 airDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEK" }{}}{\fldrslt {\cs37\ul\cf2 pressure}}}
=1;\par
   78 \par
   79 \par
   80     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEL" }{}}{\fldrslt {\cs37\ul\cf2 vbatActive}}}
=1;\par
   81 \par
   82     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEM" }{}}{\fldrslt {\cs37\ul\cf2 soilMoistureActive}}}
=1;\par
   83     \par
   84 \par
   85 \par
   86 \}\par
   87 \par
   88 \par
   94 void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAH" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::begin}}}
()\par
   95 \{  \par
   96 \par
   97 #if DEBUG == 1 \par
   98      \par
   99     Serial.println( F("Entering CoolBoardSensors.begin()") );\par
  100     Serial.println();\par
  101 \par
  102 #endif\par
  103 \par
  104     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEN" }{}}{\fldrslt {\cs37\ul\cf2 initReadI2C}}}
();\par
  105 \par
  106     while (!{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEO" }{}}{\fldrslt {\cs37\ul\cf2 lightSensor}}}
.Begin()) \par
  107     \{\par
  108     \par
  109     #if DEBUG == 1\par
  110 \par
  111         Serial.println( F("Si1145 is not ready!  1 second") );\par
  112 \par
  113     #endif\par
  114 \par
  115         delay(1000);\par
  116     \}\par
  117      \par
  118     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEP" }{}}{\fldrslt {\cs37\ul\cf2 setEnvSensorSettings}}}
();\par
  119     delay(10);  //Make sure sensor had enough time to turn on. BME280 requires 2ms to start up.\par
  120     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEQ" }{}}{\fldrslt {\cs37\ul\cf2 envSensor}}}
.begin();\par
  121     delay(10);  //Make sure sensor had enough time to turn on. BME280 requires 2ms to start up.\par
  122 \par
  123 #if DEBUG == 1 \par
  124     \par
  125     Serial.print( F("BME280 begin answer is :") );\par
  126     Serial.println({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEQ" }{}}{\fldrslt {\cs37\ul\cf2 envSensor}}}
.begin(), HEX);\par
  127     Serial.println();\par
  128 \par
  129 #endif\par
  130 \par
  131 \}\par
  132 \par
  138 void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAER" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::end}}}
()\par
  139 \{\par
  140 \par
  141 #if DEBUG == 1  \par
  142     Serial.println( F("Entering CoolBoardSensors.end()") );\par
  143     Serial.println();\par
  144 \par
  145 #endif\par
  146 \par
  147     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEO" }{}}{\fldrslt {\cs37\ul\cf2 lightSensor}}}
.DeInit();\par
  148 \par
  149 \}\par
  150 \par
  159 String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACW" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::read}}}
()\par
  160 \{\par
  161 \par
  162 #if DEBUG == 1 \par
  163     \par
  164     Serial.println( F("Entering CoolBoardSensors.read()") );\par
  165     Serial.println();\par
  166 \par
  167 #endif\par
  168 \par
  169     String data;\par
  170     DynamicJsonBuffer  jsonBuffer ;\par
  171     JsonObject& root = jsonBuffer.createObject();\par
  172     \par
  173     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEN" }{}}{\fldrslt {\cs37\ul\cf2 initReadI2C}}}
();\par
  174     delay(100);\par
  175     //light data\par
  176     if({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAED" }{}}{\fldrslt {\cs37\ul\cf2 lightDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEE" }{}}{\fldrslt {\cs37\ul\cf2 visible}}}
)\par
  177     \{\par
  178         root["visibleLight"] ={\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEO" }{}}{\fldrslt {\cs37\ul\cf2 lightSensor}}}
.ReadVisible() ;\par
  179     \}\par
  180     \par
  181     if({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAED" }{}}{\fldrslt {\cs37\ul\cf2 lightDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEF" }{}}{\fldrslt {\cs37\ul\cf2 ir}}}
)\par
  182     \{\par
  183         root["infraRed"] = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEO" }{}}{\fldrslt {\cs37\ul\cf2 lightSensor}}}
.ReadIR();\par
  184     \}\par
  185 \par
  186     if({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAED" }{}}{\fldrslt {\cs37\ul\cf2 lightDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEG" }{}}{\fldrslt {\cs37\ul\cf2 uv}}}
)\par
  187     \{\par
  188         float tempUV = (float){\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEO" }{}}{\fldrslt {\cs37\ul\cf2 lightSensor}}}
.ReadUV()/100 ;\par
  189         root["ultraViolet"] = tempUV;\par
  190     \}\par
  191     \par
  192     //BME280 data\par
  193     if({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEH" }{}}{\fldrslt {\cs37\ul\cf2 airDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEK" }{}}{\fldrslt {\cs37\ul\cf2 pressure}}}
)  \par
  194     \{\par
  195         root["Pressure"] ={\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEQ" }{}}{\fldrslt {\cs37\ul\cf2 envSensor}}}
.readFloatPressure();\par
  196     \}\par
  197     \par
  198         \par
  199     if({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEH" }{}}{\fldrslt {\cs37\ul\cf2 airDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEJ" }{}}{\fldrslt {\cs37\ul\cf2 humidity}}}
)  \par
  200     \{   \par
  201         root["Humidity"] ={\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEQ" }{}}{\fldrslt {\cs37\ul\cf2 envSensor}}}
.readFloatHumidity() ;\par
  202     \}   \par
  203     \par
  204     if({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEH" }{}}{\fldrslt {\cs37\ul\cf2 airDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEI" }{}}{\fldrslt {\cs37\ul\cf2 temperature}}}
)\par
  205     \{\par
  206         root["Temperature"]={\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEQ" }{}}{\fldrslt {\cs37\ul\cf2 envSensor}}}
.readTempC();\par
  207     \}\par
  208     \par
  209     //Vbat\par
  210     if({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEL" }{}}{\fldrslt {\cs37\ul\cf2 vbatActive}}}
)  \par
  211     \{   \par
  212         root["Vbat"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAES" }{}}{\fldrslt {\cs37\ul\cf2 readVBat}}}
();\par
  213     \}\par
  214     \par
  215     //earth Moisture\par
  216     if({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEM" }{}}{\fldrslt {\cs37\ul\cf2 soilMoistureActive}}}
)\par
  217     \{   \par
  218         root["soilMoisture"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAET" }{}}{\fldrslt {\cs37\ul\cf2 readMoisture}}}
();\par
  219     \}\par
  220     \par
  221     \par
  222     root.printTo(data);\par
  223 \par
  224 #if DEBUG == 1\par
  225 \par
  226     Serial.println( F("CoolBoardSensors data is :") );\par
  227     root.printTo(Serial);\par
  228     Serial.println();\par
  229     \par
  230     Serial.print(F("jsonBuffer size: "));\par
  231     Serial.println(jsonBuffer.size());\par
  232     Serial.println();\par
  233 \par
  234 #endif\par
  235 \par
  236     return(data);   \par
  237     \par
  238 \par
  239 \}\par
  240 \par
  246 void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEN" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::initReadI2C}}}
()\par
  247 \{\par
  248 \par
  249 #if DEBUG == 1\par
  250 \par
  251     Serial.println( F("Entering CoolBoardSensors.initReadI2C()") );\par
  252     Serial.println();\par
  253 \par
  254 #endif\par
  255  \par
  256     digitalWrite({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEB" }{}}{\fldrslt {\cs37\ul\cf2 EnI2C}}}
,HIGH);//HIGH= I2C Enable\par
  257 \par
  258 \}\par
  259 \par
  265 void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEU" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::stopReadI2C}}}
()\par
  266 \{\par
  267 \par
  268 #if DEBUG == 1\par
  269 \par
  270     Serial.println( F("Entering CoolBoardSensors.stopReadI2C()") );\par
  271     Serial.println();\par
  272 \par
  273 #endif\par
  274 \par
  275     digitalWrite({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEB" }{}}{\fldrslt {\cs37\ul\cf2 EnI2C}}}
,LOW);//HIGH= I2C Enable\par
  276 \par
  277 \}\par
  278 \par
  279 \par
  289 bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAG" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::config}}}
()\par
  290 \{\par
  291 \par
  292 #if DEBUG == 1\par
  293 \par
  294     Serial.println( F("Entering CoolBoardSensors.config()") );\par
  295     Serial.println();\par
  296 \par
  297 #endif\par
  298 \par
  299     //read config file\par
  300     //update data\par
  301     File coolBoardSensorsConfig = SPIFFS.open("/coolBoardSensorsConfig.json", "r");\par
  302 \par
  303     if (!coolBoardSensorsConfig) \par
  304     \{\par
  305     \par
  306     #if DEBUG == 1\par
  307 \par
  308         Serial.println( F("failed to read /coolBoardSensorsConfig.json") );\par
  309         Serial.println();\par
  310     \par
  311     #endif\par
  312 \par
  313         return(false);\par
  314     \}\par
  315     else\par
  316     \{\par
  317         size_t size = coolBoardSensorsConfig.size();\par
  318         // Allocate a buffer to store contents of the file.\par
  319         std::unique_ptr<char[]> buf(new char[size]);\par
  320 \par
  321         coolBoardSensorsConfig.readBytes(buf.get(), size);\par
  322         DynamicJsonBuffer jsonBuffer;\par
  323         JsonObject& json = jsonBuffer.parseObject(buf.get());\par
  324         if (!json.success()) \par
  325         \{\par
  326         \par
  327         #if DEBUG == 1\par
  328 \par
  329             Serial.println( F("failed to parse coolBoardSensorsConfig json") );\par
  330             Serial.println();\par
  331         \par
  332         #endif\par
  333     \par
  334             return(false);\par
  335         \} \par
  336         else\par
  337         \{\par
  338 \par
  339         #if DEBUG == 1\par
  340 \par
  341             Serial.println( F("Configuration Json is :") );\par
  342             json.printTo(Serial);\par
  343             Serial.println();\par
  344 \par
  345             Serial.print(F("jsonBuffer size: "));\par
  346             Serial.println(jsonBuffer.size());\par
  347             Serial.println();\par
  348 \par
  349             \par
  350         \par
  351         #endif\par
  352             \par
  353             if(json["BME280"]["temperature"].success() )\par
  354             \{           \par
  355                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEH" }{}}{\fldrslt {\cs37\ul\cf2 airDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEI" }{}}{\fldrslt {\cs37\ul\cf2 temperature}}}
=json["BME280"]["temperature"];\par
  356             \}\par
  357             else\par
  358             \{\par
  359                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEH" }{}}{\fldrslt {\cs37\ul\cf2 airDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEI" }{}}{\fldrslt {\cs37\ul\cf2 temperature}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEH" }{}}{\fldrslt {\cs37\ul\cf2 airDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEI" }{}}{\fldrslt {\cs37\ul\cf2 temperature}}}
;            \par
  360             \}\par
  361             json["BME280"]["temperature"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEH" }{}}{\fldrslt {\cs37\ul\cf2 airDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEI" }{}}{\fldrslt {\cs37\ul\cf2 temperature}}}
;\par
  362             \par
  363             \par
  364             if(json["BME280"]["humidity"].success() )\par
  365             \{           \par
  366             \par
  367                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEH" }{}}{\fldrslt {\cs37\ul\cf2 airDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEJ" }{}}{\fldrslt {\cs37\ul\cf2 humidity}}}
=json["BME280"]["humidity"];\par
  368             \}\par
  369             else\par
  370             \{\par
  371                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEH" }{}}{\fldrslt {\cs37\ul\cf2 airDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEJ" }{}}{\fldrslt {\cs37\ul\cf2 humidity}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEH" }{}}{\fldrslt {\cs37\ul\cf2 airDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEJ" }{}}{\fldrslt {\cs37\ul\cf2 humidity}}}
;\par
  372             \}\par
  373             json["BME280"]["humidity"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEH" }{}}{\fldrslt {\cs37\ul\cf2 airDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEJ" }{}}{\fldrslt {\cs37\ul\cf2 humidity}}}
;\par
  374             \par
  375             \par
  376             if(json["BME280"]["pressure"].success() )\par
  377             \{\par
  378                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEH" }{}}{\fldrslt {\cs37\ul\cf2 airDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEK" }{}}{\fldrslt {\cs37\ul\cf2 pressure}}}
=json["BME280"]["pressure"];\par
  379             \}\par
  380             else\par
  381             \{\par
  382                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEH" }{}}{\fldrslt {\cs37\ul\cf2 airDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEK" }{}}{\fldrslt {\cs37\ul\cf2 pressure}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEH" }{}}{\fldrslt {\cs37\ul\cf2 airDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEK" }{}}{\fldrslt {\cs37\ul\cf2 pressure}}}
;\par
  383             \}\par
  384             json["BME280"]["pressure"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEH" }{}}{\fldrslt {\cs37\ul\cf2 airDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEK" }{}}{\fldrslt {\cs37\ul\cf2 pressure}}}
;\par
  385 \par
  386             \par
  387             if(json["SI114X"]["visible"].success() )\par
  388             \{\par
  389                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAED" }{}}{\fldrslt {\cs37\ul\cf2 lightDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEE" }{}}{\fldrslt {\cs37\ul\cf2 visible}}}
=json["SI114X"]["visible"];\par
  390             \}\par
  391             else\par
  392             \{\par
  393                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAED" }{}}{\fldrslt {\cs37\ul\cf2 lightDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEE" }{}}{\fldrslt {\cs37\ul\cf2 visible}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAED" }{}}{\fldrslt {\cs37\ul\cf2 lightDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEE" }{}}{\fldrslt {\cs37\ul\cf2 visible}}}
;\par
  394             \}\par
  395             json["SI114X"]["visible"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAED" }{}}{\fldrslt {\cs37\ul\cf2 lightDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEE" }{}}{\fldrslt {\cs37\ul\cf2 visible}}}
;\par
  396             \par
  397             \par
  398             if(json["SI114X"]["ir"].success() )\par
  399             \{           \par
  400                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAED" }{}}{\fldrslt {\cs37\ul\cf2 lightDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEF" }{}}{\fldrslt {\cs37\ul\cf2 ir}}}
=json["SI114X"]["ir"];\par
  401             \}\par
  402             else\par
  403             \{\par
  404                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAED" }{}}{\fldrslt {\cs37\ul\cf2 lightDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEF" }{}}{\fldrslt {\cs37\ul\cf2 ir}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAED" }{}}{\fldrslt {\cs37\ul\cf2 lightDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEF" }{}}{\fldrslt {\cs37\ul\cf2 ir}}}
;\par
  405             \}\par
  406             json["SI114X"]["ir"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAED" }{}}{\fldrslt {\cs37\ul\cf2 lightDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEF" }{}}{\fldrslt {\cs37\ul\cf2 ir}}}
;\par
  407 \par
  408             \par
  409             if(json["SI114X"]["uv"].success() )         \par
  410             \{           \par
  411                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAED" }{}}{\fldrslt {\cs37\ul\cf2 lightDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEG" }{}}{\fldrslt {\cs37\ul\cf2 uv}}}
=json["SI114X"]["uv"];\par
  412             \}\par
  413             else\par
  414             \{\par
  415                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAED" }{}}{\fldrslt {\cs37\ul\cf2 lightDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEG" }{}}{\fldrslt {\cs37\ul\cf2 uv}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAED" }{}}{\fldrslt {\cs37\ul\cf2 lightDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEG" }{}}{\fldrslt {\cs37\ul\cf2 uv}}}
;\par
  416             \}\par
  417             json["SI114X"]["uv"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAED" }{}}{\fldrslt {\cs37\ul\cf2 lightDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEG" }{}}{\fldrslt {\cs37\ul\cf2 uv}}}
;\par
  418 \par
  419 \par
  420             if(json["vbat"].success() )\par
  421             \{\par
  422                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEL" }{}}{\fldrslt {\cs37\ul\cf2 vbatActive}}}
=json["vbat"];\par
  423             \}\par
  424             else\par
  425             \{\par
  426                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEL" }{}}{\fldrslt {\cs37\ul\cf2 vbatActive}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEL" }{}}{\fldrslt {\cs37\ul\cf2 vbatActive}}}
;\par
  427             \}\par
  428             json["vbat"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEL" }{}}{\fldrslt {\cs37\ul\cf2 vbatActive}}}
;\par
  429 \par
  430             \par
  431             if(json["soilMoisture"].success() )\par
  432             \{           \par
  433                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEM" }{}}{\fldrslt {\cs37\ul\cf2 soilMoistureActive}}}
= json["soilMoisture"];\par
  434             \}\par
  435             else\par
  436             \{\par
  437                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEM" }{}}{\fldrslt {\cs37\ul\cf2 soilMoistureActive}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEM" }{}}{\fldrslt {\cs37\ul\cf2 soilMoistureActive}}}
;\par
  438             \}\par
  439             json["soilMoisture"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEM" }{}}{\fldrslt {\cs37\ul\cf2 soilMoistureActive}}}
;\par
  440 \par
  441             coolBoardSensorsConfig.close();         \par
  442             coolBoardSensorsConfig = SPIFFS.open("/coolBoardSensorsConfig.json", "w");          \par
  443             if(!coolBoardSensorsConfig)\par
  444             \{\par
  445             \par
  446             #if DEBUG == 1\par
  447 \par
  448                 Serial.println( F("failed to write to /coolBoardSensorsConfig.json") );\par
  449                 Serial.println();\par
  450             \par
  451             #endif\par
  452 \par
  453                 return(false);          \par
  454             \}  \par
  455 \par
  456             json.printTo(coolBoardSensorsConfig);\par
  457             coolBoardSensorsConfig.close();         \par
  458             \par
  459         #if DEBUG == 1\par
  460 \par
  461             Serial.println( F("Saved Configuration Json is : ") );\par
  462             json.printTo(Serial);\par
  463             Serial.println();\par
  464         \par
  465         #endif\par
  466 \par
  467             return(true); \par
  468         \}\par
  469     \}   \par
  470 \par
  471 \}\par
  472 \par
  473 \par
  479 void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAI" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::printConf}}}
()\par
  480 \{\par
  481 \par
  482 #if DEBUG == 1\par
  483 \par
  484     Serial.println( F("Entering CoolBoardSensors.printConf()") );\par
  485     Serial.println();\par
  486 \par
  487 #endif\par
  488 \par
  489     Serial.println("Sensors Configuration : ");\par
  490     \par
  491     Serial.print("airDataActive.temperature : ");\par
  492     Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEH" }{}}{\fldrslt {\cs37\ul\cf2 airDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEI" }{}}{\fldrslt {\cs37\ul\cf2 temperature}}}
);\par
  493 \par
  494     Serial.print("airDataActive.humidity : ");\par
  495     Serial.println({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEH" }{}}{\fldrslt {\cs37\ul\cf2 airDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEJ" }{}}{\fldrslt {\cs37\ul\cf2 humidity}}}
);\par
  496 \par
  497     Serial.print("airDataActive.pressure : ");\par
  498     Serial.println({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEH" }{}}{\fldrslt {\cs37\ul\cf2 airDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEK" }{}}{\fldrslt {\cs37\ul\cf2 pressure}}}
);\par
  499 \par
  500     Serial.print("lightDataActive.visible : ");\par
  501     Serial.println({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAED" }{}}{\fldrslt {\cs37\ul\cf2 lightDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEE" }{}}{\fldrslt {\cs37\ul\cf2 visible}}}
);\par
  502 \par
  503     Serial.print("lightDataActive.ir : ");\par
  504     Serial.println({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAED" }{}}{\fldrslt {\cs37\ul\cf2 lightDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEF" }{}}{\fldrslt {\cs37\ul\cf2 ir}}}
);\par
  505 \par
  506     Serial.print("lightDataActive.uv : ");\par
  507     Serial.println({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAED" }{}}{\fldrslt {\cs37\ul\cf2 lightDataActive}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEG" }{}}{\fldrslt {\cs37\ul\cf2 uv}}}
);\par
  508     \par
  509     Serial.print("vbatActive : ");\par
  510     Serial.println({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEL" }{}}{\fldrslt {\cs37\ul\cf2 vbatActive}}}
);\par
  511 \par
  512     Serial.print("soilMoitureActive : ");\par
  513     Serial.println({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEM" }{}}{\fldrslt {\cs37\ul\cf2 soilMoistureActive}}}
);\par
  514 \par
  515     Serial.println();\par
  516 \}\par
  517 \par
  518 \par
  525 void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEP" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::setEnvSensorSettings}}}
( uint8_t commInterface, uint8_t I2CAddress,    \par
  526 \par
  527                            uint8_t runMode , uint8_t tStandby, uint8_t filter,                         \par
  528                            uint8_t tempOverSample,  uint8_t pressOverSample,                                   \par
  529                            uint8_t humidOverSample)\par
  530 \{\par
  531 \par
  532 #if DEBUG == 1\par
  533     \par
  534     Serial.println( F("Entering CoolBoardSensors.setEnvSensorSettings()") );\par
  535     Serial.println();\par
  536 \par
  537 #endif\par
  538   \par
  539     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEQ" }{}}{\fldrslt {\cs37\ul\cf2 envSensor}}}
.settings.commInterface = commInterface;      \par
  540 \par
  541     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEQ" }{}}{\fldrslt {\cs37\ul\cf2 envSensor}}}
.settings.I2CAddress = I2CAddress;\par
  542 \par
  543     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEQ" }{}}{\fldrslt {\cs37\ul\cf2 envSensor}}}
.settings.runMode = runMode; \par
  544 \par
  545     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEQ" }{}}{\fldrslt {\cs37\ul\cf2 envSensor}}}
.settings.tStandby = tStandby; \par
  546 \par
  547     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEQ" }{}}{\fldrslt {\cs37\ul\cf2 envSensor}}}
.settings.filter = filter; \par
  548 \par
  549     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEQ" }{}}{\fldrslt {\cs37\ul\cf2 envSensor}}}
.settings.tempOverSample = tempOverSample;\par
  550 \par
  551     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEQ" }{}}{\fldrslt {\cs37\ul\cf2 envSensor}}}
.settings.pressOverSample = pressOverSample;\par
  552 \par
  553     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEQ" }{}}{\fldrslt {\cs37\ul\cf2 envSensor}}}
.settings.humidOverSample = humidOverSample;\par
  554 \par
  555 \}\par
  556 \par
  565 float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAES" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::readVBat}}}
()\par
  566 \{\par
  567 \par
  568 #if DEBUG == 1\par
  569 \par
  570     Serial.println( F("Entering CoolBoardSensors.readVBat()") );\par
  571     Serial.println();\par
  572 \par
  573 #endif\par
  574 \par
  575     digitalWrite(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADZ" }{}}{\fldrslt {\cs37\ul\cf2 AnMplex}}}
, LOW);                            //Enable Analog Switch to get the batterie tension\par
  576     \par
  577     delay(200);\par
  578     \par
  579     int raw = analogRead(A0);                                    //read in batterie tension\par
  580     \par
  581     float val = 6.04 / 1024 * raw;                               //convert it apprimatly right tension in volts\par
  582     \par
  583 #if DEBUG == 1\par
  584 \par
  585     Serial.println( F("Vbat is : ") );\par
  586     Serial.println(val);\par
  587     Serial.println();\par
  588 \par
  589 #endif\par
  590 \par
  591     return (val);   \par
  592 \}\par
  593 \par
  602 float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAET" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::readMoisture}}}
()\par
  603 \{\par
  604 \par
  605 #if DEBUG == 1\par
  606     \par
  607     Serial.println( F("Entering CoolBoardSensors.readMoisture()") );\par
  608     Serial.println();\par
  609     \par
  610 #endif\par
  611 \par
  612     digitalWrite({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEA" }{}}{\fldrslt {\cs37\ul\cf2 EnMoisture}}}
, LOW);                 //enable moisture sensor and waith a bit\par
  613 \par
  614     digitalWrite({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADZ" }{}}{\fldrslt {\cs37\ul\cf2 AnMplex}}}
, HIGH);            //enable analog Switch to get the moisture\par
  615 \par
  616     delay(2000);\par
  617 \par
  618     int val = analogRead(A0);                       //read the value form the moisture sensor\par
  619 \par
  620     float result = (float)map(val, 0, 890, 0, 100); \par
  621 \par
  622     digitalWrite({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEA" }{}}{\fldrslt {\cs37\ul\cf2 EnMoisture}}}
, HIGH);                  //disable moisture sensor for minimum wear\par
  623     \par
  624 #if DEBUG == 1 \par
  625 \par
  626     Serial.println( F("Soil Moisture is : ") );\par
  627     Serial.println(result);\par
  628     Serial.println();\par
  629 \par
  630 #endif \par
  631 \par
  632     return (result);\par
  633 \}\par
  634 \par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/CoolBoardSensors.h File Reference\par \pard\plain 
{\tc\tcl2 \v /home/ashiroji/Arduino/libraries/CoolBoard/CoolBoardSensors.h}
{\xe \v /home/ashiroji/Arduino/libraries/CoolBoard/CoolBoardSensors.h}
{\bkmkstart AAAAAAAADD}
{\bkmkend AAAAAAAADD}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADN" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors}}} Header File. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Arduino.h"}\par
{\f2 #include "SI114X.h"}\par
{\f2 #include "SparkFunBME280.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for CoolBoardSensors.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "CoolBoardSensors_8h__incl.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "CoolBoardSensors_8h__dep__incl.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADN" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors}}}
\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class handles the On-Board Sensors. }}}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEV" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::lightActive}}}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEW" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors::airActive}}}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADN" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors}}} Header File. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid Mehdi Zemzem \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 1.0 \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Date:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 27/06/2017 \par
}}{
Definition in file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJT" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors.h}}}
.}\par
}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/CoolBoardSensors.h\par \pard\plain 
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     1 \par
   10 #ifndef CoolBoardSensors_H\par
   11 #define CoolBoardSensors_H\par
   12 \par
   13 #include "Arduino.h"\par
   14 #include "SI114X.h"        // Light sensor Support\par
   15 #include "SparkFunBME280.h"// Environmental sensor Support\par
   16 \par
   24 class {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADN" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors}}}
\par
   25 \{\par
   26 \par
   27 public:\par
   28 \par
   29     //Constructor\par
   30     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADY" }{}}{\fldrslt {\cs37\ul\cf2 CoolBoardSensors}}}
();\par
   31 \par
   32 \par
   33 \par
   34     void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAH" }{}}{\fldrslt {\cs37\ul\cf2 begin}}}
();\par
   35 \par
   36 \par
   37 \par
   38     //data is in json\par
   39     String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACW" }{}}{\fldrslt {\cs37\ul\cf2 read}}}
();\par
   40 \par
   41     void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEC" }{}}{\fldrslt {\cs37\ul\cf2 allActive}}}
();\par
   42 \par
   43     void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEN" }{}}{\fldrslt {\cs37\ul\cf2 initReadI2C}}}
();\par
   44 \par
   45     void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEU" }{}}{\fldrslt {\cs37\ul\cf2 stopReadI2C}}}
();\par
   46 \par
   47     //additional method\par
   48     void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAER" }{}}{\fldrslt {\cs37\ul\cf2 end}}}
();\par
   49 \par
   50     bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAG" }{}}{\fldrslt {\cs37\ul\cf2 config}}}
();\par
   51 \par
   52     void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAI" }{}}{\fldrslt {\cs37\ul\cf2 printConf}}}
();\par
   53 \par
   54     //environment sensor methods\par
   55 \par
   56     //set the enviornment sensor settings , if argument is ommitted , default value will be assigned\par
   57     void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEP" }{}}{\fldrslt {\cs37\ul\cf2 setEnvSensorSettings}}}
( uint8_t commInterface=I2C_MODE, uint8_t I2CAddress=0x76,    uint8_t runMode = 3,\par
   58                        \par
   59                    uint8_t tStandby=0   , uint8_t filter=0,    uint8_t tempOverSample=1,                                               \par
   60                    uint8_t pressOverSample= 1,    uint8_t humidOverSample= 1);\par
   61 \par
   62 \par
   63 \par
   64     //VBat\par
   65     float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAES" }{}}{\fldrslt {\cs37\ul\cf2 readVBat}}}
();\par
   66 \par
   67     //Moisture\par
   68 \par
   69     float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAET" }{}}{\fldrslt {\cs37\ul\cf2 readMoisture}}}
();\par
   70 \par
   71     //sensor objects :\par
   72     SI114X {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEO" }{}}{\fldrslt {\cs37\ul\cf2 lightSensor}}}
 = SI114X();          // light sensor \par
   73     \par
   74     BME280 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEQ" }{}}{\fldrslt {\cs37\ul\cf2 envSensor}}}
;                   // environment sensor\par
   75     \par
   76 private:\par
   77     //sensors control structs :\par
   78     struct {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEV" }{}}{\fldrslt {\cs37\ul\cf2 lightActive}}}
\par
   79     \{\par
   80         byte {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEE" }{}}{\fldrslt {\cs37\ul\cf2 visible}}}
=0;\par
   81         byte {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEF" }{}}{\fldrslt {\cs37\ul\cf2 ir}}}
=0;\par
   82         byte {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEG" }{}}{\fldrslt {\cs37\ul\cf2 uv}}}
=0;  \par
   83 \par
   84     \}{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAED" }{}}{\fldrslt {\cs37\ul\cf2 lightDataActive}}}
;\par
   85 \par
   86 \par
   87     struct {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEW" }{}}{\fldrslt {\cs37\ul\cf2 airActive}}}
\par
   88     \{\par
   89         byte {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEI" }{}}{\fldrslt {\cs37\ul\cf2 temperature}}}
=0;\par
   90         byte {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEJ" }{}}{\fldrslt {\cs37\ul\cf2 humidity}}}
=0;\par
   91         byte {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEK" }{}}{\fldrslt {\cs37\ul\cf2 pressure}}}
=0;\par
   92     \}{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEH" }{}}{\fldrslt {\cs37\ul\cf2 airDataActive}}}
;\par
   93 \par
   94     const int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEA" }{}}{\fldrslt {\cs37\ul\cf2 EnMoisture}}}
 = 13;                      // Moisture Enable Pin\par
   95     const int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADZ" }{}}{\fldrslt {\cs37\ul\cf2 AnMplex}}}
 = 12;                         // Analog Multiplexer  LOW=Vbat , HIGH=Moisture\par
   96     const int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEB" }{}}{\fldrslt {\cs37\ul\cf2 EnI2C}}}
 = 5;                            // double usage for I2C and shift register latch , HIGH=I2C , LOW=shift register latch\par
   97                             // All I2C is over pins (2,14)\par
   98         byte {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEL" }{}}{\fldrslt {\cs37\ul\cf2 vbatActive}}}
=0;\par
   99     byte {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEM" }{}}{\fldrslt {\cs37\ul\cf2 soilMoistureActive}}}
=0;\par
  100 \par
  101 \};\par
  102 \par
  103 #endif\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/CoolFileSystem.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v /home/ashiroji/Arduino/libraries/CoolBoard/CoolFileSystem.cpp}
{\xe \v /home/ashiroji/Arduino/libraries/CoolBoard/CoolFileSystem.cpp}
{\bkmkstart AAAAAAAAJU}
{\bkmkend AAAAAAAAJU}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADM" }{}}{\fldrslt {\cs37\ul\cf2 CoolFileSystem}}} Source File. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <FS.h>}\par
{\f2 #include "CoolFileSystem.h"}\par
{\f2 #include "ArduinoJson.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for CoolFileSystem.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "CoolFileSystem_8cpp__incl.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJV" }{}}{\fldrslt {\cs37\ul\cf2 DEBUG}}}
\~ 1\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADM" }{}}{\fldrslt {\cs37\ul\cf2 CoolFileSystem}}} Source File. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid Mehdi Zemzem \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 1.0 \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Date:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 27/06/2017 \par
}}{
Definition in file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJW" }{}}{\fldrslt {\cs37\ul\cf2 CoolFileSystem.cpp}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v DEBUG\:CoolFileSystem.cpp}
{\xe \v CoolFileSystem.cpp\:DEBUG}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DEBUG\~ 1}}
\par
{\bkmkstart AAAAAAAAJV}
{\bkmkend AAAAAAAAJV}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJX" }{}}{\fldrslt {\cs37\ul\cf2 16}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJW" }{}}{\fldrslt {\cs37\ul\cf2 CoolFileSystem.cpp}}}
.}\par
}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/CoolFileSystem.cpp\par \pard\plain 
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     1 \par
   10 #include <FS.h>\par
   11 #include "{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADC" }{}}{\fldrslt {\cs37\ul\cf2 CoolFileSystem.h}}}
"\par
   12 #include "ArduinoJson.h"      // Arduino JSON File controller  https://github.com/bblanchon/ArduinoJson\par
   13 \par
   14 \par
   15 \par
   16 #define DEBUG 1\par
   17 \par
   18 #ifndef DEBUG\par
   19 \par
   20 #define DEBUG 0 \par
   21 \par
   22 #endif\par
   23 \par
   24 \par
   33 bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACP" }{}}{\fldrslt {\cs37\ul\cf2 CoolFileSystem::begin}}}
()\par
   34 \{\par
   35 \par
   36 #if DEBUG == 1\par
   37 \par
   38     Serial.println( F("Entering CoolFileSystem.begin()") );\par
   39     Serial.println();   \par
   40     Serial.print( F("SPIFFS success ? ") );\par
   41     Serial.println(SPIFFS.begin());\par
   42     Serial.println();\par
   43 \par
   44 #endif\par
   45 \par
   46     return( SPIFFS.begin() );                                   //Initialize Filesystem\par
   47 \par
   48 \}\par
   49 \par
   60 bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACN" }{}}{\fldrslt {\cs37\ul\cf2 CoolFileSystem::saveSensorData}}}
(const char* data )\par
   61 \{\par
   62 \par
   63 #if DEBUG == 1\par
   64 \par
   65     Serial.println( F("Entering CoolFileSystem.saveSensorData()") );\par
   66     Serial.println();\par
   67 \par
   68 #endif\par
   69     \par
   70     File sensorsData=SPIFFS.open("/sensorsData.json","a");\par
   71 \par
   72     if(!sensorsData)\par
   73     \{\par
   74     \par
   75     #if DEBUG == 1\par
   76     \par
   77         Serial.println( F("failed to append to /sensorsData.json") );\par
   78         Serial.println();\par
   79     \par
   80     #endif\par
   81 \par
   82         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEX" }{}}{\fldrslt {\cs37\ul\cf2 savedData}}}
=false;\par
   83         return (false); \par
   84     \}   \par
   85 \par
   86     DynamicJsonBuffer jsonBuffer;\par
   87     JsonObject& root = jsonBuffer.parseObject(data);\par
   88 \par
   89     if( root.success() )\par
   90     \{\par
   91         root.printTo(sensorsData);\par
   92         sensorsData.println();\par
   93         sensorsData.close();\par
   94 \par
   95 \par
   96     #if DEBUG == 1\par
   97         \par
   98         Serial.print(F("jsonBuffer size: "));\par
   99         Serial.println(jsonBuffer.size());\par
  100         Serial.println();\par
  101 \par
  102         sensorsData=SPIFFS.open("/sensorsData.json","r");\par
  103         \par
  104         if(!sensorsData)\par
  105         \{\par
  106             \par
  107             Serial.println(F("failed to reopen /sensorsData.json"));\par
  108                         \par
  109         \}\par
  110     \par
  111         Serial.println( F("saved data is : ") );\par
  112         root.printTo(Serial);\par
  113         Serial.println();\par
  114 \par
  115         Serial.println(F("/sensorsData.json") );\par
  116         while (sensorsData.available()) \par
  117         \{\par
  118             Serial.println(sensorsData.readString()) ;\par
  119         \}\par
  120         \par
  121         Serial.println();\par
  122         \par
  123         sensorsData.close();\par
  124     \par
  125     #endif\par
  126 \par
  127         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEY" }{}}{\fldrslt {\cs37\ul\cf2 saveSensorDataCSV}}}
(data);      \par
  128 \par
  129         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEX" }{}}{\fldrslt {\cs37\ul\cf2 savedData}}}
=true;\par
  130         return (true);      \par
  131     \}\par
  132     else\par
  133     \{\par
  134     \par
  135     #if DEBUG == 1\par
  136 \par
  137         Serial.println( F("failed to parse json") );\par
  138     \par
  139     #endif\par
  140 \par
  141         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEX" }{}}{\fldrslt {\cs37\ul\cf2 savedData}}}
=false;\par
  142         return(false);\par
  143     \}\par
  144     \par
  145 \par
  146 \}\par
  147 \par
  148 \par
  157 bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEY" }{}}{\fldrslt {\cs37\ul\cf2 CoolFileSystem::saveSensorDataCSV}}}
(const char* data )\par
  158 \{\par
  159 #if DEBUG == 1\par
  160 \par
  161     Serial.println( F("Entering CoolFileSystem.saveSensorDataCSV()") );\par
  162     Serial.println();\par
  163 \par
  164 #endif\par
  165     //parsing json\par
  166     DynamicJsonBuffer jsonBuffer;\par
  167     JsonObject& root = jsonBuffer.parseObject(data);\par
  168     String header="",values="";\par
  169     \par
  170     //if json parse success\par
  171     if( root.success() )\par
  172     \{       \par
  173         for (auto kv : root) \par
  174         \{\par
  175             //print the header(json keys ) to header string\par
  176             header+=kv.key;\par
  177             header+=',';\par
  178             \par
  179             //print the values to header string\par
  180             values+=( kv.value.as<char*>() );\par
  181             values+=',';\par
  182         \}\par
  183 \par
  184         header.remove(header.lastIndexOf(','), 1);\par
  185         values.remove(values.lastIndexOf(','), 1);      \par
  186     \par
  187     #if DEBUG == 1\par
  188     \par
  189         Serial.println( F(" data is : ") );\par
  190         root.printTo(Serial);\par
  191         Serial.println();\par
  192         \par
  193         Serial.println(F(" header is :" ) ) ;\par
  194         Serial.println(header);\par
  195         Serial.println(F(" values are : "));\par
  196         Serial.println(values);\par
  197         \par
  198         Serial.print(F("jsonBuffer size: "));\par
  199         Serial.println(jsonBuffer.size());\par
  200         Serial.println();\par
  201 \par
  202     \par
  203     #endif\par
  204     \par
  205     \}\par
  206     //failed to parse json\par
  207     else\par
  208     \{\par
  209     \par
  210     #if DEBUG == 1\par
  211 \par
  212         Serial.println( F("failed to parse json") );\par
  213     \par
  214     #endif\par
  215 \par
  216         return(false);\par
  217     \}\par
  218 \par
  219     //check if file exists\par
  220     File sensorsData=SPIFFS.open("/sensorsData.csv","r");\par
  221     \par
  222     //file doesn't exist\par
  223     if(!sensorsData)\par
  224     \{\par
  225     \par
  226     #if DEBUG == 1\par
  227     \par
  228         Serial.println( F("/sensorsData.csv not found") );\par
  229         Serial.println( F("creating /sensorsData.csv") );\par
  230         Serial.println();\par
  231     \par
  232     #endif\par
  233         //create file\par
  234         sensorsData=SPIFFS.open("/sensorsData.csv","w");\par
  235         \par
  236         if(!sensorsData)\par
  237         \{\par
  238 \par
  239         #if DEBUG == 1\par
  240         \par
  241             Serial.println( F("failed to create /sensorsData.csv") );\par
  242             Serial.println();\par
  243         \par
  244         #endif\par
  245         \par
  246             return(false);\par
  247 \par
  248         \}\par
  249         \par
  250         //print the header(json keys ) to the CSV file\par
  251         sensorsData.println(header);\par
  252 \par
  253         //print the values to the CSV file\par
  254         sensorsData.println(values);\par
  255         \par
  256         sensorsData.close();\par
  257     \par
  258     #if DEBUG == 1\par
  259 \par
  260         sensorsData=SPIFFS.open("/sensorsData.csv","r");\par
  261         \par
  262         if(!sensorsData)\par
  263         \{\par
  264             Serial.println(F("failed to reopen /sensorsData.csv "));\par
  265             return(false);      \par
  266         \}\par
  267 \par
  268         Serial.println( F("/sensorsData.csv : ") );\par
  269 \par
  270         while (sensorsData.available()) \par
  271         \{\par
  272             Serial.print(sensorsData.readString()) ;\par
  273         \}\par
  274         Serial.println();\par
  275 \par
  276         //close the file\par
  277         sensorsData.close();\par
  278 \par
  279     #endif\par
  280         \par
  281 \par
  282         \par
  283         return(true);\par
  284         \par
  285     \}\par
  286 \par
  287     //file exist\par
  288     else\par
  289     \{\par
  290 \par
  291     #if DEBUG == 1\par
  292     \par
  293         Serial.println( F("/sensorsData.csv  found") );\par
  294         Serial.println( F("appending to /sensorsData.csv") );\par
  295         Serial.println();\par
  296     \par
  297     #endif\par
  298 \par
  299         //append to file\par
  300         sensorsData=SPIFFS.open("/sensorsData.csv","a");\par
  301         \par
  302         if(!sensorsData)\par
  303         \{\par
  304         \par
  305         #if DEBUG == 1\par
  306             \par
  307             Serial.println( F("failed to open /sensorsData.csv") );\par
  308             Serial.println();\par
  309 \par
  310         #endif\par
  311             \par
  312             return(false);\par
  313         \par
  314         \}\par
  315 \par
  316         //print the values to the CSV file\par
  317         sensorsData.println(values);\par
  318         \par
  319         sensorsData.close();\par
  320 \par
  321     #if DEBUG == 1\par
  322 \par
  323         sensorsData=SPIFFS.open("/sensorsData.csv","r");\par
  324         \par
  325         if(!sensorsData)\par
  326         \{\par
  327             Serial.println(F("failed to reopen /sensorsData.csv "));\par
  328             return(false);      \par
  329         \}\par
  330 \par
  331         \par
  332         Serial.println( F("/sensorsData.csv : ") );\par
  333 \par
  334         while (sensorsData.available()) \par
  335         \{\par
  336             Serial.println(sensorsData.readString()) ;\par
  337         \}\par
  338         \par
  339         Serial.println();\par
  340         \par
  341         sensorsData.close();\par
  342         \par
  343     #endif      \par
  344         \par
  345         return(true);\par
  346     \par
  347     \}   \par
  348 \par
  349 \par
  350 \par
  351 \}\par
  352 \par
  353 \par
  362 bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACV" }{}}{\fldrslt {\cs37\ul\cf2 CoolFileSystem::updateConfigFiles}}}
(String answer )\par
  363 \{\par
  364 \par
  365 #if DEBUG == 1\par
  366 \par
  367     Serial.println( F("Entering CoolFileSystem.updateConfigFiles") );\par
  368     Serial.println();\par
  369     \par
  370     Serial.println( F("input answer : ") );\par
  371     Serial.println(answer);\par
  372 #endif\par
  373 \par
  374     //total json object \par
  375     DynamicJsonBuffer jsonBuffer;\par
  376     JsonObject& root = jsonBuffer.parseObject( answer.c_str() );\par
  377 \par
  378 #if DEBUG == 1\par
  379     \par
  380     Serial.println( F("json object : ") );  \par
  381     root.printTo(Serial);\par
  382     Serial.println();\par
  383     \par
  384     Serial.print(F("jsonBuffer size: "));\par
  385     Serial.println(jsonBuffer.size());\par
  386     Serial.println();\par
  387 \par
  388 \par
  389 #endif\par
  390 \par
  391     if(! ( root.success() ))\par
  392     \{\par
  393     \par
  394     #if DEBUG == 1\par
  395 \par
  396         Serial.println( F("failed to parse root ") );\par
  397         Serial.println();\par
  398     \par
  399     #endif\par
  400 \par
  401         return(false);\par
  402     \}\par
  403     else\par
  404     \{\par
  405     #if DEBUG == 1\par
  406         \par
  407         Serial.println( F("success to parse root ") );\par
  408         Serial.println();\par
  409         \par
  410     #endif  \par
  411     \}\par
  412     \par
  413 #if DEBUG == 1\par
  414 \par
  415     Serial.println( F("input message is : ") );\par
  416     root.printTo(Serial);\par
  417     Serial.println();\par
  418 \par
  419 #endif\par
  420     //temp string\par
  421     String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEZ" }{}}{\fldrslt {\cs37\ul\cf2 temp}}}
;\par
  422 \par
  423     //CoolBoard Configuration File\par
  424 \par
  425         JsonObject& jsonCoolBoard=root["CoolBoard"];\par
  426 \par
  427 #if DEBUG == 1\par
  428 \par
  429     Serial.println( F("before config CoolBoard json") );\par
  430     jsonCoolBoard.printTo(Serial);\par
  431 \par
  432 #endif\par
  433 \par
  434     if(jsonCoolBoard.success())\par
  435     \{\par
  436         String update;\par
  437     \par
  438         jsonCoolBoard.printTo(update);\par
  439 \par
  440         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFA" }{}}{\fldrslt {\cs37\ul\cf2 fileUpdate}}}
(update,"/coolBoardConfig.json");       \par
  441         \par
  442     \}\par
  443     else\par
  444     \{\par
  445     \par
  446     #if DEBUG == 1 \par
  447 \par
  448         Serial.println( F("failed to parse CoolBoard ") );\par
  449     \par
  450     #endif\par
  451 \par
  452     \}       \par
  453 \par
  454     \par
  455     //Cool Board Sensors Configuration File\par
  456         JsonObject& jsonSensorsBoard=root["CoolSensorsBoard"];\par
  457 \par
  458 #if DEBUG == 1 \par
  459 \par
  460     Serial.println( F("before config CoolSensorsBoard json") );\par
  461     jsonSensorsBoard.printTo(Serial);\par
  462 \par
  463 #endif \par
  464     \par
  465     if(jsonSensorsBoard.success())\par
  466     \{   \par
  467         String update;\par
  468     \par
  469         jsonSensorsBoard.printTo(update);\par
  470 \par
  471         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFA" }{}}{\fldrslt {\cs37\ul\cf2 fileUpdate}}}
(update,"/coolBoardSensorsConfig.json");        \par
  472 \par
  473     \}\par
  474     else\par
  475     \{\par
  476 \par
  477     #if DEBUG == 1\par
  478 \par
  479         Serial.println( F("failed to parse CoolSensorsBoard sensors ") );   \par
  480     \par
  481     #endif\par
  482 \par
  483     \}\par
  484 \par
  485     \par
  486     //rtc configuration file\par
  487         JsonObject& jsonRTC=root["rtc"];\par
  488 \par
  489 #if DEBUG == 1 \par
  490     \par
  491     Serial.println( F("before config rtc json") );\par
  492     jsonRTC.printTo(Serial);\par
  493 \par
  494 #endif\par
  495     if(jsonRTC.success() )\par
  496     \{\par
  497         String update;\par
  498 \par
  499         jsonRTC.printTo(update);\par
  500 \par
  501         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFA" }{}}{\fldrslt {\cs37\ul\cf2 fileUpdate}}}
(update,"/rtcConfig.json");         \par
  502     \}\par
  503     else\par
  504     \{\par
  505     \par
  506     #if DEBUG == 1 \par
  507 \par
  508         Serial.println( F("failed to parse rtc ") );\par
  509     \par
  510     #endif\par
  511 \par
  512     \}\par
  513     \par
  514     \par
  515         //cool board led configuration\par
  516         JsonObject& jsonLedBoard=root["led"];\par
  517     \par
  518 #if DEBUG == 1 \par
  519 \par
  520     Serial.println( F("before config Led json") );\par
  521     jsonLedBoard.printTo(Serial);\par
  522 \par
  523 #endif\par
  524 \par
  525     if(jsonLedBoard.success())\par
  526     \{   \par
  527         String update;\par
  528     \par
  529         jsonLedBoard.printTo(update);\par
  530 \par
  531         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFA" }{}}{\fldrslt {\cs37\ul\cf2 fileUpdate}}}
(update,"/coolBoardLedConfig.json");        \par
  532 \par
  533     \par
  534     \}\par
  535     else\par
  536     \{\par
  537     \par
  538     #if DEBUG == 1 \par
  539 \par
  540         Serial.println( F("failed to parse led") );\par
  541     \par
  542     #endif \par
  543 \par
  544     \}\par
  545         \par
  546 \par
  547     \par
  548 \par
  549     //jetpack configuration\par
  550         JsonObject& jsonJetpack=root["jetPack"];\par
  551 \par
  552 #if DEBUG == 1 \par
  553 \par
  554     Serial.println( F("before config jetpack json") );\par
  555     jsonJetpack.printTo(Serial);\par
  556 \par
  557 #endif\par
  558 \par
  559     if(jsonJetpack.success())\par
  560     \{\par
  561     \par
  562         String update;\par
  563     \par
  564         jsonJetpack.printTo(update);\par
  565 \par
  566         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFA" }{}}{\fldrslt {\cs37\ul\cf2 fileUpdate}}}
(update,"/jetPackConfig.json");     \par
  567 \par
  568     \}\par
  569 \par
  570     else\par
  571     \{\par
  572     \par
  573     #if DEBUG == 1 \par
  574 \par
  575         Serial.println( F("failed to parse jetpack") ); \par
  576     \par
  577     #endif\par
  578 \par
  579     \}\par
  580     \par
  581     //irene configuration   \par
  582         JsonObject& jsonIrene=root["irene3000"];\par
  583     \par
  584 #if DEBUG == 1 \par
  585 \par
  586     Serial.println( F("before config irene json") );    \par
  587     jsonIrene.printTo(Serial);\par
  588 \par
  589 #endif \par
  590 \par
  591     if(jsonIrene.success())\par
  592     \{\par
  593 \par
  594         String update;\par
  595     \par
  596         jsonIrene.printTo(update);\par
  597 \par
  598         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFA" }{}}{\fldrslt {\cs37\ul\cf2 fileUpdate}}}
(update,"/irene3000Config.json");       \par
  599     \par
  600     \}\par
  601     else\par
  602     \{\par
  603     \par
  604     #if DEBUG == 1 \par
  605 \par
  606         Serial.println( F("failed to parse irene") );   \par
  607     \par
  608     #endif \par
  609 \par
  610 \par
  611     \}\par
  612     \par
  613     //external sensors\par
  614         JsonObject& jsonExternalSensors=root["externalSensors"];\par
  615 \par
  616 #if DEBUG == 1 \par
  617 \par
  618     Serial.println( F("before config external Sensors json") );\par
  619     jsonExternalSensors.printTo(Serial);\par
  620 \par
  621 #endif\par
  622 \par
  623     if(jsonExternalSensors.success())\par
  624     \{\par
  625 \par
  626         String update;\par
  627     \par
  628         jsonExternalSensors.printTo(update);\par
  629 \par
  630         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFA" }{}}{\fldrslt {\cs37\ul\cf2 fileUpdate}}}
(update,"/externalSensorsConfig.json");     \par
  631 \par
  632     \}\par
  633 \par
  634     else\par
  635     \{   \par
  636 \par
  637     #if DEBUG == 1\par
  638         \par
  639         Serial.println( F("failed to parse external sensors") );\par
  640 \par
  641     #endif\par
  642 \par
  643 \par
  644     \}\par
  645 \par
  646     \par
  647     //mqtt config\par
  648         JsonObject& jsonMQTT=root["mqtt"];\par
  649     \par
  650 #if DEBUG == 1 \par
  651 \par
  652     Serial.println( F("before config mqtt json") );\par
  653     jsonMQTT.printTo(Serial);\par
  654 \par
  655 #endif\par
  656 \par
  657     if(jsonMQTT.success())\par
  658     \{\par
  659 \par
  660         String update;\par
  661     \par
  662         jsonMQTT.printTo(update);\par
  663 \par
  664         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFA" }{}}{\fldrslt {\cs37\ul\cf2 fileUpdate}}}
(update,"/mqttConfig.json");        \par
  665 \par
  666     \}\par
  667     else\par
  668     \{\par
  669 \par
  670     #if DEBUG == 1 \par
  671 \par
  672         Serial.println( F("failed to parse mqtt") );\par
  673     \par
  674     #endif\par
  675 \par
  676     \par
  677     \}   \par
  678 \par
  679     //wifi config\par
  680         JsonObject& jsonWifi=root["wifi"];\par
  681     \par
  682 #if DEBUG == 1 \par
  683 \par
  684     Serial.println( F("before config wifi json") );\par
  685     jsonWifi.printTo(Serial);\par
  686 \par
  687 #endif\par
  688 \par
  689     if(jsonWifi.success())\par
  690     \{\par
  691 \par
  692         String update;\par
  693     \par
  694         jsonWifi.printTo(update);\par
  695 \par
  696         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFA" }{}}{\fldrslt {\cs37\ul\cf2 fileUpdate}}}
(update,"/wifiConfig.json");        \par
  697 \par
  698     \}\par
  699     else\par
  700     \{\par
  701 \par
  702     #if DEBUG == 1 \par
  703 \par
  704         Serial.println( F("failed to parse wifi") );\par
  705     \par
  706     #endif\par
  707 \par
  708     \par
  709     \}   \par
  710         \par
  711     return true;\par
  712 \par
  713 \}   \par
  714 \par
  724 bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABX" }{}}{\fldrslt {\cs37\ul\cf2 CoolFileSystem::isDataSaved}}}
()\par
  725 \{\par
  726 \par
  727 #if DEBUG == 1 \par
  728 \par
  729     Serial.println( F("Entering CoolFileSystem.isDataSaved()") );\par
  730     Serial.println();\par
  731 #endif\par
  732 \par
  733     File sensorsData=SPIFFS.open("/sensorsData.json","r");\par
  734     File sensorsDataCSV=SPIFFS.open("/sensorsData.csv","r");\par
  735     \par
  736     if( (!sensorsData)||(!sensorsDataCSV) ) \par
  737     \{\par
  738     #if DEBUG == 1\par
  739 \par
  740         Serial.println( F("failed to open files") );\par
  741 \par
  742     #endif\par
  743         \par
  744         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEX" }{}}{\fldrslt {\cs37\ul\cf2 savedData}}}
=false;\par
  745     \}\par
  746     else\par
  747     \{       \par
  748         #if DEBUG == 1\par
  749 \par
  750             Serial.print(F("sensors Data file size : "));\par
  751             Serial.println(sensorsData.size());\par
  752             Serial.println();\par
  753             \par
  754             Serial.print(F("sensors Data CSV file size : "));               \par
  755             Serial.println(sensorsDataCSV.size());\par
  756             Serial.println();\par
  757         #endif  \par
  758 \par
  759         if( (sensorsData.size()!=0) || (sensorsDataCSV.size()!=0) )\par
  760         \{\par
  761             this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEX" }{}}{\fldrslt {\cs37\ul\cf2 savedData}}}
=true;\par
  762         \}\par
  763         else\par
  764         \{\par
  765 \par
  766             this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEX" }{}}{\fldrslt {\cs37\ul\cf2 savedData}}}
=false;      \par
  767         \par
  768         \}   \par
  769     \}\par
  770 \par
  771 #if DEBUG == 1 \par
  772 \par
  773     Serial.print( F("savedData : ") );\par
  774     Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEX" }{}}{\fldrslt {\cs37\ul\cf2 savedData}}}
);\par
  775 \par
  776 #endif\par
  777 \par
  778     return( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEX" }{}}{\fldrslt {\cs37\ul\cf2 savedData}}}
 );\par
  779 \}\par
  780 \par
  789 String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACB" }{}}{\fldrslt {\cs37\ul\cf2 CoolFileSystem::getSensorSavedData}}}
()\par
  790 \{\par
  791 \par
  792 #if DEBUG == 1 \par
  793 \par
  794     Serial.println( F("Entering CoolFileSystem.getSensorSavedData()") );\par
  795     Serial.println();\par
  796 \par
  797 #endif\par
  798 \par
  799     //open sensors data file\par
  800     File sensorsData=SPIFFS.open("/sensorsData.json","r");\par
  801     \par
  802     if (!sensorsData)\par
  803     \{\par
  804 \par
  805     #if DEBUG == 1 \par
  806 \par
  807         Serial.println( F("Failed to read /sensorsData.json") );\par
  808 \par
  809     #endif\par
  810  \par
  811         return("failed to open file");\par
  812     \}\par
  813 \par
  814     else\par
  815     \{\par
  816         size_t size = sensorsData.size();\par
  817 \par
  818         // Allocate a buffer to store contents of the file.\par
  819         std::unique_ptr < char[] > buf(new char[size]);\par
  820 \par
  821         sensorsData.readBytes(buf.get(), size);\par
  822 \par
  823         DynamicJsonBuffer jsonBuffer;\par
  824 \par
  825         JsonObject & json = jsonBuffer.parseObject(buf.get());\par
  826         \par
  827         if (!json.success())\par
  828         \{\par
  829 \par
  830         #if DEBUG == 1\par
  831         \par
  832             Serial.println( F("failed to parse json") );\par
  833         \par
  834         #endif\par
  835         \par
  836             return("failed to parse json");\par
  837         \}\par
  838         else\par
  839         \{   \par
  840             //the return string\par
  841             String sensorDataString;\par
  842             \par
  843             //print the json to the string\par
  844             json.printTo(sensorDataString);\par
  845             \par
  846             //close the file\par
  847             sensorsData.close();\par
  848 \par
  849             //delete data in the file\par
  850             File sensorsData=SPIFFS.open("/sensorsData.json","w");\par
  851             File sensorsDataCSV=SPIFFS.open("/sensorsData.csv","w");\par
  852             if( (!sensorsData)||(!sensorsDataCSV) ) \par
  853             \{\par
  854             #if DEBUG == 1\par
  855         \par
  856                 Serial.println( F("failed to delete data in the file") );\par
  857         \par
  858             #endif\par
  859 \par
  860                 return("failed to delete data in the file");\par
  861             \}\par
  862 \par
  863             sensorsData.close();\par
  864             sensorsDataCSV.close();\par
  865 \par
  866             //position the saved data flag to false\par
  867             this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEX" }{}}{\fldrslt {\cs37\ul\cf2 savedData}}}
=false;  \par
  868             \par
  869         #if DEBUG == 1 \par
  870 \par
  871             Serial.println( F("saved data : ") );\par
  872             Serial.println(sensorDataString);\par
  873             Serial.println();\par
  874 \par
  875             Serial.print(F("jsonBuffer size: "));\par
  876             Serial.println(jsonBuffer.size());\par
  877             Serial.println();\par
  878 \par
  879         \par
  880         #endif\par
  881 \par
  882             //return the string\par
  883             return(sensorDataString);       \par
  884         \}\par
  885         \par
  886         \par
  887     \}\par
  888 \par
  889 \}\par
  890 \par
  900 bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFA" }{}}{\fldrslt {\cs37\ul\cf2 CoolFileSystem::fileUpdate}}}
(String update,const char* path)\par
  901 \{\par
  902 \par
  903 #if DEBUG == 1\par
  904 \par
  905     Serial.println( F("Entering CoolFileSystem.fileUpdate()") );\par
  906     Serial.println();\par
  907     \par
  908     Serial.println(F("update msg is :"));\par
  909     Serial.println(update);\par
  910     \par
  911     Serial.println(F("file path is : "));\par
  912     Serial.println(path);   \par
  913 \par
  914 #endif\par
  915     //transfer update String to json\par
  916     DynamicJsonBuffer updateBuffer;\par
  917     JsonObject& updateJson = updateBuffer.parseObject(update.c_str() );\par
  918     \par
  919     if(updateJson.success())\par
  920     \{\par
  921     \par
  922     #if DEBUG ==1\par
  923         \par
  924         Serial.println(F("root parsing success :"));\par
  925         updateJson.printTo(Serial);\par
  926     \par
  927     #endif\par
  928 \par
  929     \}\par
  930     else\par
  931     \{\par
  932     \par
  933     #if DEBUG == 1 \par
  934     \par
  935         Serial.println(F("root parsing failure "));\par
  936     \par
  937     #endif\par
  938         \par
  939         return(false);  \par
  940 \par
  941     \}\par
  942     \par
  943     //open file in read mode\par
  944     File configFile = SPIFFS.open( path , "r");\par
  945     \par
  946     if(!configFile)\par
  947     \{   \par
  948     #if DEBUG == 1\par
  949         \par
  950         Serial.print( F("failed to read ") );\par
  951         Serial.println(path);\par
  952 \par
  953     #endif\par
  954         return(false);\par
  955     \}\par
  956 \par
  957     //copy file to a json\par
  958     size_t size = configFile.size();\par
  959 \par
  960     // Allocate a buffer to store contents of the file.\par
  961     std::unique_ptr < char[] > buf(new char[size]);\par
  962 \par
  963     configFile.readBytes(buf.get(), size);\par
  964 \par
  965     DynamicJsonBuffer fileBuffer;\par
  966 \par
  967     JsonObject & fileJson = fileBuffer.parseObject(buf.get());\par
  968 \par
  969     if (!fileJson.success())\par
  970     \{\par
  971 \par
  972     #if DEBUG == 1\par
  973 \par
  974         Serial.println( F("failed to parse json") );\par
  975 \par
  976     #endif\par
  977 \par
  978         return(false);\par
  979     \}\par
  980     \par
  981     //modify root to contain all the json keys: updated ones and non updated ones\par
  982     for (auto kv : fileJson) \par
  983     \{\par
  984         if( updateJson[kv.key].success() )\par
  985         \{\par
  986             fileJson[kv.key]=updateJson[kv.key];            \par
  987         \}\par
  988         else\par
  989         \{\par
  990             fileJson[kv.key]=fileJson[kv.key];\par
  991         \}\par
  992 \par
  993                 \par
  994     \}\par
  995 \par
  996 #if DEBUG == 1\par
  997 \par
  998     Serial.println(F("fileJson is now : "));\par
  999     fileJson.printTo(Serial);\par
 1000 \par
 1001 #endif\par
 1002 \par
 1003     //close the file\par
 1004     configFile.close();\par
 1005 \par
 1006     //open file in w mode\par
 1007     configFile = SPIFFS.open( path , "w");\par
 1008     \par
 1009     if(!configFile)\par
 1010     \{   \par
 1011     #if DEBUG == 1\par
 1012         \par
 1013         Serial.print( F("failed to open ") );\par
 1014         Serial.println(path);\par
 1015 \par
 1016     #endif\par
 1017         return(false);\par
 1018     \}\par
 1019     //print json to file    \par
 1020     \par
 1021     fileJson.printTo(configFile);\par
 1022     \par
 1023     //close file\par
 1024     configFile.close();\par
 1025 \par
 1026 \par
 1027 #if DEBUG == 1\par
 1028 \par
 1029     Serial.println( F("config is") );\par
 1030     fileJson.printTo(Serial);\par
 1031     Serial.println();\par
 1032 \par
 1033 #endif\par
 1034     \par
 1035     return(true);\par
 1036     \par
 1037 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/CoolFileSystem.h File Reference\par \pard\plain 
{\tc\tcl2 \v /home/ashiroji/Arduino/libraries/CoolBoard/CoolFileSystem.h}
{\xe \v /home/ashiroji/Arduino/libraries/CoolBoard/CoolFileSystem.h}
{\bkmkstart AAAAAAAADC}
{\bkmkend AAAAAAAADC}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADM" }{}}{\fldrslt {\cs37\ul\cf2 CoolFileSystem}}} Header File. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Arduino.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for CoolFileSystem.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "CoolFileSystem_8h__incl.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "CoolFileSystem_8h__dep__incl.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADM" }{}}{\fldrslt {\cs37\ul\cf2 CoolFileSystem}}}
\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class handles the file system. }}}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADM" }{}}{\fldrslt {\cs37\ul\cf2 CoolFileSystem}}} Header File. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid Mehdi Zemzem \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 1.0 \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Date:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 27/06/2017 \par
}}{
Definition in file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJY" }{}}{\fldrslt {\cs37\ul\cf2 CoolFileSystem.h}}}
.}\par
}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/CoolFileSystem.h\par \pard\plain 
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     1 \par
   10 #ifndef CoolFileSystem_H\par
   11 #define CoolFileSystem_H\par
   12 \par
   13 \par
   14 #include "Arduino.h"\par
   15 \par
   22 class {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADM" }{}}{\fldrslt {\cs37\ul\cf2 CoolFileSystem}}}
\par
   23 \{\par
   24 \par
   25 public:\par
   26     bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACP" }{}}{\fldrslt {\cs37\ul\cf2 begin}}}
(); \par
   27 \par
   28     bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACV" }{}}{\fldrslt {\cs37\ul\cf2 updateConfigFiles}}}
(String answer );\par
   29     \par
   30     bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFA" }{}}{\fldrslt {\cs37\ul\cf2 fileUpdate}}}
(String update,const char* path);    \par
   31     \par
   32     bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACN" }{}}{\fldrslt {\cs37\ul\cf2 saveSensorData}}}
(const char* data );\par
   33     \par
   34     bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEY" }{}}{\fldrslt {\cs37\ul\cf2 saveSensorDataCSV}}}
(const char* data );\par
   35     \par
   36     bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABX" }{}}{\fldrslt {\cs37\ul\cf2 isDataSaved}}}
();\par
   37     \par
   38     String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACB" }{}}{\fldrslt {\cs37\ul\cf2 getSensorSavedData}}}
();\par
   39         \par
   40 private:\par
   41     \par
   42     bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEX" }{}}{\fldrslt {\cs37\ul\cf2 savedData}}}
=0;   \par
   43 \par
   44 \};\par
   45 \par
   46 #endif\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/CoolMQTT.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v /home/ashiroji/Arduino/libraries/CoolBoard/CoolMQTT.cpp}
{\xe \v /home/ashiroji/Arduino/libraries/CoolBoard/CoolMQTT.cpp}
{\bkmkstart AAAAAAAAJZ}
{\bkmkend AAAAAAAAJZ}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADR" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT}}} Source File. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "FS.h"}\par
{\f2 #include "Arduino.h"}\par
{\f2 #include <ESP8266WiFi.h>}\par
{\f2 #include <PubSubClient.h>}\par
{\f2 #include "CoolMQTT.h"}\par
{\f2 #include "ArduinoJson.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for CoolMQTT.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "CoolMQTT_8cpp__incl.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKA" }{}}{\fldrslt {\cs37\ul\cf2 DEBUG}}}
\~ 1\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADR" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT}}} Source File. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid Mehdi Zemzem \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 1.0 \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Date:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 27/06/2017 \par
}}{
Definition in file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKB" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT.cpp}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v DEBUG\:CoolMQTT.cpp}
{\xe \v CoolMQTT.cpp\:DEBUG}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DEBUG\~ 1}}
\par
{\bkmkstart AAAAAAAAKA}
{\bkmkend AAAAAAAAKA}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKC" }{}}{\fldrslt {\cs37\ul\cf2 20}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKB" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT.cpp}}}
.}\par
}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/CoolMQTT.cpp\par \pard\plain 
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     1 \par
   11 #include "FS.h"\par
   12 #include "Arduino.h"  \par
   13 #include <ESP8266WiFi.h>\par
   14 #include <PubSubClient.h>                             \par
   15 #include "{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADG" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT.h}}}
"\par
   16 #include "ArduinoJson.h"\par
   17 \par
   18 \par
   19 \par
   20 #define DEBUG 1\par
   21 \par
   22 #ifndef DEBUG\par
   23 \par
   24 #define DEBUG 0\par
   25 \par
   26 #endif\par
   27 \par
   28 \par
   29 \par
   30 \par
   39 void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAP" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT::begin}}}
()\par
   40 \{ \par
   41 \par
   42 #if DEBUG == 1 \par
   43 \par
   44     Serial.println( F("Entering CoolMQTT.begin()") );\par
   45     Serial.println();\par
   46 \par
   47 #endif\par
   48 \par
   49     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFB" }{}}{\fldrslt {\cs37\ul\cf2 client}}}
.setClient({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFC" }{}}{\fldrslt {\cs37\ul\cf2 espClient}}}
);\par
   50     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFB" }{}}{\fldrslt {\cs37\ul\cf2 client}}}
.setServer({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFD" }{}}{\fldrslt {\cs37\ul\cf2 mqttServer}}}
, 1883); \par
   51     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFB" }{}}{\fldrslt {\cs37\ul\cf2 client}}}
.setCallback([this] (char* topic, byte* payload, unsigned int length) \{ this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFE" }{}}{\fldrslt {\cs37\ul\cf2 callback}}}
(topic, payload, length); \});\par
   52     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFB" }{}}{\fldrslt {\cs37\ul\cf2 client}}}
.setBufferSize((unsigned short){\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFF" }{}}{\fldrslt {\cs37\ul\cf2 bufferSize}}}
);\par
   53 \par
   54 \}\par
   55 \par
   72 int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABP" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT::state}}}
()\par
   73 \{\par
   74 \par
   75 #if DEBUG == 1 \par
   76 \par
   77     Serial.println( F("Entering CoolMQTT.state()") );\par
   78     Serial.println();   \par
   79     Serial.print( F("state : ") );\par
   80     Serial.println( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFB" }{}}{\fldrslt {\cs37\ul\cf2 client}}}
.state() );\par
   81 \par
   82 #endif\par
   83     \par
   84     return( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFB" }{}}{\fldrslt {\cs37\ul\cf2 client}}}
.state() );\par
   85 \}\par
   86 \par
   95 int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABQ" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT::connect}}}
(unsigned long keepAlive)\par
   96 \{       \par
   97 \par
   98     int i=0;\par
   99 \par
  100 #if DEBUG == 1 \par
  101 \par
  102     Serial.println( F("Entering CoolMQTT.connect()") );\par
  103     Serial.println( F("MQTT connecting...") );\par
  104 \par
  105 #endif\par
  106     \par
  107     while( ( !this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFB" }{}}{\fldrslt {\cs37\ul\cf2 client}}}
.connected() ) && ( i<100 ) ) \par
  108     \{\par
  109         // Attempt to connect\par
  110         if( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFB" }{}}{\fldrslt {\cs37\ul\cf2 client}}}
.connect( this-> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFG" }{}}{\fldrslt {\cs37\ul\cf2 user}}}
,keepAlive*10  ) )\par
  111         \{\par
  112             {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFB" }{}}{\fldrslt {\cs37\ul\cf2 client}}}
.subscribe( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFH" }{}}{\fldrslt {\cs37\ul\cf2 inTopic}}}
 );\par
  113 \par
  114         #if DEBUG == 1 \par
  115 \par
  116             Serial.println( F("MQTT connected") );\par
  117             Serial.println( F(" subscribed , leavin ") ) ;\par
  118         \par
  119         #endif\par
  120 \par
  121             return( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABP" }{}}{\fldrslt {\cs37\ul\cf2 state}}}
() );\par
  122         \}\par
  123 \par
  124         else\par
  125         \{\par
  126         \par
  127         #if DEBUG == 1 \par
  128 \par
  129             Serial.println( F("not connected , retrying") );\par
  130         \par
  131         #endif\par
  132 \par
  133             \par
  134         \}\par
  135 \par
  136     delay(5);\par
  137     i++;\par
  138     \}\par
  139     \par
  140     return( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABP" }{}}{\fldrslt {\cs37\ul\cf2 state}}}
() );\par
  141 \par
  142 \}\par
  143 \par
  152 bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABZ" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT::publish}}}
(const char* data)\par
  153 \{\par
  154 \par
  155 #if DEBUG == 1 \par
  156 \par
  157     Serial.println( F("Entering CoolMQTT.publish()") );\par
  158     Serial.println();\par
  159     //data is in JSON, publish it directly\par
  160 \par
  161     Serial.println( F("data to publish : ") );\par
  162     Serial.println(data);\par
  163     Serial.print( F("data size : ") );\par
  164     Serial.println(strlen(data));\par
  165 \par
  166     Serial.println();\par
  167 \par
  168 #endif\par
  169     \par
  170 \par
  171     bool pub={\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFB" }{}}{\fldrslt {\cs37\ul\cf2 client}}}
.publish( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFI" }{}}{\fldrslt {\cs37\ul\cf2 outTopic}}}
,(byte*) data,strlen(data),false  );\par
  172 \par
  173 #if DEBUG == 1 \par
  174 \par
  175     Serial.print( F("success : ") );\par
  176     Serial.println(pub);    \par
  177 \par
  178 #endif\par
  179 \par
  180     return(pub);\par
  181 \par
  182 \}\par
  183 \par
  192 bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABZ" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT::publish}}}
(const char* data,unsigned long logInterval)\par
  193 \{\par
  194 \par
  195 #if DEBUG == 1 \par
  196 \par
  197     Serial.println( F("Entering CoolMQTT.publish() every logInterval ") );\par
  198     Serial.println();\par
  199 \par
  200 #endif \par
  201     //log interval is passed in seconds, logInteral*1000 = logInterval in ms\par
  202     if( ( millis() - ( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 previousLogTime}}}
)  ) >=( logInterval*1000 ) )\par
  203     \{\par
  204     \par
  205     #if DEBUG == 1\par
  206 \par
  207         Serial.println( F("log Interval has passed ") );\par
  208         Serial.println();\par
  209     \par
  210     #endif\par
  211 \par
  212         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABZ" }{}}{\fldrslt {\cs37\ul\cf2 publish}}}
(data);\par
  213 \par
  214         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 previousLogTime}}}
=millis();\par
  215     \par
  216     #if DEBUG == 1 \par
  217 \par
  218         Serial.print( F("last log time : ") );\par
  219         Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 previousLogTime}}}
);\par
  220 \par
  221     #endif\par
  222 \par
  223         return(true);\par
  224     \}\par
  225 \par
  226 #if DEBUG == 1 \par
  227 \par
  228     Serial.println( F("log Interval still didn't pass ") ); \par
  229     Serial.println();\par
  230 \par
  231 #endif\par
  232 \par
  233     return(false);\par
  234 \}\par
  235 \par
  244 bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACA" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT::mqttLoop}}}
()\par
  245 \{\par
  246 \par
  247     unsigned long lastTime=millis();\par
  248 \par
  249 #if DEBUG == 1\par
  250 \par
  251     Serial.println( F("Entering CoolMQTT.mqttLoop()") );\par
  252     Serial.println();\par
  253 \par
  254 #endif  \par
  255 \par
  256     while( ( millis() - lastTime ) < 1000)\par
  257     \{\par
  258         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFB" }{}}{\fldrslt {\cs37\ul\cf2 client}}}
.loop();\par
  259         yield();\par
  260     \}\par
  261 \par
  262 #if DEBUG == 1 \par
  263     \par
  264     Serial.print( F("loop result : ") );\par
  265     Serial.println( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFB" }{}}{\fldrslt {\cs37\ul\cf2 client}}}
.loop() );\par
  266     Serial.println();\par
  267 \par
  268 #endif\par
  269 \par
  270     return( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFB" }{}}{\fldrslt {\cs37\ul\cf2 client}}}
.loop() );\par
  271 \}\par
  272 \par
  280 void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFE" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT::callback}}}
(char* topic, byte* payload, unsigned int length) \par
  281 \{\par
  282 \par
  283 #if DEBUG == 1\par
  284 \par
  285     Serial.println( F("Entering CoolMQTT.callback() ") );\par
  286     Serial.println();\par
  287 \par
  288 #endif \par
  289 \par
  290     if(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFK" }{}}{\fldrslt {\cs37\ul\cf2 newMsg}}}
==false)\par
  291     \{\par
  292         char {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEZ" }{}}{\fldrslt {\cs37\ul\cf2 temp}}}
[length+1];\par
  293 \par
  294     #if DEBUG == 1\par
  295 \par
  296         Serial.println( F("received temp msg : ") );\par
  297         \par
  298     #endif\par
  299         \par
  300         for (unsigned int i = 0; i < length; i++) \par
  301         \{\par
  302             temp[i]=(char)payload[i];\par
  303         \par
  304         #if DEBUG == 1 \par
  305 \par
  306             Serial.print( (char)payload[i] );\par
  307         \par
  308         #endif\par
  309 \par
  310         \}\par
  311     \par
  312     #if DEBUG == 1 \par
  313 \par
  314         Serial.println();\par
  315         Serial.println( F("storing new message : ") );\par
  316 \par
  317         Serial.print(F("length : "));\par
  318         Serial.println(length);\par
  319         \par
  320         Serial.print(F("size : "));\par
  321         Serial.print(sizeof(payload));\par
  322         Serial.println();\par
  323     \par
  324     #endif\par
  325 \par
  326         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFK" }{}}{\fldrslt {\cs37\ul\cf2 newMsg}}}
=true;\par
  327 \par
  328         temp[length+1]='\\0';\par
  329 \par
  330         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFL" }{}}{\fldrslt {\cs37\ul\cf2 msg}}}
=String(temp);\par
  331         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFL" }{}}{\fldrslt {\cs37\ul\cf2 msg}}}
.remove(length,1);\par
  332     \par
  333     #if DEBUG == 1 \par
  334 \par
  335         Serial.println( F("stored message : ") );\par
  336         Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFL" }{}}{\fldrslt {\cs37\ul\cf2 msg}}}
);\par
  337     \par
  338     #endif\par
  339 \par
  340     \}\par
  341     else\par
  342     \{\par
  343     \par
  344     #if DEBUG == 1\par
  345 \par
  346         Serial.println( F("did not read last message") );\par
  347     \par
  348     #endif \par
  349         \par
  350     \}\par
  351 \par
  352 \}\par
  353 \par
  359 String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACI" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT::read}}}
()\par
  360 \{   \par
  361 \par
  362 #if DEBUG == 1 \par
  363 \par
  364     Serial.println( F("Entering CoolMQTT.read()") );\par
  365     Serial.println();\par
  366 \par
  367 #endif \par
  368 \par
  369     if(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFK" }{}}{\fldrslt {\cs37\ul\cf2 newMsg}}}
==true)\par
  370     \{\par
  371         \par
  372         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFK" }{}}{\fldrslt {\cs37\ul\cf2 newMsg}}}
=false;\par
  373 \par
  374 #if DEBUG == 1 \par
  375         Serial.println( F("received new message") );\par
  376         Serial.println( F("message : ") );\par
  377         Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFL" }{}}{\fldrslt {\cs37\ul\cf2 msg}}}
);\par
  378         Serial.println();\par
  379 \par
  380 #endif\par
  381 \par
  382         return(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFL" }{}}{\fldrslt {\cs37\ul\cf2 msg}}}
);\par
  383         \par
  384     \}\par
  385     return("");\par
  386 \par
  387 \}\par
  388 \par
  400 bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFM" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT::config}}}
()\par
  401 \{\par
  402 \par
  403 #if DEBUG == 1 \par
  404 \par
  405     Serial.println( F("Entering CoolMQTT.config()") );\par
  406     Serial.println();\par
  407 \par
  408 #endif\par
  409 \par
  410     //read config file\par
  411     //update data\par
  412     File configFile = SPIFFS.open("/mqttConfig.json", "r");\par
  413 \par
  414     if (!configFile) \par
  415     \{\par
  416     \par
  417     #if DEBUG == 1 \par
  418 \par
  419         Serial.println( F("failed to read /mqttConfig.json") );\par
  420         Serial.println();\par
  421 \par
  422     #endif\par
  423 \par
  424         return(false);\par
  425     \}\par
  426     else\par
  427     \{\par
  428         size_t size = configFile.size();\par
  429         // Allocate a buffer to store contents of the file.\par
  430         std::unique_ptr<char[]> buf(new char[size]);\par
  431 \par
  432         configFile.readBytes(buf.get(), size);\par
  433         DynamicJsonBuffer jsonBuffer;\par
  434         JsonObject& json = jsonBuffer.parseObject(buf.get());\par
  435         if (!json.success()) \par
  436         \{\par
  437         \par
  438         #if DEBUG == 1 \par
  439 \par
  440             Serial.println( F("failed to parse json ") );\par
  441             Serial.println();\par
  442         \par
  443         #endif\par
  444             \par
  445             return(false);\par
  446         \} \par
  447         else\par
  448         \{\par
  449         \par
  450         #if DEBUG == 1 \par
  451         \par
  452             Serial.println( F("configuration json is ") );\par
  453             json.printTo(Serial);\par
  454             Serial.println();\par
  455 \par
  456             Serial.print(F("jsonBuffer size: "));\par
  457             Serial.println(jsonBuffer.size());\par
  458             Serial.println();\par
  459 \par
  460 \par
  461         #endif\par
  462 \par
  463             if(json["mqttServer"].success() )\par
  464             \{           \par
  465                 const char* tempmqttServer = json["mqttServer"]; \par
  466                 for(int i =0;i< 50 ;i++)\par
  467                 \{\par
  468                     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFD" }{}}{\fldrslt {\cs37\ul\cf2 mqttServer}}}
[i]=tempmqttServer[i];\par
  469                 \}\par
  470             \}\par
  471             else\par
  472             \{\par
  473                 for(int i =0;i< 50 ;i++)\par
  474                 \{\par
  475                     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFD" }{}}{\fldrslt {\cs37\ul\cf2 mqttServer}}}
[i]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFD" }{}}{\fldrslt {\cs37\ul\cf2 mqttServer}}}
[i];\par
  476                 \}\par
  477 \par
  478             \}\par
  479             json["mqttServer"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFD" }{}}{\fldrslt {\cs37\ul\cf2 mqttServer}}}
;\par
  480 \par
  481             \par
  482             if(json["inTopic"].success() )\par
  483             \{\par
  484                 const char* tempInTopic = json["inTopic"]; \par
  485                 for(int i =0;i< 50;i++)\par
  486                 \{\par
  487                     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFH" }{}}{\fldrslt {\cs37\ul\cf2 inTopic}}}
[i]=tempInTopic[i];\par
  488                 \}\par
  489             \}\par
  490             else\par
  491             \{\par
  492                 String tempMAC = WiFi.macAddress();\par
  493                 tempMAC.replace(":","");\par
  494                 snprintf({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFH" }{}}{\fldrslt {\cs37\ul\cf2 inTopic}}}
, 50, "$aws/things/%s/shadow/update/delta", tempMAC.c_str());   \par
  495             \par
  496             #if DEBUG == 1              \par
  497                 \par
  498                 Serial.print( F("Set Incomming MQTT Channel to : ") );\par
  499                 Serial.println({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFH" }{}}{\fldrslt {\cs37\ul\cf2 inTopic}}}
);\par
  500             \par
  501             #endif  \par
  502 \par
  503             \}\par
  504             json["inTopic"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFH" }{}}{\fldrslt {\cs37\ul\cf2 inTopic}}}
;\par
  505             \par
  506             \par
  507             if(json["outTopic"].success() )\par
  508             \{\par
  509                 const char* tempOutTopic = json["outTopic"]; \par
  510                 for(int i =0;i<50;i++)\par
  511                 \{\par
  512                     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFI" }{}}{\fldrslt {\cs37\ul\cf2 outTopic}}}
[i]=tempOutTopic[i];\par
  513                 \}\par
  514             \}\par
  515             else\par
  516             \{\par
  517                 String tempMAC = WiFi.macAddress();\par
  518                 tempMAC.replace(":","");\par
  519                 snprintf({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFI" }{}}{\fldrslt {\cs37\ul\cf2 outTopic}}}
, 50, "$aws/things/%s/shadow/update", tempMAC.c_str());\par
  520             \par
  521             #if DEBUG == 1 \par
  522 \par
  523                 Serial.print( F("Set Outgoing MQTT Channel to : ") );\par
  524                 Serial.println({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFI" }{}}{\fldrslt {\cs37\ul\cf2 outTopic}}}
);\par
  525             \par
  526             #endif\par
  527 \par
  528             \}\par
  529             json["outTopic"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFI" }{}}{\fldrslt {\cs37\ul\cf2 outTopic}}}
;\par
  530         \par
  531             \par
  532             if(json["user"].success() )\par
  533             \{               \par
  534                 const char* tempUser = json["user"]; \par
  535                 for(int i =0;i<50;i++)\par
  536                 \{\par
  537                     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFG" }{}}{\fldrslt {\cs37\ul\cf2 user}}}
[i]=tempUser[i];\par
  538                 \}\par
  539             \}\par
  540             else\par
  541             \{\par
  542                 for(int i=0;i<50;i++)\par
  543                 \{\par
  544                     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFG" }{}}{\fldrslt {\cs37\ul\cf2 user}}}
[i]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFG" }{}}{\fldrslt {\cs37\ul\cf2 user}}}
[i];\par
  545                 \}               \par
  546             \}\par
  547             json["user"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFG" }{}}{\fldrslt {\cs37\ul\cf2 user}}}
;\par
  548             \par
  549             if(json["bufferSize"].success() )\par
  550             \{\par
  551                 int tempBufferSize = json["bufferSize"]; \par
  552                 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFF" }{}}{\fldrslt {\cs37\ul\cf2 bufferSize}}}
=tempBufferSize;\par
  553             \}\par
  554             else\par
  555             \{\par
  556                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFF" }{}}{\fldrslt {\cs37\ul\cf2 bufferSize}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFF" }{}}{\fldrslt {\cs37\ul\cf2 bufferSize}}}
;\par
  557             \}\par
  558             json["bufferSize"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFF" }{}}{\fldrslt {\cs37\ul\cf2 bufferSize}}}
;\par
  559 \par
  560             configFile.close();\par
  561             configFile = SPIFFS.open("/mqttConfig.json", "w");\par
  562             if(!configFile)\par
  563             \{\par
  564             \par
  565             #if DEBUG == 1 \par
  566 \par
  567                 Serial.println( F("failed to write to /mqttConfig.json") );\par
  568             \par
  569             #endif\par
  570 \par
  571                 return(false);              \par
  572             \}\par
  573             \par
  574             json.printTo(configFile);\par
  575             configFile.close();\par
  576 \par
  577         #if DEBUG == 1 \par
  578 \par
  579             Serial.println( F("saved configuration is :") );\par
  580             json.printTo(Serial);\par
  581             Serial.println();\par
  582         \par
  583         #endif\par
  584 \par
  585             return(true); \par
  586         \}\par
  587     \}   \par
  588     \par
  589 \par
  590 \}\par
  591 \par
  597 void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFM" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT::config}}}
(const char mqttServer[],const char inTopic[],const char outTopic[],const char user[],int bufferSize)\par
  598 \{\par
  599 \par
  600 #if DEBUG == 1\par
  601 \par
  602     Serial.println( F("Entering CoolMQTT.config() , no SPIFFS variant") );\par
  603     Serial.println();\par
  604 \par
  605 #endif\par
  606 \par
  607     for(int i =0;i< 50 ;i++)\par
  608     \{\par
  609         this->mqttServer[i]=mqttServer[i];\par
  610         this->inTopic[i]=inTopic[i];\par
  611         this->outTopic[i]=outTopic[i];\par
  612         this->user[i]=user[i];\par
  613     \}\par
  614     this->bufferSize={\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFF" }{}}{\fldrslt {\cs37\ul\cf2 bufferSize}}}
;\par
  615     \par
  616 \par
  617 \}\par
  618 \par
  624 void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAQ" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT::printConf}}}
()\par
  625 \{\par
  626 \par
  627 #if DEBUG == 1 \par
  628 \par
  629     Serial.println( F("Entering CoolMQTT.printConf()") );\par
  630     Serial.println();   \par
  631 \par
  632 #endif\par
  633     \par
  634     Serial.println("MQTT configuration ");\par
  635 \par
  636     Serial.print("mqttServer : ");\par
  637     Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFD" }{}}{\fldrslt {\cs37\ul\cf2 mqttServer}}}
);\par
  638 \par
  639     Serial.print("inTopic : ");\par
  640     Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFH" }{}}{\fldrslt {\cs37\ul\cf2 inTopic}}}
);\par
  641 \par
  642     Serial.print("outTopic : ");\par
  643     Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFI" }{}}{\fldrslt {\cs37\ul\cf2 outTopic}}}
);\par
  644 \par
  645     Serial.print("user : ");\par
  646     Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFG" }{}}{\fldrslt {\cs37\ul\cf2 user}}}
);\par
  647 \par
  648     Serial.print("bufferSize : ");\par
  649     Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFF" }{}}{\fldrslt {\cs37\ul\cf2 bufferSize}}}
);\par
  650 \par
  651     Serial.println();\par
  652 \par
  653 \par
  654 \}\par
  655 \par
  660 String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADA" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT::getUser}}}
()\par
  661 \{\par
  662 \par
  663 #if DEBUG == 1 \par
  664     Serial.println( F("Entering CoolMQTT.getUser()") );\par
  665     Serial.println();\par
  666     \par
  667     Serial.print( F("user : ") );\par
  668     Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFG" }{}}{\fldrslt {\cs37\ul\cf2 user}}}
);\par
  669 \par
  670 #endif\par
  671 \par
  672     return String(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFG" }{}}{\fldrslt {\cs37\ul\cf2 user}}}
);\par
  673 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/CoolMQTT.h File Reference\par \pard\plain 
{\tc\tcl2 \v /home/ashiroji/Arduino/libraries/CoolBoard/CoolMQTT.h}
{\xe \v /home/ashiroji/Arduino/libraries/CoolBoard/CoolMQTT.h}
{\bkmkstart AAAAAAAADG}
{\bkmkend AAAAAAAADG}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADR" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT}}} Header File. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Arduino.h"}\par
{\f2 #include <ESP8266WiFi.h>}\par
{\f2 #include <PubSubClient.h>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for CoolMQTT.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "CoolMQTT_8h__incl.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "CoolMQTT_8h__dep__incl.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADR" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT}}}
\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class handles the mqtt client. }}}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADR" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT}}} Header File. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid Mehdi Zemzem \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 1.0 \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Date:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 27/06/2017 \par
}}{
Definition in file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKD" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT.h}}}
.}\par
}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/CoolMQTT.h\par \pard\plain 
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     1 \par
   11 #ifndef CoolMQTT_H\par
   12 #define CoolMQTT_H\par
   13 \par
   14 #include"Arduino.h"  \par
   15 #include <ESP8266WiFi.h>\par
   16 #include <PubSubClient.h>\par
   17 \par
   22 class {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADR" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT}}}
\par
   23 \{\par
   24 \par
   25 public:\par
   26 \par
   27     void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAP" }{}}{\fldrslt {\cs37\ul\cf2 begin}}}
();\par
   28 \par
   29     int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABQ" }{}}{\fldrslt {\cs37\ul\cf2 connect}}}
(unsigned long keepAlive); //keepAlive in seconds\par
   30 \par
   31     bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABZ" }{}}{\fldrslt {\cs37\ul\cf2 publish}}}
(const char* data);\par
   32 \par
   33     bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABZ" }{}}{\fldrslt {\cs37\ul\cf2 publish}}}
(const char* data,unsigned long logInterval);\par
   34 \par
   35     String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACI" }{}}{\fldrslt {\cs37\ul\cf2 read}}}
();\par
   36 \par
   37     void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFM" }{}}{\fldrslt {\cs37\ul\cf2 config}}}
(const char {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFD" }{}}{\fldrslt {\cs37\ul\cf2 mqttServer}}}
[],const char {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFH" }{}}{\fldrslt {\cs37\ul\cf2 inTopic}}}
[],const char {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFI" }{}}{\fldrslt {\cs37\ul\cf2 outTopic}}}
[],const char {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFG" }{}}{\fldrslt {\cs37\ul\cf2 user}}}
[],int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFF" }{}}{\fldrslt {\cs37\ul\cf2 bufferSize}}}
);\par
   38 \par
   39     bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFM" }{}}{\fldrslt {\cs37\ul\cf2 config}}}
();\par
   40 \par
   41     void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFE" }{}}{\fldrslt {\cs37\ul\cf2 callback}}}
(char* topic, byte* payload, unsigned int length);\par
   42 \par
   43     void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAQ" }{}}{\fldrslt {\cs37\ul\cf2 printConf}}}
();\par
   44 \par
   45     int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABP" }{}}{\fldrslt {\cs37\ul\cf2 state}}}
();\par
   46 \par
   47     bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACA" }{}}{\fldrslt {\cs37\ul\cf2 mqttLoop}}}
();\par
   48 \par
   49     String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADA" }{}}{\fldrslt {\cs37\ul\cf2 getUser}}}
();\par
   50 \par
   51 private:\par
   52     \par
   53     char mqttServer[50]=\{'0'\};\par
   54 \par
   55     String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFL" }{}}{\fldrslt {\cs37\ul\cf2 msg}}}
="";\par
   56 \par
   57     char inTopic[50]=\{'0'\};\par
   58 \par
   59     char outTopic[50]=\{'0'\};\par
   60 \par
   61     char user[50]=\{'0'\};\par
   62 \par
   63     int bufferSize=3000;    \par
   64 \par
   65     WiFiClient {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFC" }{}}{\fldrslt {\cs37\ul\cf2 espClient}}}
;\par
   66 \par
   67     PubSubClient {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFB" }{}}{\fldrslt {\cs37\ul\cf2 client}}}
;\par
   68 \par
   69     bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFK" }{}}{\fldrslt {\cs37\ul\cf2 newMsg}}}
=0;\par
   70 \par
   71     unsigned long {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 previousLogTime}}}
=0;\par
   72 \par
   73 \par
   74 \};\par
   75 \par
   76 #endif\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/CoolTime.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v /home/ashiroji/Arduino/libraries/CoolBoard/CoolTime.cpp}
{\xe \v /home/ashiroji/Arduino/libraries/CoolBoard/CoolTime.cpp}
{\bkmkstart AAAAAAAAKE}
{\bkmkend AAAAAAAAKE}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADP" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime}}} Source File. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "FS.h"}\par
{\f2 #include "Arduino.h"}\par
{\f2 #include "CoolTime.h"}\par
{\f2 #include "ArduinoJson.h"}\par
{\f2 #include "TimeLib.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for CoolTime.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "CoolTime_8cpp__incl.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKF" }{}}{\fldrslt {\cs37\ul\cf2 DEBUG}}}
\~ 1\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADP" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime}}} Source File. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid Mehdi Zemzem \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 1.0 \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Date:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 27/06/2017 \par
}}{
Definition in file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKG" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime.cpp}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v DEBUG\:CoolTime.cpp}
{\xe \v CoolTime.cpp\:DEBUG}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DEBUG\~ 1}}
\par
{\bkmkstart AAAAAAAAKF}
{\bkmkend AAAAAAAAKF}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKH" }{}}{\fldrslt {\cs37\ul\cf2 23}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKG" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime.cpp}}}
.}\par
}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/CoolTime.cpp\par \pard\plain 
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     1 \par
   11 #include "FS.h"\par
   12 \par
   13 #include "Arduino.h"\par
   14 \par
   15 #include "{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADF" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime.h}}}
"\par
   16 \par
   17 #include "ArduinoJson.h"\par
   18 \par
   19 #include "TimeLib.h"\par
   20 \par
   21 \par
   22 \par
   23 #define DEBUG 1\par
   24 \par
   25 #ifndef DEBUG\par
   26 \par
   27 #define DEBUG 0\par
   28 \par
   29 #endif\par
   30 \par
   31 \par
   32 \par
   33 \par
   34 \par
   41 void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABK" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime::begin}}}
()\par
   42 \{\par
   43 \par
   44 #if DEBUG == 1 \par
   45 \par
   46     Serial.println( F("Entering CoolTime.begin()") );\par
   47     Serial.println();\par
   48 \par
   49 #endif \par
   50 \par
   51 \par
   52     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFN" }{}}{\fldrslt {\cs37\ul\cf2 Udp}}}
.begin({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFO" }{}}{\fldrslt {\cs37\ul\cf2 localPort}}}
);\par
   53     \par
   54     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACC" }{}}{\fldrslt {\cs37\ul\cf2 update}}}
();\par
   55     \par
   56 \}\par
   57 \par
   63 void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACC" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime::update}}}
()\par
   64 \{\par
   65 \par
   66 #if DEBUG == 1\par
   67 \par
   68     Serial.println( F("Entering CoolTime.update()") );\par
   69     Serial.println();\par
   70 \par
   71 #endif \par
   72 \par
   73     if( !( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFP" }{}}{\fldrslt {\cs37\ul\cf2 isTimeSync}}}
() ) )\par
   74     \{\par
   75     \par
   76     #if DEBUG == 1\par
   77 \par
   78         Serial.println( F("waiting for sync") );\par
   79         Serial.println();\par
   80 \par
   81     #endif \par
   82 \par
   83         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFQ" }{}}{\fldrslt {\cs37\ul\cf2 timeSync}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFR" }{}}{\fldrslt {\cs37\ul\cf2 getNtpTime}}}
();\par
   84         breakTime(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFR" }{}}{\fldrslt {\cs37\ul\cf2 getNtpTime}}}
(), this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFS" }{}}{\fldrslt {\cs37\ul\cf2 tmSet}}}
);\par
   85         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFT" }{}}{\fldrslt {\cs37\ul\cf2 rtc}}}
.set(makeTime(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFS" }{}}{\fldrslt {\cs37\ul\cf2 tmSet}}}
), CLOCK_ADDRESS); // set the clock\par
   86         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFU" }{}}{\fldrslt {\cs37\ul\cf2 saveTimeSync}}}
();\par
   87     \}\par
   88     \par
   89 \}\par
   90 \par
   96 void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFV" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime::setDateTime}}}
(int year, int month, int day, int hour, int minutes, int seconds)\par
   97 \{ \par
   98 \par
   99 #if DEBUG == 1\par
  100 \par
  101     Serial.println( F("Entering CoolTime.setDateTime") );\par
  102     Serial.println();\par
  103 \par
  104 #endif\par
  105 \par
  106     tmElements_t tm;\par
  107     tm.Second=seconds; \par
  108     tm.Minute=minutes; \par
  109     tm.Hour=hour; \par
  110     tm.Day=day;\par
  111     tm.Month=month; \par
  112     tm.Year=year;\par
  113     \par
  114     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFT" }{}}{\fldrslt {\cs37\ul\cf2 rtc}}}
.set(makeTime(tm),CLOCK_ADDRESS);   \par
  115 \par
  116 #if DEBUG == 1\par
  117 \par
  118     Serial.print( F("setting time to : ") );//"20yy-mm-ddT00:00:00Z\par
  119 \par
  120     Serial.print(tm.Year);\par
  121     Serial.print( F("-") );\par
  122     Serial.print( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFW" }{}}{\fldrslt {\cs37\ul\cf2 formatDigits}}}
( tm.Month ) );\par
  123     Serial.print( F("-") );\par
  124     Serial.print( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFW" }{}}{\fldrslt {\cs37\ul\cf2 formatDigits}}}
( tm.Day ) );\par
  125     Serial.print( F("T") );\par
  126     Serial.print( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFW" }{}}{\fldrslt {\cs37\ul\cf2 formatDigits}}}
( tm.Hour ) );\par
  127     Serial.print( F(":") );\par
  128     Serial.print( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFW" }{}}{\fldrslt {\cs37\ul\cf2 formatDigits}}}
( tm.Minute ) );\par
  129     Serial.print( F(":") );\par
  130     Serial.print( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFW" }{}}{\fldrslt {\cs37\ul\cf2 formatDigits}}}
( tm.Second ) );\par
  131     Serial.print( F("Z") );\par
  132 \par
  133     Serial.println();\par
  134     \par
  135     Serial.print( F("time set to : ") );\par
  136     Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADB" }{}}{\fldrslt {\cs37\ul\cf2 getESDate}}}
());\par
  137     Serial.println();\par
  138 \par
  139 #endif\par
  140 \par
  141 \}\par
  142 \par
  150 tmElements_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACZ" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime::getTimeDate}}}
()\par
  151 \{\par
  152 \par
  153 #if DEBUG == 1 \par
  154     \par
  155     Serial.println( F("Entering CoolTime.getTimeDate()") );\par
  156     Serial.println();\par
  157 \par
  158 #endif\par
  159 \par
  160     tmElements_t tm;\par
  161     time_t timeDate = this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFT" }{}}{\fldrslt {\cs37\ul\cf2 rtc}}}
.get(CLOCK_ADDRESS);\par
  162     breakTime(timeDate,tm);\par
  163 \par
  164 #if DEBUG == 1\par
  165     \par
  166     Serial.print( F("time is : ") );\par
  167     Serial.print(tm.Year+ 1970 );\par
  168     Serial.print( F("-") );\par
  169     Serial.print( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFW" }{}}{\fldrslt {\cs37\ul\cf2 formatDigits}}}
( tm.Month ) );\par
  170     Serial.print( F("-") );\par
  171     Serial.print( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFW" }{}}{\fldrslt {\cs37\ul\cf2 formatDigits}}}
( tm.Day ) );\par
  172     Serial.print( F("T") );\par
  173     Serial.print( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFW" }{}}{\fldrslt {\cs37\ul\cf2 formatDigits}}}
( tm.Hour ) );\par
  174     Serial.print( F(":") );\par
  175     Serial.print( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFW" }{}}{\fldrslt {\cs37\ul\cf2 formatDigits}}}
( tm.Minute ) );\par
  176     Serial.print( F(":") );\par
  177     Serial.print( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFW" }{}}{\fldrslt {\cs37\ul\cf2 formatDigits}}}
( tm.Second ) );\par
  178     Serial.print( F("Z") );\par
  179 \par
  180 #endif\par
  181     \par
  182     return(tm);\par
  183 \}\par
  184 \par
  193 String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADB" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime::getESDate}}}
()\par
  194 \{\par
  195 \par
  196 #if DEBUG == 1 \par
  197 \par
  198     Serial.println( F("Entering CoolTime.getESDate()") );\par
  199     Serial.println();\par
  200 \par
  201 #endif \par
  202 \par
  203     tmElements_t tm=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACZ" }{}}{\fldrslt {\cs37\ul\cf2 getTimeDate}}}
();\par
  204 \par
  205     //"20yy-mm-ddT00:00:00Z"\par
  206     String elasticSearchString =String(tm.Year+1970)+"-"+this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFW" }{}}{\fldrslt {\cs37\ul\cf2 formatDigits}}}
(tm.Month)+"-";\par
  207 \par
  208     elasticSearchString +=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFW" }{}}{\fldrslt {\cs37\ul\cf2 formatDigits}}}
(tm.Day)+"T"+this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFW" }{}}{\fldrslt {\cs37\ul\cf2 formatDigits}}}
(tm.Hour)+":";\par
  209     \par
  210     elasticSearchString +=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFW" }{}}{\fldrslt {\cs37\ul\cf2 formatDigits}}}
(tm.Minute)+":"+this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFW" }{}}{\fldrslt {\cs37\ul\cf2 formatDigits}}}
(tm.Second)+"Z";\par
  211 \par
  212 #if DEBUG == 1 \par
  213 \par
  214     Serial.print( F("elastic Search date : ") );\par
  215     Serial.println(elasticSearchString);\par
  216     Serial.println();\par
  217 \par
  218 #endif\par
  219 \par
  220     return (elasticSearchString);\par
  221 \}\par
  222 \par
  231 unsigned long {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFX" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime::getLastSyncTime}}}
()\par
  232 \{\par
  233 \par
  234 #if DEBUG == 1 \par
  235 \par
  236     Serial.println( F("Entering CoolTime.getLastSyncTime()") );\par
  237     Serial.println();\par
  238     \par
  239     Serial.print( F("last sync time : ") );\par
  240     Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFQ" }{}}{\fldrslt {\cs37\ul\cf2 timeSync}}}
);\par
  241 \par
  242 #endif \par
  243 \par
  244     return(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFQ" }{}}{\fldrslt {\cs37\ul\cf2 timeSync}}}
);\par
  245 \}\par
  246 \par
  247 \par
  257 bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFP" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime::isTimeSync}}}
(unsigned long seconds)\par
  258 \{\par
  259 \par
  260 #if DEBUG == 1\par
  261 \par
  262     Serial.println( F("Entering CoolTime.isTimeSync() ") );\par
  263     Serial.println();\par
  264 \par
  265 #endif \par
  266 \par
  267 \par
  268     //default is once per week we try to get a time update\par
  269     if( ( RTC.get(CLOCK_ADDRESS) - this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFX" }{}}{\fldrslt {\cs37\ul\cf2 getLastSyncTime}}}
() ) > ( seconds ) ) \par
  270     \{\par
  271 \par
  272     #if DEBUG == 1 \par
  273 \par
  274         Serial.println( F("time is not syncronised ") );\par
  275     \par
  276     #endif\par
  277 \par
  278         return(false);  \par
  279     \}\par
  280     \par
  281 #if DEBUG == 1 \par
  282 \par
  283     Serial.println( F("time is syncronised ") );\par
  284 \par
  285 #endif \par
  286 \par
  287     return(true);\par
  288 \}\par
  289 \par
  290 \par
  299 time_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFR" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime::getNtpTime}}}
()\par
  300 \{\par
  301 \par
  302 #if DEBUG == 1 \par
  303 \par
  304     Serial.println( F("Entering CoolTime.getNtpTime()") );\par
  305     Serial.println();\par
  306 \par
  307 #endif \par
  308 \par
  309     while ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFN" }{}}{\fldrslt {\cs37\ul\cf2 Udp}}}
.parsePacket() > 0) ; // discard any previously received packets\par
  310 \par
  311 #if DEBUG == 1 \par
  312     \par
  313     Serial.println( F("Transmit NTP Request") );\par
  314 \par
  315 #endif \par
  316 \par
  317     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFY" }{}}{\fldrslt {\cs37\ul\cf2 sendNTPpacket}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFZ" }{}}{\fldrslt {\cs37\ul\cf2 timeServer}}}
);\par
  318 \par
  319     uint32_t beginWait = millis();\par
  320 \par
  321     while (millis() - beginWait < 1500) \par
  322     \{\par
  323         int size = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFN" }{}}{\fldrslt {\cs37\ul\cf2 Udp}}}
.parsePacket();\par
  324         if (size >= {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGA" }{}}{\fldrslt {\cs37\ul\cf2 NTP_PACKET_SIZE}}}
) \par
  325         \{\par
  326         \par
  327         #if DEBUG == 1\par
  328 \par
  329             Serial.println( F("Receive NTP Response") );\par
  330         \par
  331         #endif\par
  332 \par
  333             {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFN" }{}}{\fldrslt {\cs37\ul\cf2 Udp}}}
.read({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGB" }{}}{\fldrslt {\cs37\ul\cf2 packetBuffer}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGA" }{}}{\fldrslt {\cs37\ul\cf2 NTP_PACKET_SIZE}}}
);  // read packet into the buffer\par
  334             unsigned long secsSince1900;\par
  335             // convert four bytes starting at location 40 to a long integer\par
  336             secsSince1900 =  (unsigned long){\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGB" }{}}{\fldrslt {\cs37\ul\cf2 packetBuffer}}}
[40] << 24;\par
  337             secsSince1900 |= (unsigned long){\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGB" }{}}{\fldrslt {\cs37\ul\cf2 packetBuffer}}}
[41] << 16;\par
  338             secsSince1900 |= (unsigned long){\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGB" }{}}{\fldrslt {\cs37\ul\cf2 packetBuffer}}}
[42] << 8;\par
  339             secsSince1900 |= (unsigned long){\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGB" }{}}{\fldrslt {\cs37\ul\cf2 packetBuffer}}}
[43];\par
  340         \par
  341         #if DEBUG == 1 \par
  342     \par
  343             Serial.print( F("received unix time : ") );\par
  344             Serial.println(secsSince1900 - 2208988800UL);\par
  345             Serial.println();\par
  346 \par
  347         #endif \par
  348 \par
  349             return secsSince1900 - 2208988800UL ;\par
  350         \}\par
  351     \}\par
  352     \par
  353 #if DEBUG == 1\par
  354 \par
  355     Serial.println( F("No NTP Response :-(") );\par
  356 \par
  357 #endif \par
  358 \par
  359     return 0; // return 0 if unable to get the time\par
  360 \}\par
  361 \par
  367 void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFY" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime::sendNTPpacket}}}
(IPAddress &address)\par
  368 \{\par
  369 \par
  370 #if DEBUG == 1 \par
  371 \par
  372     Serial.println( F("Enter CoolTime.sendNTPpacket()") );\par
  373     Serial.println();\par
  374 \par
  375 #endif\par
  376 \par
  377     memset({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGB" }{}}{\fldrslt {\cs37\ul\cf2 packetBuffer}}}
, 0, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGA" }{}}{\fldrslt {\cs37\ul\cf2 NTP_PACKET_SIZE}}}
);\par
  378     // Initialize values needed to form NTP request\par
  379     // (see URL above for details on the packets)\par
  380     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGB" }{}}{\fldrslt {\cs37\ul\cf2 packetBuffer}}}
[0] = 0b11100011;   // LI, Version, Mode\par
  381     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGB" }{}}{\fldrslt {\cs37\ul\cf2 packetBuffer}}}
[1] = 0;     // Stratum, or type of clock\par
  382     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGB" }{}}{\fldrslt {\cs37\ul\cf2 packetBuffer}}}
[2] = 6;     // Polling Interval\par
  383     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGB" }{}}{\fldrslt {\cs37\ul\cf2 packetBuffer}}}
[3] = 0xEC;  // Peer Clock Precision\par
  384     // 8 bytes of zero for Root Delay & Root Dispersion\par
  385     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGB" }{}}{\fldrslt {\cs37\ul\cf2 packetBuffer}}}
[12]  = 49;\par
  386     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGB" }{}}{\fldrslt {\cs37\ul\cf2 packetBuffer}}}
[13]  = 0x4E;\par
  387     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGB" }{}}{\fldrslt {\cs37\ul\cf2 packetBuffer}}}
[14]  = 49;\par
  388     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGB" }{}}{\fldrslt {\cs37\ul\cf2 packetBuffer}}}
[15]  = 52;\par
  389     // all NTP fields have been given values, now\par
  390     // you can send a packet requesting a timestamp:                 \par
  391     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFN" }{}}{\fldrslt {\cs37\ul\cf2 Udp}}}
.beginPacket(address, 123); //NTP requests are to port 123\par
  392     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFN" }{}}{\fldrslt {\cs37\ul\cf2 Udp}}}
.write({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGB" }{}}{\fldrslt {\cs37\ul\cf2 packetBuffer}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGA" }{}}{\fldrslt {\cs37\ul\cf2 NTP_PACKET_SIZE}}}
);\par
  393     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFN" }{}}{\fldrslt {\cs37\ul\cf2 Udp}}}
.endPacket();    \par
  394 \}\par
  395 \par
  401 void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABJ" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime::config}}}
(IPAddress timeServer,unsigned int localPort)\par
  402 \{\par
  403 \par
  404 #if DEBUG == 1 \par
  405 \par
  406     Serial.println( F("Enter CoomTime.config() , no SPIFFS variant ") );\par
  407     Serial.println();\par
  408 \par
  409 #endif \par
  410 \par
  411     this->timeServer={\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFZ" }{}}{\fldrslt {\cs37\ul\cf2 timeServer}}}
;\par
  412     this->localPort={\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFO" }{}}{\fldrslt {\cs37\ul\cf2 localPort}}}
;\par
  413     \par
  414 \} \par
  415 \par
  424 bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABJ" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime::config}}}
()\par
  425 \{\par
  426 \par
  427 #if DEBUG == 1 \par
  428 \par
  429     Serial.println( F("Enter CoolTime.config()") );\par
  430     Serial.println();\par
  431 \par
  432 #endif \par
  433 \par
  434     File rtcConfig = SPIFFS.open("/rtcConfig.json", "r");\par
  435 \par
  436     if (!rtcConfig) \par
  437     \{\par
  438     \par
  439     #if DEBUG == 1 \par
  440 \par
  441         Serial.println( F("failed to read /rtcConfig.json") );\par
  442         Serial.println();\par
  443     \par
  444     #endif\par
  445 \par
  446         return(false);\par
  447     \}\par
  448     else\par
  449     \{\par
  450         size_t size = rtcConfig.size();\par
  451         // Allocate a buffer to store contents of the file.\par
  452         std::unique_ptr<char[]> buf(new char[size]);\par
  453 \par
  454         rtcConfig.readBytes(buf.get(), size);\par
  455         DynamicJsonBuffer jsonBuffer;\par
  456         JsonObject& json = jsonBuffer.parseObject(buf.get());\par
  457         if (!json.success()) \par
  458         \{\par
  459         \par
  460         #if DEBUG == 1 \par
  461 \par
  462             Serial.println( F("failed to parse json") );\par
  463             Serial.println();\par
  464         \par
  465         #endif \par
  466 \par
  467             return(false);\par
  468         \} \par
  469         else\par
  470         \{  \par
  471         \par
  472         #if DEBUG == 1 \par
  473 \par
  474             Serial.println( F("configuration json is :") );\par
  475             json.printTo(Serial);\par
  476             Serial.println();\par
  477 \par
  478             Serial.print(F("jsonBuffer size: "));\par
  479             Serial.println(jsonBuffer.size());\par
  480             Serial.println();\par
  481 \par
  482 \par
  483         #endif\par
  484 \par
  485             String ip;\par
  486             \par
  487             if(json["timeServer"].success() )\par
  488             \{           \par
  489                  ip=json["timeServer"].as<String>();\par
  490                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFZ" }{}}{\fldrslt {\cs37\ul\cf2 timeServer}}}
.fromString(ip);\par
  491                 \par
  492             \}\par
  493             else\par
  494             \{\par
  495                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFZ" }{}}{\fldrslt {\cs37\ul\cf2 timeServer}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFZ" }{}}{\fldrslt {\cs37\ul\cf2 timeServer}}}
;\par
  496             \}\par
  497             json["timeServer"]=ip;\par
  498             \par
  499             if(json["localPort"].success() )\par
  500             \{                       \par
  501                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFO" }{}}{\fldrslt {\cs37\ul\cf2 localPort}}}
=json["localPort"];\par
  502             \}\par
  503             else\par
  504             \{\par
  505                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFO" }{}}{\fldrslt {\cs37\ul\cf2 localPort}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFO" }{}}{\fldrslt {\cs37\ul\cf2 localPort}}}
;\par
  506             \}\par
  507             json["localPort"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFO" }{}}{\fldrslt {\cs37\ul\cf2 localPort}}}
;\par
  508 \par
  509 \par
  510             if( json["timeSync"].success() )\par
  511             \{\par
  512 \par
  513                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFQ" }{}}{\fldrslt {\cs37\ul\cf2 timeSync}}}
=json["timeSync"];\par
  514             \}\par
  515             else\par
  516             \{\par
  517                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFQ" }{}}{\fldrslt {\cs37\ul\cf2 timeSync}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFQ" }{}}{\fldrslt {\cs37\ul\cf2 timeSync}}}
;\par
  518             \}\par
  519             json["timeSync"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFQ" }{}}{\fldrslt {\cs37\ul\cf2 timeSync}}}
;\par
  520 \par
  521             rtcConfig.close();\par
  522             rtcConfig= SPIFFS.open("/rtcConfig.json", "w");\par
  523             \par
  524             if(!rtcConfig)\par
  525             \{\par
  526             \par
  527             #if DEBUG == 1\par
  528 \par
  529                 Serial.println( F("failed to write to /rtcConfig.json") );\par
  530                 Serial.println();\par
  531             \par
  532             #endif\par
  533 \par
  534                 return(false);\par
  535             \}\par
  536             \par
  537             json.printTo(rtcConfig);\par
  538             rtcConfig.close();\par
  539 \par
  540         #if DEBUG == 1 \par
  541 \par
  542             Serial.println( F("configuration is :") );\par
  543             json.printTo(Serial);\par
  544             Serial.println();\par
  545         \par
  546         #endif\par
  547         \par
  548             return(true); \par
  549         \}\par
  550     \}   \par
  551 \par
  552 \par
  553 \par
  554 \}\par
  555 \par
  565 bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFU" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime::saveTimeSync}}}
()\par
  566 \{\par
  567     Serial.println( F("Enter CoolTime.saveTimeSync()") );\par
  568     Serial.println();\par
  569 \par
  570     File rtcConfig = SPIFFS.open("/rtcConfig.json", "r");\par
  571 \par
  572     if (!rtcConfig) \par
  573     \{\par
  574         Serial.println( F("failed to read /rtcConfig.json") );\par
  575         Serial.println();\par
  576 \par
  577         return(false);\par
  578     \}\par
  579     else\par
  580     \{\par
  581         size_t size = rtcConfig.size();\par
  582         // Allocate a buffer to store contents of the file.\par
  583         std::unique_ptr<char[]> buf(new char[size]);\par
  584 \par
  585         rtcConfig.readBytes(buf.get(), size);\par
  586         DynamicJsonBuffer jsonBuffer;\par
  587         JsonObject& json = jsonBuffer.parseObject(buf.get());\par
  588         if (!json.success()) \par
  589         \{\par
  590         #if DEBUG == 1\par
  591 \par
  592             Serial.println( F("failed to parse json") );\par
  593             Serial.println();\par
  594         \par
  595         #endif\par
  596 \par
  597             return(false);\par
  598         \} \par
  599         else\par
  600         \{\par
  601 \par
  602         #if DEBUG == 1\par
  603     \par
  604             Serial.println( F("configuration json is :") );\par
  605             json.printTo(Serial);\par
  606             Serial.println();\par
  607 \par
  608             Serial.print(F("jsonBuffer size: "));\par
  609             Serial.println(jsonBuffer.size());\par
  610             Serial.println();\par
  611 \par
  612         #endif\par
  613 \par
  614             String ip;\par
  615                     \par
  616             if(json["timeServer"].success() )\par
  617             \{           \par
  618                  ip=json["timeServer"].as<String>();\par
  619                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFZ" }{}}{\fldrslt {\cs37\ul\cf2 timeServer}}}
.fromString(ip);\par
  620                 \par
  621             \}\par
  622             else\par
  623             \{\par
  624                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFZ" }{}}{\fldrslt {\cs37\ul\cf2 timeServer}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFZ" }{}}{\fldrslt {\cs37\ul\cf2 timeServer}}}
;\par
  625             \}\par
  626             json["timeServer"]=ip;\par
  627             \par
  628             if(json["localPort"].success() )\par
  629             \{                       \par
  630                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFO" }{}}{\fldrslt {\cs37\ul\cf2 localPort}}}
=json["localPort"];\par
  631             \}\par
  632             else\par
  633             \{\par
  634                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFO" }{}}{\fldrslt {\cs37\ul\cf2 localPort}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFO" }{}}{\fldrslt {\cs37\ul\cf2 localPort}}}
;\par
  635             \}\par
  636             json["localPort"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFO" }{}}{\fldrslt {\cs37\ul\cf2 localPort}}}
;\par
  637 \par
  638 \par
  639             if( json["timeSync"].success() )\par
  640             \{\par
  641                 json["timeSync"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFQ" }{}}{\fldrslt {\cs37\ul\cf2 timeSync}}}
;\par
  642             \}\par
  643             else\par
  644             \{\par
  645                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFQ" }{}}{\fldrslt {\cs37\ul\cf2 timeSync}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFQ" }{}}{\fldrslt {\cs37\ul\cf2 timeSync}}}
;\par
  646             \}\par
  647             json["timeSync"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFQ" }{}}{\fldrslt {\cs37\ul\cf2 timeSync}}}
;\par
  648 \par
  649 \par
  650             rtcConfig.close();\par
  651             rtcConfig= SPIFFS.open("/rtcConfig.json", "w");\par
  652             \par
  653             if(!rtcConfig)\par
  654             \{\par
  655             #if DEBUG == 1\par
  656 \par
  657                 Serial.println( F("failed to write timeSync to /rtcConfig.json") );\par
  658                 Serial.println();\par
  659             \par
  660             #endif\par
  661 \par
  662                 return(false);\par
  663             \}\par
  664             \par
  665             json.printTo(rtcConfig);\par
  666             rtcConfig.close();\par
  667     \par
  668         #if DEBUG == 1\par
  669 \par
  670             Serial.println( F("configuration is :") );\par
  671             json.printTo(Serial);\par
  672             Serial.println();\par
  673         \par
  674         #endif\par
  675             return(true); \par
  676         \}\par
  677     \}   \par
  678 \par
  679 \par
  680 \par
  681 \}\par
  682 \par
  689 void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABL" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime::printConf}}}
()\par
  690 \{\par
  691 \par
  692 #if DEBUG == 1\par
  693 \par
  694     Serial.println( F("Entering CoolTime.printConf()") );\par
  695     Serial.println();\par
  696 \par
  697 #endif \par
  698 \par
  699     Serial.println("RTC Configuration") ;\par
  700 \par
  701     Serial.print("timeServer : ");\par
  702     Serial.println({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFZ" }{}}{\fldrslt {\cs37\ul\cf2 timeServer}}}
);\par
  703     \par
  704     Serial.print("localPort : :");\par
  705     Serial.println({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFO" }{}}{\fldrslt {\cs37\ul\cf2 localPort}}}
);\par
  706 \}\par
  707 \par
  716 String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFW" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime::formatDigits}}}
(int digits)\par
  717 \{\par
  718 \par
  719 #if DEBUG == 1 \par
  720 \par
  721     Serial.println( F("Entering CoolTime.formatDigits()") );\par
  722     Serial.println();\par
  723 \par
  724 #endif \par
  725 \par
  726     if(digits < 10)\par
  727     \{\par
  728     \par
  729     #if DEBUG == 1\par
  730 \par
  731         Serial.println( F("output digit : ") );\par
  732         Serial.println( String("0") + String(digits) );\par
  733 \par
  734     #endif\par
  735 \par
  736         return( String("0") + String(digits) );\par
  737     \}\par
  738     \par
  739 #if DEBUG == 1 \par
  740 \par
  741     Serial.println( F("output digit : ") );\par
  742     Serial.println(digits);\par
  743 \par
  744 #endif\par
  745 \par
  746     return( String(digits) );\par
  747 \}\par
  748 \par
  749 \par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/CoolTime.h File Reference\par \pard\plain 
{\tc\tcl2 \v /home/ashiroji/Arduino/libraries/CoolBoard/CoolTime.h}
{\xe \v /home/ashiroji/Arduino/libraries/CoolBoard/CoolTime.h}
{\bkmkstart AAAAAAAADF}
{\bkmkend AAAAAAAADF}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADP" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime}}} Header File. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Arduino.h"}\par
{\f2 #include "TimeLib.h"}\par
{\f2 #include <WiFiUdp.h>}\par
{\f2 #include <DS1337RTC.h>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for CoolTime.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "CoolTime_8h__incl.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "CoolTime_8h__dep__incl.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADP" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime}}}
\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class manages the DS1337 RTC . }}}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGA" }{}}{\fldrslt {\cs37\ul\cf2 NTP_PACKET_SIZE}}}
\~ 48\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADP" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime}}} Header File. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid Mehdi Zemzem \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 1.0 \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Date:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 27/06/2017 \par
}}{
Definition in file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKI" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime.h}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v NTP_PACKET_SIZE\:CoolTime.h}
{\xe \v CoolTime.h\:NTP_PACKET_SIZE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define NTP_PACKET_SIZE\~ 48}}
\par
{\bkmkstart AAAAAAAAGA}
{\bkmkend AAAAAAAAGA}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKJ" }{}}{\fldrslt {\cs37\ul\cf2 22}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKI" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKK" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime::getNtpTime()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKL" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime::sendNTPpacket()}}}
.}\par
}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/CoolTime.h\par \pard\plain 
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     1 \par
   10 #ifndef CoolTime_H\par
   11 #define CoolTime_H\par
   12 \par
   13 \par
   14 #include "Arduino.h"\par
   15 \par
   16 #include "TimeLib.h"\par
   17 \par
   18 #include <WiFiUdp.h>\par
   19 \par
   20 #include <DS1337RTC.h>\par
   21 \par
   22 #define NTP_PACKET_SIZE  48 // NTP time is in the first 48 bytes of message\par
   23 \par
   31 class {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADP" }{}}{\fldrslt {\cs37\ul\cf2 CoolTime}}}
\par
   32 \{\par
   33 \par
   34 public:\par
   35     void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABK" }{}}{\fldrslt {\cs37\ul\cf2 begin}}}
();\par
   36     \par
   37     void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACC" }{}}{\fldrslt {\cs37\ul\cf2 update}}}
();\par
   38     \par
   39     bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABJ" }{}}{\fldrslt {\cs37\ul\cf2 config}}}
();\par
   40 \par
   41     void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABJ" }{}}{\fldrslt {\cs37\ul\cf2 config}}}
(IPAddress {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFZ" }{}}{\fldrslt {\cs37\ul\cf2 timeServer}}}
,unsigned int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFO" }{}}{\fldrslt {\cs37\ul\cf2 localPort}}}
); \par
   42     \par
   43     void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABL" }{}}{\fldrslt {\cs37\ul\cf2 printConf}}}
();\par
   44 \par
   45     void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFV" }{}}{\fldrslt {\cs37\ul\cf2 setDateTime}}}
(int year, int month, int day, int hour, int minutes, int seconds);\par
   46     \par
   47     tmElements_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACZ" }{}}{\fldrslt {\cs37\ul\cf2 getTimeDate}}}
();\par
   48 \par
   49     String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADB" }{}}{\fldrslt {\cs37\ul\cf2 getESDate}}}
();\par
   50     \par
   51     unsigned long {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFX" }{}}{\fldrslt {\cs37\ul\cf2 getLastSyncTime}}}
();\par
   52     \par
   53     bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFP" }{}}{\fldrslt {\cs37\ul\cf2 isTimeSync}}}
(unsigned long seconds=604800);\par
   54 \par
   55     time_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFR" }{}}{\fldrslt {\cs37\ul\cf2 getNtpTime}}}
();\par
   56 \par
   57     void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFY" }{}}{\fldrslt {\cs37\ul\cf2 sendNTPpacket}}}
(IPAddress &address);\par
   58     \par
   59     String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFW" }{}}{\fldrslt {\cs37\ul\cf2 formatDigits}}}
(int digits);\par
   60     \par
   61     bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFU" }{}}{\fldrslt {\cs37\ul\cf2 saveTimeSync}}}
();\par
   62 \par
   63 private:\par
   64     \par
   65     unsigned long {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFQ" }{}}{\fldrslt {\cs37\ul\cf2 timeSync}}}
=0;\par
   66     \par
   67     IPAddress {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFZ" }{}}{\fldrslt {\cs37\ul\cf2 timeServer}}}
; // time-a.timefreq.bldrdoc.gov\par
   68     \par
   69     WiFiUDP {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFN" }{}}{\fldrslt {\cs37\ul\cf2 Udp}}}
;\par
   70     \par
   71     unsigned int localPort=0;  // local port to listen for UDP packets\par
   72 \par
   73     byte {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGB" }{}}{\fldrslt {\cs37\ul\cf2 packetBuffer}}}
[{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGA" }{}}{\fldrslt {\cs37\ul\cf2 NTP_PACKET_SIZE}}}
]; //buffer to hold incoming & outgoing packets\par
   74     \par
   75     tmElements_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFS" }{}}{\fldrslt {\cs37\ul\cf2 tmSet}}}
;\par
   76     \par
   77     DS1337RTC {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFT" }{}}{\fldrslt {\cs37\ul\cf2 rtc}}}
;\par
   78 \par
   79 \};\par
   80 \par
   81 #endif\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/CoolWifi.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v /home/ashiroji/Arduino/libraries/CoolBoard/CoolWifi.cpp}
{\xe \v /home/ashiroji/Arduino/libraries/CoolBoard/CoolWifi.cpp}
{\bkmkstart AAAAAAAAKM}
{\bkmkend AAAAAAAAKM}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADQ" }{}}{\fldrslt {\cs37\ul\cf2 CoolWifi}}} Source File. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "FS.h"}\par
{\f2 #include "Arduino.h"}\par
{\f2 #include <ESP8266WiFi.h>}\par
{\f2 #include <ESP8266WiFiMulti.h>}\par
{\f2 #include <CoolWifi.h>}\par
{\f2 #include "ArduinoJson.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for CoolWifi.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "CoolWifi_8cpp__incl.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKN" }{}}{\fldrslt {\cs37\ul\cf2 DEBUG}}}
\~ 1\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADQ" }{}}{\fldrslt {\cs37\ul\cf2 CoolWifi}}} Source File. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid Mehdi Zemzem \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 1.0 \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Date:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 27/06/2017 \par
}}{
Definition in file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKO" }{}}{\fldrslt {\cs37\ul\cf2 CoolWifi.cpp}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v DEBUG\:CoolWifi.cpp}
{\xe \v CoolWifi.cpp\:DEBUG}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DEBUG\~ 1}}
\par
{\bkmkstart AAAAAAAAKN}
{\bkmkend AAAAAAAAKN}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKP" }{}}{\fldrslt {\cs37\ul\cf2 20}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKO" }{}}{\fldrslt {\cs37\ul\cf2 CoolWifi.cpp}}}
.}\par
}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/CoolWifi.cpp\par \pard\plain 
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     1 \par
   11 #include "FS.h"\par
   12 #include "Arduino.h"  \par
   13 #include <ESP8266WiFi.h>\par
   14 #include <ESP8266WiFiMulti.h>\par
   15 #include <{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADK" }{}}{\fldrslt {\cs37\ul\cf2 CoolWifi.h}}}
>\par
   16 #include "ArduinoJson.h"\par
   17 \par
   18 \par
   19 \par
   20 #define DEBUG 1\par
   21 \par
   22 #ifndef DEBUG\par
   23 \par
   24 #define DEBUG 0\par
   25 \par
   26 #endif\par
   27 \par
   28 \par
   29 \par
   30 \par
   37 void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAL" }{}}{\fldrslt {\cs37\ul\cf2 CoolWifi::begin}}}
()\par
   38 \{ \par
   39 \par
   40 #if DEBUG == 1 \par
   41 \par
   42     Serial.println( F("Entering CoolWifi.begin()") );\par
   43     Serial.println();\par
   44 \par
   45 #endif\par
   46     for(int i =0;i<this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGC" }{}}{\fldrslt {\cs37\ul\cf2 wifiCount}}}
;i++)\par
   47     \{\par
   48          this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGD" }{}}{\fldrslt {\cs37\ul\cf2 wifiMulti}}}
.addAP(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGE" }{}}{\fldrslt {\cs37\ul\cf2 ssid}}}
[i].c_str() , this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGF" }{}}{\fldrslt {\cs37\ul\cf2 pass}}}
[i].c_str() ); \par
   49     \}\par
   50 \par
   51     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGG" }{}}{\fldrslt {\cs37\ul\cf2 wifiManager}}}
.setRemoveDuplicateAPs(true);\par
   52     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGG" }{}}{\fldrslt {\cs37\ul\cf2 wifiManager}}}
.setTimeout(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGH" }{}}{\fldrslt {\cs37\ul\cf2 timeOut}}}
);    \par
   53     \par
   54 \}\par
   55 \par
   70 wl_status_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABN" }{}}{\fldrslt {\cs37\ul\cf2 CoolWifi::state}}}
()\par
   71 \{\par
   72 \par
   73 #if DEBUG == 1 \par
   74 \par
   75     Serial.println( F("Entering CoolWifi.state()") );\par
   76     Serial.println();   \par
   77     Serial.print( F("state : ") );\par
   78     Serial.println( WiFi.status() );\par
   79 \par
   80 #endif\par
   81     \par
   82     return( WiFi.status() ) ;\par
   83 \}\par
   84 \par
   93 wl_status_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABO" }{}}{\fldrslt {\cs37\ul\cf2 CoolWifi::connect}}}
()\par
   94 \{       \par
   95 \par
   96     int i=0;\par
   97 \par
   98 #if DEBUG == 1 \par
   99 \par
  100     Serial.println( F("Entering CoolWifi.connect()") );\par
  101     Serial.println( F("Wifi connecting...") );\par
  102     \par
  103     Serial.println("entry time to multi : ");\par
  104     Serial.println(millis() ) ;\par
  105 \par
  106 #endif\par
  107     //Wifi MULTI\par
  108 \par
  109     while( ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGD" }{}}{\fldrslt {\cs37\ul\cf2 wifiMulti}}}
.run() != WL_CONNECTED) && (i<1000)  ) \par
  110     \{\par
  111 \par
  112     #if DEBUG == 1\par
  113 \par
  114             Serial.print(".");\par
  115         i++;\par
  116         delay(10);\par
  117     \par
  118     #endif\par
  119 \par
  120         \}   \par
  121 \par
  122 #if DEBUG == 1 \par
  123 \par
  124     Serial.println();   \par
  125     Serial.println("exit point from multi : ");\par
  126     Serial.println(millis() );\par
  127 \par
  128 \par
  129 #endif\par
  130 \par
  131     //Wifi Manager\par
  132     if( (i>=1000) ||  (WiFi.status() != WL_CONNECTED) ) \par
  133     \{\par
  134     \par
  135     #if DEBUG == 1 \par
  136         \par
  137         Serial.println(F("No matching wifi Found ") );\par
  138         Serial.println( F("Starting Access Point ") );  \par
  139         Serial.println();\par
  140     \par
  141     #endif\par
  142         if(!{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGG" }{}}{\fldrslt {\cs37\ul\cf2 wifiManager}}}
.autoConnect("CoolBoardAP")) \par
  143         \{\par
  144         \par
  145         #if DEBUG == 1\par
  146 \par
  147             Serial.println( F("failed to connect and hit timeout") );\par
  148         \par
  149         #endif\par
  150             delay(300);\par
  151 \par
  152         \} \par
  153 \par
  154           //if you get here you have connected to the WiFi\par
  155         #if DEBUG == 1\par
  156 \par
  157             Serial.println( F("connected...yeey :)" ));\par
  158             Serial.println("connected to ");\par
  159             Serial.println( WiFi.SSID() );\par
  160             Serial.println( WiFi.psk() ) ;\par
  161             \par
  162         #endif\par
  163             this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGI" }{}}{\fldrslt {\cs37\ul\cf2 addWifi}}}
( WiFi.SSID() , WiFi.psk() );\par
  164         \par
  165     \}\par
  166     else\par
  167     \{\par
  168 \par
  169     #if DEBUG == 1\par
  170 \par
  171         Serial.println("connected to ");\par
  172         Serial.println( WiFi.SSID() );\par
  173         Serial.println( WiFi.psk() ) ;\par
  174                 \par
  175     #endif\par
  176     \par
  177     \}\par
  178     \par
  179     return( WiFi.status() ) ;\par
  180 \par
  181 \}\par
  182 \par
  193 bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAK" }{}}{\fldrslt {\cs37\ul\cf2 CoolWifi::config}}}
()\par
  194 \{\par
  195 \par
  196 #if DEBUG == 1 \par
  197 \par
  198     Serial.println( F("Entering CoolWifi.config()") );\par
  199     Serial.println();\par
  200 \par
  201 #endif\par
  202 \par
  203     //read config file\par
  204     //update data\par
  205     File configFile = SPIFFS.open("/wifiConfig.json", "r");\par
  206 \par
  207     if (!configFile) \par
  208     \{\par
  209     \par
  210     #if DEBUG == 1 \par
  211 \par
  212         Serial.println( F("failed to read /wifiConfig.json") );\par
  213         Serial.println();\par
  214 \par
  215     #endif\par
  216 \par
  217         return(false);\par
  218     \}\par
  219     else\par
  220     \{\par
  221         size_t size = configFile.size();\par
  222         // Allocate a buffer to store contents of the file.\par
  223         std::unique_ptr<char[]> buf(new char[size]);\par
  224 \par
  225         configFile.readBytes(buf.get(), size);\par
  226         DynamicJsonBuffer jsonBuffer;\par
  227         JsonObject& json = jsonBuffer.parseObject(buf.get());\par
  228         if (!json.success()) \par
  229         \{\par
  230         \par
  231         #if DEBUG == 1 \par
  232 \par
  233             Serial.println( F("failed to parse json ") );\par
  234             Serial.println();\par
  235         \par
  236         #endif\par
  237             \par
  238             return(false);\par
  239         \} \par
  240         else\par
  241         \{\par
  242         \par
  243         #if DEBUG == 1 \par
  244         \par
  245             Serial.println( F("configuration json is ") );\par
  246             json.printTo(Serial);\par
  247             Serial.println();\par
  248 \par
  249             Serial.print(F("jsonBuffer size: "));\par
  250             Serial.println(jsonBuffer.size());\par
  251             Serial.println();\par
  252 \par
  253 \par
  254         #endif\par
  255             //wifiCount\par
  256             if(json["wifiCount"].success() )\par
  257             \{           \par
  258                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGC" }{}}{\fldrslt {\cs37\ul\cf2 wifiCount}}}
=json["wifiCount"];\par
  259             \}\par
  260             else\par
  261             \{\par
  262                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGC" }{}}{\fldrslt {\cs37\ul\cf2 wifiCount}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGC" }{}}{\fldrslt {\cs37\ul\cf2 wifiCount}}}
;\par
  263             \}\par
  264             json["wifiCount"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGC" }{}}{\fldrslt {\cs37\ul\cf2 wifiCount}}}
;\par
  265 \par
  266             \par
  267             //AP timeOut\par
  268             if(json["timeOut"].success() )\par
  269             \{\par
  270                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGH" }{}}{\fldrslt {\cs37\ul\cf2 timeOut}}}
=json["timeOut"];\par
  271             \}\par
  272             else\par
  273             \{\par
  274                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGH" }{}}{\fldrslt {\cs37\ul\cf2 timeOut}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGH" }{}}{\fldrslt {\cs37\ul\cf2 timeOut}}}
;\par
  275 \par
  276             \}\par
  277             json["timeOut"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGH" }{}}{\fldrslt {\cs37\ul\cf2 timeOut}}}
;\par
  278             \par
  279             \par
  280             //Wifis SSID and PASS\par
  281             for(int i =0; i<this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGC" }{}}{\fldrslt {\cs37\ul\cf2 wifiCount}}}
 ;i++)\par
  282             \{\par
  283                 if ( json["Wifi"+String(i)].success() )\par
  284                 \{\par
  285                     \par
  286                     if( json["Wifi"+String(i)]["ssid"].success() )\par
  287                     \{\par
  288                         const char* tempSsid=json["Wifi"+String(i)]["ssid"]; \par
  289                         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGE" }{}}{\fldrslt {\cs37\ul\cf2 ssid}}}
[i]=tempSsid;                 \par
  290                     \}\par
  291                     else\par
  292                     \{\par
  293                         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGE" }{}}{\fldrslt {\cs37\ul\cf2 ssid}}}
[i]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGE" }{}}{\fldrslt {\cs37\ul\cf2 ssid}}}
[i];                    \par
  294                     \}\par
  295                     json["Wifi"+String(i)]["ssid"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGE" }{}}{\fldrslt {\cs37\ul\cf2 ssid}}}
[i].c_str();\par
  296                     \par
  297                     \par
  298                     if( json["Wifi"+String(i)]["pass"].success() )\par
  299                     \{\par
  300                         const char* tempPass =json["Wifi"+String(i)]["pass"];\par
  301                         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGF" }{}}{\fldrslt {\cs37\ul\cf2 pass}}}
[i]=tempPass ;                    \par
  302                     \}\par
  303                     else\par
  304                     \{\par
  305                         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGF" }{}}{\fldrslt {\cs37\ul\cf2 pass}}}
[i]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGF" }{}}{\fldrslt {\cs37\ul\cf2 pass}}}
[i];                    \par
  306                     \}\par
  307                     json["Wifi"+String(i)]["pass"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGF" }{}}{\fldrslt {\cs37\ul\cf2 pass}}}
[i].c_str();           \par
  308                 \par
  309                 \}\par
  310                 else\par
  311                 \{\par
  312                     \par
  313                     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGE" }{}}{\fldrslt {\cs37\ul\cf2 ssid}}}
[i]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGE" }{}}{\fldrslt {\cs37\ul\cf2 ssid}}}
[i];\par
  314                     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGF" }{}}{\fldrslt {\cs37\ul\cf2 pass}}}
[i]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGF" }{}}{\fldrslt {\cs37\ul\cf2 pass}}}
[i];                    \par
  315                     \par
  316                 \}\par
  317                 json["Wifi"+String(i)]["ssid"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGE" }{}}{\fldrslt {\cs37\ul\cf2 ssid}}}
[i].c_str();\par
  318                 json["Wifi"+String(i)]["pass"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGF" }{}}{\fldrslt {\cs37\ul\cf2 pass}}}
[i].c_str();           \par
  319                         \par
  320             \}\par
  321 \par
  322             configFile.close();\par
  323             configFile = SPIFFS.open("/wifiConfig.json", "w");\par
  324             if(!configFile)\par
  325             \{\par
  326             \par
  327             #if DEBUG == 1 \par
  328 \par
  329                 Serial.println( F("failed to write to /wifiConfig.json") );\par
  330             \par
  331             #endif\par
  332 \par
  333                 return(false);              \par
  334             \}\par
  335             \par
  336             json.printTo(configFile);\par
  337             configFile.close();\par
  338 \par
  339         #if DEBUG == 1 \par
  340 \par
  341             Serial.println( F("saved configuration is :") );\par
  342             json.printTo(Serial);\par
  343             Serial.println();\par
  344         \par
  345         #endif\par
  346 \par
  347             return(true); \par
  348         \}\par
  349     \}   \par
  350     \par
  351 \par
  352 \}\par
  353 \par
  360 bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAK" }{}}{\fldrslt {\cs37\ul\cf2 CoolWifi::config}}}
(String ssid[],String pass[],int wifiNumber, int APTimeOut)\par
  361 \{\par
  362 \par
  363 #if DEBUG == 1 \par
  364     \par
  365     Serial.println("Entering CoolWifi.config(), no SPIFFS variant ") ;\par
  366     \par
  367 #endif\par
  368     \par
  369     if(wifiNumber>50)\par
  370     \{\par
  371     \par
  372     #if DEBUG == 1 \par
  373         \par
  374         Serial.println("the limit of WiFis is 50 " );\par
  375         \par
  376     #endif\par
  377         return(false);  \par
  378     \}\par
  379 \par
  380     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGC" }{}}{\fldrslt {\cs37\ul\cf2 wifiCount}}}
=wifiNumber;\par
  381 \par
  382     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGH" }{}}{\fldrslt {\cs37\ul\cf2 timeOut}}}
=APTimeOut;\par
  383     \par
  384     for(int i=0;i<wifiNumber;i++)\par
  385     \{\par
  386         this->ssid[i]=ssid[i];\par
  387         \par
  388         this->pass[i]=pass[i];\par
  389     \}\par
  390         \par
  391     return(true);\par
  392 \par
  393 \}\par
  394 \par
  395 \par
  401 void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAM" }{}}{\fldrslt {\cs37\ul\cf2 CoolWifi::printConf}}}
()\par
  402 \{\par
  403 \par
  404 #if DEBUG == 1 \par
  405 \par
  406     Serial.println( F("Entering CoolWifi.printConf()") );\par
  407     Serial.println();   \par
  408 \par
  409 #endif\par
  410     \par
  411     Serial.println("Wifi configuration ");\par
  412 \par
  413     \par
  414     Serial.println("wifiCount : ");\par
  415     Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGC" }{}}{\fldrslt {\cs37\ul\cf2 wifiCount}}}
);\par
  416     \par
  417     for(int i=0;i<this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGC" }{}}{\fldrslt {\cs37\ul\cf2 wifiCount}}}
;i++)\par
  418     \{   \par
  419         Serial.print("SSID");\par
  420         Serial.print(i);\par
  421         Serial.println(" : ");\par
  422         Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGE" }{}}{\fldrslt {\cs37\ul\cf2 ssid}}}
[i]);\par
  423                 \par
  424         Serial.print("PASS");\par
  425         Serial.print(i);\par
  426         Serial.println(" : ");\par
  427         Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGF" }{}}{\fldrslt {\cs37\ul\cf2 pass}}}
[i]);\par
  428         \par
  429     \}\par
  430     \par
  431     Serial.println("timeOut : ");\par
  432     Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGH" }{}}{\fldrslt {\cs37\ul\cf2 timeOut}}}
);\par
  433 \par
  434     Serial.println();\par
  435 \par
  436 \par
  437 \}\par
  438 \par
  447 bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGI" }{}}{\fldrslt {\cs37\ul\cf2 CoolWifi::addWifi}}}
( String ssid , String pass )\par
  448 \{\par
  449 \par
  450 #if DEBUG == 1\par
  451     \par
  452     Serial.println("Entering CoolWifi.addWifi() ") ;\par
  453 \par
  454 #endif  \par
  455     \par
  456     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGC" }{}}{\fldrslt {\cs37\ul\cf2 wifiCount}}}
++;\par
  457     if( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGC" }{}}{\fldrslt {\cs37\ul\cf2 wifiCount}}}
 >=50)\par
  458     \{\par
  459     \par
  460     #if DEBUG == 1\par
  461 \par
  462         Serial.println("You have reached the limit of 50");\par
  463         return(false);  \par
  464     \par
  465     #endif\par
  466 \par
  467     \}\par
  468 \par
  469     this->ssid[this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGC" }{}}{\fldrslt {\cs37\ul\cf2 wifiCount}}}
-1]={\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGE" }{}}{\fldrslt {\cs37\ul\cf2 ssid}}}
;\par
  470     this->pass[this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGC" }{}}{\fldrslt {\cs37\ul\cf2 wifiCount}}}
-1]={\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGF" }{}}{\fldrslt {\cs37\ul\cf2 pass}}}
;\par
  471     \par
  472     //read config file\par
  473     //update data\par
  474     File configFile = SPIFFS.open("/wifiConfig.json", "r");\par
  475 \par
  476     if (!configFile) \par
  477     \{\par
  478     \par
  479     #if DEBUG == 1 \par
  480 \par
  481         Serial.println( F("failed to read /wifiConfig.json") );\par
  482         Serial.println();\par
  483 \par
  484     #endif\par
  485     \}\par
  486     else\par
  487     \{\par
  488         size_t size = configFile.size();\par
  489         // Allocate a buffer to store contents of the file.\par
  490         std::unique_ptr<char[]> buf(new char[size]);\par
  491 \par
  492         configFile.readBytes(buf.get(), size);\par
  493         DynamicJsonBuffer jsonBuffer;\par
  494         JsonObject& json = jsonBuffer.parseObject(buf.get());\par
  495         if (!json.success()) \par
  496         \{\par
  497         \par
  498         #if DEBUG == 1 \par
  499 \par
  500             Serial.println( F("failed to parse json ") );\par
  501             Serial.println();\par
  502         \par
  503         #endif\par
  504         \} \par
  505         else\par
  506         \{\par
  507         \par
  508         #if DEBUG == 1 \par
  509         \par
  510             Serial.println( F("configuration json is ") );\par
  511             json.printTo(Serial);\par
  512             Serial.println();\par
  513 \par
  514             Serial.print(F("jsonBuffer size: "));\par
  515             Serial.println(jsonBuffer.size());\par
  516             Serial.println();\par
  517 \par
  518 \par
  519         #endif\par
  520             //wifiCount\par
  521             if(json["wifiCount"].success() )\par
  522             \{           \par
  523                 json["wifiCount"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGC" }{}}{\fldrslt {\cs37\ul\cf2 wifiCount}}}
;\par
  524             \}\par
  525             else\par
  526             \{\par
  527                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGC" }{}}{\fldrslt {\cs37\ul\cf2 wifiCount}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGC" }{}}{\fldrslt {\cs37\ul\cf2 wifiCount}}}
;\par
  528             \}\par
  529             json["wifiCount"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGC" }{}}{\fldrslt {\cs37\ul\cf2 wifiCount}}}
;\par
  530 \par
  531             \par
  532             //AP timeOut\par
  533             if(json["timeOut"].success() )\par
  534             \{\par
  535                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGH" }{}}{\fldrslt {\cs37\ul\cf2 timeOut}}}
=json["timeOut"];\par
  536             \}\par
  537             else\par
  538             \{\par
  539                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGH" }{}}{\fldrslt {\cs37\ul\cf2 timeOut}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGH" }{}}{\fldrslt {\cs37\ul\cf2 timeOut}}}
;\par
  540 \par
  541             \}\par
  542             json["timeOut"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGH" }{}}{\fldrslt {\cs37\ul\cf2 timeOut}}}
;\par
  543             \par
  544             \par
  545             //new Wifi SSID and PASS\par
  546             JsonObject& newWifi = json.createNestedObject( "Wifi"+String( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGC" }{}}{\fldrslt {\cs37\ul\cf2 wifiCount}}}
-1 ) );\par
  547             \par
  548             newWifi["ssid"] =this->ssid[this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGC" }{}}{\fldrslt {\cs37\ul\cf2 wifiCount}}}
-1];\par
  549             newWifi["pass"] = this->pass[this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGC" }{}}{\fldrslt {\cs37\ul\cf2 wifiCount}}}
-1];\par
  550             \par
  551 \par
  552             configFile.close();\par
  553             configFile = SPIFFS.open("/wifiConfig.json", "w");\par
  554             if(!configFile)\par
  555             \{\par
  556             \par
  557             #if DEBUG == 1 \par
  558 \par
  559                 Serial.println( F("failed to write to /wifiConfig.json") );\par
  560             \par
  561             #endif\par
  562 \par
  563             \}\par
  564             \par
  565             json.printTo(configFile);\par
  566             configFile.close();\par
  567 \par
  568         #if DEBUG == 1 \par
  569 \par
  570             Serial.println( F("saved configuration is :") );\par
  571             json.printTo(Serial);\par
  572             Serial.println();\par
  573         \par
  574         #endif\par
  575 \par
  576             return(true); \par
  577         \}\par
  578     \}   \par
  579 \par
  580     \par
  581     return(true);\par
  582     \par
  583 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/CoolWifi.h File Reference\par \pard\plain 
{\tc\tcl2 \v /home/ashiroji/Arduino/libraries/CoolBoard/CoolWifi.h}
{\xe \v /home/ashiroji/Arduino/libraries/CoolBoard/CoolWifi.h}
{\bkmkstart AAAAAAAADK}
{\bkmkend AAAAAAAADK}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADQ" }{}}{\fldrslt {\cs37\ul\cf2 CoolWifi}}} Header File. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Arduino.h"}\par
{\f2 #include <ESP8266WiFi.h>}\par
{\f2 #include <ESP8266WiFiMulti.h>}\par
{\f2 #include <DNSServer.h>}\par
{\f2 #include <ESP8266WebServer.h>}\par
{\f2 #include "WiFiManagerReadFileButton.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for CoolWifi.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "CoolWifi_8h__incl.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "CoolWifi_8h__dep__incl.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADQ" }{}}{\fldrslt {\cs37\ul\cf2 CoolWifi}}}
\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class manages the WiFi connection . }}}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADQ" }{}}{\fldrslt {\cs37\ul\cf2 CoolWifi}}} Header File. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid Mehdi Zemzem \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 1.0 \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Date:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 27/06/2017 \par
}}{
Definition in file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKQ" }{}}{\fldrslt {\cs37\ul\cf2 CoolWifi.h}}}
.}\par
}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/CoolWifi.h\par \pard\plain 
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     1 \par
   10 #ifndef CoolWifi_H\par
   11 #define CoolWifi_H\par
   12 \par
   13 \par
   14 #include "Arduino.h"\par
   15 #include <ESP8266WiFi.h>\par
   16 #include <ESP8266WiFiMulti.h>\par
   17 #include <DNSServer.h>\par
   18 #include <ESP8266WebServer.h>\par
   19 #include "WiFiManagerReadFileButton.h"\par
   20 \par
   21 \par
   29 class {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADQ" }{}}{\fldrslt {\cs37\ul\cf2 CoolWifi}}}
\par
   30 \{\par
   31 \par
   32 public:\par
   33     void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAL" }{}}{\fldrslt {\cs37\ul\cf2 begin}}}
();\par
   34     \par
   35     bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAK" }{}}{\fldrslt {\cs37\ul\cf2 config}}}
();\par
   36     \par
   37     bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAK" }{}}{\fldrslt {\cs37\ul\cf2 config}}}
(String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGE" }{}}{\fldrslt {\cs37\ul\cf2 ssid}}}
[],String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGF" }{}}{\fldrslt {\cs37\ul\cf2 pass}}}
[],int wifiNumber,int APTimeOut);\par
   38 \par
   39     wl_status_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABO" }{}}{\fldrslt {\cs37\ul\cf2 connect}}}
();\par
   40 \par
   41     wl_status_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABN" }{}}{\fldrslt {\cs37\ul\cf2 state}}}
();\par
   42     \par
   43     void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAM" }{}}{\fldrslt {\cs37\ul\cf2 printConf}}}
();\par
   44     \par
   45     bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGI" }{}}{\fldrslt {\cs37\ul\cf2 addWifi}}}
( String ssid , String pass="" );\par
   46 \par
   47 private:\par
   48     \par
   49     WiFiManager {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGG" }{}}{\fldrslt {\cs37\ul\cf2 wifiManager}}}
;\par
   50     \par
   51     ESP8266WiFiMulti {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGD" }{}}{\fldrslt {\cs37\ul\cf2 wifiMulti}}}
;\par
   52     \par
   53     int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGC" }{}}{\fldrslt {\cs37\ul\cf2 wifiCount}}}
=0;\par
   54     \par
   55     String ssid[50]=\{"0"\};\par
   56     \par
   57     String pass[50]=\{"0"\};\par
   58     \par
   59     int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGH" }{}}{\fldrslt {\cs37\ul\cf2 timeOut}}}
=0;//in seconds\par
   60 \par
   61         \par
   62 \par
   63 \};\par
   64 \par
   65 #endif\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/ExternalSensor.h File Reference\par \pard\plain 
{\tc\tcl2 \v /home/ashiroji/Arduino/libraries/CoolBoard/ExternalSensor.h}
{\xe \v /home/ashiroji/Arduino/libraries/CoolBoard/ExternalSensor.h}
{\bkmkstart AAAAAAAAGZ}
{\bkmkend AAAAAAAAGZ}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGN" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor}}} Header File. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <NDIR_I2C.h>}\par
{\f2 #include <DallasTemperature.h>}\par
{\f2 #include "Arduino.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for ExternalSensor.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "ExternalSensor_8h__incl.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "ExternalSensor_8h__dep__incl.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGJ" }{}}{\fldrslt {\cs37\ul\cf2 BaseExternalSensor}}}
\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class is a generic external Sensor it is a way to access real external sensor methods through run Time polymorphism. }}}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGN" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor< T >}}}
\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
template<class SensorClass> class External Sensor: Derived class from {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGJ" }{}}{\fldrslt {\cs37\ul\cf2 BaseExternalSensor}}}. }}}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHC" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor< NDIR_I2C >}}}
\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
NDIR_I2C Specialization Class This is the template specialization for the NDIR_I2C CO2 sensor. }}}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHE" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor< DallasTemperature >}}}
\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
DallasTemperature Specialization Class This is the template specialization for the Dallas Temperature sensor. }}}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKR" }{}}{\fldrslt {\cs37\ul\cf2 DEBUG}}}
\~ 1\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGN" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor}}} Header File. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid Mehdi Zemzem \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 1.0 \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Date:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 27/06/2017 \par
}}{
Definition in file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKS" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor.h}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v DEBUG\:ExternalSensor.h}
{\xe \v ExternalSensor.h\:DEBUG}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DEBUG\~ 1}}
\par
{\bkmkstart AAAAAAAAKR}
{\bkmkend AAAAAAAAKR}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKT" }{}}{\fldrslt {\cs37\ul\cf2 17}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKS" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor.h}}}
.}\par
}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/ExternalSensor.h\par \pard\plain 
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     1 \par
    9 #ifndef BaseExternalSensor_H\par
   10 #define BaseExternalSensor_H\par
   11 \par
   12 #include<NDIR_I2C.h>\par
   13 #include<DallasTemperature.h>\par
   14 #include"Arduino.h" \par
   15 \par
   16  \par
   17 #define DEBUG 1\par
   18 \par
   19 #ifndef DEBUG\par
   20 \par
   21 #define DEBUG 0\par
   22 \par
   23 #endif \par
   24 \par
   25 \par
   26 \par
   27 \par
   28 \par
   35 class {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGJ" }{}}{\fldrslt {\cs37\ul\cf2 BaseExternalSensor}}}
\par
   36 \{\par
   37 \par
   38 public:\par
   43     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGK" }{}}{\fldrslt {\cs37\ul\cf2 BaseExternalSensor}}}
()\par
   44     \{\par
   45 \par
   46     #if DEBUG == 1 \par
   47 \par
   48         Serial.println( "BaseExternalSensor Constructor" );\par
   49         Serial.println();\par
   50     \par
   51     #endif\par
   52 \par
   53     \}\par
   54 \par
   63     virtual uint8_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGL" }{}}{\fldrslt {\cs37\ul\cf2 begin}}}
()\par
   64     \{\par
   65     \par
   66     #if DEBUG == 1 \par
   67     \par
   68         Serial.println( "BaseExternalSensor.begin()" );\par
   69         Serial.println();\par
   70     \par
   71     #endif\par
   72 \par
   73         return(-2);\par
   74     \}\par
   75     \par
   85     virtual float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGM" }{}}{\fldrslt {\cs37\ul\cf2 read}}}
()\par
   86     \{\par
   87     \par
   88     #if DEBUG == 1 \par
   89 \par
   90         Serial.println( "BaseExternalSensor.read()" );\par
   91         Serial.println();\par
   92     \par
   93     #endif      \par
   94         \par
   95         return(-2);\par
   96     \}\par
   97     \par
   98 \};\par
   99 \par
  100 \par
  101 \par
  121 template<class T >\par
  122 class {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGN" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor}}}
 : public {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGJ" }{}}{\fldrslt {\cs37\ul\cf2 BaseExternalSensor}}}
\par
  123 \{\par
  124 public :\par
  128     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGO" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor}}}
()\par
  129     \{\par
  130     \par
  131     #if DEBUG == 1 \par
  132 \par
  133         Serial.println( "ExternalSensor <Generic> Constructor" );\par
  134         Serial.println();\par
  135     \par
  136     #endif\par
  137 \par
  138         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGP" }{}}{\fldrslt {\cs37\ul\cf2 sensor}}}
();\par
  139     \}\par
  140 \par
  146     virtual uint8_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGQ" }{}}{\fldrslt {\cs37\ul\cf2 begin}}}
()\par
  147     \{\par
  148     \par
  149     #if DEBUG == 1 \par
  150 \par
  151         Serial.println( "ExternalSensor <Generic> begin()" );\par
  152         Serial.println();\par
  153     \par
  154     #endif\par
  155 \par
  156         return({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGP" }{}}{\fldrslt {\cs37\ul\cf2 sensor}}}
.begin() );    \par
  157     \}\par
  158     \par
  162     virtual float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGR" }{}}{\fldrslt {\cs37\ul\cf2 read}}}
()\par
  163     \{\par
  164     \par
  165     #if DEBUG == 1 \par
  166 \par
  167         Serial.println( "ExternalSensor <Generic> read() " );\par
  168         Serial.println();\par
  169         \par
  170     #endif\par
  171 \par
  172         return({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGP" }{}}{\fldrslt {\cs37\ul\cf2 sensor}}}
.read());\par
  173     \}\par
  174 \par
  175 \par
  176 \par
  177 private :\par
  178     \par
  179     T {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGP" }{}}{\fldrslt {\cs37\ul\cf2 sensor}}}
; //the sensor itself\par
  180 \par
  181 \};\par
  182 \par
  189 template<>\par
  190 class {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGN" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor}}}
<NDIR_I2C> :public {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGJ" }{}}{\fldrslt {\cs37\ul\cf2 BaseExternalSensor}}}
\par
  191 \{\par
  192 public:\par
  193 \par
  198     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGS" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor}}}
(uint8_t i2c_addr)\par
  199     \{\par
  200     \par
  201     #if DEBUG == 1 \par
  202 \par
  203         Serial.println( "ExternalSensor <NDIR_I2C> constructor");\par
  204         Serial.println();\par
  205     \par
  206     #endif\par
  207 \par
  208         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGP" }{}}{\fldrslt {\cs37\ul\cf2 sensor}}}
=NDIR_I2C(i2c_addr);\par
  209     \}\par
  210     \par
  218     virtual uint8_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGT" }{}}{\fldrslt {\cs37\ul\cf2 begin}}}
()\par
  219     \{\par
  220     \par
  221     #if DEBUG == 1 \par
  222 \par
  223         Serial.println( "ExternalSensor <NDIR_I2C> begin()" );\par
  224         Serial.println();\par
  225     \par
  226     #endif \par
  227 \par
  228         if ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGP" }{}}{\fldrslt {\cs37\ul\cf2 sensor}}}
.begin()) \par
  229         \{\par
  230         \par
  231         #if DEBUG == 1 \par
  232             \par
  233             Serial.println( "NDIR_I2C init : wait 10 seconds" );\par
  234             Serial.println();\par
  235         \par
  236         #endif\par
  237 \par
  238             delay(10000);\par
  239             return(true);\par
  240 \par
  241             \}\par
  242         else \par
  243         \{\par
  244         \par
  245         #if DEBUG == 1 \par
  246 \par
  247             Serial.println( "NDIR_I2C init : fail " );\par
  248             Serial.println();\par
  249         \par
  250         #endif\par
  251 \par
  252             return(false);\par
  253         \}   \par
  254     \}\par
  255     \par
  263     virtual float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGU" }{}}{\fldrslt {\cs37\ul\cf2 read}}}
()\par
  264     \{\par
  265         \par
  266     #if DEBUG == 1 \par
  267         \par
  268         Serial.println( "ExternalSensor <NDIR_I2C> read()" );\par
  269         Serial.println();\par
  270 \par
  271     #endif\par
  272 \par
  273         if ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGP" }{}}{\fldrslt {\cs37\ul\cf2 sensor}}}
.measure())\par
  274         \{\par
  275         \par
  276         #if DEBUG == 1 \par
  277 \par
  278             Serial.print( "NDIR_I2C ppm :" );\par
  279             Serial.println( (float) {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGP" }{}}{\fldrslt {\cs37\ul\cf2 sensor}}}
.ppm);\par
  280             \par
  281             Serial.println();           \par
  282 \par
  283         #endif\par
  284 \par
  285             return( (float) {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGP" }{}}{\fldrslt {\cs37\ul\cf2 sensor}}}
.ppm);\par
  286             \par
  287         \}\par
  288         \par
  289         else\par
  290         \{\par
  291         \par
  292         #if DEBUG == 1 \par
  293 \par
  294             Serial.println( "NDIR_I2C read fail " );\par
  295             Serial.println();\par
  296         \par
  297         #endif\par
  298 \par
  299             return(-42);\par
  300         \}\par
  301     \}\par
  302 \par
  303 private:\par
  304 \par
  305     NDIR_I2C {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGP" }{}}{\fldrslt {\cs37\ul\cf2 sensor}}}
=NULL;\par
  306 \};\par
  307 \par
  314 template<>\par
  315 class {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGN" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor}}}
<DallasTemperature> :public {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGJ" }{}}{\fldrslt {\cs37\ul\cf2 BaseExternalSensor}}}
\par
  316 \{\par
  317 public:\par
  322     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGV" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor}}}
()\par
  323     \{\par
  324         \par
  325     #if DEBUG == 1 \par
  326 \par
  327         Serial.println( "ExternalSensor <DallasTemperature> constructor" );\par
  328         Serial.println();\par
  329     \par
  330     #endif\par
  331 \par
  332         OneWire oneWire(0);\par
  333         \par
  334         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGP" }{}}{\fldrslt {\cs37\ul\cf2 sensor}}}
=DallasTemperature(&oneWire);\par
  335     \}\par
  336     \par
  343     virtual uint8_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGW" }{}}{\fldrslt {\cs37\ul\cf2 begin}}}
()\par
  344     \{\par
  345     \par
  346     #if DEBUG == 1 \par
  347 \par
  348         Serial.println( "ExternalSensor <DallasTemperature> begin()" );\par
  349         Serial.println();\par
  350     \par
  351     #endif\par
  352     \par
  353         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGP" }{}}{\fldrslt {\cs37\ul\cf2 sensor}}}
.begin(); \par
  354         delay(5);\par
  355         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGP" }{}}{\fldrslt {\cs37\ul\cf2 sensor}}}
.getAddress(this->dallasAddress, 1);  \par
  356         return(true);\par
  357     \}\par
  364     virtual float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGX" }{}}{\fldrslt {\cs37\ul\cf2 read}}}
()\par
  365     \{\par
  366     \par
  367     #if DEBUG == 1 \par
  368 \par
  369         Serial.println( "ExternalSensor <DallasTemperature> read()" );\par
  370         Serial.println();\par
  371 \par
  372         Serial.print( "temperature : ");\par
  373         Serial.print( (float) {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGP" }{}}{\fldrslt {\cs37\ul\cf2 sensor}}}
.getTempC(this->dallasAddress) );\par
  374         Serial.print( "\'B0C" );\par
  375         Serial.println();\par
  376     \par
  377     #endif\par
  378         \par
  379         return( (float) {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGP" }{}}{\fldrslt {\cs37\ul\cf2 sensor}}}
.getTempC(this->dallasAddress) );\par
  380     \}\par
  381 \par
  382 private:\par
  383 \par
  384     DallasTemperature {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGP" }{}}{\fldrslt {\cs37\ul\cf2 sensor}}}
=NULL;\par
  385     DeviceAddress {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGY" }{}}{\fldrslt {\cs37\ul\cf2 dallasAddress}}}
;\par
  386 \};\par
  387 \par
  388 \par
  389 #endif\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/ExternalSensors.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v /home/ashiroji/Arduino/libraries/CoolBoard/ExternalSensors.cpp}
{\xe \v /home/ashiroji/Arduino/libraries/CoolBoard/ExternalSensors.cpp}
{\bkmkstart AAAAAAAAKU}
{\bkmkend AAAAAAAAKU}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADU" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors}}} Source File. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "FS.h"}\par
{\f2 #include "Arduino.h"}\par
{\f2 #include "Wire.h"}\par
{\f2 #include "OneWire.h"}\par
{\f2 #include "ExternalSensors.h"}\par
{\f2 #include "ArduinoJson.h"}\par
{\f2 #include "ExternalSensor.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for ExternalSensors.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "ExternalSensors_8cpp__incl.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKV" }{}}{\fldrslt {\cs37\ul\cf2 DEBUG}}}
\~ 1\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADU" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors}}} Source File. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid Mehdi Zemzem \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 1.0 \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Date:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 27/06/2017 \par
}}{
Definition in file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKW" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors.cpp}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v DEBUG\:ExternalSensors.cpp}
{\xe \v ExternalSensors.cpp\:DEBUG}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DEBUG\~ 1}}
\par
{\bkmkstart AAAAAAAAKV}
{\bkmkend AAAAAAAAKV}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKX" }{}}{\fldrslt {\cs37\ul\cf2 27}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKW" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors.cpp}}}
.}\par
}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/ExternalSensors.cpp\par \pard\plain 
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     1 \par
   11 #include "FS.h"\par
   12 \par
   13 #include"Arduino.h"  \par
   14 \par
   15 #include"Wire.h"\par
   16 \par
   17 #include"OneWire.h"\par
   18 \par
   19 #include"{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADJ" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors.h}}}
"\par
   20 \par
   21 #include "ArduinoJson.h"\par
   22 \par
   23 #include"{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGZ" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor.h}}}
"\par
   24 \par
   25 \par
   26 \par
   27 #define DEBUG 1\par
   28 \par
   29 #ifndef DEBUG\par
   30 \par
   31 #define DEBUG 0\par
   32 \par
   33 #endif\par
   34 \par
   35 \par
   36 \par
   37 \par
   43 void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABE" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors::begin}}}
() \par
   44 \{\par
   45 \par
   46 #if DEBUG == 1\par
   47 \par
   48     Serial.println( F("Enter ExternalSensors.begin()") );\par
   49     Serial.println();\par
   50 \par
   51 #endif \par
   52 \par
   53     for(int i=0;i< this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHA" }{}}{\fldrslt {\cs37\ul\cf2 sensorsNumber}}}
 ; i++)\par
   54     \{\par
   55         if( ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].reference) == "NDIR_I2C" )\par
   56         \{   \par
   57             std::unique_ptr< ExternalSensor<NDIR_I2C> > sensorCO2(new {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHC" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor<NDIR_I2C>}}}
( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].address) );\par
   58 \par
   59 \par
   60             {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHD" }{}}{\fldrslt {\cs37\ul\cf2 exSensor}}}
= sensorCO2.release();\par
   61             {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHD" }{}}{\fldrslt {\cs37\ul\cf2 exSensor}}}
->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGL" }{}}{\fldrslt {\cs37\ul\cf2 begin}}}
();\par
   62 \par
   63         \}\par
   64         if( ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].reference) == "DallasTemperature")\par
   65         \{\par
   66             OneWire oneWire(0);\par
   67             std::unique_ptr< ExternalSensor<DallasTemperature> > dallasTemp(new {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHE" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor<DallasTemperature>}}}
 ());\par
   68              ;\par
   69             {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHD" }{}}{\fldrslt {\cs37\ul\cf2 exSensor}}}
=dallasTemp.release();\par
   70             {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHD" }{}}{\fldrslt {\cs37\ul\cf2 exSensor}}}
->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGL" }{}}{\fldrslt {\cs37\ul\cf2 begin}}}
();\par
   71             \par
   72         \}\par
   73         \par
   74         \par
   75     \}\par
   76 \}\par
   77 \par
   86 String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACX" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors::read}}}
()\par
   87 \{\par
   88 \par
   89 #if DEBUG == 1\par
   90 \par
   91     Serial.println( F("Entering ExternalSensors.read()") );\par
   92     Serial.println();\par
   93 \par
   94 #endif \par
   95 \par
   96     String data;\par
   97     DynamicJsonBuffer  jsonBuffer ;\par
   98     JsonObject& root = jsonBuffer.createObject();\par
   99 \par
  100     if(!root.success() )\par
  101     \{\par
  102  \par
  103     #if DEBUG == 1\par
  104 \par
  105         Serial.println( F("failed to create json ") );\par
  106     \par
  107     #endif \par
  108 \par
  109         return("00");\par
  110     \}\par
  111     else\par
  112     \{\par
  113         if({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHA" }{}}{\fldrslt {\cs37\ul\cf2 sensorsNumber}}}
>0)\par
  114         \{\par
  115             for(int i=0;i<{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHA" }{}}{\fldrslt {\cs37\ul\cf2 sensorsNumber}}}
;i++)\par
  116             \{\par
  117                 if({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].exSensor != NULL )\par
  118                 \{\par
  119                     root[{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHF" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
]=sensors[i].exSensor->read();      \par
  120                 \}\par
  121             \par
  122             #if DEBUG == 1\par
  123                 else\par
  124                 \{\par
  125                     Serial.println(F("null pointer "));\par
  126                 \}\par
  127             #endif  \par
  128             \}\par
  129         \}   \par
  130         \par
  131         root.printTo(data);\par
  132     \par
  133     #if DEBUG == 1\par
  134 \par
  135         Serial.println( F("sensors data :") );\par
  136         Serial.println(data);\par
  137         Serial.println();\par
  138 \par
  139         Serial.print(F("jsonBuffer size: "));\par
  140         Serial.println(jsonBuffer.size());\par
  141         Serial.println();\par
  142 \par
  143     \par
  144     #endif\par
  145     \par
  146         return(data);\par
  147     \}\par
  148 \par
  149 \}\par
  150 \par
  159 bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABD" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors::config}}}
()\par
  160 \{\par
  161     //read config file\par
  162     //update data\par
  163     File externalSensorsConfig = SPIFFS.open("/externalSensorsConfig.json", "r");\par
  164 \par
  165     if (!externalSensorsConfig) \par
  166     \{\par
  167     \par
  168     #if DEBUG == 1\par
  169         \par
  170         Serial.println( F("failed to read /externalSensorsConfig.json") );\par
  171         Serial.println();\par
  172     \par
  173     #endif\par
  174         \par
  175         return(false);\par
  176     \}\par
  177     else\par
  178     \{\par
  179         size_t size = externalSensorsConfig.size();\par
  180         // Allocate a buffer to store contents of the file.\par
  181         std::unique_ptr<char[]> buf(new char[size]);\par
  182 \par
  183         externalSensorsConfig.readBytes(buf.get(), size);\par
  184         DynamicJsonBuffer jsonBuffer;\par
  185         JsonObject& json = jsonBuffer.parseObject(buf.get());\par
  186 \par
  187         if (!json.success()) \par
  188         \{\par
  189         \par
  190         #if DEBUG == 1 \par
  191 \par
  192             Serial.println( F("failed to parse json") );\par
  193             Serial.println();\par
  194         \par
  195         #endif\par
  196 \par
  197             return(false);\par
  198         \} \par
  199         else\par
  200         \{\par
  201         \par
  202         #if DEBUG == 1 \par
  203     \par
  204             Serial.println( F("configuration json is : ") );\par
  205             json.printTo(Serial);\par
  206             Serial.println();\par
  207 \par
  208             Serial.print(F("jsonBuffer size: "));\par
  209             Serial.println(jsonBuffer.size());\par
  210             Serial.println();\par
  211 \par
  212         \par
  213         #endif          \par
  214             if(json["sensorsNumber"]!=NULL)\par
  215             \{\par
  216                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHA" }{}}{\fldrslt {\cs37\ul\cf2 sensorsNumber}}}
 = json["sensorsNumber"];\par
  217                 \par
  218                 \par
  219 \par
  220                 for(int i=0;i<{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHA" }{}}{\fldrslt {\cs37\ul\cf2 sensorsNumber}}}
;i++)\par
  221                 \{   String name="sensor"+String(i);\par
  222                     \par
  223                     if(json[name].success())\par
  224                     \{  \par
  225                         JsonObject& sensorJson=json[name];\par
  226                         \par
  227                         if(sensorJson["reference"].success() )\par
  228                         \{  \par
  229                             this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHG" }{}}{\fldrslt {\cs37\ul\cf2 reference}}}
 =sensorJson["reference"].as<String>();\par
  230                         \}\par
  231                         else\par
  232                         \{\par
  233                             this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHG" }{}}{\fldrslt {\cs37\ul\cf2 reference}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHG" }{}}{\fldrslt {\cs37\ul\cf2 reference}}}
;                          \par
  234                                     \par
  235                         \}\par
  236                         sensorJson["reference"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHG" }{}}{\fldrslt {\cs37\ul\cf2 reference}}}
;\par
  237 \par
  238                     \par
  239                         if(sensorJson["type"].success() )\par
  240                         \{                   \par
  241                             this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHF" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
=sensorJson["type"].as<String>();\par
  242                         \}\par
  243                         else\par
  244                         \{\par
  245                             this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHF" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHF" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
;\par
  246 \par
  247                         \}\par
  248                         sensorJson["type"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHF" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
;\par
  249                     \par
  250                         if(sensorJson["address"].success() )\par
  251                         \{                   \par
  252                             this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHH" }{}}{\fldrslt {\cs37\ul\cf2 address}}}
=sensorJson["address"];\par
  253                         \}\par
  254                         else\par
  255                         \{   \par
  256                             this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHH" }{}}{\fldrslt {\cs37\ul\cf2 address}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHH" }{}}{\fldrslt {\cs37\ul\cf2 address}}}
;\par
  257 \par
  258                         \}\par
  259                         sensorJson["address"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHH" }{}}{\fldrslt {\cs37\ul\cf2 address}}}
;\par
  260                     \par
  261     \par
  262                     \}\par
  263                     else\par
  264                     \{\par
  265                         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i];                  \par
  266                     \}\par
  267                                             \par
  268                     json[name]["reference"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHG" }{}}{\fldrslt {\cs37\ul\cf2 reference}}}
;\par
  269                     json[name]["type"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHF" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
;\par
  270                     json[name]["address"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHH" }{}}{\fldrslt {\cs37\ul\cf2 address}}}
;\par
  271                 \}\par
  272  \par
  273             \}\par
  274             else\par
  275             \{\par
  276                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHA" }{}}{\fldrslt {\cs37\ul\cf2 sensorsNumber}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHA" }{}}{\fldrslt {\cs37\ul\cf2 sensorsNumber}}}
;\par
  277             \}\par
  278             json["sensorsNumber"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHA" }{}}{\fldrslt {\cs37\ul\cf2 sensorsNumber}}}
;\par
  279 \par
  280             externalSensorsConfig.close();\par
  281             externalSensorsConfig = SPIFFS.open("/externalSensorsConfig.json", "w");\par
  282 \par
  283             if(!externalSensorsConfig)\par
  284             \{\par
  285             \par
  286             #if DEBUG == 1 \par
  287 \par
  288                 Serial.println( F("failed to write to /externalSensorsConfig.json") );\par
  289                 Serial.println();\par
  290             \par
  291             #endif\par
  292 \par
  293                 return(false);\par
  294             \}\par
  295             \par
  296             json.printTo(externalSensorsConfig);\par
  297             externalSensorsConfig.close();\par
  298             \par
  299         #if DEBUG == 1 \par
  300 \par
  301             Serial.println( F("saved configuration is : ") );\par
  302             json.printTo(Serial);\par
  303             Serial.println();\par
  304         \par
  305         #endif\par
  306 \par
  307             return(true); \par
  308         \}\par
  309     \}   \par
  310     \par
  311 \par
  312 \par
  313 \par
  314 \}\par
  315 \par
  321 void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABF" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors::printConf}}}
()\par
  322 \{\par
  323 \par
  324 #if DEBUG == 1\par
  325 \par
  326     Serial.println( F("Entering ExternalSensors.printConf()") );\par
  327     Serial.println();\par
  328 \par
  329 #endif \par
  330 \par
  331     Serial.println("External Sensors configuration ");\par
  332 \par
  333     Serial.print("sensorsNumber : ");\par
  334     Serial.println({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHA" }{}}{\fldrslt {\cs37\ul\cf2 sensorsNumber}}}
);\par
  335 \par
  336     for(int i=0;i<{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHA" }{}}{\fldrslt {\cs37\ul\cf2 sensorsNumber}}}
;i++)\par
  337     \{\par
  338         Serial.print("sensor ");\par
  339         Serial.print(i);\par
  340         Serial.print(" reference : ");\par
  341         Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].reference);\par
  342 \par
  343         Serial.print("sensor ");\par
  344         Serial.print(i);\par
  345         Serial.print(" type : ");\par
  346         Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].type);\par
  347                 \par
  348         Serial.print("sensor ");\par
  349         Serial.print(i);\par
  350         Serial.print(" address : ");\par
  351         Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[i].address);\par
  352     \par
  353     \}\par
  354 \}\par
  355 \par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/ExternalSensors.h File Reference\par \pard\plain 
{\tc\tcl2 \v /home/ashiroji/Arduino/libraries/CoolBoard/ExternalSensors.h}
{\xe \v /home/ashiroji/Arduino/libraries/CoolBoard/ExternalSensors.h}
{\bkmkstart AAAAAAAADJ}
{\bkmkend AAAAAAAADJ}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADU" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors}}} Header File. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Arduino.h"}\par
{\f2 #include "Wire.h"}\par
{\f2 #include "OneWire.h"}\par
{\f2 #include "ExternalSensor.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for ExternalSensors.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "ExternalSensors_8h__incl.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "ExternalSensors_8h__dep__incl.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADU" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors}}}
\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class handles the external sensors run time defintion , configuartion and actions. }}}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHI" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors::sensor}}}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADU" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors}}} Header File. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid Mehdi Zemzem \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 1.0 \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Date:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 27/06/2017 \par
}}{
Definition in file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKY" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors.h}}}
.}\par
}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/ExternalSensors.h\par \pard\plain 
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     1 \par
   10 #ifndef ExternalSensors_H\par
   11 #define ExternalSensors_H\par
   12 \par
   13 \par
   14 #include"Arduino.h"  \par
   15 #include"Wire.h"\par
   16 #include"OneWire.h"\par
   17 \par
   18 #include"{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGZ" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensor.h}}}
"\par
   19 \par
   26 class {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADU" }{}}{\fldrslt {\cs37\ul\cf2 ExternalSensors}}}
 \par
   27 \{\par
   28 public:\par
   29 \par
   30     void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABE" }{}}{\fldrslt {\cs37\ul\cf2 begin}}}
(); \par
   31 \par
   32     String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACX" }{}}{\fldrslt {\cs37\ul\cf2 read}}}
 ();\par
   33 \par
   34     bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABD" }{}}{\fldrslt {\cs37\ul\cf2 config}}}
();\par
   35 \par
   36     void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABF" }{}}{\fldrslt {\cs37\ul\cf2 printConf}}}
();\par
   37 \par
   38 private:\par
   39     struct {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHI" }{}}{\fldrslt {\cs37\ul\cf2 sensor}}}
\par
   40     \{       \par
   41         String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHG" }{}}{\fldrslt {\cs37\ul\cf2 reference}}}
="";\par
   42         String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHF" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
="";\par
   43         uint8_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHH" }{}}{\fldrslt {\cs37\ul\cf2 address}}}
=0;  \par
   44         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGJ" }{}}{\fldrslt {\cs37\ul\cf2 BaseExternalSensor}}}
 *{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHD" }{}}{\fldrslt {\cs37\ul\cf2 exSensor}}}
=NULL;\par
   45     \}{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 sensors}}}
[50];\par
   46 \par
   47 int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHA" }{}}{\fldrslt {\cs37\ul\cf2 sensorsNumber}}}
=0;\par
   48 \par
   49 \};\par
   50 \par
   51 #endif\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/irene3000.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v /home/ashiroji/Arduino/libraries/CoolBoard/irene3000.cpp}
{\xe \v /home/ashiroji/Arduino/libraries/CoolBoard/irene3000.cpp}
{\bkmkstart AAAAAAAAKZ}
{\bkmkend AAAAAAAAKZ}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "FS.h"}\par
{\f2 #include <Adafruit_ADS1015.h>}\par
{\f2 #include <Arduino.h>}\par
{\f2 #include "ArduinoJson.h"}\par
{\f2 #include <math.h>}\par
{\f2 #include <Irene3000.h>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for irene3000.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "irene3000_8cpp__incl.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALA" }{}}{\fldrslt {\cs37\ul\cf2 DEBUG}}}
\~ 1\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v DEBUG\:irene3000.cpp}
{\xe \v irene3000.cpp\:DEBUG}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DEBUG\~ 1}}
\par
{\bkmkstart AAAAAAAALA}
{\bkmkend AAAAAAAALA}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALB" }{}}{\fldrslt {\cs37\ul\cf2 21}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALC" }{}}{\fldrslt {\cs37\ul\cf2 irene3000.cpp}}}
.}\par
}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/irene3000.cpp\par \pard\plain 
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     1 \par
   11 #include "FS.h"\par
   12 #include <Adafruit_ADS1015.h>                                                                              \par
   13 #include <Arduino.h>\par
   14 #include "ArduinoJson.h"\par
   15 #include <math.h>    \par
   16 \par
   17 #include <{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADI" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000.h}}}
>\par
   18 \par
   19 \par
   20 \par
   21 #define DEBUG 1\par
   22 \par
   23 #ifndef DEBUG\par
   24 \par
   25 #define DEBUG 0\par
   26 \par
   27 #endif\par
   28 \par
   29 \par
   30 \par
   31 \par
   32 \par
   38 void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAZ" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::begin}}}
()\par
   39 \{\par
   40 \par
   41 #if DEBUG == 1 \par
   42 \par
   43     Serial.println( F("Entering Irene3000.begin()") );\par
   44     Serial.println();\par
   45 \par
   46 #endif\par
   47 \par
   48     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHJ" }{}}{\fldrslt {\cs37\ul\cf2 ads}}}
.begin();\par
   49 \}\par
   50 \par
   59 String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACY" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::read}}}
()\par
   60 \{\par
   61 \par
   62 #if DEBUG == 1 \par
   63     \par
   64     Serial.println( F("Entering Irene3000.read()") );\par
   65     Serial.println();\par
   66 \par
   67 #endif \par
   68 \par
   69     String data;\par
   70     DynamicJsonBuffer jsonBuffer;\par
   71     JsonObject& root = jsonBuffer.createObject();\par
   72     if( !( root.success()) )\par
   73     \{\par
   74     \par
   75     #if DEBUG == 1 \par
   76 \par
   77         Serial.println( F("failed to create json") );\par
   78     \par
   79     #endif \par
   80 \par
   81         return("");\par
   82     \}\par
   83 \par
   84         \par
   85     if({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHK" }{}}{\fldrslt {\cs37\ul\cf2 waterTemp}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHL" }{}}{\fldrslt {\cs37\ul\cf2 active}}}
)\par
   86     \{\par
   87         root["waterTemp"] = this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHM" }{}}{\fldrslt {\cs37\ul\cf2 readTemp}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHK" }{}}{\fldrslt {\cs37\ul\cf2 waterTemp}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHN" }{}}{\fldrslt {\cs37\ul\cf2 gain}}}
);\par
   88 \par
   89         if({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHO" }{}}{\fldrslt {\cs37\ul\cf2 phProbe}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHL" }{}}{\fldrslt {\cs37\ul\cf2 active}}}
)\par
   90         \{\par
   91             root["ph"] =this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHP" }{}}{\fldrslt {\cs37\ul\cf2 readPh}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHO" }{}}{\fldrslt {\cs37\ul\cf2 phProbe}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHN" }{}}{\fldrslt {\cs37\ul\cf2 gain}}}
) ;\par
   92         \}\par
   93 \par
   94     \}\par
   95 \par
   96     if({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHQ" }{}}{\fldrslt {\cs37\ul\cf2 adc2}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHL" }{}}{\fldrslt {\cs37\ul\cf2 active}}}
)\par
   97     \{\par
   98         root[{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHQ" }{}}{\fldrslt {\cs37\ul\cf2 adc2}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHR" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
] =this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHS" }{}}{\fldrslt {\cs37\ul\cf2 readADSChannel2}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHQ" }{}}{\fldrslt {\cs37\ul\cf2 adc2}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHN" }{}}{\fldrslt {\cs37\ul\cf2 gain}}}
);\par
   99     \}\par
  100     \par
  101     root.printTo(data);\par
  102     \par
  103 #if DEBUG == 1 \par
  104 \par
  105     Serial.println( F("Irene data : ") );\par
  106     Serial.println(data);\par
  107     Serial.println();\par
  108 \par
  109     Serial.print(F("jsonBuffer size: "));\par
  110     Serial.println(jsonBuffer.size());\par
  111     Serial.println();\par
  112 \par
  113 \par
  114 #endif\par
  115     \par
  116     return(data);\par
  117     \par
  118     \par
  119 \par
  120 \}\par
  121 \par
  129 bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAY" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::config}}}
()\par
  130 \{\par
  131 \par
  132 #if DEBUG == 1 \par
  133 \par
  134     Serial.println( F("Entering Irene3000.config()") );\par
  135     Serial.println();\par
  136 \par
  137 #endif\par
  138 \par
  139     File irene3000Config = SPIFFS.open("/irene3000Config.json", "r");\par
  140 \par
  141     if (!irene3000Config) \par
  142     \{\par
  143     \par
  144     #if DEBUG == 1 \par
  145 \par
  146         Serial.println( F("failed to read /irene3000Config.json") );\par
  147         Serial.println();\par
  148     \par
  149     #endif\par
  150 \par
  151         return(false);\par
  152     \}\par
  153     else\par
  154     \{\par
  155         size_t size = irene3000Config.size();\par
  156         // Allocate a buffer to store contents of the file.\par
  157         std::unique_ptr<char[]> buf(new char[size]);\par
  158             uint16_t tempGain;\par
  159         irene3000Config.readBytes(buf.get(), size);\par
  160         DynamicJsonBuffer jsonBuffer;\par
  161         JsonObject& json = jsonBuffer.parseObject(buf.get());\par
  162         if (!json.success()) \par
  163         \{\par
  164         \par
  165         #if DEBUG == 1 \par
  166 \par
  167             Serial.println( F("failed to parse json ") );\par
  168             Serial.println();\par
  169         \par
  170         #endif\par
  171             \par
  172             return(false);\par
  173         \} \par
  174         else\par
  175         \{\par
  176         \par
  177         #if DEBUG == 1 \par
  178     \par
  179             Serial.println( F("read configuration file ") );\par
  180             json.printTo(Serial);\par
  181             Serial.println();\par
  182 \par
  183             Serial.print(F("jsonBuffer size: "));\par
  184             Serial.println(jsonBuffer.size());\par
  185             Serial.println();\par
  186 \par
  187         \par
  188 \par
  189         #endif          \par
  190             if(json["waterTemp"]["active"].success() )\par
  191             \{           \par
  192                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHK" }{}}{\fldrslt {\cs37\ul\cf2 waterTemp}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHL" }{}}{\fldrslt {\cs37\ul\cf2 active}}}
 = json["waterTemp"]["active"]; \par
  193             \}\par
  194             else\par
  195             \{\par
  196                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHK" }{}}{\fldrslt {\cs37\ul\cf2 waterTemp}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHL" }{}}{\fldrslt {\cs37\ul\cf2 active}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHK" }{}}{\fldrslt {\cs37\ul\cf2 waterTemp}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHL" }{}}{\fldrslt {\cs37\ul\cf2 active}}}
;\par
  197             \}\par
  198             json["waterTemp"]["active"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHK" }{}}{\fldrslt {\cs37\ul\cf2 waterTemp}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHL" }{}}{\fldrslt {\cs37\ul\cf2 active}}}
;\par
  199 \par
  200             \par
  201             if(json["waterTemp"]["gain"].success() )\par
  202             \{           \par
  203                 tempGain = json["waterTemp"]["gain"]; \par
  204                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHK" }{}}{\fldrslt {\cs37\ul\cf2 waterTemp}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHN" }{}}{\fldrslt {\cs37\ul\cf2 gain}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHT" }{}}{\fldrslt {\cs37\ul\cf2 gainConvert}}}
(tempGain);\par
  205             \}\par
  206             else\par
  207             \{\par
  208                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHK" }{}}{\fldrslt {\cs37\ul\cf2 waterTemp}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHN" }{}}{\fldrslt {\cs37\ul\cf2 gain}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHK" }{}}{\fldrslt {\cs37\ul\cf2 waterTemp}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHN" }{}}{\fldrslt {\cs37\ul\cf2 gain}}}
;\par
  209             \}\par
  210             json["waterTemp"]["gain"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHK" }{}}{\fldrslt {\cs37\ul\cf2 waterTemp}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHN" }{}}{\fldrslt {\cs37\ul\cf2 gain}}}
;\par
  211 \par
  212             \par
  213             if(json["phProbe"]["active"].success())\par
  214             \{\par
  215                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHO" }{}}{\fldrslt {\cs37\ul\cf2 phProbe}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHL" }{}}{\fldrslt {\cs37\ul\cf2 active}}}
=json["phProbe"]["active"];\par
  216             \}\par
  217             else\par
  218             \{\par
  219                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHO" }{}}{\fldrslt {\cs37\ul\cf2 phProbe}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHL" }{}}{\fldrslt {\cs37\ul\cf2 active}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHO" }{}}{\fldrslt {\cs37\ul\cf2 phProbe}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHL" }{}}{\fldrslt {\cs37\ul\cf2 active}}}
;\par
  220             \}\par
  221             json["phProbe"]["active"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHO" }{}}{\fldrslt {\cs37\ul\cf2 phProbe}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHL" }{}}{\fldrslt {\cs37\ul\cf2 active}}}
;\par
  222     \par
  223             \par
  224             if(json["phProbe"]["gain"].success() )\par
  225             \{       \par
  226                 tempGain=json["phProbe"]["gain"];\par
  227                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHO" }{}}{\fldrslt {\cs37\ul\cf2 phProbe}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHN" }{}}{\fldrslt {\cs37\ul\cf2 gain}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHT" }{}}{\fldrslt {\cs37\ul\cf2 gainConvert}}}
(tempGain);         \par
  228             \}\par
  229             else\par
  230             \{\par
  231                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHO" }{}}{\fldrslt {\cs37\ul\cf2 phProbe}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHN" }{}}{\fldrslt {\cs37\ul\cf2 gain}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHO" }{}}{\fldrslt {\cs37\ul\cf2 phProbe}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHN" }{}}{\fldrslt {\cs37\ul\cf2 gain}}}
;\par
  232             \}\par
  233             json["phProbe"]["gain"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHO" }{}}{\fldrslt {\cs37\ul\cf2 phProbe}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHN" }{}}{\fldrslt {\cs37\ul\cf2 gain}}}
;\par
  234 \par
  235             \par
  236             if(json["adc2"]["active"].success() )\par
  237             \{\par
  238                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHQ" }{}}{\fldrslt {\cs37\ul\cf2 adc2}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHL" }{}}{\fldrslt {\cs37\ul\cf2 active}}}
=json["adc2"]["active"];\par
  239             \}\par
  240             else\par
  241             \{\par
  242                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHQ" }{}}{\fldrslt {\cs37\ul\cf2 adc2}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHL" }{}}{\fldrslt {\cs37\ul\cf2 active}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHQ" }{}}{\fldrslt {\cs37\ul\cf2 adc2}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHL" }{}}{\fldrslt {\cs37\ul\cf2 active}}}
;\par
  243             \}\par
  244             json["adc2"]["active"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHQ" }{}}{\fldrslt {\cs37\ul\cf2 adc2}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHL" }{}}{\fldrslt {\cs37\ul\cf2 active}}}
;\par
  245 \par
  246             \par
  247             if(json["adc2"]["gain"].success() )\par
  248             \{           \par
  249                 tempGain=json["adc2"]["gain"];\par
  250                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHQ" }{}}{\fldrslt {\cs37\ul\cf2 adc2}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHN" }{}}{\fldrslt {\cs37\ul\cf2 gain}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHT" }{}}{\fldrslt {\cs37\ul\cf2 gainConvert}}}
(tempGain);\par
  251             \}\par
  252             else\par
  253             \{\par
  254                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHQ" }{}}{\fldrslt {\cs37\ul\cf2 adc2}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHN" }{}}{\fldrslt {\cs37\ul\cf2 gain}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHQ" }{}}{\fldrslt {\cs37\ul\cf2 adc2}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHN" }{}}{\fldrslt {\cs37\ul\cf2 gain}}}
;\par
  255             \}\par
  256             json["adc2"]["gain"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHQ" }{}}{\fldrslt {\cs37\ul\cf2 adc2}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHN" }{}}{\fldrslt {\cs37\ul\cf2 gain}}}
;\par
  257 \par
  258             \par
  259             if(json["adc2"]["type"].success() )\par
  260             \{\par
  261                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHQ" }{}}{\fldrslt {\cs37\ul\cf2 adc2}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHR" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
=json["adc2"]["type"].as<String>(); \par
  262             \}\par
  263             else\par
  264             \{\par
  265                 this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHQ" }{}}{\fldrslt {\cs37\ul\cf2 adc2}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHR" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHQ" }{}}{\fldrslt {\cs37\ul\cf2 adc2}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHR" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
;\par
  266             \}\par
  267             json["adc2"]["type"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHQ" }{}}{\fldrslt {\cs37\ul\cf2 adc2}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHR" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
;\par
  268 \par
  269             irene3000Config.close();\par
  270             irene3000Config = SPIFFS.open("/irene3000Config.json", "w");\par
  271 \par
  272             if(!irene3000Config)\par
  273             \{\par
  274             \par
  275             #if DEBUG == 1\par
  276 \par
  277                 Serial.println( F("failed to write to /irene3000Config.json") );\par
  278                 Serial.println();\par
  279             \par
  280             #endif \par
  281 \par
  282                 return(false);\par
  283             \}\par
  284 \par
  285             json.printTo(irene3000Config);\par
  286             irene3000Config.close();\par
  287             \par
  288         #if DEBUG == 1 \par
  289 \par
  290             Serial.println( F("saved configuration file :")  );\par
  291             json.printTo(Serial);\par
  292             Serial.println();\par
  293         \par
  294         #endif\par
  295 \par
  296             return(true); \par
  297         \}\par
  298     \}   \par
  299 \par
  300 \}\par
  301 \par
  307 void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABA" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::printConf}}}
()\par
  308 \{\par
  309 \par
  310 #if DEBUG == 1 \par
  311 \par
  312     Serial.println( F("Entering Irene3000.printConf()") );\par
  313     Serial.println();\par
  314 \par
  315 #endif \par
  316 \par
  317     Serial.println("Irene Configuration ");\par
  318 \par
  319     Serial.print("waterTemp.active : ");\par
  320     Serial.println({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHK" }{}}{\fldrslt {\cs37\ul\cf2 waterTemp}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHL" }{}}{\fldrslt {\cs37\ul\cf2 active}}}
);\par
  321 \par
  322     Serial.print("waterTemp.gain : ");\par
  323     Serial.println({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHK" }{}}{\fldrslt {\cs37\ul\cf2 waterTemp}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHN" }{}}{\fldrslt {\cs37\ul\cf2 gain}}}
,HEX); \par
  324 \par
  325     Serial.print("phProbe.active : ");\par
  326     Serial.println({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHO" }{}}{\fldrslt {\cs37\ul\cf2 phProbe}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHL" }{}}{\fldrslt {\cs37\ul\cf2 active}}}
);\par
  327 \par
  328     Serial.print("phProbe.gain : ");\par
  329     Serial.println({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHO" }{}}{\fldrslt {\cs37\ul\cf2 phProbe}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHN" }{}}{\fldrslt {\cs37\ul\cf2 gain}}}
,HEX);\par
  330     \par
  331     Serial.print("adc2.active : ");\par
  332     Serial.println({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHQ" }{}}{\fldrslt {\cs37\ul\cf2 adc2}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHL" }{}}{\fldrslt {\cs37\ul\cf2 active}}}
);\par
  333 \par
  334     Serial.print("adc2.gain : ");\par
  335     Serial.println({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHQ" }{}}{\fldrslt {\cs37\ul\cf2 adc2}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHN" }{}}{\fldrslt {\cs37\ul\cf2 gain}}}
,HEX);\par
  336 \par
  337     Serial.print("adc2.type : ");\par
  338     Serial.println({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHQ" }{}}{\fldrslt {\cs37\ul\cf2 adc2}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHR" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
);\par
  339 \par
  340     Serial.println();\par
  341 \}\par
  342 \par
  350 int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHU" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::readButton}}}
(adsGain_t gain)\par
  351 \{\par
  352 \par
  353 #if DEBUG == 1 \par
  354 \par
  355     Serial.println( F("Entering Irene3000.readButton()" ) );\par
  356     Serial.println();\par
  357 \par
  358 #endif \par
  359 \par
  360     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHV" }{}}{\fldrslt {\cs37\ul\cf2 setGain}}}
(gain);\par
  361 \par
  362 #if DEBUG == 1\par
  363     \par
  364     Serial.println( F("button value : ") );\par
  365     Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHJ" }{}}{\fldrslt {\cs37\ul\cf2 ads}}}
.readADC_SingleEnded({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHW" }{}}{\fldrslt {\cs37\ul\cf2 button}}}
) );\par
  366 \par
  367 #endif \par
  368 \par
  369     return( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHJ" }{}}{\fldrslt {\cs37\ul\cf2 ads}}}
.readADC_SingleEnded({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHW" }{}}{\fldrslt {\cs37\ul\cf2 button}}}
) );\par
  370     \par
  371 \}\par
  372 \par
  378 void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHV" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::setGain}}}
(adsGain_t gain)\par
  379 \{\par
  380 \par
  381 #if DEBUG == 1  \par
  382 \par
  383     Serial.println( F("Entering Irene3000.setGain()") );\par
  384     Serial.println();\par
  385 \par
  386 #endif\par
  387 \par
  388     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHJ" }{}}{\fldrslt {\cs37\ul\cf2 ads}}}
.setGain(gain);\par
  389 \}\par
  390 \par
  400 int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHS" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::readADSChannel2}}}
(adsGain_t gain)\par
  401 \{   \par
  402 \par
  403 #if DEBUG == 1 \par
  404     \par
  405     Serial.println( F("Entering Irene3000.readADSChannel2()") );\par
  406     Serial.println();\par
  407 \par
  408 #endif\par
  409 \par
  410     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHV" }{}}{\fldrslt {\cs37\ul\cf2 setGain}}}
(gain);\par
  411 \par
  412 #if DEBUG == 1 \par
  413     \par
  414     Serial.println( F("adc2 value : ") );\par
  415     Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHJ" }{}}{\fldrslt {\cs37\ul\cf2 ads}}}
.readADC_SingleEnded({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHX" }{}}{\fldrslt {\cs37\ul\cf2 freeAdc}}}
) );\par
  416     Serial.println();\par
  417 \par
  418 #endif\par
  419 \par
  420     return( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHJ" }{}}{\fldrslt {\cs37\ul\cf2 ads}}}
.readADC_SingleEnded({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHX" }{}}{\fldrslt {\cs37\ul\cf2 freeAdc}}}
) ) ;\par
  421 \}\par
  422 \par
  431 float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHP" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::readPh}}}
(adsGain_t gain)\par
  432 \{\par
  433 \par
  434 #if DEBUG == 1 \par
  435 \par
  436     Serial.println( F("Entering Irene3000.readPh()") );\par
  437     Serial.println();\par
  438 \par
  439 #endif \par
  440 \par
  441     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHV" }{}}{\fldrslt {\cs37\ul\cf2 setGain}}}
(gain);\par
  442 \par
  443     double Voltage =  gain * ( {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHJ" }{}}{\fldrslt {\cs37\ul\cf2 ads}}}
.readADC_SingleEnded({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHY" }{}}{\fldrslt {\cs37\ul\cf2 ph}}}
) ) / {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHZ" }{}}{\fldrslt {\cs37\ul\cf2 ADC_MAXIMUM_VALUE}}}
;\par
  444 \par
  445     float miliVolts = Voltage * 1000;\par
  446     float temporary = (((({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIA" }{}}{\fldrslt {\cs37\ul\cf2 vRef}}}
 * (float){\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIB" }{}}{\fldrslt {\cs37\ul\cf2 params}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIC" }{}}{\fldrslt {\cs37\ul\cf2 pH7Cal}}}
) / 32767) * 1000) - miliVolts) / {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAID" }{}}{\fldrslt {\cs37\ul\cf2 opampGain}}}
;\par
  447 \par
  448 #if DEBUG == 1 \par
  449 \par
  450     Serial.println( F("ph is : ") );\par
  451     Serial.println( 7 - (temporary / {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIB" }{}}{\fldrslt {\cs37\ul\cf2 params}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIE" }{}}{\fldrslt {\cs37\ul\cf2 pHStep}}}
) ) ;\par
  452 \par
  453 #endif \par
  454 \par
  455     return( 7 - (temporary / {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIB" }{}}{\fldrslt {\cs37\ul\cf2 params}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIE" }{}}{\fldrslt {\cs37\ul\cf2 pHStep}}}
) );\par
  456 \par
  457 \}\par
  458 \par
  466 double {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHM" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::readTemp}}}
(adsGain_t gain)\par
  467 \{\par
  468 \par
  469 #if DEBUG == 1 \par
  470 \par
  471     Serial.println( F("Entering Irene3000.readTemp()") );\par
  472     Serial.println();\par
  473 \par
  474 #endif\par
  475 \par
  476     const double A = 3.9083E-3;\par
  477     const double B = -5.775E-7;\par
  478     double T;\par
  479 \par
  480     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHV" }{}}{\fldrslt {\cs37\ul\cf2 setGain}}}
(gain);\par
  481     double adc0 = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHJ" }{}}{\fldrslt {\cs37\ul\cf2 ads}}}
.readADC_SingleEnded({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEZ" }{}}{\fldrslt {\cs37\ul\cf2 temp}}}
);\par
  482 \par
  483 \par
  484     double R = ( ( adc0 * {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIF" }{}}{\fldrslt {\cs37\ul\cf2 V_GAIN_8}}}
 ) / 0.095 ) / 1000 ;\par
  485 \par
  486     T = 0.0 - A;\par
  487     T += sqrt((A * A) - 4.0 * B * (1.0 - R));\par
  488     T /= (2.0 * B);\par
  489 \par
  490     if (T > 0 && T < 200) \par
  491     \{\par
  492 \par
  493     #if DEBUG == 1 \par
  494 \par
  495         Serial.print( F(" temperature : ") );\par
  496         Serial.println(T);\par
  497         Serial.println();\par
  498     \par
  499     #endif \par
  500         if(isnan(T))\par
  501         \{\par
  502             return(-300);           \par
  503         \}\par
  504 \par
  505         return T;\par
  506     \}\par
  507     else \par
  508     \{\par
  509         T = 0.0 - A;\par
  510         T -= sqrt((A * A) - 4.0 * B * (1.0 - R));\par
  511         T /= (2.0 * B);\par
  512     \par
  513     #if DEBUG == 1 \par
  514     \par
  515         Serial.println( F("temperature : ") );\par
  516         Serial.println(T);\par
  517         Serial.println();\par
  518     \par
  519     #endif\par
  520         if(isnan(T))\par
  521         \{\par
  522             return(-400);           \par
  523         \}\par
  524 \par
  525         return T;\par
  526     \}\par
  527 \par
  528 \}\par
  529 \par
  530 \par
  536 void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIG" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::calibratepH7}}}
(adsGain_t gain)\par
  537 \{\par
  538 \par
  539 #if DEBUG == 1 \par
  540 \par
  541     Serial.println( F("Entering Irene3000.calibratepH7() ") );\par
  542     Serial.println();\par
  543 \par
  544 #endif \par
  545 \par
  546     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHV" }{}}{\fldrslt {\cs37\ul\cf2 setGain}}}
(gain);\par
  547         \par
  548     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIB" }{}}{\fldrslt {\cs37\ul\cf2 params}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIC" }{}}{\fldrslt {\cs37\ul\cf2 pH7Cal}}}
 = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHJ" }{}}{\fldrslt {\cs37\ul\cf2 ads}}}
.readADC_SingleEnded({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHY" }{}}{\fldrslt {\cs37\ul\cf2 ph}}}
);\par
  549  \par
  550     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIH" }{}}{\fldrslt {\cs37\ul\cf2 calcpHSlope}}}
();\par
  551 \par
  552 \par
  553 \}\par
  554 \par
  560 void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAII" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::calibratepH4}}}
(adsGain_t gain)\par
  561 \{\par
  562 \par
  563 #if DEBUG == 1 \par
  564 \par
  565     Serial.println( F("Entering Irene3000.calibraph4()") );\par
  566     Serial.println();\par
  567 \par
  568 #endif \par
  569     \par
  570     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHV" }{}}{\fldrslt {\cs37\ul\cf2 setGain}}}
(gain);\par
  571 \par
  572     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIB" }{}}{\fldrslt {\cs37\ul\cf2 params}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIJ" }{}}{\fldrslt {\cs37\ul\cf2 pH4Cal}}}
 =  {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHJ" }{}}{\fldrslt {\cs37\ul\cf2 ads}}}
.readADC_SingleEnded({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHY" }{}}{\fldrslt {\cs37\ul\cf2 ph}}}
);\par
  573 \par
  574     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIH" }{}}{\fldrslt {\cs37\ul\cf2 calcpHSlope}}}
();\par
  575 \par
  576 \par
  577 \par
  578 \}\par
  579 \par
  585 void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIH" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::calcpHSlope}}}
 ()\par
  586 \{\par
  587 \par
  588 #if DEBUG == 1 \par
  589 \par
  590     Serial.println( F("Entering Irene3000.calcpHSlope()") );\par
  591     Serial.println();\par
  592 \par
  593 #endif \par
  594 \par
  595     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIB" }{}}{\fldrslt {\cs37\ul\cf2 params}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIE" }{}}{\fldrslt {\cs37\ul\cf2 pHStep}}}
 = (((({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIA" }{}}{\fldrslt {\cs37\ul\cf2 vRef}}}
 * (float)({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIB" }{}}{\fldrslt {\cs37\ul\cf2 params}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIC" }{}}{\fldrslt {\cs37\ul\cf2 pH7Cal}}}
 - {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIB" }{}}{\fldrslt {\cs37\ul\cf2 params}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIJ" }{}}{\fldrslt {\cs37\ul\cf2 pH4Cal}}}
)) / 32767) * 1000) / {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAID" }{}}{\fldrslt {\cs37\ul\cf2 opampGain}}}
) / 3;\par
  596 \par
  597  \par
  598 \}\par
  599 \par
  606 void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIK" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::resetParams}}}
(void)\par
  607 \{\par
  608 \par
  609 #if DEBUG == 1 \par
  610 \par
  611     Serial.println( F("Entering Irene3000.resetParams()") );\par
  612     Serial.println();\par
  613 \par
  614 #endif \par
  615 \par
  616     //Restore to default set of parameters!\par
  617     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIB" }{}}{\fldrslt {\cs37\ul\cf2 params}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIL" }{}}{\fldrslt {\cs37\ul\cf2 WriteCheck}}}
 = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIM" }{}}{\fldrslt {\cs37\ul\cf2 Write_Check}}}
;\par
  618     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIB" }{}}{\fldrslt {\cs37\ul\cf2 params}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIC" }{}}{\fldrslt {\cs37\ul\cf2 pH7Cal}}}
 = 16384; //assume ideal probe and amp conditions 1/2 of 4096\par
  619     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIB" }{}}{\fldrslt {\cs37\ul\cf2 params}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIJ" }{}}{\fldrslt {\cs37\ul\cf2 pH4Cal}}}
 = 8192; //using ideal probe slope we end up this many 12bit units away on the 4 scale\par
  620     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIB" }{}}{\fldrslt {\cs37\ul\cf2 params}}}
.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIE" }{}}{\fldrslt {\cs37\ul\cf2 pHStep}}}
 = 59.16;//ideal probe slope\par
  621 \par
  622 \par
  623 \}\par
  624 \par
  632 adsGain_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHT" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::gainConvert}}}
(uint16_t tempGain)\par
  633 \{\par
  634 \par
  635 #if DEBUG == 1 \par
  636 \par
  637     Serial.println( F("Entering Irene3000.gainConvert()") );\par
  638     Serial.println();\par
  639 \par
  640 #endif \par
  641     \par
  642     switch(tempGain)\par
  643     \{\par
  644         case(2/3): return(GAIN_TWOTHIRDS);\par
  645         case(1): return (GAIN_ONE);\par
  646         case(2) : return(GAIN_TWO);\par
  647         case(4): return(GAIN_FOUR) ;   \par
  648         case(8):return(GAIN_EIGHT)  ;  \par
  649         case(16):return(GAIN_SIXTEEN);  \par
  650     \}\par
  651 \par
  652 \par
  653 \par
  654 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/Irene3000.h File Reference\par \pard\plain 
{\tc\tcl2 \v /home/ashiroji/Arduino/libraries/CoolBoard/Irene3000.h}
{\xe \v /home/ashiroji/Arduino/libraries/CoolBoard/Irene3000.h}
{\bkmkstart AAAAAAAADI}
{\bkmkend AAAAAAAADI}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADT" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000}}} Header File. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <Adafruit_ADS1015.h>}\par
{\f2 #include <Arduino.h>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for Irene3000.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "Irene3000_8h__incl.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "Irene3000_8h__dep__incl.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADT" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000}}}
\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class is provided to manage the {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADT" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000}}} Ph/Temperature Shield. }}}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIN" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::parameters_T}}}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIO" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::state}}}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHZ" }{}}{\fldrslt {\cs37\ul\cf2 ADC_MAXIMUM_VALUE}}}
\~ 32767\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALD" }{}}{\fldrslt {\cs37\ul\cf2 V_GAIN_2}}}
\~ 0.0625\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALE" }{}}{\fldrslt {\cs37\ul\cf2 V_GAIN_4}}}
\~ 0.03125\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIF" }{}}{\fldrslt {\cs37\ul\cf2 V_GAIN_8}}}
\~ 0.015625\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIM" }{}}{\fldrslt {\cs37\ul\cf2 Write_Check}}}
\~ 0x1234\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHW" }{}}{\fldrslt {\cs37\ul\cf2 button}}}
\~ 0\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEZ" }{}}{\fldrslt {\cs37\ul\cf2 temp}}}
\~ 1\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHX" }{}}{\fldrslt {\cs37\ul\cf2 freeAdc}}}
\~ 2\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHY" }{}}{\fldrslt {\cs37\ul\cf2 ph}}}
\~ 3\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADT" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000}}} Header File. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid Mehdi Zemzem \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 1.0 \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Date:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 27/06/2017 \par
}}{
Definition in file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALF" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000.h}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v ADC_MAXIMUM_VALUE\:Irene3000.h}
{\xe \v Irene3000.h\:ADC_MAXIMUM_VALUE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ADC_MAXIMUM_VALUE\~ 32767}}
\par
{\bkmkstart AAAAAAAAHZ}
{\bkmkend AAAAAAAAHZ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALG" }{}}{\fldrslt {\cs37\ul\cf2 18}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALF" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALH" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::readPh()}}}
.}\par
}
{\xe \v button\:Irene3000.h}
{\xe \v Irene3000.h\:button}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define button\~ 0}}
\par
{\bkmkstart AAAAAAAAHW}
{\bkmkend AAAAAAAAHW}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALI" }{}}{\fldrslt {\cs37\ul\cf2 24}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALF" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALJ" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::readButton()}}}
.}\par
}
{\xe \v freeAdc\:Irene3000.h}
{\xe \v Irene3000.h\:freeAdc}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define freeAdc\~ 2}}
\par
{\bkmkstart AAAAAAAAHX}
{\bkmkend AAAAAAAAHX}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALK" }{}}{\fldrslt {\cs37\ul\cf2 26}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALF" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALL" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::readADSChannel2()}}}
.}\par
}
{\xe \v ph\:Irene3000.h}
{\xe \v Irene3000.h\:ph}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ph\~ 3}}
\par
{\bkmkstart AAAAAAAAHY}
{\bkmkend AAAAAAAAHY}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALM" }{}}{\fldrslt {\cs37\ul\cf2 27}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALF" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALN" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::calibratepH4()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALO" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::calibratepH7()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALH" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::readPh()}}}
.}\par
}
{\xe \v temp\:Irene3000.h}
{\xe \v Irene3000.h\:temp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define temp\~ 1}}
\par
{\bkmkstart AAAAAAAAEZ}
{\bkmkend AAAAAAAAEZ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALP" }{}}{\fldrslt {\cs37\ul\cf2 25}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALF" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALQ" }{}}{\fldrslt {\cs37\ul\cf2 CoolMQTT::callback()}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALR" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::readTemp()}}}
, and {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALS" }{}}{\fldrslt {\cs37\ul\cf2 CoolFileSystem::updateConfigFiles()}}}
.}\par
}
{\xe \v V_GAIN_2\:Irene3000.h}
{\xe \v Irene3000.h\:V_GAIN_2}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define V_GAIN_2\~ 0.0625}}
\par
{\bkmkstart AAAAAAAALD}
{\bkmkend AAAAAAAALD}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALT" }{}}{\fldrslt {\cs37\ul\cf2 19}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALF" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000.h}}}
.}\par
}
{\xe \v V_GAIN_4\:Irene3000.h}
{\xe \v Irene3000.h\:V_GAIN_4}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define V_GAIN_4\~ 0.03125}}
\par
{\bkmkstart AAAAAAAALE}
{\bkmkend AAAAAAAALE}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALU" }{}}{\fldrslt {\cs37\ul\cf2 20}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALF" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000.h}}}
.}\par
}
{\xe \v V_GAIN_8\:Irene3000.h}
{\xe \v Irene3000.h\:V_GAIN_8}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define V_GAIN_8\~ 0.015625}}
\par
{\bkmkstart AAAAAAAAIF}
{\bkmkend AAAAAAAAIF}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALV" }{}}{\fldrslt {\cs37\ul\cf2 21}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALF" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALR" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::readTemp()}}}
.}\par
}
{\xe \v Write_Check\:Irene3000.h}
{\xe \v Irene3000.h\:Write_Check}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define Write_Check\~ 0x1234}}
\par
{\bkmkstart AAAAAAAAIM}
{\bkmkend AAAAAAAAIM}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALW" }{}}{\fldrslt {\cs37\ul\cf2 22}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALF" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000.h}}}
.}\par
{
Referenced by {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALX" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000::resetParams()}}}
.}\par
}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/Irene3000.h\par \pard\plain 
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     1 \par
   11 #ifndef IRENE3000_H\par
   12 #define IRENE3000_H\par
   13 \par
   14 #include <Adafruit_ADS1015.h>    \par
   15 #include<Arduino.h>\par
   16 \par
   17 \par
   18 #define ADC_MAXIMUM_VALUE     32767\par
   19 #define V_GAIN_2 0.0625\par
   20 #define V_GAIN_4 0.03125\par
   21 #define V_GAIN_8 0.015625\par
   22 #define Write_Check      0x1234\par
   23 \par
   24 #define button 0\par
   25 #define temp 1\par
   26 #define freeAdc 2\par
   27 #define ph 3\par
   28 \par
   35 class {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADT" }{}}{\fldrslt {\cs37\ul\cf2 Irene3000}}}
\par
   36 \{\par
   37 public:\par
   38 \par
   39     void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAZ" }{}}{\fldrslt {\cs37\ul\cf2 begin}}}
();\par
   40 \par
   41     bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAY" }{}}{\fldrslt {\cs37\ul\cf2 config}}}
();\par
   42 \par
   43     void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABA" }{}}{\fldrslt {\cs37\ul\cf2 printConf}}}
();\par
   44 \par
   45     String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACY" }{}}{\fldrslt {\cs37\ul\cf2 read}}}
();\par
   46 \par
   47     int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHU" }{}}{\fldrslt {\cs37\ul\cf2 readButton}}}
(adsGain_t gain);\par
   48 \par
   49     void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHV" }{}}{\fldrslt {\cs37\ul\cf2 setGain}}}
(adsGain_t gain);\par
   50 \par
   51     int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHS" }{}}{\fldrslt {\cs37\ul\cf2 readADSChannel2}}}
(adsGain_t gain);\par
   52 \par
   53     float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHP" }{}}{\fldrslt {\cs37\ul\cf2 readPh}}}
(adsGain_t gain);\par
   54 \par
   55     double {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHM" }{}}{\fldrslt {\cs37\ul\cf2 readTemp}}}
(adsGain_t gain);\par
   56 \par
   57     void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIK" }{}}{\fldrslt {\cs37\ul\cf2 resetParams}}}
(void);\par
   58 \par
   59     void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIG" }{}}{\fldrslt {\cs37\ul\cf2 calibratepH7}}}
(adsGain_t gain);\par
   60 \par
   61     void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAII" }{}}{\fldrslt {\cs37\ul\cf2 calibratepH4}}}
(adsGain_t gain);\par
   62 \par
   63     void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIH" }{}}{\fldrslt {\cs37\ul\cf2 calcpHSlope}}}
 ();\par
   64 \par
   65     adsGain_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHT" }{}}{\fldrslt {\cs37\ul\cf2 gainConvert}}}
(uint16_t tempGain);\par
   66 \par
   67 \par
   68 private:\par
   69 \par
   70     Adafruit_ADS1115 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHJ" }{}}{\fldrslt {\cs37\ul\cf2 ads}}}
;                                                                                           // ADC Object\par
   71 \par
   72 \par
   73     struct {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIN" }{}}{\fldrslt {\cs37\ul\cf2 parameters_T}}}
\par
   74     \{\par
   75         unsigned int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIL" }{}}{\fldrslt {\cs37\ul\cf2 WriteCheck}}}
=0;\par
   76         int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIC" }{}}{\fldrslt {\cs37\ul\cf2 pH7Cal}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIJ" }{}}{\fldrslt {\cs37\ul\cf2 pH4Cal}}}
=0;\par
   77         float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIE" }{}}{\fldrslt {\cs37\ul\cf2 pHStep}}}
=1;\par
   78     \}{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIB" }{}}{\fldrslt {\cs37\ul\cf2 params}}}
;\par
   79 \par
   80     struct {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIO" }{}}{\fldrslt {\cs37\ul\cf2 state}}}
\par
   81     \{\par
   82         byte {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHL" }{}}{\fldrslt {\cs37\ul\cf2 active}}}
=0;\par
   83         adsGain_t gain=GAIN_ONE;\par
   84         String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHR" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
="";\par
   85     \} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHK" }{}}{\fldrslt {\cs37\ul\cf2 waterTemp}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHO" }{}}{\fldrslt {\cs37\ul\cf2 phProbe}}}
,{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHQ" }{}}{\fldrslt {\cs37\ul\cf2 adc2}}}
;\par
   86 \par
   87     const float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIA" }{}}{\fldrslt {\cs37\ul\cf2 vRef}}}
 = 1.024;                                                            //Our vRef into the ADC wont be exa\par
   88 \par
   89     const float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAID" }{}}{\fldrslt {\cs37\ul\cf2 opampGain}}}
 = 5.25;                                 //what is our Op-Amps gain (stage 1)\par
   90 \par
   91 \};\par
   92 \par
   93 \par
   94 #endif\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/Jetpack.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v /home/ashiroji/Arduino/libraries/CoolBoard/Jetpack.cpp}
{\xe \v /home/ashiroji/Arduino/libraries/CoolBoard/Jetpack.cpp}
{\bkmkstart AAAAAAAALY}
{\bkmkend AAAAAAAALY}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADS" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack}}} Source File. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "FS.h"}\par
{\f2 #include "Arduino.h"}\par
{\f2 #include "ArduinoJson.h"}\par
{\f2 #include "Jetpack.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for Jetpack.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "Jetpack_8cpp__incl.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALZ" }{}}{\fldrslt {\cs37\ul\cf2 DEBUG}}}
\~ 1\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADS" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack}}} Source File. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid Mehdi Zemzem \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 1.0 \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Date:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 27/06/2017 \par
}}{
Definition in file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMA" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack.cpp}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v DEBUG\:Jetpack.cpp}
{\xe \v Jetpack.cpp\:DEBUG}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DEBUG\~ 1}}
\par
{\bkmkstart AAAAAAAALZ}
{\bkmkend AAAAAAAALZ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMB" }{}}{\fldrslt {\cs37\ul\cf2 17}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMA" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack.cpp}}}
.}\par
}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/Jetpack.cpp\par \pard\plain 
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     1 \par
   10 #include "FS.h"\par
   11 #include "Arduino.h"\par
   12 #include "ArduinoJson.h"\par
   13 \par
   14 #include "{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADH" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack.h}}}
"\par
   15 \par
   16 \par
   17 #define DEBUG 1 \par
   18 \par
   19 #ifndef DEBUG\par
   20 \par
   21 #define DEBUG 0\par
   22 \par
   23 #endif\par
   24 \par
   25 \par
   32 void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAU" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack::begin}}}
()\par
   33 \{\par
   34 \par
   35 #if DEBUG == 1 \par
   36  \par
   37     Serial.println( F("Entering Jetpack.begin() ") );\par
   38     Serial.println();\par
   39 \par
   40 #endif\par
   41 \par
   42     pinMode({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIP" }{}}{\fldrslt {\cs37\ul\cf2 EnI2C}}}
,OUTPUT);\par
   43     pinMode({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIQ" }{}}{\fldrslt {\cs37\ul\cf2 dataPin}}}
,OUTPUT);\par
   44     pinMode({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIR" }{}}{\fldrslt {\cs37\ul\cf2 clockPin}}}
,OUTPUT);\par
   45     \par
   46     \par
   47 \par
   48 \}\par
   49 \par
   50 \par
   59 void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIS" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack::write}}}
(byte action)\par
   60 \{\par
   61 \par
   62 #if DEBUG == 1\par
   63 \par
   64     Serial.println( F("Entering Jetpack.write()") );\par
   65     Serial.println();\par
   66 \par
   67     Serial.println( F("writing this action : ") );\par
   68     Serial.println(action,BIN);\par
   69     Serial.println();\par
   70 \par
   71 #endif \par
   72 \par
   73     this->action={\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIT" }{}}{\fldrslt {\cs37\ul\cf2 action}}}
;\par
   74 \par
   75     \par
   76     digitalWrite({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIP" }{}}{\fldrslt {\cs37\ul\cf2 EnI2C}}}
, LOW);\par
   77     \par
   78     shiftOut({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIQ" }{}}{\fldrslt {\cs37\ul\cf2 dataPin}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIR" }{}}{\fldrslt {\cs37\ul\cf2 clockPin}}}
, MSBFIRST, this->action);\par
   79 \par
   80     digitalWrite({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIP" }{}}{\fldrslt {\cs37\ul\cf2 EnI2C}}}
, HIGH);\par
   81 \par
   82 \}   \par
   83 \par
   89 void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIU" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack::writeBit}}}
(byte pin,bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIV" }{}}{\fldrslt {\cs37\ul\cf2 state}}}
) \par
   90 \{\par
   91 \par
   92 #if DEBUG == 1 \par
   93 \par
   94     Serial.println( F("Entering Jetpack.writeBit() ") );\par
   95 \par
   96     Serial.print( F("Writing ") );\par
   97     Serial.print(state);\par
   98 \par
   99     Serial.print( F("to pin N\'B0") );\par
  100     Serial.print(pin);\par
  101 \par
  102     Serial.println();\par
  103 \par
  104 #endif\par
  105 \par
  106     bitWrite(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIT" }{}}{\fldrslt {\cs37\ul\cf2 action}}}
, pin, state);\par
  107     digitalWrite({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIP" }{}}{\fldrslt {\cs37\ul\cf2 EnI2C}}}
, LOW);\par
  108     \par
  109     shiftOut({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIQ" }{}}{\fldrslt {\cs37\ul\cf2 dataPin}}}
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIR" }{}}{\fldrslt {\cs37\ul\cf2 clockPin}}}
, MSBFIRST, this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIT" }{}}{\fldrslt {\cs37\ul\cf2 action}}}
);\par
  110 \par
  111     digitalWrite({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIP" }{}}{\fldrslt {\cs37\ul\cf2 EnI2C}}}
, HIGH);\par
  112 \par
  113 \}\par
  114 \par
  134 void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACH" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack::doAction}}}
( const char* data )\par
  135 \{\par
  136 \par
  137 #if DEBUG == 1 \par
  138 \par
  139     Serial.println( F("Entering Jetpack.doAction()") );\par
  140     Serial.println();\par
  141 \par
  142     Serial.println( F("input data is :") );\par
  143     Serial.println(data);\par
  144     Serial.println();\par
  145 \par
  146 #endif \par
  147 \par
  148     DynamicJsonBuffer jsonBuffer;\par
  149     JsonObject& root = jsonBuffer.parseObject(data);\par
  150     \par
  151     if (!root.success()) \par
  152     \{\par
  153     \par
  154     #if DEBUG == 1 \par
  155 \par
  156         Serial.println( F("failed to parse json object ") );\par
  157         Serial.println();\par
  158     \par
  159     #endif \par
  160 \par
  161     \}\par
  162     else\par
  163     \{\par
  164     \par
  165     #if DEBUG == 1 \par
  166 \par
  167         Serial.println( F("created Json object :") );\par
  168         root.printTo(Serial);\par
  169         Serial.println();\par
  170 \par
  171         Serial.print(F("jsonBuffer size: "));\par
  172         Serial.println(jsonBuffer.size());\par
  173         Serial.println();\par
  174 \par
  175     \par
  176     #endif \par
  177 \par
  178         //invert the current action state for each actor\par
  179         //if the value is outside the limits\par
  180         for(int i=0;i<8;i++)\par
  181         \{\par
  182             //check if the actor is actif \par
  183             if(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].actif==1)\par
  184             \{   \par
  185                 //if the actor is not temporal\par
  186                 if( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].temporal==0 ) \par
  187                 \{   \par
  188                     //regular actor\par
  189                     if( (this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].inverted) == 0 )\par
  190                     \{\par
  191                         //measure >= high limit : stop actor\par
  192                         if( ( root[this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].type] ) >= ( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].high ) )    \par
  193                         \{   \par
  194                             bitWrite( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIT" }{}}{\fldrslt {\cs37\ul\cf2 action}}}
 , i , 0 ) ;  \par
  195                         \}\par
  196                         //measure <= low limit : start actor\par
  197                         else if( ( root[ this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].type ] ) <= ( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].low ) )\par
  198                         \{\par
  199                             bitWrite( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIT" }{}}{\fldrslt {\cs37\ul\cf2 action}}}
 , i , 1 ) ;                  \par
  200                         \}\par
  201                     \}\par
  202                     //inverted actor\par
  203                     else if( (this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].inverted) == 1 )\par
  204                     \{\par
  205                         //measure >= high limit : start actor\par
  206                         if( ( root[this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].type] ) >= ( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].high ) )    \par
  207                         \{   \par
  208                             bitWrite( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIT" }{}}{\fldrslt {\cs37\ul\cf2 action}}}
 , i , 1 ) ;  \par
  209                         \}\par
  210                         //measure <= low limit : stop actor\par
  211                         else if( ( root[ this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].type ] ) <= ( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].low ) )\par
  212                         \{\par
  213                             bitWrite( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIT" }{}}{\fldrslt {\cs37\ul\cf2 action}}}
 , i , 0 ) ;                  \par
  214                         \}\par
  215 \par
  216                     \par
  217                     \}\par
  218                 \}\par
  219 \par
  220                 //if the actor is temporal\par
  221                 else\par
  222                 \{\par
  223                     //actor of type hour\par
  224                     if( ( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].type ) == ( "hour" ) )    \par
  225                     \{\par
  226                     \par
  227                     #if DEBUG == 1\par
  228                         \par
  229                         Serial.println("hour actor ");\par
  230                         Serial.println(i);\par
  231                         Serial.println();\par
  232                     #endif\par
  233 \par
  234                         //time >= high : stop actor\par
  235                         if( ( root[this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].type] ) >= ( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].low ) )     \par
  236                         \{\par
  237                         \par
  238                         #if DEBUG == 1 \par
  239                             \par
  240                             Serial.print("deactive ");\par
  241                             Serial.println(i);\par
  242                         \par
  243                         #endif  \par
  244                             bitWrite( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIT" }{}}{\fldrslt {\cs37\ul\cf2 action}}}
 , i , 0 ) ;  \par
  245                         \}\par
  246                         //time >= low : start actor\par
  247                         else if( ( root[ this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].type ] ) >= ( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].high ) )\par
  248                         \{\par
  249                         \par
  250                         #if DEBUG == 1 \par
  251                         \par
  252                             Serial.print("active ");\par
  253                             Serial.println(i);\par
  254                         \par
  255                         #endif\par
  256                             bitWrite( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIT" }{}}{\fldrslt {\cs37\ul\cf2 action}}}
 , i , 1 ) ;                  \par
  257                         \}\par
  258                         \par
  259                     \}\par
  260                     //actor not of type hour\par
  261                     else if( ( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].type ) != ( "hour" ) )    \par
  262                     \{\par
  263                     \par
  264                     #if DEBUG == 1 \par
  265                         \par
  266                         Serial.println("not hour temporal actor");\par
  267                         Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].type);\par
  268                         Serial.println(i);\par
  269                         Serial.println("actifTime : ");\par
  270                         Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].actifTime);\par
  271                         Serial.println("millis : ");\par
  272                         Serial.println(millis() );\par
  273                         Serial.println(" high : ");\par
  274                         Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].high );\par
  275                         Serial.println();\par
  276                     \par
  277                     #endif\par
  278                         //if the actor was actif for highTime or more :\par
  279                         if( ( millis()- this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].actifTime  ) >= ( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].high  ) )\par
  280                         \{\par
  281                             //stop the actor\par
  282                             bitWrite( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIT" }{}}{\fldrslt {\cs37\ul\cf2 action}}}
 , i , 0) ;\par
  283 \par
  284                             //make the actor inactif:\par
  285                             this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIX" }{}}{\fldrslt {\cs37\ul\cf2 actif}}}
=0;\par
  286 \par
  287                             //start the low timer\par
  288                             this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIY" }{}}{\fldrslt {\cs37\ul\cf2 inactifTime}}}
=millis();               \par
  289                         \}\par
  290                     \}           \par
  291                             \par
  292                 \}\par
  293             \}\par
  294             //check if actor is inactif\par
  295             else if(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].actif==0)\par
  296             \{   //check if actor is temporal\par
  297                 if(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].temporal==1)\par
  298                 \{\par
  299                     //if the actor was inactif for lowTime or more :\par
  300                     if( ( millis() - this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].inactifTime ) >= ( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].low  ) )\par
  301                     \{\par
  302                         //start the actor\par
  303                         bitWrite( this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIT" }{}}{\fldrslt {\cs37\ul\cf2 action}}}
 , i , 1) ;\par
  304 \par
  305                         //make the actor actif:\par
  306                         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIX" }{}}{\fldrslt {\cs37\ul\cf2 actif}}}
=1;\par
  307 \par
  308                         //start the low timer\par
  309                         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIZ" }{}}{\fldrslt {\cs37\ul\cf2 actifTime}}}
=millis();\par
  310 \par
  311                     #if DEBUG == 1 \par
  312                         \par
  313                         Serial.println("inactif temporal actor");\par
  314                         Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].type);\par
  315                         Serial.print("temporal : ");\par
  316                         Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].temporal);\par
  317                         Serial.println(i);\par
  318                         Serial.println("inactifTime : ");\par
  319                         Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].inactifTime);\par
  320                         Serial.println("millis : ");\par
  321                         Serial.println(millis() );\par
  322                         Serial.println(" low : ");\par
  323                         Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].low );\par
  324                         Serial.println();\par
  325 \par
  326                         Serial.println();\par
  327                     \par
  328                     #endif\par
  329                 \par
  330                     \}           \par
  331             \par
  332                 \}\par
  333             \}\par
  334         \}\par
  335     \par
  336     #if DEBUG == 1 \par
  337 \par
  338         Serial.println( F("new action is : ") );\par
  339         Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIT" }{}}{\fldrslt {\cs37\ul\cf2 action}}}
,BIN);\par
  340         Serial.println();\par
  341     \par
  342     #endif \par
  343 \par
  344         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIS" }{}}{\fldrslt {\cs37\ul\cf2 write}}}
(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIT" }{}}{\fldrslt {\cs37\ul\cf2 action}}}
);\par
  345 \par
  346     \} \par
  347 \}\par
  348 \par
  356 bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAT" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack::config}}}
()\par
  357 \{\par
  358 \par
  359 #if DEBUG == 1 \par
  360 \par
  361     Serial.println( F("Entering Jetpack.config() ") );\par
  362     Serial.println();\par
  363 \par
  364 #endif\par
  365 \par
  366     File jetPackConfig = SPIFFS.open("/jetPackConfig.json", "r");\par
  367 \par
  368     if (!jetPackConfig) \par
  369     \{\par
  370 \par
  371     #if DEBUG == 1 \par
  372 \par
  373         Serial.println( F("failed to read /jetPackConfig.json ") );\par
  374         Serial.println();\par
  375 \par
  376     #endif\par
  377 \par
  378         return(false);\par
  379     \}\par
  380     else\par
  381     \{\par
  382         size_t size = jetPackConfig.size();\par
  383         // Allocate a buffer to store contents of the file.\par
  384         std::unique_ptr<char[]> buf(new char[size]);\par
  385 \par
  386         jetPackConfig.readBytes(buf.get(), size);\par
  387         DynamicJsonBuffer jsonBuffer;\par
  388         JsonObject& json = jsonBuffer.parseObject(buf.get());\par
  389         if (!json.success()) \par
  390         \{\par
  391         \par
  392         #if DEBUG == 1 \par
  393 \par
  394             Serial.println( F("failed to parse jetpack config json from file ") );\par
  395             Serial.println();\par
  396 \par
  397         #endif\par
  398 \par
  399             return(false);\par
  400         \} \par
  401         else\par
  402         \{ \par
  403         \par
  404         #if DEBUG == 1 \par
  405 \par
  406             Serial.println( F("read configuration file : ") );\par
  407             json.printTo(Serial);\par
  408             Serial.println();\par
  409 \par
  410             Serial.print(F("jsonBuffer size: "));\par
  411             Serial.println(jsonBuffer.size());\par
  412             Serial.println();\par
  413 \par
  414         \par
  415         #endif\par
  416   \par
  417             for(int i=0;i<8;i++)\par
  418             \{   \par
  419                 if(json[String("Act")+String(i)].success())\par
  420                 \{\par
  421                     if(json[String("Act")+String(i)]["actif"].success() )\par
  422                     \{\par
  423                         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIX" }{}}{\fldrslt {\cs37\ul\cf2 actif}}}
=json[String("Act")+String(i)]["actif"];\par
  424                     \}\par
  425                     else\par
  426                     \{\par
  427                         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIX" }{}}{\fldrslt {\cs37\ul\cf2 actif}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIX" }{}}{\fldrslt {\cs37\ul\cf2 actif}}}
;\par
  428                     \}\par
  429                     json[String("Act")+String(i)]["actif"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIX" }{}}{\fldrslt {\cs37\ul\cf2 actif}}}
;\par
  430 \par
  431 \par
  432                     if(json[String("Act")+String(i)]["low"].success() )\par
  433                     \{                   \par
  434                         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJA" }{}}{\fldrslt {\cs37\ul\cf2 low}}}
=json[String("Act")+String(i)]["low"];\par
  435                     \}\par
  436                     else\par
  437                     \{\par
  438                         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJA" }{}}{\fldrslt {\cs37\ul\cf2 low}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJA" }{}}{\fldrslt {\cs37\ul\cf2 low}}}
;                    \par
  439                     \}\par
  440                     json[String("Act")+String(i)]["low"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJA" }{}}{\fldrslt {\cs37\ul\cf2 low}}}
;\par
  441 \par
  442                 \par
  443                     if(json[String("Act")+String(i)]["high"].success() )\par
  444                     \{               \par
  445                         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJB" }{}}{\fldrslt {\cs37\ul\cf2 high}}}
=json[String("Act")+String(i)]["high"];\par
  446                     \}\par
  447                     else\par
  448                     \{\par
  449                         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJB" }{}}{\fldrslt {\cs37\ul\cf2 high}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJB" }{}}{\fldrslt {\cs37\ul\cf2 high}}}
;\par
  450                     \}\par
  451                     json[String("Act")+String(i)]["high"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJB" }{}}{\fldrslt {\cs37\ul\cf2 high}}}
;\par
  452 \par
  453                 \par
  454                     if(json[String("Act")+String(i)]["type"].success() )\par
  455                     \{               \par
  456                         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJC" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
=String( json[String("Act")+String(i)]["type"].as<const char*>() ); \par
  457                     \}\par
  458                     else\par
  459                     \{\par
  460                         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJC" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJC" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
;\par
  461                     \}\par
  462                     json[String("Act")+String(i)]["type"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJC" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
.c_str();\par
  463 \par
  464 \par
  465                     if(json[String("Act")+String(i)]["temporal"].success() )\par
  466                     \{\par
  467                         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJD" }{}}{\fldrslt {\cs37\ul\cf2 temporal}}}
=json[String("Act")+String(i)]["temporal"];                                                     \par
  468                     \}\par
  469                     else\par
  470                     \{\par
  471                         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJD" }{}}{\fldrslt {\cs37\ul\cf2 temporal}}}
=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJD" }{}}{\fldrslt {\cs37\ul\cf2 temporal}}}
; \par
  472                     \}   \par
  473                     json[String("Act")+String(i)]["temporal"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJD" }{}}{\fldrslt {\cs37\ul\cf2 temporal}}}
;\par
  474 \par
  475                     \par
  476                     if(json[String("Act")+String(i)]["inverted"].success() )\par
  477                     \{\par
  478                         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJE" }{}}{\fldrslt {\cs37\ul\cf2 inverted}}}
=json[String("Act")+String(i)]["inverted"];                                                     \par
  479                     \}\par
  480                     else\par
  481                     \{\par
  482                         this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJE" }{}}{\fldrslt {\cs37\ul\cf2 inverted}}}
=json[String("Act")+String(i)]["inverted"]; \par
  483                     \}   \par
  484                     json[String("Act")+String(i)]["inverted"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJE" }{}}{\fldrslt {\cs37\ul\cf2 inverted}}}
;\par
  485 \par
  486                     \par
  487                      \par
  488                 \}\par
  489                 else\par
  490                 \{\par
  491                     this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i];\par
  492                 \}\par
  493                 \par
  494                 json[String("Act")+String(i)]["actif"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIX" }{}}{\fldrslt {\cs37\ul\cf2 actif}}}
;\par
  495                 json[String("Act")+String(i)]["low"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJA" }{}}{\fldrslt {\cs37\ul\cf2 low}}}
;\par
  496                 json[String("Act")+String(i)]["high"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJB" }{}}{\fldrslt {\cs37\ul\cf2 high}}}
;\par
  497                 json[String("Act")+String(i)]["type"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJC" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
;\par
  498                 json[String("Act")+String(i)]["temporal"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJD" }{}}{\fldrslt {\cs37\ul\cf2 temporal}}}
;\par
  499                 json[String("Act")+String(i)]["inverted"]=this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJE" }{}}{\fldrslt {\cs37\ul\cf2 inverted}}}
; \par
  500             \}\par
  501             \par
  502 \par
  503             jetPackConfig.close();          \par
  504             jetPackConfig = SPIFFS.open("/jetPackConfig.json", "w");            \par
  505             if(!jetPackConfig)\par
  506             \{\par
  507             \par
  508             #if DEBUG == 1 \par
  509 \par
  510                 Serial.println( F("failed to write to /jetPackConfig.json ") );\par
  511                 Serial.println();\par
  512             \par
  513             #endif\par
  514                 \par
  515                 return(false);          \par
  516             \}  \par
  517 \par
  518             json.printTo(jetPackConfig);\par
  519             jetPackConfig.close();\par
  520 \par
  521         #if DEBUG == 1 \par
  522             \par
  523             Serial.println(F("saved configuration : "));\par
  524             json.printTo(Serial );\par
  525             Serial.println();       \par
  526         \par
  527         #endif\par
  528 \par
  529             return(true); \par
  530         \}\par
  531     \}   \par
  532     \par
  533 \par
  534 \}\par
  535 \par
  542 void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAV" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack::printConf}}}
()\par
  543 \{\par
  544 \par
  545 #if DEBUG == 1 \par
  546 \par
  547     Serial.println( F("Enter Jetpack.printConf() ") );\par
  548     Serial.println();\par
  549 \par
  550 #endif \par
  551     Serial.println( "Jetpack configuration " ) ;\par
  552  \par
  553         for(int i=0;i<8;i++)\par
  554     \{   \par
  555         Serial.print("actor N\'B0");\par
  556         Serial.print(i);\par
  557         Serial.print(" actif :");\par
  558         Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].actif);\par
  559 \par
  560         Serial.print("actor N\'B0");\par
  561         Serial.print(i);\par
  562         Serial.print(" low :");\par
  563         Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].low);\par
  564 \par
  565         Serial.print("actor N\'B0");\par
  566         Serial.print(i);\par
  567         Serial.print(" high :");\par
  568         Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].high);\par
  569 \par
  570         Serial.print("actor N\'B0");\par
  571         Serial.print(i);\par
  572         Serial.print(" type :");\par
  573         Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].type);\par
  574         \par
  575         Serial.print("actor N\'B0");\par
  576         Serial.print(i);\par
  577         Serial.print(" temporal :");\par
  578         Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].temporal);\par
  579 \par
  580         Serial.print("actor N\'B0");\par
  581         Serial.print(i);\par
  582         Serial.print(" inverted :");\par
  583         Serial.println(this->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[i].inverted);\par
  584 \par
  585  \par
  586 \par
  587     \}\par
  588 \par
  589     Serial.println();\par
  590 \}\par
  591  \par
  592 \par
  593 \par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/Jetpack.h File Reference\par \pard\plain 
{\tc\tcl2 \v /home/ashiroji/Arduino/libraries/CoolBoard/Jetpack.h}
{\xe \v /home/ashiroji/Arduino/libraries/CoolBoard/Jetpack.h}
{\bkmkstart AAAAAAAADH}
{\bkmkend AAAAAAAADH}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADS" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack}}} Header File. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Arduino.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for Jetpack.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "Jetpack_8h__incl.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "Jetpack_8h__dep__incl.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADS" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack}}}
\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class manages the {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADS" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack}}} shield. }}}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIV" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack::state}}}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADS" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack}}} Header File. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid Mehdi Zemzem \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 1.0 \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Date:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 27/06/2017 \par
}}{
Definition in file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMC" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack.h}}}
.}\par
}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
/home/ashiroji/Arduino/libraries/CoolBoard/Jetpack.h\par \pard\plain 
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     1 \par
   10 #ifndef Jetpack_H\par
   11 #define Jetpack_H\par
   12 \par
   13 #include "Arduino.h"\par
   14 \par
   15 \par
   21 class {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADS" }{}}{\fldrslt {\cs37\ul\cf2 Jetpack}}}
\par
   22 \{\par
   23 public:\par
   24 \par
   25     void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAU" }{}}{\fldrslt {\cs37\ul\cf2 begin}}}
();              //starts the Jetpack\par
   26 \par
   27     void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIS" }{}}{\fldrslt {\cs37\ul\cf2 write}}}
(byte {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIT" }{}}{\fldrslt {\cs37\ul\cf2 action}}}
);            //writes to the Jetpack\par
   28  \par
   29     void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIU" }{}}{\fldrslt {\cs37\ul\cf2 writeBit}}}
(byte pin,bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIV" }{}}{\fldrslt {\cs37\ul\cf2 state}}}
); //writes to a single pin of the Jetpack\par
   30  \par
   31     void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACH" }{}}{\fldrslt {\cs37\ul\cf2 doAction}}}
(const char* data );\par
   32        \par
   33     bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAT" }{}}{\fldrslt {\cs37\ul\cf2 config}}}
();\par
   34 \par
   35     void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAV" }{}}{\fldrslt {\cs37\ul\cf2 printConf}}}
();\par
   36 \par
   37 private:\par
   38 \par
   39     byte action= B00000000; \par
   40 \par
   41     struct state\{\par
   42     \par
   43     String {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJC" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
;\par
   44 \par
   45     bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIX" }{}}{\fldrslt {\cs37\ul\cf2 actif}}}
=0; \par
   46 \par
   47     int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJA" }{}}{\fldrslt {\cs37\ul\cf2 low}}}
=0;  //if temporal == 1 this is the time spent inactif in ms\par
   48             //if type is hour/minute/second this is the deactivation time\par
   49 \par
   50     int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJB" }{}}{\fldrslt {\cs37\ul\cf2 high}}}
=0; //if temporal==1 this is the time spent actif in ms\par
   51             //if type is hour/minute/second this is the activation time\par
   52 \par
   53     bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJD" }{}}{\fldrslt {\cs37\ul\cf2 temporal}}}
=0;\par
   54     \par
   55     unsigned long {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIZ" }{}}{\fldrslt {\cs37\ul\cf2 actifTime}}}
=0;\par
   56     \par
   57     unsigned long {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIY" }{}}{\fldrslt {\cs37\ul\cf2 inactifTime}}}
=0;\par
   58     \par
   59     bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJE" }{}}{\fldrslt {\cs37\ul\cf2 inverted}}}
=0;    \par
   60 \par
   61     \}{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 actors}}}
[8];\par
   62 \par
   63     const int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIR" }{}}{\fldrslt {\cs37\ul\cf2 clockPin}}}
 = 4; //clock pin for the shift register\par
   64     \par
   65     const int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIQ" }{}}{\fldrslt {\cs37\ul\cf2 dataPin}}}
 = 15; //data  pin for the shift register\par
   66 \par
   67     const int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIP" }{}}{\fldrslt {\cs37\ul\cf2 EnI2C}}}
=5;  // I2C/Shift pin\par
   68     \par
   69 \};\par
   70 \par
   71 #endif\par
}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Index\par 
\pard\plain 
{\tc \v Index}
{\field\fldedit {\*\fldinst INDEX \\c2 \\*MERGEFORMAT}{\fldrslt INDEX}}
}