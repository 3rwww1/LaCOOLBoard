class Jetpack
!!!139141.cpp!!!	begin() : void
 

	pinMode(EnI2C,OUTPUT);
	pinMode(dataPin,OUTPUT);
	pinMode(clockPin,OUTPUT);



!!!139269.cpp!!!	write(in action : byte) : void
	this->action=action;

	digitalWrite(EnI2C, LOW);
	
	shiftOut(dataPin, clockPin, MSBFIRST, this->action);

	digitalWrite(EnI2C, HIGH);
!!!139397.cpp!!!	writeBit(in pin : byte, in state : bool) : void

	bitWrite(this->action, pin, state);
	digitalWrite(EnI2C, LOW);
	
	shiftOut(dataPin, clockPin, MSBFIRST, this->action);

	digitalWrite(EnI2C, HIGH);

!!!154117.cpp!!!	setBit(in pin : byte) : void
//	
//	wB(pin,0);
!!!154245.cpp!!!	resetBit(in pin : byte) : void
	/*auto bound_member_fn=std::bind(&Jetpack::writeBit,std::placeholders::_2,std::placeholders::_2);
 	bound_member_fn(pin,0);*/
!!!139525.cpp!!!	doAction(in data : char, in JSON_SIZE : int) : void
	DynamicJsonBuffer jsonBuffer(JSON_SIZE);
	JsonObject& root = jsonBuffer.parseObject(data);
	
	//invert the current action state for each actor
	//if the value is outside the limits
	for(int i=0;i<8;i++)
	{
		//check if the actor is actif 
		if(this->actors[i].actif==1)
		{	
			//check if the actor is temporal or not
			if( this->actors[i].temporal==0 ) 
			{
				if( ( ( root[this->actors[i].type] ) > ( this->actors[i].high ) ) || ( ( root[ this->actors[i].type ] ) < ( this->actors[i].low ) ) )	
				{	
					bitWrite( this->action , i , !( bitRead(this->action, i ) ) );	
				}
			}

			else
			{	//if the actor was actif for highTime or more :
				if( ( millis()- this->actors[i].actifTime  ) >= ( this->actors[i].high  ) )
				{
					//stop the actor
					bitWrite( this->action , i , 0) ;

					//make the actor inactif:
					this->actors[i].actif=0;

					//start the low timer
					this->actors[i].inactifTime=millis();				
				}			
							
			}
		}
		//check if actor is inactif
		else
		{	//check if actor is temporal
			if(this->actors[i].temporal==1)
			{
				//if the actor was inactif for lowTime or more :
				if( ( millis() - this->actors[i].inactifTime ) >= ( this->actors[i].low  ) )
				{
					//start the actor
					bitWrite( this->action , i , 1) ;

					//make the actor actif:
					this->actors[i].actif=1;

					//start the low timer
					this->actors[i].actifTime=millis();				
				}			
			
			}
		}
	}

	this->write(this->action);
!!!139653.cpp!!!	config() : bool

	File jetPackConfig = SPIFFS.open("/jetPackConfig.json", "r");

	if (!jetPackConfig) 
	{
		return(false);
	}
	else
	{
		size_t size = jetPackConfig.size();
		// Allocate a buffer to store contents of the file.
		std::unique_ptr<char[]> buf(new char[size]);

		jetPackConfig.readBytes(buf.get(), size);
		DynamicJsonBuffer jsonBuffer;
		JsonObject& json = jsonBuffer.parseObject(buf.get());
		if (!json.success()) 
		{
			  return(false);
		} 
		else
		{  	  
			if(json["ActorsNumber"].success() )
			{
				this->actorsNumber = json["ActorsNumber"]; 
			
				for(int i=0;i<8;i++)
				{	if(json[String("Act")+String(i)].success())
					{
						if(json[String("Act")+String(i)]["actif"].success() )
						{
							this->actors[i].actif=json[String("Act")+String(i)]["actif"];
						}
						else
						{
							this->actors[i].actif=this->actors[i].actif;
						}
						json[String("Act")+String(i)]["actif"]=this->actors[i].actif;


						if(json[String("Act")+String(i)]["low"].success() )
						{					
							this->actors[i].low=json[String("Act")+String(i)]["low"];
						}
						else
						{
							this->actors[i].low=this->actors[i].low;					
						}
						json[String("Act")+String(i)]["low"]=this->actors[i].low;
	
					
						if(json[String("Act")+String(i)]["high"].success() )
						{				
							this->actors[i].high=json[String("Act")+String(i)]["high"];
						}
						else
						{
							this->actors[i].high=this->actors[i].high;
						}
						json[String("Act")+String(i)]["high"]=this->actors[i].high;

					
						if(json[String("Act")+String(i)]["type"].success() )
						{				
							this->actors[i].type=json[String("Act")+String(i)]["type"]; 
						}
						else
						{
							this->actors[i].type=this->actors[i].type;
						}
						json[String("Act")+String(i)]["type"]=this->actors[i].type;

						if(json[String("Act")+String(i)]["temporal"].success() )
						{
							this->actors[i].temporal=json[String("Act")+String(i)]["temporal"]; 													
						}
						else
						{
							this->actors[i].temporal=json[String("Act")+String(i)]["temporal"]; 
						}	
						json[String("Act")+String(i)]["temporal"]=this->actors[i].temporal; 
					}
					else
					{
						this->actors[i]=this->actors[i];
					}
					
					json[String("Act")+String(i)]["actif"]=this->actors[i].actif;
					json[String("Act")+String(i)]["low"]=this->actors[i].low;
					json[String("Act")+String(i)]["high"]=this->actors[i].high;
					json[String("Act")+String(i)]["type"]=this->actors[i].type;
					json[String("Act")+String(i)]["temporal"]=this->actors[i].temporal; 
				}
			}
			else
			{
				this->actorsNumber=this->actorsNumber;
			}
			json["actorsNumber"]=this->actorsNumber;

			jetPackConfig.close();			
			jetPackConfig = SPIFFS.open("/jetPackConfig.json", "w");			
			if(!jetPackConfig)
			{
				return(false);			
			}  

			json.printTo(jetPackConfig);
			jetPackConfig.close();		
			
			return(true); 
		}
	}	
	

!!!139781.cpp!!!	printConf() : void
	Serial.println("Jetpack Config ");
	Serial.println(this->actorsNumber); 
        for(int i=0;i<this->actorsNumber;i++)
	{
	Serial.println(this->actors[0].actif);
	Serial.println(this->actors[0].low);
	Serial.println(this->actors[0].high);
	Serial.println(this->actors[0].type); 
	}
