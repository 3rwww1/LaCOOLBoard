format 213
"CoolBoard" // CoolBoard
  revision 18
  modified_by 5 "ashiroji"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  cpp_h_dir "/home/ashiroji/Arduino/libraries/CoolBoard/"
  cpp_src_dir "/home/ashiroji/Arduino/libraries/CoolBoard/"
  classview 128005 "CoolBoard"
    
    classdiagramsettings member_max_width 0 end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 128005 "CoolBoard"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "	\\class	CoolBoard
	
	\\brief This class manages the CoolBoard and all of
	Its functions
"
      operation 128005 "begin"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolBoard::begin():
//	This method is provided to configure and
//	start the used CoolKit Parts.
//	It also starts the first connection try
//	If Serial is enabled,it prints the configuration
//	of the used parts.
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 128133 "config"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolBoard::config():
//	This method is provided to configure
//	the CoolBoard :	-log interval
//			-irene3000 activated/deactivated
//			-jetpack activated/deactivated
//			-external Sensors activated/deactivated
//			-mqtt server timeout
//
//	\\return true if configuration is done,
//	false otherwise
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 128261 "update"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "answer" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolBoard::update(mqtt answer):
//	This method is provided to handle the
//	configuration update of the different parts
//

${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 128389 "offLineMode"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolBoard::offlineMode():
//	This method is provided to manage the offLine
//	mode:	-read sensors
//		-do actions
//		-save data in the file system
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 128517 "onLineMode"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolBoard::onLineMode():
//	This method is provided to manage the online
//	mode:	-update clock
//		-read sensor
//		-do actions
//		-publish data
//		-read answer
//		-update config
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 128645 "connect"
	preserve_cpp_body_indent public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolBoard::connect():
//	This method is provided to manage the network
//	connection and the mqtt connection.
//
//	 \\return mqtt client state
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 152965 "getLogInterval"
	preserve_cpp_body_indent public explicit_return_type "uint16_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolBoard::getLogInterval():
//	This method is provided to get
//	the log interval
//
//	\\return interval value in ms
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 128901 "printConf"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//
//	CoolBoard::printConf():
//	This method is provided to print
//	the configuration to the Serial
//	Monitor.
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 146437 "sleep"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "interval" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolBoard::sleep(int interval):
//	This method is provided to allow the
//	board to enter deepSleep mode for
//	a period of time equal to interval in ms 
//

${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 153093 "readSensors"
	preserve_cpp_body_indent public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolBoard::readSensors():
//	This method is provided to read and
//	format all the sensors data in a
//	single json.
//	
//	\\return	json string of all the sensors read.
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 153221 "userData"
	preserve_cpp_body_indent public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolBoard::userData():
//	This method is provided to
//	return the user's data.
//	
//	\\return json string of the user's data
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      classrelation 128005 // fileSystem (<directional composition>)
	relation 128005 *-->
	  a role_name "fileSystem" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 128005 // fileSystem (<directional composition>)
	  b parent class_ref 128133 // CoolFileSystem
      end

      classrelation 128133 // coolBoardSensors (<directional composition>)
	relation 128133 *-->
	  a role_name "coolBoardSensors" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 128133 // coolBoardSensors (<directional composition>)
	  b parent class_ref 128261 // CoolBoardSensors
      end

      classrelation 128261 // coolBoardLed (<directional composition>)
	relation 128261 *-->
	  a role_name "coolBoardLed" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 128261 // coolBoardLed (<directional composition>)
	  b parent class_ref 128389 // CoolBoardLed
      end

      classrelation 128389 // rtc (<directional composition>)
	relation 128389 *-->
	  a role_name "rtc" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 128389 // rtc (<directional composition>)
	  b parent class_ref 128517 // CoolTime
      end

      classrelation 135941 // wifiManager (<directional composition>)
	relation 135941 *-->
	  a role_name "wifiManager" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 135941 // wifiManager (<directional composition>)
	  b parent class_ref 136837 // CoolWifi
      end

      classrelation 128517 // mqtt (<directional composition>)
	relation 128517 *-->
	  a role_name "mqtt" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 128517 // mqtt (<directional composition>)
	  b parent class_ref 128645 // CoolMQTT
      end

      classrelation 128645 // jetPack (<directional composition>)
	relation 128645 *-->
	  a role_name "jetPack" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 128645 // jetPack (<directional composition>)
	  b parent class_ref 128773 // Jetpack
      end

      classrelation 128773 // irene3000 (<directional composition>)
	relation 128773 *-->
	  a role_name "irene3000" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 128773 // irene3000 (<directional composition>)
	  b parent class_ref 128901 // Irene3000
      end

      classrelation 128901 // externalSensors (<directional composition>)
	relation 128901 *-->
	  a role_name "externalSensors" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 128901 // externalSensors (<directional composition>)
	  b parent class_ref 129029 // ExternalSensors
      end

      attribute 150533 "userActive"
	private explicit_type "bool"
	init_value "= 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 128133 "ireneActive"
	private explicit_type "bool"
	init_value "= 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 128261 "jetpackActive"
	private explicit_type "bool"
	init_value "= 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 128389 "externalSensorsActive"
	private explicit_type "bool"
	init_value "= 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 150661 "sleepActive"
	private explicit_type "bool"
	init_value "= 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 150789 "logInterval"
	private explicit_type "ulong"
	init_value "= 1000"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "ms"
      end

      attribute 128901 "serverTimeOut"
	private explicit_type "int"
	init_value "= 180"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 129029 "data"
	private explicit_type "String"
	init_value "= \"\""
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 129157 "answer"
	private explicit_type "String"
	init_value "= \"\""
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 128133 "CoolFileSystem"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "	\\class CoolFileSystem
 
	\\brief This class handles the file system 
 
"
      operation 132101 "begin"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolFileSystem::begin():
//	This method is provided to start the
//	SPIFFS object.
//
//	\\return true if SPIFFS was initialized correctly,
//	false otherwise
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 132229 "updateConfigFiles"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 1
	  param in name "answer" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolFileSystem::updateConfigFiles( mqtt answer ):
//	This method is provided to update the configuration files when
//	the appropriate mqtt answer is received:	-update : 1
//
//	\\return true if the files are updated correctly,
//	false otherwise
//

${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 132357 "saveSensorData"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 1
	  param in name "data" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolFileSystem::saveSensorData( data ):
//	This method is provided to save the data on the local
//	memory when there is no internet available
//
//	sets the saved data flag to TRUE when successful
//
//	\\return true if the data was saved,
//	false otherwise
//

${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 181125 "saveSensorDataCSV"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 1
	  param in name "data" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolFileSystem::saveSensorDataCSV( data ):
//	This method is provided to save the data on the local
//	memory in CSV format.
//
//	\\return true if the data was saved,
//	false otherwise
//

${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 153349 "isDataSaved"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolFileSystem::isDataSaved():
//	This method is provided to report
//	wether there is sensor data saved in the
//	File System.
//
//	\\return true if there is data saved, false
//	otherwise
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 153477 "getSensorSavedData"
	preserve_cpp_body_indent public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolFileSystem::getSensorData():
//	This method is provided to return the 
//	sensor data saved in the File System
//
//	\\return string json of the saved sensor 
//	data file
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      attribute 150917 "savedData"
	private explicit_type "bool"
	init_value "= 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 128261 "CoolBoardSensors"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
	\\class CoolBoardSensors 
	\\brief This class handles the On-Board Sensors. 


"
      operation 130309 "CoolBoardSensors"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolBoardSensors::CoolBoardSensors():
//	This Constructor is provided to start
//	the I2C interface and Init the different
//	used pins
//

${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
	comment "Constructor"
      end

      operation 130437 "begin"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolBoardSensors::begin():
//	This method is provided to start the
//	sensors that are on the sensor board
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 130565 "read"
	preserve_cpp_body_indent public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolBoardSensors::read():
//	This method is provided to return the
//	data read by the sensor board
//
//	\\return a json string containing the 
//	sensors data
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "data is in json"
      end

      operation 130949 "allActive"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolBoardSensors::allActive():
//	This method is provided to allow
//	activation of all the sensor board sensors
//	without passing by the configuration file/method
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 131077 "initReadI2C"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolBoardSensors::initReadI2C():
//	This method is provided to enable the I2C
//	Interface on the sensor board.
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 131205 "stopReadI2C"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolBoardSensors::stopReadI2C():
//	This method is provided to disable the I2C
//	Interface on the sensor board
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 131333 "end"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolBoardSensors::end():
//	This method is provided to end
//	the sensors on the sensor board
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "additional method"
      end

      operation 131461 "config"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolBoardSensors::config():
//	This method is provided to configure the
//	sensor board :	-activate   1
//			-deactivate 0
//
//	\\return true if configuration is successful,
//	false otherwise
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 131589 "printConf"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolBoardSensors::printConf():
//	This method is provided to print the 
//	configuration to the Serial Monitor
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 131717 "setEnvSensorSettings"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 8
	  param in name "commInterface" explicit_type "uint8_t"
	    defaultvalue "I2C_MODE"
	  param in name "I2CAddress" explicit_type "uint8_t"
	    defaultvalue "0x76"
	  param in name "runMode" explicit_type "uint8_t"
	    defaultvalue "3"
	  param in name "tStandby" explicit_type "uint8_t"
	    defaultvalue "0	"
	  param in name "filter" explicit_type "uint8_t"
	    defaultvalue "0"
	  param in name "tempOverSample" explicit_type "uint8_t"
	    defaultvalue "1"
	  param in name "pressOverSample" explicit_type "uint8_t"
	    defaultvalue "1"
	  param in name "humidOverSample" explicit_type "uint8_t"
	    defaultvalue "1"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolBoardSensors::setEnvSensorSetting():
//	This method is provided to set the enviornment
//	sensor settings , if argument is ommitted , default value will be assigned
//	
//

${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "environment sensor methods
set the enviornment sensor settings , if argument is ommitted , default value will be assigned"
      end

      operation 131845 "readVBat"
	preserve_cpp_body_indent public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolBoardSensors::readVBat():
//	This method is provided to read the
//	Battery Voltage.
//
//	\\return a float representing the battery
//	voltage
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "VBat"
      end

      operation 131973 "readMoisture"
	preserve_cpp_body_indent public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolBoardSensors::readMoisture():
//	This method is provided to red the
//	Soil Moisture
//
//	\\return a float represnting the
//	soil moisture
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Moisture"
      end

      attribute 129669 "lightSensor"
	public explicit_type "SI114X"
	init_value "=  SI114X()"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "sensor objects :
 light sensor	"
      end

      attribute 129797 "envSensor"
	public explicit_type "BME280"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " environment sensor"
      end

      class 129157 "lightActive"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 129925 "visible"
	  public explicit_type "byte"
	  init_value "= 0"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 130053 "ir"
	  public explicit_type "byte"
	  init_value "= 0"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 130181 "uv"
	  public explicit_type "byte"
	  init_value "= 0"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end
      end

      class 129285 "airActive"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 130309 "temperature"
	  public explicit_type "byte"
	  init_value "= 0"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 130437 "humidity"
	  public explicit_type "byte"
	  init_value "= 0"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 130565 "pressure"
	  public explicit_type "byte"
	  init_value "= 0"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end
      end

      attribute 130693 "EnMoisture"
	const_attribute private explicit_type "int"
	init_value "=  13"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Moisture Enable Pin"
      end

      attribute 130821 "AnMplex"
	const_attribute private explicit_type "int"
	init_value "=  12"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Analog Multiplexer  LOW=Vbat , HIGH=Moisture"
      end

      attribute 130949 "EnI2C"
	const_attribute private explicit_type "int"
	init_value "=  5"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " double usage for I2C and shift register latch , HIGH=I2C , LOW=shift register latch"
      end

      attribute 131077 "vbatActive"
	private explicit_type "byte"
	init_value "= 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " All I2C is over pins (2,14)
"
      end

      attribute 158213 "soilMoistureActive"
	private explicit_type "byte"
	init_value "= 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 128389 "CoolBoardLed"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "	\\class	CoolBoardLed
	\\brief	This class handles the led in the Sensor Board
"
      operation 129029 "begin"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolBoardLed::begin():
//	This method is provided to start the Led Object 
//	by setting the correct pin and creating a dynamic
//	neoPixelBus  
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 129157 "write"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 3
	  param in name "R" explicit_type "int"
	  param in name "G" explicit_type "int"
	  param in name "B" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolBoardLed::write(Red,Green,Blue):
//	This method is provided to set the 
//	Color of the Led
//

${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 129285 "end"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolBoardLed::end() :
//	this method is provided to delete the dynamically created neoPixelLed
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 129413 "config"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolBoardLed::config():
//	This method is provided to configure
//	the Led Object :	-ledActive=0 : deactivated
//				-ledActive=1 : activated
//	\\return true if the configuration done,
//	false otherwise			
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "delete the dynamic led;"
      end

      operation 129541 "printConf"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolBoardLed::printConf():
//	This method is provided to print the
//	Led Object Configuration to the Serial
//	Monitor
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 187653 "fade"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 4
	  param in name "R" explicit_type "int"
	  param in name "G" explicit_type "int"
	  param in name "B" explicit_type "int"
	  param in name "T" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolBoardLed::fade ( Red , Green , Blue, Time in seconds ):
//	fade animation:	Fade In over T(seconds)
//			Fade Out over T(seconds)
//

${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Neo Pixel Led methods :"
      end

      operation 129797 "blink"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 4
	  param in name "R" explicit_type "int"
	  param in name "G" explicit_type "int"
	  param in name "B" explicit_type "int"
	  param in name "T" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolBoardLed::blink( Red , Green , Blue , Time in seconds ):
//	Blink animation:	Led On for T seconds
//Led off
//

${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 129925 "fadeIn"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 4
	  param in name "R" explicit_type "int"
	  param in name "G" explicit_type "int"
	  param in name "B" explicit_type "int"
	  param in name "T" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolBoardLed::fadeIn(Red , Green , Blue , Time in seconds)
//	Fade In animation:	gradual increase over T(seconds)
//

${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 130053 "fadeOut"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 4
	  param in name "R" explicit_type "int"
	  param in name "G" explicit_type "int"
	  param in name "B" explicit_type "int"
	  param in name "T" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolBoardLed::fadeOut( Red , Green , Blue , Time in seconds)
//	Fade Out animation:	gradual decrease over T(seconds)
//

${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 130181 "strobe"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 4
	  param in name "R" explicit_type "int"
	  param in name "G" explicit_type "int"
	  param in name "B" explicit_type "int"
	  param in name "T" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolBoardLed::strobe(Red , Green , Blue , Time in seconds)
//	Strobe animation:	blinks over T(seconds)	
//

${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      attribute 129413 "neoPixelLed"
	private explicit_type "NeoGrbFeature, Neo800KbpsMethod"
	init_value "=  NULL"
	stereotype "NeoPixelBus"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> * ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "template instance must be dynamic"
      end

      attribute 129541 "ledActive"
	private explicit_type "byte"
	init_value "= 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 128517 "CoolTime"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "	\\class CoolTime
 
	\\brief This class manages the DS1337 RTC .
 
"
      operation 133765 "begin"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolTime::begin():
//	This method is provided to init
//	the udp connection 
//	
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 133893 "update"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolTime::update():
//	This method is provided to correct the
//	rtc Time when it drifts,once every week.
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 134021 "config"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolTime::config():
//	This method is provided to configure
//	the CoolTime object through a configuration
//	file.
//
//	\\return true if successful,false otherwise
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 134149 "config"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "timeServer" explicit_type "IPAddress"
	  param in name "localPort" explicit_type "uint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolTime::config(Time server IP , udp Port):
//	This method is provided to do manual configuration.
//	
//

${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 134277 "printConf"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolTime::printConf():
//	This method is provided to print
//	the CoolTime configuration to the
//	Serial Monitor
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 134405 "setDateTime"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 6
	  param in name "year" explicit_type "int"
	  param in name "month" explicit_type "int"
	  param in name "day" explicit_type "int"
	  param in name "hour" explicit_type "int"
	  param in name "minutes" explicit_type "int"
	  param in name "seconds" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolTime::setDateTime(year,month,dat,hour,minutes,seconds):
//	This method is provided to manually set the RTc Time
//
//

${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 134533 "getTimeDate"
	preserve_cpp_body_indent public explicit_return_type "tmElements_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolTime::getTimeDate():
//	This method is provided to get the RTC Time
//
//	\\returns a tmElements_t structre that has
//	the time in it
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 153989 "getESDate"
	preserve_cpp_body_indent public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolTime::getESD():
//	This method is provided to return an
//	Elastic Search compatible date Format
//	
//	\\return date String in Elastic Search
//	format
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 134661 "getLastSyncTime"
	preserve_cpp_body_indent public explicit_return_type "ulong"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolTime::getLastSyncTime():
//	This method is provided to get the last time
//	we syncronised the time
//
//	\\return unsigned long representation of
//	last syncronisation time in seconds 
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 134789 "isTimeSync"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 1
	  param in name "seconds" explicit_type "ulong"
	    defaultvalue "604800"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolTime::isTimeSync( time in seconds):
//	This method is provided to test if the
//	time is syncronised or not.
//	By default we test once per week.
//
//	\\return true if time is syncronised,false
//	otherwise
//

${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 134917 "getNtpTime"
	preserve_cpp_body_indent public explicit_return_type "time_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolTime::getNtopTime():
//	This method is provided to get the
//	Time through an NTP request to
//	a Time Server
//
//	\\return a time_t (unsigned long ) timestamp in seconds
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 135045 "sendNTPpacket"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param inout name "address" explicit_type "IPAddress"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolTime::sendNTPpacket( Time Server IP address):
//	This method is provided to send an NTP request to 
//	the time server at the given address
//

${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 160773 "formatDigits"
	preserve_cpp_body_indent public explicit_return_type "String"
	nparams 1
	  param in name "digits" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolTime::printDigits(digit)
//
//	utility method for digital clock display
//	adds leading 0
//	
//	\\return formatted string of the input digit
//

${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 167301 "saveTimeSync"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolTime::saveTimeSync()
//	This method is provided to save
//	the last sync time in the 
//	SPIFFS.
//
//	\\return true if successful,false
//	otherwise
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      attribute 132741 "timeSync"
	private explicit_type "ulong"
	init_value "= 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 132997 "timeServer"
	private explicit_type "IPAddress"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " time-a.timefreq.bldrdoc.gov"
      end

      attribute 133125 "Udp"
	private explicit_type "WiFiUDP"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 133253 "localPort"
	private explicit_type "uint"
	init_value "= 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " local port to listen for UDP packets"
      end

      attribute 133381 "packetBuffer"
	private explicit_type "byte"
	multiplicity "[NTP_PACKET_SIZE]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "buffer to hold incoming & outgoing packets"
      end

      attribute 151301 "tmSet"
	private explicit_type "tmElements_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 132613 "rtc"
	private explicit_type "DS1337RTC"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 128645 "CoolMQTT"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "	\\class CoolMQTT
	\\brief This class handles the mqtt client
"
      operation 132485 "begin"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolMQTT::begin():
//	This method is provided to set the mqtt
//	client's parameters:	-client
//				-server
//				-callback method
//				-buffer size
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 132613 "connect"
	preserve_cpp_body_indent public explicit_return_type "int"
	nparams 1
	  param in name "keepAlive" explicit_type "ulong"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolMQTT::connect( time to keep the connection alive ):
//	This method is provided to connect the client to the server,
//	publish to the out topic , subscribe to the in topic and set
//	the keepAlive time.
//	
//	\\return mqtt client state
//

${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 132741 "publish"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 1
	  param in name "data" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolMQTT::publish(data):
//	This method is provided to publish data
//	to the out topic
//
//	\\return true if publish successful,
//	false otherwise
//

${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 153605 "publish"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 2
	  param in name "data" explicit_type "char"
	  param in name "logInterval" explicit_type "ulong"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolMQTT::publish(data):
//	This method is provided to publish data
//	to the out topic every logInterval ms
//
//	\\return true if publish successful,
//	false otherwise
//

${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 132869 "read"
	preserve_cpp_body_indent public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolMQTT::read():
//	This method is provided to return the last
//	read message.
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 153733 "config"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 5
	  param in name "mqttServer" explicit_type "char"
	  param in name "inTopic" explicit_type "char"
	  param in name "outTopic" explicit_type "char"
	  param in name "user" explicit_type "char"
	  param in name "bufferSize" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}[]${v0}, const ${t1} ${p1}[]${v1}, const ${t2} ${p2}[]${v2}, const ${t3} ${p3}[]${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolMQTT::config(server,in topic, out topic , user Id, buffer size):
//	This method is provided to manually configure the mqtt client	
//
//

${inline}${type} ${class}::${name}${(}const ${t0} ${p0}[], const ${t1} ${p1}[], const ${t2} ${p2}[], const ${t3} ${p3}[], ${t4} ${p4}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 133125 "config"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolMQTT::config():
//	This method is provided to configure
//	the mqttClient :	-server
//				-inTopic
//				-outTopic
//				-client Id
//				-buffer size	
//
//	\\return true if successful,false otherwise
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 133253 "callback"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 3
	  param inout name "topic" explicit_type "char"
	  param inout name "payload" explicit_type "byte"
	  param in name "length" explicit_type "uint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolMQTT::callback(in topic, incoming message , message length):
//	This method is provided to handle incoming messages from the
//	subscribed inTopic.
//	
//	Arguments are automatically assigned in client.setCallback()
//

${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 133381 "printConf"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolMQTT::printConf():
//	This method is provided to print the
//	configuration to the Serial Monitor
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 133509 "state"
	preserve_cpp_body_indent public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolMQTT::state():
//	This method is provided to return the 
//	mqtt client's state.
//	\\return mqtt client state:	
//		-4 : MQTT_CONNECTION_TIMEOUT - the server didn't respond within the keepalive time
//		-3 : MQTT_CONNECTION_LOST - the network connection was broken
//		-2 : MQTT_CONNECT_FAILED - the network connection failed
//		-1 : MQTT_DISCONNECTED - the client is disconnected cleanly
//		0 : MQTT_CONNECTED - the cient is connected
//		1 : MQTT_CONNECT_BAD_PROTOCOL - the server doesn't support the requested version of MQTT
//		2 : MQTT_CONNECT_BAD_CLIENT_ID - the server rejected the client identifier
//		3 : MQTT_CONNECT_UNAVAILABLE - the server was unable to accept the connection
//		4 : MQTT_CONNECT_BAD_CREDENTIALS - the username/password were rejected
//		5 : MQTT_CONNECT_UNAUTHORIZED - the client was not authorized to connect
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 133637 "mqttLoop"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolMQTT::mqttLoop():
//	This method is provided to allow the
//	client to process the data
//
//	\\return true if successful,false
//	otherwise
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 153861 "getUser"
	preserve_cpp_body_indent public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolMQTT::getUser():
//	This method is provided to get the user name
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      attribute 131461 "mqttServer"
	private explicit_type "char"
	multiplicity "[50]"
	init_value "= {'0'}"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${multiplicity}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 131589 "msg"
	private explicit_type "String"
	init_value "= \"\""
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 131717 "inTopic"
	private explicit_type "char"
	multiplicity "[50]"
	init_value "= {'0'}"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${multiplicity}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 131845 "outTopic"
	private explicit_type "char"
	multiplicity "[50]"
	init_value "= {'0'}"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${multiplicity}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 151045 "user"
	private explicit_type "char"
	multiplicity "[50]"
	init_value "= {'0'}"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${multiplicity}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 132101 "bufferSize"
	private explicit_type "int"
	init_value "= 3000"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 132229 "espClient"
	private explicit_type "WiFiClient"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 132357 "client"
	private explicit_type "PubSubClient"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 132485 "newMsg"
	private explicit_type "bool"
	init_value "= 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 151173 "previousLogTime"
	private explicit_type "ulong"
	init_value "= 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 128773 "Jetpack"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "	\\class Jetpack
	\\brief This class manages the Jetpack shield



"
      operation 139141 "begin"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	Jetpack::begin():
//	This method is provided to
//	initialise the pin that control
//	the Jetpack shield
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 139269 "write"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "action" explicit_type "byte"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	Jetpack::write(action):
//	This method is provided to write
//	the given action to the entire Jetpack
//	action is a Byte (8 bits ), each bit goes 
//	to an output. 
//	MSBFirst 
//

${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "starts the Jetpack"
      end

      operation 139397 "writeBit"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "pin" explicit_type "byte"
	  param in name "state" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	Jetpack::writeBit(pin,state):
//	This method is provided to write
//	the given state to the given pin
//

${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "writes to the Jetpack"
      end

      operation 139525 "doAction"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "data" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	Jetpack::doAction(sensor data ):
//	This method is provided to automate the Jetpack.
//	exemple:
//	initial state:
//		current Temperature = 23 °C
//		actors[0].actif=1
//		actors[0].low=25 °C
//		actors[0].high=30 °C
//		actors[0].type=\"Temperature\"
//		
//	condition verified:		
//		root[\"Temperature\"] < actors[0].low
//
//	action: invert the state of actors[0]:
//		bitWrite( action,0,!( bitRead ( action,0 ) ) )
//		write(action)
//	
//

${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "writes to a single pin of the Jetpack"
      end

      operation 139653 "config"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	Jetpack::config():
//	This method is provided to configure the
//	Jetpack with a configuration file
//
//	\\return true if successful,false otherwise
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 139781 "printConf"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	Jetpack::printConf():
//	This method is provided to
//	print the configuration to the 
//	Serial Monitor
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      attribute 136325 "action"
	private explicit_type "byte"
	init_value "=  B00000000"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      class 130309 "state"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 136581 "type"
	  public explicit_type "String"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 136709 "actif"
	  public explicit_type "bool"
	  init_value "= 0"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 136837 "low"
	  public explicit_type "int"
	  init_value "= 0"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "if temporal == 1 this is the time spent inactif in ms"
	end

	attribute 136965 "high"
	  public explicit_type "int"
	  init_value "= 0"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "if type is hour/minute/second this is the deactivation time
if temporal==1 this is the time spent actif in ms"
	end

	attribute 151429 "temporal"
	  public explicit_type "bool"
	  init_value "= 0"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "if type is hour/minute/second this is the activation time
"
	end

	attribute 151557 "actifTime"
	  public explicit_type "ulong"
	  init_value "= 0"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 151685 "inactifTime"
	  public explicit_type "ulong"
	  init_value "= 0"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 171909 "inverted"
	  public explicit_type "bool"
	  init_value "= 0"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end
      end

      attribute 137093 "clockPin"
	const_attribute private explicit_type "int"
	init_value "=  4"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "clock pin for the shift register"
      end

      attribute 137221 "dataPin"
	const_attribute private explicit_type "int"
	init_value "=  15"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "data  pin for the shift register"
      end

      attribute 137349 "EnI2C"
	const_attribute private explicit_type "int"
	init_value "= 5"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " I2C/Shift pin"
      end
    end

    class 128901 "Irene3000"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "	\\class Irene3000
	\\brief This class is provided to manage
	the Irene3000 Ph/Temperature Shield

"
      operation 137349 "begin"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	Irene3000::begin():
//	This method is provided to start the
//	Irene3000 ADS chip
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 137477 "config"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	Irene3000::config():
//	This method is provided to configure the
//	Irene3000 shield through a configuration file
//
//	\\return true if successful,false otherwise
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 137605 "printConf"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	Irene3000::printConf():
//	This method is provided to print the configuration
//	to the Serial Monitor
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 137733 "read"
	preserve_cpp_body_indent public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	Irene3000:read():
//	This method is provided to read
//	the Irene3000 sensors data
//
//	\\return json string of the sensors
//	data
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 137861 "readButton"
	preserve_cpp_body_indent public explicit_return_type "int"
	nparams 1
	  param in name "gain" explicit_type "adsGain_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	Irene3000::readButton(gain):
//	This method is provided to read the
//	Irene3000 button
//
//	\\return the button value
//

${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 137989 "setGain"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "gain" explicit_type "adsGain_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	Irene3000::setGain(gain):
//	This method is provided to set the
//	ADS chip gain
//

${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 138117 "readADSChannel2"
	preserve_cpp_body_indent public explicit_return_type "int"
	nparams 1
	  param in name "gain" explicit_type "adsGain_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	Irene3000::readADSChannel2(gain):
//	This method is provided to read from
//	the ADS channel 2 .
//	ADS Channel 2 is free and the user can connect
//	another analog sensor to it.
//
//	\\return the ADS Channel 2 value
//

${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 138245 "readPh"
	preserve_cpp_body_indent public explicit_return_type "float"
	nparams 1
	  param in name "gain" explicit_type "adsGain_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	Irene3000::readPh(gain):
//	This method is provided to read the PH probe
//	note that for the best results, PH must be 
//	correlated to Temperature.
//
//	\\return the PH probe value
//

${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 138373 "readTemp"
	preserve_cpp_body_indent public explicit_return_type "double"
	nparams 1
	  param in name "gain" explicit_type "adsGain_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	Irene3000::readTemp(gain):
//	This method is provided to read
//	the Temeperature probe
//
//	\\return the Temperature probe value
//

${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 138501 "resetParams"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	Irene3000::resetParams():
//	This method is provided to reset
//	the PH configuration, 
//	assuming Ideal configuration
//

${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 138629 "calibratepH7"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "gain" explicit_type "adsGain_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	Irene3000::calibratepH7(gain):
//	This method is provided to calibrate the
//	PH probe to 7
//

${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 138757 "calibratepH4"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "gain" explicit_type "adsGain_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	Irene3000::calibratepH4(gain):
//	This method is provided to calibrate the
//	PH probe to 4
//

${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 138885 "calcpHSlope"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	Irene3000::calcpHSlop():
//	This method is provided to calculate
//	th PH slope
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 139013 "gainConvert"
	preserve_cpp_body_indent public explicit_return_type "adsGain_t"
	nparams 1
	  param in name "tempGain" explicit_type "uint16_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	Irene3000::gainConvert( gain : { 2/3,1,2,4,8,16 } )
//	This method is provided to convert the gain to
//	Internal Constants
//
//	\\return internal representation of the ADS gain
//

${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      attribute 134917 "ads"
	private explicit_type "Adafruit_ADS1115"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " ADC Object"
      end

      class 130053 "parameters_T"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 135045 "WriteCheck"
	  public explicit_type "uint"
	  init_value "= 0"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 135173 "pH7Cal"
	  public explicit_type "int"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 135301 "pH4Cal"
	  public explicit_type "int"
	  init_value "= 0"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 135429 "pHStep"
	  public explicit_type "float"
	  init_value "= 1"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end
      end

      class 130181 "state"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 135557 "active"
	  public explicit_type "byte"
	  init_value "= 0"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 135685 "gain"
	  public explicit_type "adsGain_t"
	  init_value "= GAIN_ONE"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 135813 "type"
	  public explicit_type "String"
	  init_value "= \"\""
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end
      end

      attribute 136069 "vRef"
	const_attribute private explicit_type "float"
	init_value "=  1.024"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Our vRef into the ADC wont be exa"
      end

      attribute 136197 "opampGain"
	const_attribute private explicit_type "float"
	init_value "=  5.25"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "what is our Op-Amps gain (stage 1)"
      end
    end

    class 129029 "ExternalSensors"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "	\\class ExternalSensors
	\\brief This class handles the external sensors
	run time defintion , configuartion and actions

"
      operation 136709 "begin"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	ExternalSensors::begin():
//	This method is provided to initialise
//	the external sensors. 
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 136837 "read"
	preserve_cpp_body_indent public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	ExternalSensors::read():	
//	This method is provided to
//	read the data from the external sensors
//
//	\\return json string that contains the
//	sensors data
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 136965 "config"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	ExternalSensors::config():
//	This method is provided to configure
//	the externalSensors through a configuration
//	file
//
//	\\return true if successful,false otherwise
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 137221 "printConf"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	ExternalSensors::printConf():
//	This method is provided to print the
//	configuration to the Serial Monitor
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      class 129925 "sensor"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 134021 "reference"
	  public explicit_type "String"
	  init_value "= \"\""
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 134149 "type"
	  public explicit_type "String"
	  init_value "= \"\""
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 134533 "address"
	  public explicit_type "uint8_t"
	  init_value "= 0"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 129413 // exSensor (<unidirectional association>)
	  relation 129413 --->
	    a role_name "exSensor" init_value "= NULL" public
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${h_value};
"
	      classrelation_ref 129413 // exSensor (<unidirectional association>)
	    b parent class_ref 129413 // BaseExternalSensor
	end
      end

      attribute 134661 "sensorsNumber"
	private explicit_type "int"
	init_value "= 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 129413 "BaseExternalSensor"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "	\\class BaseExternalSensor:
	\\brief This class is a generic external Sensor
	it is a way to access real external sensor
	methods through run Time polymorphism
"
      operation 135173 "BaseExternalSensor"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} {

	#if DEBUG == 1 

		Serial.println( \"BaseExternalSensor Constructor\" );
		Serial.println();
	
	#endif

	};
"
	
	
	
	
	comment "	BaseExternalSensor():
	Base class generic Constructor
"
      end

      operation 135301 "begin"
	cpp_virtual cpp_inline public explicit_return_type "uint8_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
	
	#if DEBUG == 1 
	
		Serial.println( \"BaseExternalSensor.begin()\" );
		Serial.println();
	
	#endif

		return(-2);
	};
"
	
	
	
	
	comment "	begin():
	Base class virtual 
	generic begin method
	
	\\return generic value as it's not supposed
	to be used
"
      end

      operation 135429 "read"
	cpp_virtual cpp_inline public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
	
	#if DEBUG == 1 

		Serial.println( \"BaseExternalSensor.read()\" );
		Serial.println();
	
	#endif		
		
		return(-2);
	};
"
	
	
	
	
	comment "	read():
	Base class virtual
	generic read method

	\\return generic value
	as it is not supposed 
	to be used	
"
      end
    end

    class 129541 "ExternalSensor"
      visibility package 
      nformals 1
      formal name "T" type "class" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "	\\class ExternalSensor	
	\\brief template<class SensorClass> class External Sensor: 
	Derived class from BaseExternalSensor.

	This is the generic Template for an external sensor
	This class works automatically with sensors that 
	provide the following methods :
		- constructor(void);
		- uint8_t/bool begin(void);
		- int read(void);

	If your sensor doesn't provide these methods
	or is not present in the specialized templates
	feel free to implement your own specializiation,
	following the provided generic template , 
	or contact us and we will be glad to expand our
	list of supported external sensors
"
      classrelation 129029 // <generalisation>
	relation 129029 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 129029 // <generalisation>
	  b parent class_ref 129413 // BaseExternalSensor
      end

      operation 135557 "ExternalSensor"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} {
	
	#if DEBUG == 1 

		Serial.println( \"ExternalSensor <Generic> Constructor\" );
		Serial.println();
	
	#endif

		sensor();
	};
"
	
	
	
	
	comment "	Generic Constructor
"
      end

      operation 135685 "begin"
	cpp_virtual cpp_inline public explicit_return_type "uint8_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
	
	#if DEBUG == 1 

		Serial.println( \"ExternalSensor <Generic> begin()\" );
		Serial.println();
	
	#endif

		return(sensor.begin() );	
	};
"
	
	
	
	
	comment "	Generic begin method

	
"
      end

      operation 135813 "read"
	cpp_virtual cpp_inline public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
	
	#if DEBUG == 1 

		Serial.println( \"ExternalSensor <Generic> read() \" );
		Serial.println();
		
	#endif

		return(sensor.read());
	};
"
	
	
	
	
	comment "	Generic read method
"
      end

      attribute 133509 "sensor"
	private explicit_type "T"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "the sensor itself"
      end
    end

    class 129669 "ExternalSensor<NDIR_I2C>"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "	\\class ExternalSensor<NDIR_I2C>	
	\\brief NDIR_I2C Specialization Class
	This is the template specialization
	for the NDIR_I2C CO2 sensor
"
      classrelation 129157 // <generalisation>
	relation 129157 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 129157 // <generalisation>
	  b parent class_ref 129413 // BaseExternalSensor
      end

      operation 135941 "ExternalSensor"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "i2c_addr" explicit_type "uint8_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}${abstract} {
	
	#if DEBUG == 1 

		Serial.println( \"ExternalSensor <NDIR_I2C> constructor\");
		Serial.println();
	
	#endif

		sensor=NDIR_I2C(i2c_addr);
	};
"
	
	
	
	
	comment "	ExternalSensor(I2C address):
	NDIR_I2C specific constructor
"
      end

      operation 136069 "begin"
	cpp_virtual cpp_inline public explicit_return_type "uint8_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
	
	#if DEBUG == 1 

		Serial.println( \"ExternalSensor <NDIR_I2C> begin()\" );
		Serial.println();
	
	#endif 

		if (sensor.begin()) 
		{
		
		#if DEBUG == 1 
			
			Serial.println( \"NDIR_I2C init : wait 10 seconds\" );
			Serial.println();
		
		#endif

			delay(10000);
			return(true);

    		}
		else 
		{
		
		#if DEBUG == 1 

			Serial.println( \"NDIR_I2C init : fail \" );
			Serial.println();
		
		#endif

			return(false);
		}	
	};
"
	
	
	
	
	comment "	begin():
	NDIR_I2C specific begin method

	\\return true if successful,
	false otherwise
"
      end

      operation 136197 "read"
	cpp_virtual cpp_inline public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
		
	#if DEBUG == 1 
		
		Serial.println( \"ExternalSensor <NDIR_I2C> read()\" );
		Serial.println();

	#endif

		if (sensor.measure())
		{
		
		#if DEBUG == 1 

			Serial.print( \"NDIR_I2C ppm :\" );
			Serial.println( (float) sensor.ppm);
			
			Serial.println();			

		#endif

			return( (float) sensor.ppm);
			
		}
		
		else
		{
		
		#if DEBUG == 1 

			Serial.println( \"NDIR_I2C read fail \" );
			Serial.println();
		
		#endif

			return(-42);
		}
	};
"
	
	
	
	
	comment "	read():
	NDIR_I2C specific read method

	\\return the ppm value if successful,
	else return -42
"
      end

      attribute 133637 "sensor"
	private explicit_type "NDIR_I2C"
	init_value "= NULL"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 129797 "ExternalSensor<DallasTemperature>"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "	\\class ExternalSensor<DallasTemperature>	
	\\brief DallasTemperature Specialization Class
	This is the template specialization
	for the Dallas Temperature sensor
"
      classrelation 129285 // <generalisation>
	relation 129285 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 129285 // <generalisation>
	  b parent class_ref 129413 // BaseExternalSensor
      end

      operation 136325 "ExternalSensor"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} {
		
	#if DEBUG == 1 

		Serial.println( \"ExternalSensor <DallasTemperature> constructor\" );
		Serial.println();
	
	#endif

		OneWire oneWire(0);
		
		sensor=DallasTemperature(&oneWire);
	};
"
	
	
	
	
	comment "	ExternalSensor():
	DallasTemperature specific constructor
"
      end

      operation 136453 "begin"
	cpp_virtual cpp_inline public explicit_return_type "uint8_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
	
	#if DEBUG == 1 

		Serial.println( \"ExternalSensor <DallasTemperature> begin()\" );
		Serial.println();
	
	#endif
	
		sensor.begin(); 
		delay(5);
		sensor.getAddress(this->dallasAddress, 1);	
		return(true);
	};
"
	
	
	
	
	comment "	begin():
	DallasTemperature specific begin method

	\\return true if successful
"
      end

      operation 136581 "read"
	cpp_virtual cpp_inline public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
	
	#if DEBUG == 1 

		Serial.println( \"ExternalSensor <DallasTemperature> read()\" );
		Serial.println();

		Serial.print( \"temperature : \");
		Serial.print( (float) sensor.getTempC(this->dallasAddress) );
		Serial.print( \"°C\" );
		Serial.println();
	
	#endif
		
		return( (float) sensor.getTempC(this->dallasAddress) );
	};
"
	
	
	
	
	comment "	read():
	DallasTemperature specific read method

	\\return the temperature in °C
"
      end

      attribute 133765 "sensor"
	private explicit_type "DallasTemperature"
	init_value "= NULL"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 133893 "dallasAddress"
	private explicit_type "DeviceAddress"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 136837 "CoolWifi"
      visibility protected 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "	\\class CoolWifi
 
	\\brief This class manages the WiFi connection .
 
"
      operation 173829 "begin"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolWifi::begin():
//	This method is provided to set the
//	wifiMulti Access points and the 
//	wifiManager time out 
//

//	CoolWifi::begin():
//	This method is provided to set the
//	wifiMulti Access points and the 
//	wifiManager time out 
//

//	CoolWifi::begin():
//	This method is provided to set the
//	wifiMulti Access points and the 
//	wifiManager time out 
//

//	CoolWifi::begin():
//	This method is provided to set the
//	wifiMulti Access points and the 
//	wifiManager time out 
//

//	CoolWifi::begin():
//	This method is provided to set the
//	wifiMulti Access points and the 
//	wifiManager time out 
//

//	CoolWifi::begin():
//	This method is provided to set the
//	wifiMulti Access points and the 
//	wifiManager time out 
//

//	CoolWifi::begin():
//	This method is provided to set the
//	wifiMulti Access points and the 
//	wifiManager time out 
//

//	CoolWifi::begin():
//	This method is provided to set the
//	wifiMulti Access points and the 
//	wifiManager time out 
//

//	CoolWifi::begin():
//	This method is provided to set the
//	wifiMulti Access points and the 
//	wifiManager time out 
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 173957 "config"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolWifi::config():
//	This method is provided to set
//	the wifi parameters :	-ssid
//				-pass
//				-AP timeOut
//				-wifiCount	
//
//	\\return true if successful,false otherwise
//

//	CoolWifi::config():
//	This method is provided to set
//	the wifi parameters :	-ssid
//				-pass
//				-AP timeOut
//				-wifiCount	
//
//	\\return true if successful,false otherwise
//

//	CoolWifi::config():
//	This method is provided to set
//	the wifi parameters :	-ssid
//				-pass
//				-AP timeOut
//				-wifiCount	
//
//	\\return true if successful,false otherwise
//

//	CoolWifi::config():
//	This method is provided to set
//	the wifi parameters :	-ssid
//				-pass
//				-AP timeOut
//				-wifiCount	
//
//	\\return true if successful,false otherwise
//

//	CoolWifi::config():
//	This method is provided to set
//	the wifi parameters :	-ssid
//				-pass
//				-AP timeOut
//				-wifiCount	
//
//	\\return true if successful,false otherwise
//

//	CoolWifi::config():
//	This method is provided to set
//	the wifi parameters :	-ssid
//				-pass
//				-AP timeOut
//				-wifiCount	
//
//	\\return true if successful,false otherwise
//

//	CoolWifi::config():
//	This method is provided to set
//	the wifi parameters :	-ssid
//				-pass
//				-AP timeOut
//				-wifiCount	
//
//	\\return true if successful,false otherwise
//

//	CoolWifi::config():
//	This method is provided to set
//	the wifi parameters :	-ssid
//				-pass
//				-AP timeOut
//				-wifiCount	
//
//	\\return true if successful,false otherwise
//

//	CoolWifi::config():
//	This method is provided to set
//	the wifi parameters :	-ssid
//				-pass
//				-AP timeOut
//				-wifiCount	
//
//	\\return true if successful,false otherwise
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 174085 "config"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 4
	  param in name "ssid" explicit_type "String"
	  param in name "pass" explicit_type "String"
	  param in name "wifiNumber" explicit_type "int"
	  param in name "APTimeOut" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}[]${v0}, ${t1} ${p1}[]${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolWifi::config(ssid array, pass array, number of wifis, AP timeout );
//	This method is provided to configure the Wifi without SPIFFS
//	
//	\\return true if successfull, false otherwise
//

//	CoolWifi::config(ssid array, pass array, number of wifis, AP timeout );
//	This method is provided to configure the Wifi without SPIFFS
//	
//	\\return true if successfull, false otherwise
//

//	CoolWifi::config(ssid array, pass array, number of wifis, AP timeout );
//	This method is provided to configure the Wifi without SPIFFS
//	
//	\\return true if successfull, false otherwise
//

//	CoolWifi::config(ssid array, pass array, number of wifis, AP timeout );
//	This method is provided to configure the Wifi without SPIFFS
//	
//	\\return true if successfull, false otherwise
//

//	CoolWifi::config(ssid array, pass array, number of wifis, AP timeout );
//	This method is provided to configure the Wifi without SPIFFS
//	
//	\\return true if successfull, false otherwise
//

//	CoolWifi::config(ssid array, pass array, number of wifis, AP timeout );
//	This method is provided to configure the Wifi without SPIFFS
//	
//	\\return true if successfull, false otherwise
//

//	CoolWifi::config(ssid array, pass array, number of wifis, AP timeout );
//	This method is provided to configure the Wifi without SPIFFS
//	
//	\\return true if successfull, false otherwise
//

//	CoolWifi::config(ssid array, pass array, number of wifis, AP timeout );
//	This method is provided to configure the Wifi without SPIFFS
//	
//	\\return true if successfull, false otherwise
//

//	CoolWifi::config(ssid array, pass array, number of wifis, AP timeout );
//	This method is provided to configure the Wifi without SPIFFS
//	
//	\\return true if successfull, false otherwise
//

${inline}${type} ${class}::${name}${(}${t0} ${p0}[], ${t1} ${p1}[], ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 174213 "connect"
	preserve_cpp_body_indent public explicit_return_type "wl_status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolWifi::connect( ):
//	This method is provided to connect to the strongest WiFi
//	in the provided list of wiFis.
//	If none are found , it starts the AP mode.
//	
//	\\return wifi state
//

//	CoolWifi::connect( ):
//	This method is provided to connect to the strongest WiFi
//	in the provided list of wiFis.
//	If none are found , it starts the AP mode.
//	
//	\\return wifi state
//

//	CoolWifi::connect( ):
//	This method is provided to connect to the strongest WiFi
//	in the provided list of wiFis.
//	If none are found , it starts the AP mode.
//	
//	\\return wifi state
//

//	CoolWifi::connect( ):
//	This method is provided to connect to the strongest WiFi
//	in the provided list of wiFis.
//	If none are found , it starts the AP mode.
//	
//	\\return wifi state
//

//	CoolWifi::connect( ):
//	This method is provided to connect to the strongest WiFi
//	in the provided list of wiFis.
//	If none are found , it starts the AP mode.
//	
//	\\return wifi state
//

//	CoolWifi::connect( ):
//	This method is provided to connect to the strongest WiFi
//	in the provided list of wiFis.
//	If none are found , it starts the AP mode.
//	
//	\\return wifi state
//

//	CoolWifi::connect( ):
//	This method is provided to connect to the strongest WiFi
//	in the provided list of wiFis.
//	If none are found , it starts the AP mode.
//	
//	\\return wifi state
//

//	CoolWifi::connect( ):
//	This method is provided to connect to the strongest WiFi
//	in the provided list of wiFis.
//	If none are found , it starts the AP mode.
//	
//	\\return wifi state
//

//	CoolWifi::connect( ):
//	This method is provided to connect to the strongest WiFi
//	in the provided list of wiFis.
//	If none are found , it starts the AP mode.
//	
//	\\return wifi state
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 174341 "state"
	preserve_cpp_body_indent public explicit_return_type "wl_status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolWifi::state():
//	This method is provided to return the 
//	Wifi client's state.
//	\\return wifi client state:	
//		WL_NO_SHIELD        = 255, 
//   		WL_IDLE_STATUS      = 0,
//   		WL_NO_SSID_AVAIL    = 1,
//   		WL_SCAN_COMPLETED   = 2,
//   		WL_CONNECTED        = 3,
//   		WL_CONNECT_FAILED   = 4,
//   		WL_CONNECTION_LOST  = 5,
//		WL_DISCONNECTED = 6
//

//	CoolWifi::state():
//	This method is provided to return the 
//	Wifi client's state.
//	\\return wifi client state:	
//		WL_NO_SHIELD        = 255, 
//   		WL_IDLE_STATUS      = 0,
//   		WL_NO_SSID_AVAIL    = 1,
//   		WL_SCAN_COMPLETED   = 2,
//   		WL_CONNECTED        = 3,
//   		WL_CONNECT_FAILED   = 4,
//   		WL_CONNECTION_LOST  = 5,
//		WL_DISCONNECTED = 6
//

//	CoolWifi::state():
//	This method is provided to return the 
//	Wifi client's state.
//	\\return wifi client state:	
//		WL_NO_SHIELD        = 255, 
//   		WL_IDLE_STATUS      = 0,
//   		WL_NO_SSID_AVAIL    = 1,
//   		WL_SCAN_COMPLETED   = 2,
//   		WL_CONNECTED        = 3,
//   		WL_CONNECT_FAILED   = 4,
//   		WL_CONNECTION_LOST  = 5,
//		WL_DISCONNECTED = 6
//

//	CoolWifi::state():
//	This method is provided to return the 
//	Wifi client's state.
//	\\return wifi client state:	
//		WL_NO_SHIELD        = 255, 
//   		WL_IDLE_STATUS      = 0,
//   		WL_NO_SSID_AVAIL    = 1,
//   		WL_SCAN_COMPLETED   = 2,
//   		WL_CONNECTED        = 3,
//   		WL_CONNECT_FAILED   = 4,
//   		WL_CONNECTION_LOST  = 5,
//		WL_DISCONNECTED = 6
//

//	CoolWifi::state():
//	This method is provided to return the 
//	Wifi client's state.
//	\\return wifi client state:	
//		WL_NO_SHIELD        = 255, 
//   		WL_IDLE_STATUS      = 0,
//   		WL_NO_SSID_AVAIL    = 1,
//   		WL_SCAN_COMPLETED   = 2,
//   		WL_CONNECTED        = 3,
//   		WL_CONNECT_FAILED   = 4,
//   		WL_CONNECTION_LOST  = 5,
//		WL_DISCONNECTED = 6
//

//	CoolWifi::state():
//	This method is provided to return the 
//	Wifi client's state.
//	\\return wifi client state:	
//		WL_NO_SHIELD        = 255, 
//   		WL_IDLE_STATUS      = 0,
//   		WL_NO_SSID_AVAIL    = 1,
//   		WL_SCAN_COMPLETED   = 2,
//   		WL_CONNECTED        = 3,
//   		WL_CONNECT_FAILED   = 4,
//   		WL_CONNECTION_LOST  = 5,
//		WL_DISCONNECTED = 6
//

//	CoolWifi::state():
//	This method is provided to return the 
//	Wifi client's state.
//	\\return wifi client state:	
//		WL_NO_SHIELD        = 255, 
//   		WL_IDLE_STATUS      = 0,
//   		WL_NO_SSID_AVAIL    = 1,
//   		WL_SCAN_COMPLETED   = 2,
//   		WL_CONNECTED        = 3,
//   		WL_CONNECT_FAILED   = 4,
//   		WL_CONNECTION_LOST  = 5,
//		WL_DISCONNECTED = 6
//

//	CoolWifi::state():
//	This method is provided to return the 
//	Wifi client's state.
//	\\return wifi client state:	
//		WL_NO_SHIELD        = 255, 
//   		WL_IDLE_STATUS      = 0,
//   		WL_NO_SSID_AVAIL    = 1,
//   		WL_SCAN_COMPLETED   = 2,
//   		WL_CONNECTED        = 3,
//   		WL_CONNECT_FAILED   = 4,
//   		WL_CONNECTION_LOST  = 5,
//		WL_DISCONNECTED = 6
//

//	CoolWifi::state():
//	This method is provided to return the 
//	Wifi client's state.
//	\\return wifi client state:	
//		WL_NO_SHIELD        = 255, 
//   		WL_IDLE_STATUS      = 0,
//   		WL_NO_SSID_AVAIL    = 1,
//   		WL_SCAN_COMPLETED   = 2,
//   		WL_CONNECTED        = 3,
//   		WL_CONNECT_FAILED   = 4,
//   		WL_CONNECTION_LOST  = 5,
//		WL_DISCONNECTED = 6
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 174469 "printConf"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolWifi::printConf():
//	This method is provided to print the
//	configuration to the Serial Monitor
//

//	CoolWifi::printConf():
//	This method is provided to print the
//	configuration to the Serial Monitor
//

//	CoolWifi::printConf():
//	This method is provided to print the
//	configuration to the Serial Monitor
//

//	CoolWifi::printConf():
//	This method is provided to print the
//	configuration to the Serial Monitor
//

//	CoolWifi::printConf():
//	This method is provided to print the
//	configuration to the Serial Monitor
//

//	CoolWifi::printConf():
//	This method is provided to print the
//	configuration to the Serial Monitor
//

//	CoolWifi::printConf():
//	This method is provided to print the
//	configuration to the Serial Monitor
//

//	CoolWifi::printConf():
//	This method is provided to print the
//	configuration to the Serial Monitor
//

//	CoolWifi::printConf():
//	This method is provided to print the
//	configuration to the Serial Monitor
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 174597 "addWifi"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 2
	  param in name "ssid" explicit_type "String"
	  param in name "pass" explicit_type "String"
	    defaultvalue "\"\" "
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	CoolWifi::addWifi(ssid,pass)	
//	This method is provided to add new WiFi
//	detected by the WiFiManager to 
//	the jsonConfig(if used ) 
//	
//	\\return true if successfull , false otherwise
//

//	CoolWifi::addWifi(ssid,pass)	
//	This method is provided to add new WiFi
//	detected by the WiFiManager to 
//	the jsonConfig(if used ) 
//	
//	\\return true if successfull , false otherwise
//

//	CoolWifi::addWifi(ssid,pass)	
//	This method is provided to add new WiFi
//	detected by the WiFiManager to 
//	the jsonConfig(if used ) 
//	
//	\\return true if successfull , false otherwise
//

//	CoolWifi::addWifi(ssid,pass)	
//	This method is provided to add new WiFi
//	detected by the WiFiManager to 
//	the jsonConfig(if used ) 
//	
//	\\return true if successfull , false otherwise
//

//	CoolWifi::addWifi(ssid,pass)	
//	This method is provided to add new WiFi
//	detected by the WiFiManager to 
//	the jsonConfig(if used ) 
//	
//	\\return true if successfull , false otherwise
//

//	CoolWifi::addWifi(ssid,pass)	
//	This method is provided to add new WiFi
//	detected by the WiFiManager to 
//	the jsonConfig(if used ) 
//	
//	\\return true if successfull , false otherwise
//

//	CoolWifi::addWifi(ssid,pass)	
//	This method is provided to add new WiFi
//	detected by the WiFiManager to 
//	the jsonConfig(if used ) 
//	
//	\\return true if successfull , false otherwise
//

//	CoolWifi::addWifi(ssid,pass)	
//	This method is provided to add new WiFi
//	detected by the WiFiManager to 
//	the jsonConfig(if used ) 
//	
//	\\return true if successfull , false otherwise
//

//	CoolWifi::addWifi(ssid,pass)	
//	This method is provided to add new WiFi
//	detected by the WiFiManager to 
//	the jsonConfig(if used ) 
//	
//	\\return true if successfull , false otherwise
//

${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      attribute 164741 "wifiManager"
	private explicit_type "WiFiManager"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 164869 "wifiMulti"
	private explicit_type "ESP8266WiFiMulti"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 164997 "wifiCount"
	private explicit_type "int"
	init_value "= 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 165125 "ssid"
	private explicit_type "String"
	multiplicity "[50]"
	init_value "= {\"0\"}"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${multiplicity}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 165253 "pass"
	private explicit_type "String"
	multiplicity "[50]"
	init_value "= {\"0\"}"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${multiplicity}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 165381 "timeOut"
	private explicit_type "int"
	init_value "= 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "in seconds"
      end
    end

    classdiagram 128005 "CoolAPI"
      classdiagramsettings member_max_width 0 end
      size D
    end
  end

  deploymentview 128005 "CoolBoard"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 128005 "CoolBoard"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 128005 // CoolBoard
      end
    end

    artifact 128133 "CoolBoardLed"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 128389 // CoolBoardLed
      end
    end

    artifact 128261 "CoolBoardSensors"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 128261 // CoolBoardSensors
      end
    end

    artifact 128389 "CoolFileSystem"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 128133 // CoolFileSystem
      end
    end

    artifact 128517 "CoolMQTT"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 128645 // CoolMQTT
      end
    end

    artifact 128645 "CoolTime"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 128517 // CoolTime
      end
    end

    artifact 128773 "ExternalSensor"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 129413 // BaseExternalSensor
	class_ref 129541 // ExternalSensor
	class_ref 129669 // ExternalSensor<NDIR_I2C>
	class_ref 129797 // ExternalSensor<DallasTemperature>
      end
    end

    artifact 128901 "ExternalSensors"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 129029 // ExternalSensors
      end
    end

    artifact 129029 "Irene3000"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 128901 // Irene3000
      end
    end

    artifact 129157 "Jetpack"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 128773 // Jetpack
      end
    end

    artifact 135685 "CoolWifi"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
      end
    end
  end
end
