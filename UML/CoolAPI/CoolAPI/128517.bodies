class CoolTime
!!!133765.cpp!!!	begin() : void

	Udp.begin(localPort);

	time_t tm=getNtpTime();

	breakTime(tm, this->tmSet);//get NTP time

	this->rtc.set(makeTime(this->tmSet), CLOCK_ADDRESS); // set the clock
	
!!!133893.cpp!!!	update() : void
	if( !( this->isTimeSync() ) )
	{
		Serial.println("waiting for sync");
		this->timeSync=this->getNtpTime();
		breakTime(this->getNtpTime(), this->tmSet);
		this->rtc.set(makeTime(this->tmSet), CLOCK_ADDRESS); // set the clock
	}
	
!!!134021.cpp!!!	config() : bool
	File rtcConfig = SPIFFS.open("/rtcConfig.json", "r");

	if (!rtcConfig) 
	{
		return(false);
	}
	else
	{
		size_t size = rtcConfig.size();
		// Allocate a buffer to store contents of the file.
		std::unique_ptr<char[]> buf(new char[size]);

		rtcConfig.readBytes(buf.get(), size);
		DynamicJsonBuffer jsonBuffer;
		JsonObject& json = jsonBuffer.parseObject(buf.get());
		if (!json.success()) 
		{
			  return(false);
		} 
		else
		{  	String ip;
			
			if(json["timeZone"].success() )
			{
				this->timeZone=json["timeZone"] ;
			}
			else
			{
				this->timeZone=this->timeZone;			
			}
			json["timeZone"]=this->timeZone;
			
			if(json["timeServer"].success() )
			{			
				 ip=json["timeServer"].as<String>();
				this->timeServer.fromString(ip);
 				
			}
			else
			{
				this->timeServer=this->timeServer;
			}
			json["timeServer"]=ip;
			
			if(json["localPort"].success() )
			{						
				this->localPort=json["localPort"];
			}
			else
			{
				this->localPort=this->localPort;
			}
			json["localPort"]=this->localPort;

			rtcConfig.close();
			rtcConfig= SPIFFS.open("/rtcConfig.json", "w");
			
			if(!rtcConfig)
			{
				return(false);
			}
			
			json.printTo(rtcConfig);
			rtcConfig.close();
						
			return(true); 
		}
	}	



!!!134149.cpp!!!	config(in timeZone : int, in timeServer : IPAddress, in localPort : uint) : void
	this->timeZone=timeZone;
	this->timeServer=timeServer;
	this->localPort=localPort;
!!!134277.cpp!!!	printConf() : void
	Serial.println("RTC Config") ;
	Serial.println(timeZone);
	Serial.println(timeServer);
	Serial.println(localPort);
!!!134405.cpp!!!	setDateTime(in year : int, in month : int, in day : int, in hour : int, in minutes : int, in seconds : int) : void
 
	tmElements_t tm;
	tm.Second=seconds; 
	tm.Minute=minutes; 
	tm.Hour=hour; 
	tm.Day=day;
	tm.Month=month; 
	tm.Year=year;   

	this->rtc.set(makeTime(tm),CLOCK_ADDRESS);
!!!134533.cpp!!!	getTimeDate() : tmElements_t
	
	tmElements_t tm;
	time_t timeDate = this->rtc.get(CLOCK_ADDRESS);
	breakTime(timeDate,tm);
	return(tm);
!!!153989.cpp!!!	getESDate() : String
	tmElements_t tm=this->getTimeDate();
	tm.Second; 
	tm.Minute; 
	tm.Hour; 
	tm.Day;
	tm.Month; 
	tm.Year; 
  	
	String elasticSearchString =String(tm.Year+1970)+"-"+String(tm.Month)+"-";//"20yy-mm-ddT00:00:00Z"

	elasticSearchString +=String(tm.Day)+"T"+String(tm.Hour)+":"+String(tm.Minute)+":"+String(tm.Second)+"Z";
	
	return (elasticSearchString);
!!!134661.cpp!!!	getLastSyncTime() : ulong
	return(this->timeSync);
!!!134789.cpp!!!	isTimeSync(in seconds : ulong = 604800) : bool
//default is once per week we try to get a time update
	if( (this->getLastSyncTime()+seconds) > (RTC.get(CLOCK_ADDRESS)) ) 
	{
		return(false);	
	}

	return(true);
!!!134917.cpp!!!	getNtpTime() : time_t
	while (Udp.parsePacket() > 0) ; // discard any previously received packets
	
	Serial.println("Transmit NTP Request");

	sendNTPpacket(timeServer);

	uint32_t beginWait = millis();

	while (millis() - beginWait < 1500) 
	{
		int size = Udp.parsePacket();
		if (size >= NTP_PACKET_SIZE) 
		{
			Serial.println("Receive NTP Response");
			Udp.read(packetBuffer, NTP_PACKET_SIZE);  // read packet into the buffer
			unsigned long secsSince1900;
			// convert four bytes starting at location 40 to a long integer
			secsSince1900 =  (unsigned long)packetBuffer[40] << 24;
			secsSince1900 |= (unsigned long)packetBuffer[41] << 16;
			secsSince1900 |= (unsigned long)packetBuffer[42] << 8;
			secsSince1900 |= (unsigned long)packetBuffer[43];
			return secsSince1900 - 2208988800UL + this->timeZone * SECS_PER_HOUR;
		}
	}
	Serial.println("No NTP Response :-(");
	return 0; // return 0 if unable to get the time
!!!135045.cpp!!!	sendNTPpacket(inout address : IPAddress) : void
	memset(packetBuffer, 0, NTP_PACKET_SIZE);
	// Initialize values needed to form NTP request
	// (see URL above for details on the packets)
	packetBuffer[0] = 0b11100011;   // LI, Version, Mode
	packetBuffer[1] = 0;     // Stratum, or type of clock
	packetBuffer[2] = 6;     // Polling Interval
	packetBuffer[3] = 0xEC;  // Peer Clock Precision
	// 8 bytes of zero for Root Delay & Root Dispersion
	packetBuffer[12]  = 49;
	packetBuffer[13]  = 0x4E;
	packetBuffer[14]  = 49;
	packetBuffer[15]  = 52;
	// all NTP fields have been given values, now
	// you can send a packet requesting a timestamp:                 
	Udp.beginPacket(address, 123); //NTP requests are to port 123
	Udp.write(packetBuffer, NTP_PACKET_SIZE);
	Udp.endPacket();	
