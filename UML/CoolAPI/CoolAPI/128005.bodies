class CoolBoard
!!!128005.cpp!!!	begin() : void
       
	fileSystem.begin(); 
	
	coolBoardSensors.config(); 
	coolBoardSensors.begin();
	coolBoardSensors.printConf();
	
	rtc.config();
	rtc.begin();
	rtc.printConf();
	
	coolBoardLed.config();	
	coolBoardLed.begin();
	coolBoardLed.printConf();

	mqtt.config();
	mqtt.begin();
	mqtt.printConf();

	if(jetpackActive)	
	{	
		jetPack.config();
		jetPack.begin();
		jetPack.printConf();

	}

	if(ireneActive)
	{
		irene3000.config();
		irene3000.begin();
		irene3000.printConf();

	}

	if(externalSensorsActive)
	{
		externalSensors.config();
		externalSensors.begin();	
		externalSensors.printConf();
	}

!!!128133.cpp!!!	config() : bool
	fileSystem.begin(); 
	//read config file
	//update data
	File configFile = SPIFFS.open("/coolBoardConfig.json", "r");

	if (!configFile) 
	{
		return(false);
	}
	else
	{
		size_t size = configFile.size();
		// Allocate a buffer to store contents of the file.
		std::unique_ptr<char[]> buf(new char[size]);

		configFile.readBytes(buf.get(), size);
		DynamicJsonBuffer jsonBuffer;
		JsonObject& json = jsonBuffer.parseObject(buf.get());
		if (!json.success()) 
		{
			  return(false);
		} 
		else
		{  	  
			if( json["interval"].success() )
			{
				this->interval = json["interval"]; 
			}
			else
			{
				this->interval=this->interval;
				
			}
			json["interval"]=this->interval;

			if(json["sensorJsonSize"].success())
			{
				this->sensorJsonSize = json["sensorJsonSize"];
			}
			else
			{
				this->sensorJsonSize=this->sensorJsonSize;
			}
			json["sensorJsonSize"]=this->sensorJsonSize;

			if(json["answerJsonSize"].success())
			{
				this->answerJsonSize = json["answerJsonSize"];
			}
			else
			{
				this->answerJsonSize=this->answerJsonSize;
			}
			json["answerJsonSize"]=this->answerJsonSize;
			
			if(json["ireneActive"].success() )
			{
				this->ireneActive=json["ireneActive"];
			}
			else
			{
				this->ireneActive=this->ireneActive;
			}
			json["ireneActive"]=this->ireneActive;	

			if(json["jetpackActive"].success() )
			{		
				this->jetpackActive=json["jetpackActive"];
			}
			else
			{
				this->jetpackActive=this->jetpackActive;
			}
			json["jetpackActive"]=this->jetpackActive;
			
			if(json["externalSensorsActive"].success() )
			{			
			
				this->externalSensorsActive=json["externalSensorsActive"];
			}
			else
			{
				this->externalSensorsActive=this->externalSensorsActive;
			}
			json["externalSensorsActive"]=this->externalSensorsActive;
			
			if(json["serverTimeOut"].success() )
			{			
				this->serverTimeOut=json["serverTimeOut"];
			}
			else
			{
				this->serverTimeOut=this->serverTimeOut;
			}
			json["serverTimeOut"]=this->serverTimeOut;
			
			if( json["station"].success() )
			{
				this->station=json["station"];			
			}
			else
			{
				this->station=this->station;			
			}
			json["station"]=this->station;			
			
			
			configFile.close();
			configFile = SPIFFS.open("/coolBoardConfig.json", "w");
		
			if(!configFile)
			{
				return(false);
			}

			json.printTo(configFile);
			configFile.close();
	
			return(true); 
		}
	}	
	

!!!128261.cpp!!!	update(in answer : char) : void
	
	DynamicJsonBuffer  jsonBuffer(answerJsonSize) ;
	JsonObject& root = jsonBuffer.parseObject(answer);
	JsonObject& stateDesired = root["state"]["desired"];
	if(stateDesired.success() )
	{
		if(stateDesired["update"]==1) 
			{	
				String answerDesired;
				stateDesired.printTo(answerDesired);
				Serial.println(answerDesired);
				
				bool result=fileSystem.updateConfigFiles(answerDesired,answerJsonSize); 
				Serial.print("update : ");Serial.println(result);
				
				this->config();	
		
				coolBoardSensors.config();

				rtc.config(); 

				coolBoardLed.config();
			
				mqtt.config();			
						
				if(jetpackActive)
				{
					jetPack.config(); 
				}

				if(ireneActive)
				{
					irene3000.config();	
				}
			
				if(externalSensorsActive)
				{
					externalSensors.config();			
				}

			}
	}
!!!128389.cpp!!!	offLineMode() : void

	data=coolBoardSensors.read();
	
	if(externalSensorsActive)
	{
		data+=externalSensors.read();	
	}		
	if(ireneActive)
	{
		data+=irene3000.read(); 
	}
	
	if(jetpackActive)
	{
		jetPack.doAction(data.c_str(),sensorJsonSize); 
	}	

	fileSystem.saveSensorData(data.c_str(), sensorJsonSize ); 
!!!128517.cpp!!!	onLineMode() : void
	
	
	
	

	rtc.update();	

	data=coolBoardSensors.read(); //{..,..,..}


	if(externalSensorsActive)
	{	

		data+=externalSensors.read();//{..,..,..}{..,..}	
		data.setCharAt(data.lastIndexOf('}'),',');//{..,..,..}{..,..,
		data.setCharAt(data.lastIndexOf('{'),',');//{..,..,..},..,..,
		data.remove(data.lastIndexOf('}'),1);//{..,..,..,..,..,
		data.setCharAt(data.lastIndexOf(','),'}');//{..,..,..,..,..}		
	}		
	if(ireneActive)
	{
		data+=irene3000.read();//{..,..,..,..,..}{..,..,..}
		data.setCharAt(data.lastIndexOf('}'),',');//{..,..,..,..,..{..,..,.., 
		data.setCharAt(data.lastIndexOf('{'),',');//{..,..,..,..,..},..,..,..,
		data.remove(data.lastIndexOf('}'),1);//{..,..,..,..,..,..,..,..,	
		data.setCharAt(data.lastIndexOf(','),'}');//{..,..,..,..,..,..,..,..}
	}

	
	if(jetpackActive)
	{
		jetPack.doAction(data.c_str(), sensorJsonSize);
		

	}
	
	String jsonData="{\"state\":{\"reported\":";	
	jsonData+=data;//{"state":{"reported":{..,..,..,..,..,..,..,..}
	jsonData+=",\"desired\":null} }";//{"state":{"reported":{..,..,..,..,..,..,..,..},"desired" :null }  }
	
	mqtt.publish(jsonData.c_str());
	mqtt.mqttLoop();
	answer=mqtt.read();
	this->update(answer.c_str());	
				
!!!128645.cpp!!!	connect() : int
	if(WiFi.status() != WL_CONNECTED)
	{

		wifiManager.setConfigPortalTimeout(this->serverTimeOut);
		wifiManager.autoConnect("CoolBoard");

	}
	if(mqtt.state()!=0)
	{	

		mqtt.connect(this->getInterval()) ;

	}
	
	return(mqtt.state()); 
		
!!!146309.cpp!!!	getInterval() : uint16_t
	return(this->interval);
!!!128901.cpp!!!	printConf() : void
	Serial.println("Cool Board Conf");
	Serial.println(interval);
	Serial.println(sensorJsonSize);
	Serial.println(answerJsonSize);
	Serial.println(ireneActive);
	Serial.println(jetpackActive);
	Serial.println(externalSensorsActive);
	Serial.println(serverTimeOut);
	Serial.println(" ");

!!!146437.cpp!!!	sleep() : void
	if(this->station == 1)
	{
		ESP.deepSleep( ( (this->getInterval() )*1000 ) , WAKE_RF_DEFAULT );	
	}
	else
	{
		delay( this->getInterval() );	
	}
