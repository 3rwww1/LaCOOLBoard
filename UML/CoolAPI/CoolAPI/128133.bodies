class CoolFileSystem
!!!132101.cpp!!!	begin() : bool
	Serial.println("Entering CoolFileSystem.begin()");
	Serial.println();
	
	Serial.print("SPIFFS success ? ");
	Serial.println(SPIFFS.begin());
	Serial.println();
	
	return( SPIFFS.begin() );                                   //Initialize Filesystem

!!!132229.cpp!!!	updateConfigFiles(in answer : String, in JSON_SIZE : int) : bool
	Serial.println("Entering CoolFileSystem.updateConfigFiles");
	Serial.println();

	//String conversion to char*
	//char jsonRoot = new char(answer.length() + 1);
	//strcpy(jsonRoot, answer.c_str());
	//total json object	
	DynamicJsonBuffer jsonBuffer(JSON_SIZE);
	JsonObject& root = jsonBuffer.parseObject( answer.c_str() );
	
	if(! ( root.success() ))
	{
		Serial.println("failed to parse root ");
		Serial.println();
		return(false);
	}
	else
	{
		Serial.println("success to parse root ");
		Serial.println();	
	}
	
	Serial.println("input message is : ");
	root.printTo(Serial);
	Serial.println();

	//temp string
	String temp;

	//CoolBoard Configuration File

    	JsonObject& jsonCoolBoard=root["CoolBoard"];
	if(jsonCoolBoard.success())
	{
		File coolBoardConfig = SPIFFS.open("/coolBoardConfig.json", "w");	
		if(!coolBoardConfig)
		{	
			Serial.println("failed to write to coolBoardConfig.json");
			return(false);
		}
		Serial.println("CoolBoard Config");
		jsonCoolBoard.printTo(Serial);
		
		jsonCoolBoard.printTo(coolBoardConfig);
		
		coolBoardConfig.close();
	}
	else
	{
		Serial.println("failed to parse CoolBoard ");
	}		

	
	//Cool Board Sensors Configuration File
	DynamicJsonBuffer jsonSBoard;
    	JsonObject& jsonSensorsBoard=root["CoolSensorsBoard"];	
	if(jsonSensorsBoard.success())
	{	
		File coolBoardSensorsConfig = SPIFFS.open("/coolBoardSensorsConfig.json", "w");	
		if(!coolBoardSensorsConfig)
		{
			Serial.println("failed to write coolBoardSensors.json");
			return(false);
		}
		
		Serial.println("CoolBoardSensors Config");
		jsonSensorsBoard.printTo(coolBoardSensorsConfig);
		jsonSensorsBoard.printTo(Serial);
		coolBoardSensorsConfig.close();
	}
	else
	{
		Serial.println("failed to parse CoolSensorsBoard sensors ");	
	}
	
	
	
	//rtc configuration file
	DynamicJsonBuffer jsonR;
    	JsonObject& jsonRTC=root["rtc"];
	Serial.println("before config rtc json");
	jsonRTC.printTo(Serial);
	if(jsonRTC.success() )
	{
		File rtcConfig = SPIFFS.open("/rtcConfig.json", "w");	
		if(!rtcConfig)
		{
			Serial.println("failed to write rtcConfig.json");
			return(false);
		}
		Serial.println("RTC Config");
		jsonRTC.printTo(rtcConfig);
		jsonRTC.printTo(Serial);
		rtcConfig.close();
	
	}
	else
	{
		Serial.println("failed to parse rtc ");
	}

	
	
	
	
        //cool board led configuration
	DynamicJsonBuffer jsonLBoard;
    	JsonObject& jsonLedBoard=root["led"];
	Serial.println("before config Led json");
	jsonLedBoard.printTo(Serial);
	if(jsonLedBoard.success())
	{	
		File coolBoardLedConfig = SPIFFS.open("/coolBoardLedConfig.json", "w");	
		if(!coolBoardLedConfig)
		{
			Serial.println("failed to write led config");
			return(false);
		}
		Serial.println("CoolBoardLed Config");
		jsonLedBoard.printTo(coolBoardLedConfig);
		jsonLedBoard.printTo(Serial);
		coolBoardLedConfig.close();
	
	}
	else
	{
		Serial.println("failed to parse led");
	}
		

	

	//jetpack configuration
	DynamicJsonBuffer jsonJBoard;
    	JsonObject& jsonJetpack=root["jetPack"];
	Serial.println("before config jetpack json");
	jsonJetpack.printTo(Serial);
	if(jsonJetpack.success())
	{	
		File jetPackConfig = SPIFFS.open("/jetPackConfig.json", "w");	
		if(!jetPackConfig)
		{
			Serial.println("failed to write jetpack file");
			return(false);
		}
		Serial.println("jetpack Config");	
		jsonJetpack.printTo(jetPackConfig);
		jsonJetpack.printTo(Serial);
		jetPackConfig.close();
	}
	else
	{
		Serial.println("failed to parse jetpack");	
	}
	
	//irene configuration	
	DynamicJsonBuffer jsonIBoard;
    	JsonObject& jsonIrene=root["irene3000"];
	Serial.println("before config irene json");	
	jsonIrene.printTo(Serial);
	if(jsonIrene.success())
	{
		File irene3000Config = SPIFFS.open("/irene3000Config.json", "w");	
		if(!irene3000Config)
		{
			Serial.println("failed to write irene file");
			return(false);
		}
		Serial.println("irene3000 Config");
		jsonIrene.printTo(irene3000Config);
		jsonIrene.printTo(Serial);
		irene3000Config.close();
	
	}
	else
	{
		Serial.println("failed to parse irene");	
	}
	
	//external sensors
	DynamicJsonBuffer jsonESBoard;
    	JsonObject& jsonExternalSensors=root["externalSensors"];
	Serial.println("before config external Sensors json");
	jsonExternalSensors.printTo(Serial);
	if(jsonExternalSensors.success())
	{
		File externalSensorsConfig = SPIFFS.open("/externalSensorsConfig.json", "w");	
		if(!externalSensorsConfig)
		{
			Serial.println("failed to open external sensors file ");
			return(false);
		}
		Serial.println("externalSensors Config");
		jsonExternalSensors.printTo(externalSensorsConfig);
		jsonExternalSensors.printTo(Serial);
	
		externalSensorsConfig.close();

	}
	else
	{
		Serial.println("failed to parse external sensors");	
	}

	
	//mqtt config
	DynamicJsonBuffer jsonMQ;
    	JsonObject& jsonMQTT=root["mqtt"];
	Serial.println("before config mqtt json");
	jsonMQTT.printTo(Serial);
	if(jsonMQTT.success())
	{
		File mqttConfig = SPIFFS.open("/mqttConfig.json", "w");	
		if(!mqttConfig)
		{
			Serial.println("failed to open mqtt file ");		
			return(false);
		}
		Serial.println("mqtt config");
		jsonMQTT.printTo(mqttConfig);
		jsonMQTT.printTo(Serial);
		mqttConfig.close();
	}
	else
	{
		Serial.println("failed to parse mqtt");	
	}	
		
	return true;

!!!132357.cpp!!!	saveSensorData(in data : char, in Sensor_JSON_SIZE : int) : bool
	Serial.println("Entering CoolFileSystem.saveSensorData()");
	Serial.println();

	
	File sensorsData=SPIFFS.open("/sensorsData.json","a+");
	if(!sensorsData)
	{
		Serial.println("failed to append to /sensorsData.json");
		Serial.println();

		this->savedData=false;
		return (false);	
	}	

	DynamicJsonBuffer jsonBuffer(Sensor_JSON_SIZE);
	JsonObject& root = jsonBuffer.parseObject(data);

	if( root.success() )
	{
		root.printTo(sensorsData);
		sensorsData.close();

		Serial.println("saved data is : ");
		root.printTo(Serial);
		Serial.println();

		this->savedData=true;
		return (true);		
	}
	else
	{
		Serial.println("failed to parse json");
		this->savedData=false;
		return(false);
	}
	

!!!153349.cpp!!!	isDataSaved() : bool
	Serial.println("Entering CoolFileSystem.isDataSaved()");
	Serial.println();
	
	Serial.print("savedData : ");
	Serial.println(this->savedData);

	return( this->savedData );
!!!153477.cpp!!!	getSensorSavedData() : String
	Serial.println("Entering CoolFileSystem.getSensorSavedData()");
	Serial.println();

	//open sensors data file
	File sensorsData=SPIFFS.open("/sensorsData.json","r");
	
	if (!sensorsData)
	{
		Serial.println("Failed to read /sensorsData.json"); 
		return("failed to open file");
	}
	else
	{
		size_t size = sensorsData.size();

		// Allocate a buffer to store contents of the file.
		std::unique_ptr < char[] > buf(new char[size]);

		sensorsData.readBytes(buf.get(), size);

		DynamicJsonBuffer jsonBuffer;

		JsonObject & json = jsonBuffer.parseObject(buf.get());
		
		if (!json.success())
		{
			return("failed to parse json");
		}
		else
		{	
			//the return string
			String sensorDataString;
			
			//print the json to the string
			json.printTo(sensorDataString);
			
			//close the file
			sensorsData.close();

			//delete data in the file
			File sensorsData=SPIFFS.open("/sensorsData.json","w");
			if (!sensorsData)	
			{
				return("failed to delete data in the file");
			}

			sensorsData.close();
			
			//position the saved data flag to false
			this->savedData=false;	
		
			Serial.println("saved data : ");
			Serial.println(sensorDataString);
			Serial.println();

			//return the string
			return(sensorDataString);		
		}
		
		
	}

