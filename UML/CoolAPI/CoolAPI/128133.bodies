class CoolFileSystem
!!!132101.cpp!!!	begin() : bool

#if DEBUG == 1

	Serial.println( F("Entering CoolFileSystem.begin()") );
	Serial.println();	
	Serial.print( F("SPIFFS success ? ") );
	Serial.println(SPIFFS.begin());
	Serial.println();

#endif

	return( SPIFFS.begin() );                                   //Initialize Filesystem

!!!132229.cpp!!!	updateConfigFiles(in answer : String, in JSON_SIZE : int) : bool

#if DEBUG == 1

	Serial.println( F("Entering CoolFileSystem.updateConfigFiles") );
	Serial.println();
	
	Serial.println( F("input answer : ") );
	Serial.println(answer);
#endif
	//test
	char buffer[ answer.length()+2 ];
	answer.toCharArray( buffer, answer.length()+2  );
	//total json object	
	DynamicJsonBuffer jsonBuffer(JSON_SIZE);
	JsonObject& root = jsonBuffer.parseObject( buffer );

#if DEBUG == 1

	Serial.println( F("json object : ") );	
	root.printTo(Serial);

#endif

	if(! ( root.success() ))
	{
	
	#if DEBUG == 1

		Serial.println( F("failed to parse root ") );
		Serial.println();
	
	#endif

		return(false);
	}
	else
	{
	#if DEBUG == 1
		
		Serial.println( F("success to parse root ") );
		Serial.println();
		
	#endif	
	}
	
#if DEBUG == 1

	Serial.println( F("input message is : ") );
	root.printTo(Serial);
	Serial.println();

#endif
	//temp string
	String temp;

	//CoolBoard Configuration File

    	JsonObject& jsonCoolBoard=root["CoolBoard"];

#if DEBUG == 1

	Serial.println( F("before config CoolBoard json") );
	jsonCoolBoard.printTo(Serial);

#endif

	if(jsonCoolBoard.success())
	{
		File coolBoardConfig = SPIFFS.open("/coolBoardConfig.json", "w");	
		if(!coolBoardConfig)
		{	
		#if DEBUG == 1
			
			Serial.println( F("failed to write to coolBoardConfig.json") );

		#endif
			return(false);
		}
		
		jsonCoolBoard.printTo(coolBoardConfig);
		
		coolBoardConfig.close();


	#if DEBUG == 1

		Serial.println( F("CoolBoard Config") );
		jsonCoolBoard.printTo(Serial);
		Serial.println();
	
	#endif
		
	}
	else
	{
	
	#if DEBUG == 1 

		Serial.println( F("failed to parse CoolBoard ") );
	
	#endif

	}		

	
	//Cool Board Sensors Configuration File
    	JsonObject& jsonSensorsBoard=root["CoolSensorsBoard"];

#if DEBUG == 1 

	Serial.println( F("before config CoolSensorsBoard json") );
	jsonSensorsBoard.printTo(Serial);

#endif 
	
	if(jsonSensorsBoard.success())
	{	
		File coolBoardSensorsConfig = SPIFFS.open("/coolBoardSensorsConfig.json", "w");	
		if(!coolBoardSensorsConfig)
		{
		#if DEBUG == 1 
		
			Serial.println( F("failed to write coolBoardSensors.json") );

		#endif

			return(false);
		}
		
		jsonSensorsBoard.printTo(coolBoardSensorsConfig);
		coolBoardSensorsConfig.close();

	#if DEBUG == 1

		Serial.println("CoolBoardSensors Config");
		jsonSensorsBoard.printTo(Serial);
		Serial.println();

	#endif

	}
	else
	{

	#if DEBUG == 1

		Serial.println( F("failed to parse CoolSensorsBoard sensors ") );	
	
	#endif

	}
	
	
	
	//rtc configuration file
    	JsonObject& jsonRTC=root["rtc"];

#if DEBUG == 1 
	
	Serial.println( F("before config rtc json") );
	jsonRTC.printTo(Serial);

#endif
	if(jsonRTC.success() )
	{
		File rtcConfig = SPIFFS.open("/rtcConfig.json", "w");	
		if(!rtcConfig)
		{
		
		#if DEBUG == 1 

			Serial.println( F("failed to write rtcConfig.json") );

		#endif

			return(false);
		}

		jsonRTC.printTo(rtcConfig);
		rtcConfig.close();

	#if DEBUG == 1 

		Serial.println( F("RTC Config") );
		jsonRTC.printTo(Serial);
		Serial.println();
	
	#endif

	
	}
	else
	{
	
	#if DEBUG == 1 

		Serial.println( F("failed to parse rtc ") );
	
	#endif

	}

	
	
	
	
        //cool board led configuration
    	JsonObject& jsonLedBoard=root["led"];
	
#if DEBUG == 1 

	Serial.println( F("before config Led json") );
	jsonLedBoard.printTo(Serial);

#endif

	if(jsonLedBoard.success())
	{	
		File coolBoardLedConfig = SPIFFS.open("/coolBoardLedConfig.json", "w");	
		if(!coolBoardLedConfig)
		{
		
		#if DEBUG == 1 
		
			Serial.println( F("failed to write led config") );
		
		#endif

			return(false);
		}
		
		jsonLedBoard.printTo(coolBoardLedConfig);
		coolBoardLedConfig.close();


	#if DEBUG == 1 

		Serial.println( F("CoolBoardLed Config") );		
		jsonLedBoard.printTo(Serial);
		Serial.println();
	
	#endif

	
	}
	else
	{
	
	#if DEBUG == 1 

		Serial.println( F("failed to parse led") );
	
	#endif 

	}
		

	

	//jetpack configuration
    	JsonObject& jsonJetpack=root["jetPack"];

#if DEBUG == 1 

	Serial.println( F("before config jetpack json") );
	jsonJetpack.printTo(Serial);

#endif

	if(jsonJetpack.success())
	{	
		File jetPackConfig = SPIFFS.open("/jetPackConfig.json", "w");	
		if(!jetPackConfig)
		{
		#if DEBUG == 1

			Serial.println( F("failed to write jetpack file") );
		
		#endif

			return(false);
		}

		jsonJetpack.printTo(jetPackConfig);
		jetPackConfig.close();

	#if DEBUG == 1

		Serial.println( F("jetpack Config") );	
		jsonJetpack.printTo(Serial);
		Serial.println();
	
	#endif

	}

	else
	{
	
	#if DEBUG == 1 

		Serial.println( F("failed to parse jetpack") );	
	
	#endif

	}
	
	//irene configuration	
    	JsonObject& jsonIrene=root["irene3000"];
	
#if DEBUG == 1 

	Serial.println( F("before config irene json") );	
	jsonIrene.printTo(Serial);

#endif 

	if(jsonIrene.success())
	{
		File irene3000Config = SPIFFS.open("/irene3000Config.json", "w");	
		if(!irene3000Config)
		{

		#if DEBUG == 1 

			Serial.println( F("failed to write irene file") );
		
		#endif

			return(false);
		}

		jsonIrene.printTo(irene3000Config);
		irene3000Config.close();
	
	#if DEBUG == 1 
		
		Serial.println( F("irene3000 Config") );
		jsonIrene.printTo(Serial);
		Serial.println();
	
	#endif
	
	}
	else
	{
	
	#if DEBUG == 1 

		Serial.println( F("failed to parse irene") );	
	
	#endif 


	}
	
	//external sensors
    	JsonObject& jsonExternalSensors=root["externalSensors"];

#if DEBUG == 1 

	Serial.println( F("before config external Sensors json") );
	jsonExternalSensors.printTo(Serial);

#endif

	if(jsonExternalSensors.success())
	{
		File externalSensorsConfig = SPIFFS.open("/externalSensorsConfig.json", "w");	
		if(!externalSensorsConfig)
		{
		
		#if DEBUG == 1 

			Serial.println( F("failed to open external sensors file ") );
		
		#endif 

			return(false);
		}

		jsonExternalSensors.printTo(externalSensorsConfig);	
		externalSensorsConfig.close();

#if DEBUG == 1 
		
		Serial.println( F("externalSensors Config") );
		jsonExternalSensors.printTo(Serial);
		Serial.println();

#endif 


	}

	else
	{	

	#if DEBUG == 1
		
		Serial.println( F("failed to parse external sensors") );

	#endif


	}

	
	//mqtt config
    	JsonObject& jsonMQTT=root["mqtt"];
	
#if DEBUG == 1 

	Serial.println( F("before config mqtt json") );
	jsonMQTT.printTo(Serial);

#endif

	if(jsonMQTT.success())
	{
		File mqttConfig = SPIFFS.open("/mqttConfig.json", "w");	
		if(!mqttConfig)
		{
		
		#if DEBUG == 1 

			Serial.println( F("failed to open mqtt file ") );
		
		#endif
		
			return(false);
		}
			
		jsonMQTT.printTo(mqttConfig);
		mqttConfig.close();

#if DEBUG == 1 

		Serial.println( F("mqtt config") );
		jsonMQTT.printTo(Serial);
		Serial.println();

#endif

	}
	else
	{

	#if DEBUG == 1 

		Serial.println( F("failed to parse mqtt") );
	
	#endif

	
	}	

	//wifi config
    	JsonObject& jsonWifi=root["wifi"];
	
#if DEBUG == 1 

	Serial.println( F("before config wifi json") );
	jsonWifi.printTo(Serial);

#endif

	if(jsonWifi.success())
	{
		File wifiConfig = SPIFFS.open("/wifiConfig.json", "w");	
		if(!wifiConfig)
		{
		
		#if DEBUG == 1 

			Serial.println( F("failed to open wifi file ") );
		
		#endif
		
			return(false);
		}

		jsonWifi.printTo(wifiConfig);
		wifiConfig.close();

#if DEBUG == 1 

		Serial.println( F("wifi config") );
		jsonWifi.printTo(Serial);

#endif
	}
	else
	{

	#if DEBUG == 1 

		Serial.println( F("failed to parse wifi") );
	
	#endif

	
	}	
		
	return true;

!!!132357.cpp!!!	saveSensorData(in data : char, in Sensor_JSON_SIZE : int) : bool

#if DEBUG == 1

	Serial.println( F("Entering CoolFileSystem.saveSensorData()") );
	Serial.println();

#endif
	
	File sensorsData=SPIFFS.open("/sensorsData.json","a+");
	if(!sensorsData)
	{
	
	#if DEBUG == 1
	
		Serial.println( F("failed to append to /sensorsData.json") );
		Serial.println();
	
	#endif

		this->savedData=false;
		return (false);	
	}	

	DynamicJsonBuffer jsonBuffer(Sensor_JSON_SIZE);
	JsonObject& root = jsonBuffer.parseObject(data);

	if( root.success() )
	{
		root.printTo(sensorsData);
		sensors.Data.println();
		sensorsData.close();

	#if DEBUG == 1
		sensorsData=SPIFFS.open("/sensorsData.json","r");
		
		if(!sensorsData)
		{
			Serial.println(F("failed to reopen /sensorsData.json"));
			return(false);				
		}
	
		Serial.println( F("saved data is : ") );
		root.printTo(Serial);
		Serial.println();

		Serial.println(F("/sensorsData.json") );
		while (sensorsData.available()) 
		{
			Serial.println(sensorsData.readString()) ;
		}
		
		Serial.println();
		
		sensorsData.close();
	
	#endif

		this->saveSensorDataCSV(data,Sensor_JSON_SIZE);		

		this->savedData=true;
		return (true);		
	}
	else
	{
	
	#if DEBUG == 1

		Serial.println( F("failed to parse json") );
	
	#endif

		this->savedData=false;
		return(false);
	}
	

!!!181125.cpp!!!	saveSensorDataCSV(in data : char, in Sensor_JSON_SIZE : int) : bool
#if DEBUG == 1

	Serial.println( F("Entering CoolFileSystem.saveSensorDataCSV()") );
	Serial.println();

#endif
	//parsing json
	DynamicJsonBuffer jsonBuffer(Sensor_JSON_SIZE);
	JsonObject& root = jsonBuffer.parseObject(data);
	String header="",values="";
	
	//if json parse success
	if( root.success() )
	{		
		for (auto kv : root) 
		{
			//print the header(json keys ) to header string
			header+=kv.key;
			header+=',';
			
			//print the values to header string
			values+=( kv.value.as<char*>() );
			values+=',';
		}

		header.remove(header.lastIndexOf(','), 1);
		values.remove(values.lastIndexOf(','), 1);		
	
	#if DEBUG == 1
	
		Serial.println( F(" data is : ") );
		root.printTo(Serial);
		Serial.println();
		
		Serial.println(F(" header is :" ) ) ;
		Serial.println(header);
		Serial.println(F(" values are : "));
		Serial.println(values);
	
	#endif
	
	}
	//failed to parse json
	else
	{
	
	#if DEBUG == 1

		Serial.println( F("failed to parse json") );
	
	#endif

		return(false);
	}

	//check if file exists
	File sensorsData=SPIFFS.open("/sensorsData.csv","r");
	
	//file doesn't exist
	if(!sensorsData)
	{
	
	#if DEBUG == 1
	
		Serial.println( F("/sensorsData.csv not found") );
		Serial.println( F("creating /sensorsData.csv") );
		Serial.println();
	
	#endif
		//create file
		sensorsData=SPIFFS.open("/sensorsData.csv","w");
		
		if(!sensorsData)
		{

		#if DEBUG == 1
		
			Serial.println( F("failed to create /sensorsData.csv") );
			Serial.println();
		
		#endif
		
			return(false);

		}
		
		//print the header(json keys ) to the CSV file
		sensorsData.println(header);

		//print the values to the CSV file
		sensorsData.println(values);
		
		sensorsData.close();
	
	#if DEBUG == 1

		sensorsData=SPIFFS.open("/sensorsData.csv","r");
		
		if(!sensorsData)
		{
			Serial.println(F("failed to reopen /sensorsData.csv "));
			return(false);		
		}

		Serial.println( F("/sensorsData.csv : ") );

		while (sensorsData.available()) 
		{
  			Serial.print(sensorsData.readString()) ;
		}
		Serial.println();

		//close the file
		sensorsData.close();

	#endif
		

		
		return(true);
		
	}

	//file exist
	else
	{

	#if DEBUG == 1
	
		Serial.println( F("/sensorsData.csv  found") );
		Serial.println( F("appending to /sensorsData.csv") );
		Serial.println();
	
	#endif

		//append to file
		sensorsData=SPIFFS.open("/sensorsData.csv","a");
		
		if(!sensorsData)
		{
		
		#if DEBUG == 1
			
			Serial.println( F("failed to open /sensorsData.csv") );
			Serial.println();

		#endif
			
			return(false);
		
		}

		//print the values to the CSV file
		sensorsData.println(values);
		
		sensorsData.close();

	#if DEBUG == 1

		sensorsData=SPIFFS.open("/sensorsData.csv","r");
		
		if(!sensorsData)
		{
			Serial.println(F("failed to reopen /sensorsData.csv "));
			return(false);		
		}

		
		Serial.println( F("/sensorsData.csv : ") );

		while (sensorsData.available()) 
		{
  			Serial.println(sensorsData.readString()) ;
		}
		
		Serial.println();
		
		sensorsData.close();
		
	#endif		
		
		return(true);
	
	}	



!!!153349.cpp!!!	isDataSaved() : bool

#if DEBUG == 1 

	Serial.println( F("Entering CoolFileSystem.isDataSaved()") );
	Serial.println();
	Serial.print( F("savedData : ") );
	Serial.println(this->savedData);

#endif

	return( this->savedData );
!!!153477.cpp!!!	getSensorSavedData() : String

#if DEBUG == 1 

	Serial.println( F("Entering CoolFileSystem.getSensorSavedData()") );
	Serial.println();

#endif

	//open sensors data file
	File sensorsData=SPIFFS.open("/sensorsData.json","r");
	
	if (!sensorsData)
	{

	#if DEBUG == 1 

		Serial.println( F("Failed to read /sensorsData.json") );

	#endif
 
		return("failed to open file");
	}

	else
	{
		size_t size = sensorsData.size();

		// Allocate a buffer to store contents of the file.
		std::unique_ptr < char[] > buf(new char[size]);

		sensorsData.readBytes(buf.get(), size);

		DynamicJsonBuffer jsonBuffer;

		JsonObject & json = jsonBuffer.parseObject(buf.get());
		
		if (!json.success())
		{

		#if DEBUG == 1
		
			Serial.println( F("failed to parse json") );
		
		#endif
		
			return("failed to parse json");
		}
		else
		{	
			//the return string
			String sensorDataString;
			
			//print the json to the string
			json.printTo(sensorDataString);
			
			//close the file
			sensorsData.close();

			//delete data in the file
			File sensorsData=SPIFFS.open("/sensorsData.json","w");
			File sensorsDataCSV=SPIFFS.open("/sensorsDataCSV.json","w");
			if( (!sensorsData)||(!sensorsDataCSV) )	
			{
			#if DEBUG == 1
		
				Serial.println( F("failed to delete data in the file") );
		
			#endif

				return("failed to delete data in the file");
			}

			sensorsData.close();
			sensorsDataCSV.close();

			//position the saved data flag to false
			this->savedData=false;	
			
		#if DEBUG == 1 

			Serial.println( F("saved data : ") );
			Serial.println(sensorDataString);
			Serial.println();
		
		#endif

			//return the string
			return(sensorDataString);		
		}
		
		
	}

