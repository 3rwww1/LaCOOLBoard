class Irene3000
!!!137349.cpp!!!	begin() : void

#if DEBUG == 1 

	Serial.println( F("Entering Irene3000.begin()") );
	Serial.println();

#endif

	this->ads.begin();
!!!137477.cpp!!!	config() : bool

#if DEBUG == 1 

	Serial.println( F("Entering Irene3000.config()") );
	Serial.println();

#endif

	File irene3000Config = SPIFFS.open("/irene3000Config.json", "r");

	if (!irene3000Config) 
	{
	
	#if DEBUG == 1 

		Serial.println( F("failed to read /irene3000Config.json") );
		Serial.println();
	
	#endif

		return(false);
	}
	else
	{
		size_t size = irene3000Config.size();
		// Allocate a buffer to store contents of the file.
		std::unique_ptr<char[]> buf(new char[size]);
	        uint16_t tempGain;
		irene3000Config.readBytes(buf.get(), size);
		DynamicJsonBuffer jsonBuffer;
		JsonObject& json = jsonBuffer.parseObject(buf.get());
		if (!json.success()) 
		{
		
		#if DEBUG == 1 

			Serial.println( F("failed to parse json ") );
			Serial.println();
		
		#endif
			
			return(false);
		} 
		else
		{
		
		#if DEBUG == 1 
 	
			Serial.println( F("read configuration file ") );
			json.printTo(Serial);
			Serial.println();
		
		#endif 
			
			if(json["ireneJsonSize"].success() )
			{
				this->ireneJsonSize=json["ireneJsonSize"];
			}
			else
			{
				this->ireneJsonSize=this->ireneJsonSize;
			}
			json["ireneJsonSize"]=this->ireneJsonSize;

			
			if(json["waterTemp"]["active"].success() )
			{			
				this->waterTemp.active = json["waterTemp"]["active"]; 
			}
			else
			{
				this->waterTemp.active=this->waterTemp.active;
			}
			json["waterTemp"]["active"]=this->waterTemp.active;

			
			if(json["waterTemp"]["gain"].success() )
			{			
				tempGain = json["waterTemp"]["gain"]; 
				this->waterTemp.gain=this->gainConvert(tempGain);
			}
			else
			{
				this->waterTemp.gain=this->waterTemp.gain;
			}
			json["waterTemp"]["gain"]=this->waterTemp.gain;

			
			if(json["phProbe"]["active"].success())
			{
				this->phProbe.active=json["phProbe"]["active"];
			}
			else
			{
				this->phProbe.active=this->phProbe.active;
			}
			json["phProbe"]["active"]=this->phProbe.active;
	
			
			if(json["phProbe"]["gain"].success() )
			{		
				tempGain=json["phProbe"]["gain"];
				this->phProbe.gain=this->gainConvert(tempGain);			
			}
			else
			{
				this->phProbe.gain=this->phProbe.gain;
			}
			json["phProbe"]["gain"]=this->phProbe.gain;

			
			if(json["adc2"]["active"].success() )
			{
				this->adc2.active=json["adc2"]["active"];
			}
			else
			{
				this->adc2.active=this->adc2.active;
			}
			json["adc2"]["active"]=this->adc2.active;

			
			if(json["adc2"]["gain"].success() )
			{			
				tempGain=json["adc2"]["gain"];
				this->adc2.gain=this->gainConvert(tempGain);
			}
			else
			{
				this->adc2.gain=this->adc2.gain;
			}
			json["adc2"]["gain"]=this->adc2.gain;

			
			if(json["adc2"]["type"].success() )
			{
				this->adc2.type=json["adc2"]["type"].as<String>(); 
			}
			else
			{
				this->adc2.type=this->adc2.type;
			}
			json["adc2"]["type"]=this->adc2.type;

			irene3000Config.close();
			irene3000Config = SPIFFS.open("/irene3000Config.json", "w");

			if(!irene3000Config)
			{
			
			#if DEBUG == 1

				Serial.println( F("failed to write to /irene3000Config.json") );
				Serial.println();
			
			#endif 

				return(false);
			}

			json.printTo(irene3000Config);
			irene3000Config.close();
			
		#if DEBUG == 1 

			Serial.println( F("saved configuration file :")  );
			json.printTo(Serial);
			Serial.println();
		
		#endif

			return(true); 
		}
	}	

!!!137605.cpp!!!	printConf() : void

#if DEBUG == 1 

	Serial.println( F("Entering Irene3000.printConf()") );
	Serial.println();

#endif 

	Serial.println("Irene Configuration ");

	Serial.print("waterTemp.active : ");
	Serial.println(waterTemp.active);

	Serial.print("waterTemp.gain : ");
	Serial.println(waterTemp.gain,HEX);	

	Serial.print("phProbe.active : ");
	Serial.println(phProbe.active);

	Serial.print("phProbe.gain : ");
	Serial.println(phProbe.gain,HEX);
	
	Serial.print("adc2.active : ");
	Serial.println(adc2.active);

	Serial.print("adc2.gain : ");
	Serial.println(adc2.gain,HEX);

	Serial.print("adc2.type : ");
	Serial.println(adc2.type);

	Serial.println();
!!!137733.cpp!!!	read() : String

#if DEBUG == 1 
	
	Serial.println( F("Entering Irene3000.read()") );
	Serial.println();

#endif 

	String data;
	DynamicJsonBuffer jsonBuffer(ireneJsonSize);
	JsonObject& root = jsonBuffer.createObject();
	if( !( root.success()) )
	{
	
	#if DEBUG == 1 

		Serial.println( F("failed to create json") );
	
	#endif 

		return("");
	}

		
	if(waterTemp.active)
	{
		root["waterTemp"] = this->readTemp(waterTemp.gain);

		if(phProbe.active)
		{
			root["ph"] =this->readPh(phProbe.gain) ;
		}

	}

	if(adc2.active)
	{
		root[adc2.type] =this->readADSChannel2(adc2.gain);
	}
	
	root.printTo(data);
	
#if DEBUG == 1 

	Serial.println( F("Irene data : ") );
	Serial.println(data);
	Serial.println();

#endif
	
	return(data);
	
	

!!!137861.cpp!!!	readButton(in gain : adsGain_t) : int

#if DEBUG == 1 

	Serial.println( F("Entering Irene3000.readButton()" ) );
	Serial.println();

#endif 

	this->setGain(gain);

#if DEBUG == 1
	
	Serial.println( F("button value : ") );
	Serial.println(this->ads.readADC_SingleEnded(button) );

#endif 

	return( this->ads.readADC_SingleEnded(button) );
	
!!!137989.cpp!!!	setGain(in gain : adsGain_t) : void

#if DEBUG == 1	

	Serial.println( F("Entering Irene3000.setGain()") );
	Serial.println();

#endif

	this->ads.setGain(gain);
!!!138117.cpp!!!	readADSChannel2(in gain : adsGain_t) : int
	

#if DEBUG == 1 
	
	Serial.println( F("Entering Irene3000.readADSChannel2()") );
	Serial.println();

#endif

	this->setGain(gain);

#if DEBUG == 1 
	
	Serial.println( F("adc2 value : ") );
	Serial.println(this->ads.readADC_SingleEnded(freeAdc) );
	Serial.println();

#endif

	return( this->ads.readADC_SingleEnded(freeAdc) ) ;
!!!138245.cpp!!!	readPh(in gain : adsGain_t) : float

#if DEBUG == 1 

	Serial.println( F("Entering Irene3000.readPh()") );
	Serial.println();

#endif 

	this->setGain(gain);

	double Voltage =  gain * ( ads.readADC_SingleEnded(ph) ) / ADC_MAXIMUM_VALUE;

	float miliVolts = Voltage * 1000;
	float temporary = ((((vRef * (float)params.pH7Cal) / 32767) * 1000) - miliVolts) / opampGain;

#if DEBUG == 1 

	Serial.println( F("ph is : ") );
	Serial.println( 7 - (temporary / params.pHStep) ) ;

#endif 

	return( 7 - (temporary / params.pHStep) );

!!!138373.cpp!!!	readTemp(in gain : adsGain_t) : double

#if DEBUG == 1 

	Serial.println( F("Entering Irene3000.readTemp()") );
	Serial.println();

#endif

	const double A = 3.9083E-3;
	const double B = -5.775E-7;
	double T;

	this->setGain(gain);
	double adc0 = ads.readADC_SingleEnded(temp);


	double R = ( ( adc0 * V_GAIN_8 ) / 0.095 ) / 1000 ;

	T = 0.0 - A;
	T += sqrt((A * A) - 4.0 * B * (1.0 - R));
	T /= (2.0 * B);

	if (T > 0 && T < 200) 
	{

	#if DEBUG == 1 

		Serial.print( F(" temperature : ") );
		Serial.println(T);
		Serial.println();
	
	#endif 
		if(isnan(T))
		{
			return(-300);			
		}

		return T;
	}
	else 
	{
		T = 0.0 - A;
		T -= sqrt((A * A) - 4.0 * B * (1.0 - R));
		T /= (2.0 * B);
	
	#if DEBUG == 1 
	
		Serial.println( F("temperature : ") );
		Serial.println(T);
		Serial.println();
	
	#endif
		if(isnan(T))
		{
			return(-400);			
		}

		return T;
	}

!!!138501.cpp!!!	resetParams(in  : void) : void

#if DEBUG == 1 

	Serial.println( F("Entering Irene3000.resetParams()") );
	Serial.println();

#endif 

	//Restore to default set of parameters!
	params.WriteCheck = Write_Check;
	params.pH7Cal = 16384; //assume ideal probe and amp conditions 1/2 of 4096
	params.pH4Cal = 8192; //using ideal probe slope we end up this many 12bit units away on the 4 scale
	params.pHStep = 59.16;//ideal probe slope


!!!138629.cpp!!!	calibratepH7(in gain : adsGain_t) : void

#if DEBUG == 1 

	Serial.println( F("Entering Irene3000.calibratepH7() ") );
	Serial.println();

#endif 

  	this->setGain(gain);
        
	this->params.pH7Cal = ads.readADC_SingleEnded(ph);
 
	this->calcpHSlope();


!!!138757.cpp!!!	calibratepH4(in gain : adsGain_t) : void

#if DEBUG == 1 

	Serial.println( F("Entering Irene3000.calibraph4()") );
	Serial.println();

#endif 
	
	this->setGain(gain);

	this->params.pH4Cal =  ads.readADC_SingleEnded(ph);

	this->calcpHSlope();



!!!138885.cpp!!!	calcpHSlope() : void

#if DEBUG == 1 

	Serial.println( F("Entering Irene3000.calcpHSlope()") );
	Serial.println();

#endif 

	params.pHStep = ((((vRef * (float)(params.pH7Cal - params.pH4Cal)) / 32767) * 1000) / opampGain) / 3;

 
!!!139013.cpp!!!	gainConvert(in tempGain : uint16_t) : adsGain_t

#if DEBUG == 1 

	Serial.println( F("Entering Irene3000.gainConvert()") );
	Serial.println();

#endif 
	
	switch(tempGain)
	{
		case(2/3): return(GAIN_TWOTHIRDS);
		case(1): return (GAIN_ONE);
		case(2) : return(GAIN_TWO);
		case(4): return(GAIN_FOUR) ;   
		case(8):return(GAIN_EIGHT)  ;  
		case(16):return(GAIN_SIXTEEN); 	
	}



