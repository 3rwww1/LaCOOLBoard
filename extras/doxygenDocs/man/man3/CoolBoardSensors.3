.TH "CoolBoardSensors" 3 "Thu Aug 17 2017" "CoolBoardAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoolBoardSensors \- This class handles the On-Board Sensors\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolBoardSensors\&.h>\fP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBairActive\fP"
.br
.ti -1c
.RI "struct \fBlightActive\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBCoolBoardSensors\fP ()"
.br
.ti -1c
.RI "void \fBbegin\fP ()"
.br
.ti -1c
.RI "String \fBread\fP ()"
.br
.ti -1c
.RI "void \fBallActive\fP ()"
.br
.ti -1c
.RI "void \fBend\fP ()"
.br
.ti -1c
.RI "bool \fBconfig\fP ()"
.br
.ti -1c
.RI "void \fBprintConf\fP ()"
.br
.ti -1c
.RI "void \fBsetEnvSensorSettings\fP (uint8_t commInterface=\fBI2C_MODE\fP, uint8_t I2CAddress=0x76, uint8_t runMode=3, uint8_t tStandby=0, uint8_t filter=0, uint8_t tempOverSample=1, uint8_t pressOverSample=1, uint8_t humidOverSample=1)"
.br
.ti -1c
.RI "float \fBreadVBat\fP ()"
.br
.ti -1c
.RI "float \fBreadMoisture\fP ()"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBCoolSI114X\fP \fBlightSensor\fP"
.br
.ti -1c
.RI "\fBBME280\fP \fBenvSensor\fP"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "struct \fBCoolBoardSensors::lightActive\fP \fBlightDataActive\fP"
.br
.ti -1c
.RI "struct \fBCoolBoardSensors::airActive\fP \fBairDataActive\fP"
.br
.ti -1c
.RI "const int \fBEnMoisture\fP = 13"
.br
.ti -1c
.RI "const int \fBAnMplex\fP = 12"
.br
.ti -1c
.RI "bool \fBvbatActive\fP =0"
.br
.ti -1c
.RI "bool \fBsoilMoistureActive\fP =0"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class handles the On-Board Sensors\&. 
.PP
Definition at line 24 of file CoolBoardSensors\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "CoolBoardSensors::CoolBoardSensors ()"
\fBCoolBoardSensors::CoolBoardSensors()\fP: This Constructor is provided to init the different used pins 
.PP
Definition at line 25 of file CoolBoardSensors\&.cpp\&.
.PP
.nf
26 {
27 
28 #if DEBUG == 1
29 
30     Serial\&.println( F("Entering CoolBoardSensors Constructor") );
31     Serial\&.println();
32 
33 #endif
34     
35     pinMode(AnMplex, OUTPUT);                //Declare Analog Multiplexer OUTPUT
36     pinMode(EnMoisture, OUTPUT);             //Declare Moisture enable Pin
37     digitalWrite(EnMoisture, HIGH);          //Prevent Wearing on the soil moisture fork
38 
39 
40 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void CoolBoardSensors::allActive ()"
\fBCoolBoardSensors::allActive()\fP: This method is provided to allow activation of all the sensor board sensors without passing by the configuration file/method 
.PP
Definition at line 49 of file CoolBoardSensors\&.cpp\&.
.PP
.nf
50 {
51 
52 #if DEBUG == 1 
53 
54     Serial\&.println( F("Entering CoolBoardSensors\&.allActive()") );
55     Serial\&.println();
56 
57 #endif
58     
59     this->lightDataActive\&.visible=1;
60     this->lightDataActive\&.ir=1;
61     this->lightDataActive\&.uv=1;  
62 
63     this->airDataActive\&.temperature=1;
64     this->airDataActive\&.humidity=1;
65     this->airDataActive\&.pressure=1;
66 
67 
68     this->vbatActive=1;
69 
70     this->soilMoistureActive=1;
71     
72 
73 
74 }
.fi
.SS "void CoolBoardSensors::begin ()"
\fBCoolBoardSensors::begin()\fP: This method is provided to start the sensors that are on the sensor board 
.PP
Definition at line 82 of file CoolBoardSensors\&.cpp\&.
.PP
.nf
83 {  
84 
85 #if DEBUG == 1 
86      
87     Serial\&.println( F("Entering CoolBoardSensors\&.begin()") );
88     Serial\&.println();
89 
90 #endif
91 
92     while (!lightSensor\&.Begin()) 
93     {
94     
95     #if DEBUG == 1
96 
97         Serial\&.println( F("Si1145 is not ready!  1 second") );
98 
99     #endif
100 
101         delay(1000);
102     }
103      
104     this->setEnvSensorSettings();
105     delay(10);  //Make sure sensor had enough time to turn on\&. BME280 requires 2ms to start up\&.
106     this->envSensor\&.begin();
107     delay(10);  //Make sure sensor had enough time to turn on\&. BME280 requires 2ms to start up\&.
108 
109 #if DEBUG == 1 
110     
111     Serial\&.print( F("BME280 begin answer is :") );
112     Serial\&.println(envSensor\&.begin(), HEX);
113     Serial\&.println();
114 
115 #endif
116 
117 #if DEBUG == 0
118 
119     Serial\&.println( F("Onboard Sensors : OK"));
120     Serial\&.println();
121 
122 #endif
123 
124 }
.fi
.SS "bool CoolBoardSensors::config ()"
\fBCoolBoardSensors::config()\fP: This method is provided to configure the sensor board : -activate 1 -deactivate 0
.PP
\fBReturns:\fP
.RS 4
true if configuration is successful, false otherwise 
.RE
.PP

.PP
Definition at line 248 of file CoolBoardSensors\&.cpp\&.
.PP
.nf
249 {
250 
251 #if DEBUG == 1
252 
253     Serial\&.println( F("Entering CoolBoardSensors\&.config()") );
254     Serial\&.println();
255 
256 #endif
257 
258 #if DEBUG == 0
259 
260     Serial\&.println( F("Reading Sensor Configuration\&.\&.\&."));
261 
262 #endif
263     //read config file
264     //update data
265     File coolBoardSensorsConfig = SPIFFS\&.open("/coolBoardSensorsConfig\&.json", "r");
266 
267     if (!coolBoardSensorsConfig) 
268     {
269     
270         Serial\&.println( F("failed to read /coolBoardSensorsConfig\&.json") );
271         Serial\&.println();
272 
273         return(false);
274     }
275     else
276     {
277         size_t size = coolBoardSensorsConfig\&.size();
278         // Allocate a buffer to store contents of the file\&.
279         std::unique_ptr<char[]> buf(new char[size]);
280 
281         coolBoardSensorsConfig\&.readBytes(buf\&.get(), size);
282         DynamicJsonBuffer jsonBuffer;
283         JsonObject& json = jsonBuffer\&.parseObject(buf\&.get());
284         if (!json\&.success()) 
285         {
286 
287             Serial\&.println( F("failed to parse coolBoardSensorsConfig json") );
288             Serial\&.println();
289     
290             return(false);
291         } 
292         else
293         {
294 
295         #if DEBUG == 1
296 
297             Serial\&.println( F("Configuration Json is :") );
298             json\&.printTo(Serial);
299             Serial\&.println();
300 
301             Serial\&.print(F("jsonBuffer size: "));
302             Serial\&.println(jsonBuffer\&.size());
303             Serial\&.println();
304         
305         #endif
306             
307             if(json["BME280"]["temperature"]\&.success() )
308             {           
309                 this->airDataActive\&.temperature=json["BME280"]["temperature"];
310             }
311             else
312             {
313                 this->airDataActive\&.temperature=this->airDataActive\&.temperature;          
314             }
315             json["BME280"]["temperature"]=this->airDataActive\&.temperature;
316             
317             
318             if(json["BME280"]["humidity"]\&.success() )
319             {           
320             
321                 this->airDataActive\&.humidity=json["BME280"]["humidity"];
322             }
323             else
324             {
325                 this->airDataActive\&.humidity=this->airDataActive\&.humidity;
326             }
327             json["BME280"]["humidity"]=this->airDataActive\&.humidity;
328             
329             
330             if(json["BME280"]["pressure"]\&.success() )
331             {
332                 this->airDataActive\&.pressure=json["BME280"]["pressure"];
333             }
334             else
335             {
336                 this->airDataActive\&.pressure=this->airDataActive\&.pressure;
337             }
338             json["BME280"]["pressure"]=this->airDataActive\&.pressure;
339 
340             
341             if(json["SI114X"]["visible"]\&.success() )
342             {
343                 this->lightDataActive\&.visible=json["SI114X"]["visible"];
344             }
345             else
346             {
347                 this->lightDataActive\&.visible=this->lightDataActive\&.visible;
348             }
349             json["SI114X"]["visible"]=this->lightDataActive\&.visible;
350             
351             
352             if(json["SI114X"]["ir"]\&.success() )
353             {           
354                 this->lightDataActive\&.ir=json["SI114X"]["ir"];
355             }
356             else
357             {
358                 this->lightDataActive\&.ir=this->lightDataActive\&.ir;
359             }
360             json["SI114X"]["ir"]=this->lightDataActive\&.ir;
361 
362             
363             if(json["SI114X"]["uv"]\&.success() )          
364             {           
365                 this->lightDataActive\&.uv=json["SI114X"]["uv"];
366             }
367             else
368             {
369                 this->lightDataActive\&.uv=this->lightDataActive\&.uv;
370             }
371             json["SI114X"]["uv"]=this->lightDataActive\&.uv;
372 
373 
374             if(json["vbat"]\&.success() )
375             {
376                 this->vbatActive=json["vbat"];
377             }
378             else
379             {
380                 this->vbatActive=this->vbatActive;
381             }
382             json["vbat"]=this->vbatActive;
383 
384             
385             if(json["soilMoisture"]\&.success() )
386             {           
387                 this->soilMoistureActive= json["soilMoisture"];
388             }
389             else
390             {
391                 this->soilMoistureActive=this->soilMoistureActive;
392             }
393             json["soilMoisture"]=this->soilMoistureActive;
394 
395             coolBoardSensorsConfig\&.close();          
396             coolBoardSensorsConfig = SPIFFS\&.open("/coolBoardSensorsConfig\&.json", "w");            
397             if(!coolBoardSensorsConfig)
398             {
399 
400                 Serial\&.println( F("failed to write to /coolBoardSensorsConfig\&.json") );
401                 Serial\&.println();
402 
403                 return(false);          
404             }  
405 
406             json\&.printTo(coolBoardSensorsConfig);
407             coolBoardSensorsConfig\&.close();          
408             
409         #if DEBUG == 1
410 
411             Serial\&.println( F("Saved Configuration Json is : ") );
412             json\&.printTo(Serial);
413             Serial\&.println();
414         
415         #endif
416 
417         #if DEBUG == 0
418             Serial\&.println( F("Configuration loaded : OK"));
419         #endif
420 
421             return(true); 
422         }
423     }   
424 
425 }
.fi
.SS "void CoolBoardSensors::end ()"
\fBCoolBoardSensors::end()\fP: This method is provided to end the sensors on the sensor board 
.PP
Definition at line 131 of file CoolBoardSensors\&.cpp\&.
.PP
.nf
132 {
133 
134 #if DEBUG == 1  
135     Serial\&.println( F("Entering CoolBoardSensors\&.end()") );
136     Serial\&.println();
137 
138 #endif
139 
140     lightSensor\&.DeInit();
141 
142 }
.fi
.SS "void CoolBoardSensors::printConf ()"
\fBCoolBoardSensors::printConf()\fP: This method is provided to print the configuration to the Serial Monitor 
.PP
Definition at line 433 of file CoolBoardSensors\&.cpp\&.
.PP
.nf
434 {
435 
436 #if DEBUG == 1
437 
438     Serial\&.println( F("Entering CoolBoardSensors\&.printConf()") );
439     Serial\&.println();
440 
441 #endif
442 
443     Serial\&.println( F("Sensors Configuration : "));
444     
445     Serial\&.print( F("airDataActive\&.temperature : "));
446     Serial\&.println(this->airDataActive\&.temperature);
447 
448     Serial\&.print( F("airDataActive\&.humidity : "));
449     Serial\&.println(airDataActive\&.humidity);
450 
451     Serial\&.print( F("airDataActive\&.pressure : "));
452     Serial\&.println(airDataActive\&.pressure);
453 
454     Serial\&.print( F("lightDataActive\&.visible : "));
455     Serial\&.println(lightDataActive\&.visible);
456 
457     Serial\&.print( F("lightDataActive\&.ir : "));
458     Serial\&.println(lightDataActive\&.ir);
459 
460     Serial\&.print( F("lightDataActive\&.uv : "));
461     Serial\&.println(lightDataActive\&.uv);
462     
463     Serial\&.print( F("vbatActive : "));
464     Serial\&.println(vbatActive);
465 
466     Serial\&.print( F("soilMoitureActive : "));
467     Serial\&.println(soilMoistureActive);
468 
469     Serial\&.println();
470 }
.fi
.SS "String CoolBoardSensors::read ()"
\fBCoolBoardSensors::read()\fP: This method is provided to return the data read by the sensor board
.PP
\fBReturns:\fP
.RS 4
a json string containing the sensors data 
.RE
.PP

.PP
Definition at line 152 of file CoolBoardSensors\&.cpp\&.
.PP
.nf
153 {
154 
155 #if DEBUG == 1 
156     
157     Serial\&.println( F("Entering CoolBoardSensors\&.read()") );
158     Serial\&.println();
159 
160 #endif
161 
162 #if DEBUG == 0
163 
164     Serial\&.println( F("Reading Sensors\&.\&.\&."));
165 
166 #endif
167 
168     String data;
169     DynamicJsonBuffer  jsonBuffer ;
170     JsonObject& root = jsonBuffer\&.createObject();
171 
172     delay(100);
173     //light data
174     if(lightDataActive\&.visible)
175     {
176         root["visibleLight"] =lightSensor\&.ReadVisible() ;
177     }
178     
179     if(lightDataActive\&.ir)
180     {
181         root["infraRed"] = lightSensor\&.ReadIR();
182     }
183 
184     if(lightDataActive\&.uv)
185     {
186         float tempUV = (float)lightSensor\&.ReadUV()/100 ;
187         root["ultraViolet"] = tempUV;
188     }
189     
190     //BME280 data
191     if(airDataActive\&.pressure)   
192     {
193         root["Pressure"] =envSensor\&.readFloatPressure();
194     }
195     
196         
197     if(airDataActive\&.humidity)   
198     {   
199         root["Humidity"] =envSensor\&.readFloatHumidity() ;
200     }   
201     
202     if(airDataActive\&.temperature)
203     {
204         root["Temperature"]=envSensor\&.readTempC();
205     }
206     
207     //Vbat
208     if(vbatActive)  
209     {   
210         root["Vbat"]=this->readVBat();
211     }
212     
213     //earth Moisture
214     if(soilMoistureActive)
215     {   
216         root["soilMoisture"]=this->readMoisture();
217     }
218     
219     
220     root\&.printTo(data);
221 
222     Serial\&.println( F("CoolBoardSensors data is :") );
223     root\&.printTo(Serial);
224     Serial\&.println();
225     Serial\&.println();
226 
227 #if DEBUG == 1
228     Serial\&.print(F("jsonBuffer size: "));
229     Serial\&.println(jsonBuffer\&.size());
230     Serial\&.println();
231 
232 #endif
233 
234     return(data);   
235     
236 
237 }
.fi
.SS "float CoolBoardSensors::readMoisture ()"
\fBCoolBoardSensors::readMoisture()\fP: This method is provided to red the Soil Moisture
.PP
\fBReturns:\fP
.RS 4
a float represnting the soil moisture 
.RE
.PP

.PP
Definition at line 556 of file CoolBoardSensors\&.cpp\&.
.PP
.nf
557 {
558 
559 #if DEBUG == 1
560     
561     Serial\&.println( F("Entering CoolBoardSensors\&.readMoisture()") );
562     Serial\&.println();
563     
564 #endif
565 
566     digitalWrite(EnMoisture, LOW);                 //enable moisture sensor and waith a bit
567 
568     digitalWrite(AnMplex, HIGH);            //enable analog Switch to get the moisture
569 
570     delay(2000);
571 
572     int val = analogRead(A0);                       //read the value form the moisture sensor
573 
574     if (val >= 891){
575         val = 890;
576     }
577     float result = (float)map(val, 0, 890, 0, 100); 
578 
579     digitalWrite(EnMoisture, HIGH);                  //disable moisture sensor for minimum wear
580     
581 #if DEBUG == 1 
582 
583     Serial\&.println( F("RAW Moisture  is : "));
584     Serial\&.println(val);
585     Serial\&.println( F("Soil Moisture is : ") );
586     Serial\&.println(result);
587     Serial\&.println();
588 
589 #endif 
590 
591     return (result);
592 }
.fi
.SS "float CoolBoardSensors::readVBat ()"
\fBCoolBoardSensors::readVBat()\fP: This method is provided to read the Battery Voltage\&.
.PP
\fBReturns:\fP
.RS 4
a float representing the battery voltage 
.RE
.PP

.PP
Definition at line 519 of file CoolBoardSensors\&.cpp\&.
.PP
.nf
520 {
521 
522 #if DEBUG == 1
523 
524     Serial\&.println( F("Entering CoolBoardSensors\&.readVBat()") );
525     Serial\&.println();
526 
527 #endif
528 
529     digitalWrite(this->AnMplex, LOW);                            //Enable Analog Switch to get the batterie tension
530     
531     delay(200);
532     
533     int raw = analogRead(A0);                                    //read in batterie tension
534     
535     float val = 6\&.04 / 1024 * raw;                               //convert it apprimatly right tension in volts
536     
537 #if DEBUG == 1
538 
539     Serial\&.println( F("Vbat is : ") );
540     Serial\&.println(val);
541     Serial\&.println();
542 
543 #endif
544 
545     return (val);   
546 }
.fi
.SS "void CoolBoardSensors::setEnvSensorSettings (uint8_t commInterface = \fC\fBI2C_MODE\fP\fP, uint8_t I2CAddress = \fC0x76\fP, uint8_t runMode = \fC3\fP, uint8_t tStandby = \fC0\fP, uint8_t filter = \fC0\fP, uint8_t tempOverSample = \fC1\fP, uint8_t pressOverSample = \fC1\fP, uint8_t humidOverSample = \fC1\fP)"
CoolBoardSensors::setEnvSensorSetting(): This method is provided to set the enviornment sensor settings , if argument is ommitted , default value will be assigned 
.PP
Definition at line 479 of file CoolBoardSensors\&.cpp\&.
.PP
.nf
484 {
485 
486 #if DEBUG == 1
487     
488     Serial\&.println( F("Entering CoolBoardSensors\&.setEnvSensorSettings()") );
489     Serial\&.println();
490 
491 #endif
492   
493     this->envSensor\&.settings\&.commInterface = commInterface;      
494 
495     this->envSensor\&.settings\&.I2CAddress = I2CAddress;
496 
497     this->envSensor\&.settings\&.runMode = runMode; 
498 
499     this->envSensor\&.settings\&.tStandby = tStandby; 
500 
501     this->envSensor\&.settings\&.filter = filter; 
502 
503     this->envSensor\&.settings\&.tempOverSample = tempOverSample;
504 
505     this->envSensor\&.settings\&.pressOverSample = pressOverSample;
506 
507     this->envSensor\&.settings\&.humidOverSample = humidOverSample;
508 
509 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "struct \fBCoolBoardSensors::airActive\fP CoolBoardSensors::airDataActive\fC [private]\fP"

.SS "const int CoolBoardSensors::AnMplex = 12\fC [private]\fP"

.PP
Definition at line 86 of file CoolBoardSensors\&.h\&.
.SS "const int CoolBoardSensors::EnMoisture = 13\fC [private]\fP"

.PP
Definition at line 85 of file CoolBoardSensors\&.h\&.
.SS "\fBBME280\fP CoolBoardSensors::envSensor"

.PP
Definition at line 64 of file CoolBoardSensors\&.h\&.
.SS "struct \fBCoolBoardSensors::lightActive\fP CoolBoardSensors::lightDataActive\fC [private]\fP"

.SS "\fBCoolSI114X\fP CoolBoardSensors::lightSensor"

.PP
Definition at line 62 of file CoolBoardSensors\&.h\&.
.SS "bool CoolBoardSensors::soilMoistureActive =0\fC [private]\fP"

.PP
Definition at line 90 of file CoolBoardSensors\&.h\&.
.SS "bool CoolBoardSensors::vbatActive =0\fC [private]\fP"

.PP
Definition at line 88 of file CoolBoardSensors\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolBoardAPI from the source code\&.
