.TH "ExternalSensors" 3 "Wed Aug 30 2017" "CoolBoardAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ExternalSensors \- This class handles the external sensors run time defintion , configuartion and actions\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <ExternalSensors\&.h>\fP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBsensor\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBbegin\fP ()"
.br
.ti -1c
.RI "String \fBread\fP ()"
.br
.ti -1c
.RI "bool \fBconfig\fP ()"
.br
.ti -1c
.RI "bool \fBconfig\fP (String reference[], String type[], uint8_t address[], int \fBsensorsNumber\fP)"
.br
.ti -1c
.RI "void \fBprintConf\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "struct \fBExternalSensors::sensor\fP \fBsensors\fP [50]"
.br
.ti -1c
.RI "int \fBsensorsNumber\fP =0"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class handles the external sensors run time defintion , configuartion and actions\&. 
.PP
Definition at line 46 of file ExternalSensors\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "void ExternalSensors::begin (void)"
\fBExternalSensors::begin()\fP: This method is provided to initialise the external sensors\&. 
.PP
Definition at line 57 of file ExternalSensors\&.cpp\&.
.PP
.nf
58 {
59 
60 #if DEBUG == 1
61 
62     Serial\&.println( F("Enter ExternalSensors\&.begin()") );
63     Serial\&.println();
64 
65 #endif 
66 
67     for(int i=0;i< this->sensorsNumber ; i++)
68     {
69         if( (sensors[i]\&.reference) == "NDIR_I2C" )
70         {   
71             std::unique_ptr< ExternalSensor<NDIR_I2C> > sensorCO2(new ExternalSensor<NDIR_I2C>( this->sensors[i]\&.address) );
72 
73 
74             sensors[i]\&.exSensor= sensorCO2\&.release();
75             sensors[i]\&.exSensor->begin();
76             sensors[i]\&.exSensor->read();
77 
78         }
79         if( (sensors[i]\&.reference) == "DallasTemperature")
80         {
81 
82             std::unique_ptr< ExternalSensor<DallasTemperature> > dallasTemp(new ExternalSensor<DallasTemperature> (&oneWire));
83              
84             sensors[i]\&.exSensor=dallasTemp\&.release();
85             sensors[i]\&.exSensor->begin();
86             sensors[i]\&.exSensor->read();
87         }
88         
89         
90     }
91 }
.fi
.SS "bool ExternalSensors::config ()"
\fBExternalSensors::config()\fP: This method is provided to configure the externalSensors through a configuration file
.PP
\fBReturns:\fP
.RS 4
true if successful,false otherwise 
.RE
.PP

.PP
Definition at line 174 of file ExternalSensors\&.cpp\&.
.PP
.nf
175 {
176     //read config file
177     //update data
178     File externalSensorsConfig = SPIFFS\&.open("/externalSensorsConfig\&.json", "r");
179 
180     if (!externalSensorsConfig) 
181     {
182     
183     #if DEBUG == 1
184         
185         Serial\&.println( F("failed to read /externalSensorsConfig\&.json") );
186         Serial\&.println();
187     
188     #endif
189         
190         return(false);
191     }
192     else
193     {
194         size_t size = externalSensorsConfig\&.size();
195         // Allocate a buffer to store contents of the file\&.
196         std::unique_ptr<char[]> buf(new char[size]);
197 
198         externalSensorsConfig\&.readBytes(buf\&.get(), size);
199         DynamicJsonBuffer jsonBuffer;
200         JsonObject& json = jsonBuffer\&.parseObject(buf\&.get());
201 
202         if (!json\&.success()) 
203         {
204         
205         #if DEBUG == 1 
206 
207             Serial\&.println( F("failed to parse json") );
208             Serial\&.println();
209         
210         #endif
211 
212             return(false);
213         } 
214         else
215         {
216         
217         #if DEBUG == 1 
218     
219             Serial\&.println( F("configuration json is : ") );
220             json\&.printTo(Serial);
221             Serial\&.println();
222 
223             Serial\&.print(F("jsonBuffer size: "));
224             Serial\&.println(jsonBuffer\&.size());
225             Serial\&.println();
226 
227         
228         #endif          
229             if(json["sensorsNumber"]!=NULL)
230             {
231                 this->sensorsNumber = json["sensorsNumber"];
232                 
233                 
234 
235                 for(int i=0;i<sensorsNumber;i++)
236                 {   String name="sensor"+String(i);
237                     
238                     if(json[name]\&.success())
239                     {  
240                         JsonObject& sensorJson=json[name];
241                         
242                         if(sensorJson["reference"]\&.success() )
243                         {  
244                             this->sensors[i]\&.reference =sensorJson["reference"]\&.as<String>();
245                         }
246                         else
247                         {
248                             this->sensors[i]\&.reference=this->sensors[i]\&.reference;                            
249                                     
250                         }
251                         sensorJson["reference"]=this->sensors[i]\&.reference;
252 
253                     
254                         if(sensorJson["type"]\&.success() )
255                         {                   
256                             this->sensors[i]\&.type=sensorJson["type"]\&.as<String>();
257                         }
258                         else
259                         {
260                             this->sensors[i]\&.type=this->sensors[i]\&.type;
261 
262                         }
263                         sensorJson["type"]=this->sensors[i]\&.type;
264                     
265                         if(sensorJson["address"]\&.success() )
266                         {                   
267                             this->sensors[i]\&.address=sensorJson["address"];
268                         }
269                         else
270                         {   
271                             this->sensors[i]\&.address=this->sensors[i]\&.address;
272 
273                         }
274                         sensorJson["address"]=this->sensors[i]\&.address;
275                     
276     
277                     }
278                     else
279                     {
280                         this->sensors[i]=this->sensors[i];                  
281                     }
282                                             
283                     json[name]["reference"]=this->sensors[i]\&.reference;
284                     json[name]["type"]=this->sensors[i]\&.type;
285                     json[name]["address"]=this->sensors[i]\&.address;
286                 }
287  
288             }
289             else
290             {
291                 this->sensorsNumber=this->sensorsNumber;
292             }
293             json["sensorsNumber"]=this->sensorsNumber;
294 
295             externalSensorsConfig\&.close();
296             externalSensorsConfig = SPIFFS\&.open("/externalSensorsConfig\&.json", "w");
297 
298             if(!externalSensorsConfig)
299             {
300             
301             #if DEBUG == 1 
302 
303                 Serial\&.println( F("failed to write to /externalSensorsConfig\&.json") );
304                 Serial\&.println();
305             
306             #endif
307 
308                 return(false);
309             }
310             
311             json\&.printTo(externalSensorsConfig);
312             externalSensorsConfig\&.close();
313             
314         #if DEBUG == 1 
315 
316             Serial\&.println( F("saved configuration is : ") );
317             json\&.printTo(Serial);
318             Serial\&.println();
319         
320         #endif
321 
322             return(true); 
323         }
324     }   
325     
326 
327 
328 
329 }
.fi
.SS "bool ExternalSensors::config (String reference[], String type[], uint8_t address[], int sensorsNumber)"
\fBExternalSensors::config(String reference[],String type[],uint8_t address[],int sensorsNumber)\fP: This method is provided to configure the externalSensors without a configuration file
.PP
\fBReturns:\fP
.RS 4
true if successful,false otherwise 
.RE
.PP

.PP
Definition at line 339 of file ExternalSensors\&.cpp\&.
.PP
.nf
340 {
341 
342 #if DEBUG == 1
343 
344     Serial\&.println( F("Entering ExternalSensors\&.conf(reference[], type[], address[], sensorsNumber)") );
345     Serial\&.println();
346 
347 #endif  
348     if(sensorsNumber>50)
349     {
350     
351     #if DEBUG == 1
352     
353         Serial\&.println(F("you can't add more than 50 sensors")); 
354     
355     #endif  
356     
357         return(false);
358     }
359 
360     this->sensorsNumber=sensorsNumber;
361     
362     for(int i=0;i<sensorsNumber;i++)
363     {
364     
365         this->sensors[i]\&.reference=reference[i];
366         
367         this->sensors[i]\&.type=type[i];
368 
369         this->sensors[i]\&.address=address[i];
370     
371     }
372     
373     return(true);
374 
375 }
.fi
.SS "void ExternalSensors::printConf ()"
\fBExternalSensors::printConf()\fP: This method is provided to print the configuration to the Serial Monitor 
.PP
Definition at line 382 of file ExternalSensors\&.cpp\&.
.PP
.nf
383 {
384 
385 #if DEBUG == 1
386 
387     Serial\&.println( F("Entering ExternalSensors\&.printConf()") );
388     Serial\&.println();
389 
390 #endif 
391 
392     Serial\&.println("External Sensors configuration ");
393 
394     Serial\&.print("sensorsNumber : ");
395     Serial\&.println(sensorsNumber);
396 
397     for(int i=0;i<sensorsNumber;i++)
398     {
399         Serial\&.print("sensor ");
400         Serial\&.print(i);
401         Serial\&.print(" reference : ");
402         Serial\&.println(this->sensors[i]\&.reference);
403 
404         Serial\&.print("sensor ");
405         Serial\&.print(i);
406         Serial\&.print(" type : ");
407         Serial\&.println(this->sensors[i]\&.type);
408                 
409         Serial\&.print("sensor ");
410         Serial\&.print(i);
411         Serial\&.print(" address : ");
412         Serial\&.println(this->sensors[i]\&.address);
413     
414     }
415 }
.fi
.SS "String ExternalSensors::read (void)"
\fBExternalSensors::read()\fP: This method is provided to read the data from the external sensors
.PP
\fBReturns:\fP
.RS 4
json string that contains the sensors data 
.RE
.PP

.PP
Definition at line 101 of file ExternalSensors\&.cpp\&.
.PP
.nf
102 {
103 
104 #if DEBUG == 1
105 
106     Serial\&.println( F("Entering ExternalSensors\&.read()") );
107     Serial\&.println();
108 
109 #endif 
110 
111     String data;
112     DynamicJsonBuffer  jsonBuffer ;
113     JsonObject& root = jsonBuffer\&.createObject();
114 
115     if(!root\&.success() )
116     {
117  
118     #if DEBUG == 1
119 
120         Serial\&.println( F("failed to create json ") );
121     
122     #endif 
123 
124         return("00");
125     }
126     else
127     {
128         if(sensorsNumber>0)
129         {
130             for(int i=0;i<sensorsNumber;i++)
131             {
132                 if(sensors[i]\&.exSensor != NULL )
133                 {
134                     root[sensors[i]\&.type]=sensors[i]\&.exSensor->read();        
135                 }
136             
137             #if DEBUG == 1
138                 else
139                 {
140                     Serial\&.println(F("null pointer "));
141                 }
142             #endif  
143             }
144         }   
145         
146         root\&.printTo(data);
147     
148     #if DEBUG == 1
149 
150         Serial\&.println( F("sensors data :") );
151         Serial\&.println(data);
152         Serial\&.println();
153 
154         Serial\&.print(F("jsonBuffer size: "));
155         Serial\&.println(jsonBuffer\&.size());
156         Serial\&.println();
157 
158     
159     #endif
160     
161         return(data);
162     }
163 
164 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "struct \fBExternalSensors::sensor\fP ExternalSensors::sensors[50]\fC [private]\fP"

.SS "int ExternalSensors::sensorsNumber =0\fC [private]\fP"
External Sensors Number Maximum is 50 
.PP
Definition at line 87 of file ExternalSensors\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolBoardAPI from the source code\&.
