.TH "ExternalSensors" 3 "Thu Aug 24 2017" "CoolBoardAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ExternalSensors \- This class handles the external sensors run time defintion , configuartion and actions\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <ExternalSensors\&.h>\fP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBsensor\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBbegin\fP ()"
.br
.ti -1c
.RI "String \fBread\fP ()"
.br
.ti -1c
.RI "bool \fBconfig\fP ()"
.br
.ti -1c
.RI "bool \fBconfig\fP (String reference[], String type[], uint8_t address[], int \fBsensorsNumber\fP)"
.br
.ti -1c
.RI "void \fBprintConf\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "struct \fBExternalSensors::sensor\fP \fBsensors\fP [50]"
.br
.ti -1c
.RI "int \fBsensorsNumber\fP =0"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class handles the external sensors run time defintion , configuartion and actions\&. 
.PP
Definition at line 45 of file ExternalSensors\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "void ExternalSensors::begin (void)"
\fBExternalSensors::begin()\fP: This method is provided to initialise the external sensors\&. 
.PP
Definition at line 56 of file ExternalSensors\&.cpp\&.
.PP
.nf
57 {
58 
59 #if DEBUG == 1
60 
61     Serial\&.println( F("Enter ExternalSensors\&.begin()") );
62     Serial\&.println();
63 
64 #endif 
65 
66     for(int i=0;i< this->sensorsNumber ; i++)
67     {
68         if( (sensors[i]\&.reference) == "NDIR_I2C" )
69         {   
70             std::unique_ptr< ExternalSensor<NDIR_I2C> > sensorCO2(new ExternalSensor<NDIR_I2C>( this->sensors[i]\&.address) );
71 
72 
73             sensors[i]\&.exSensor= sensorCO2\&.release();
74             sensors[i]\&.exSensor->begin();
75             sensors[i]\&.exSensor->read();
76 
77         }
78         if( (sensors[i]\&.reference) == "DallasTemperature")
79         {
80 
81             std::unique_ptr< ExternalSensor<DallasTemperature> > dallasTemp(new ExternalSensor<DallasTemperature> (&oneWire));
82              
83             sensors[i]\&.exSensor=dallasTemp\&.release();
84             sensors[i]\&.exSensor->begin();
85             sensors[i]\&.exSensor->read();
86         }
87         
88         
89     }
90 }
.fi
.SS "bool ExternalSensors::config ()"
\fBExternalSensors::config()\fP: This method is provided to configure the externalSensors through a configuration file
.PP
\fBReturns:\fP
.RS 4
true if successful,false otherwise 
.RE
.PP

.PP
Definition at line 173 of file ExternalSensors\&.cpp\&.
.PP
.nf
174 {
175     //read config file
176     //update data
177     File externalSensorsConfig = SPIFFS\&.open("/externalSensorsConfig\&.json", "r");
178 
179     if (!externalSensorsConfig) 
180     {
181     
182     #if DEBUG == 1
183         
184         Serial\&.println( F("failed to read /externalSensorsConfig\&.json") );
185         Serial\&.println();
186     
187     #endif
188         
189         return(false);
190     }
191     else
192     {
193         size_t size = externalSensorsConfig\&.size();
194         // Allocate a buffer to store contents of the file\&.
195         std::unique_ptr<char[]> buf(new char[size]);
196 
197         externalSensorsConfig\&.readBytes(buf\&.get(), size);
198         DynamicJsonBuffer jsonBuffer;
199         JsonObject& json = jsonBuffer\&.parseObject(buf\&.get());
200 
201         if (!json\&.success()) 
202         {
203         
204         #if DEBUG == 1 
205 
206             Serial\&.println( F("failed to parse json") );
207             Serial\&.println();
208         
209         #endif
210 
211             return(false);
212         } 
213         else
214         {
215         
216         #if DEBUG == 1 
217     
218             Serial\&.println( F("configuration json is : ") );
219             json\&.printTo(Serial);
220             Serial\&.println();
221 
222             Serial\&.print(F("jsonBuffer size: "));
223             Serial\&.println(jsonBuffer\&.size());
224             Serial\&.println();
225 
226         
227         #endif          
228             if(json["sensorsNumber"]!=NULL)
229             {
230                 this->sensorsNumber = json["sensorsNumber"];
231                 
232                 
233 
234                 for(int i=0;i<sensorsNumber;i++)
235                 {   String name="sensor"+String(i);
236                     
237                     if(json[name]\&.success())
238                     {  
239                         JsonObject& sensorJson=json[name];
240                         
241                         if(sensorJson["reference"]\&.success() )
242                         {  
243                             this->sensors[i]\&.reference =sensorJson["reference"]\&.as<String>();
244                         }
245                         else
246                         {
247                             this->sensors[i]\&.reference=this->sensors[i]\&.reference;                            
248                                     
249                         }
250                         sensorJson["reference"]=this->sensors[i]\&.reference;
251 
252                     
253                         if(sensorJson["type"]\&.success() )
254                         {                   
255                             this->sensors[i]\&.type=sensorJson["type"]\&.as<String>();
256                         }
257                         else
258                         {
259                             this->sensors[i]\&.type=this->sensors[i]\&.type;
260 
261                         }
262                         sensorJson["type"]=this->sensors[i]\&.type;
263                     
264                         if(sensorJson["address"]\&.success() )
265                         {                   
266                             this->sensors[i]\&.address=sensorJson["address"];
267                         }
268                         else
269                         {   
270                             this->sensors[i]\&.address=this->sensors[i]\&.address;
271 
272                         }
273                         sensorJson["address"]=this->sensors[i]\&.address;
274                     
275     
276                     }
277                     else
278                     {
279                         this->sensors[i]=this->sensors[i];                  
280                     }
281                                             
282                     json[name]["reference"]=this->sensors[i]\&.reference;
283                     json[name]["type"]=this->sensors[i]\&.type;
284                     json[name]["address"]=this->sensors[i]\&.address;
285                 }
286  
287             }
288             else
289             {
290                 this->sensorsNumber=this->sensorsNumber;
291             }
292             json["sensorsNumber"]=this->sensorsNumber;
293 
294             externalSensorsConfig\&.close();
295             externalSensorsConfig = SPIFFS\&.open("/externalSensorsConfig\&.json", "w");
296 
297             if(!externalSensorsConfig)
298             {
299             
300             #if DEBUG == 1 
301 
302                 Serial\&.println( F("failed to write to /externalSensorsConfig\&.json") );
303                 Serial\&.println();
304             
305             #endif
306 
307                 return(false);
308             }
309             
310             json\&.printTo(externalSensorsConfig);
311             externalSensorsConfig\&.close();
312             
313         #if DEBUG == 1 
314 
315             Serial\&.println( F("saved configuration is : ") );
316             json\&.printTo(Serial);
317             Serial\&.println();
318         
319         #endif
320 
321             return(true); 
322         }
323     }   
324     
325 
326 
327 
328 }
.fi
.SS "bool ExternalSensors::config (String reference[], String type[], uint8_t address[], int sensorsNumber)"
\fBExternalSensors::config(String reference[],String type[],uint8_t address[],int sensorsNumber)\fP: This method is provided to configure the externalSensors without a configuration file
.PP
\fBReturns:\fP
.RS 4
true if successful,false otherwise 
.RE
.PP

.PP
Definition at line 338 of file ExternalSensors\&.cpp\&.
.PP
.nf
339 {
340 
341 #if DEBUG == 1
342 
343     Serial\&.println( F("Entering ExternalSensors\&.conf(reference[], type[], address[], sensorsNumber)") );
344     Serial\&.println();
345 
346 #endif  
347     if(sensorsNumber>50)
348     {
349     
350     #if DEBUG == 1
351     
352         Serial\&.println(F("you can't add more than 50 sensors")); 
353     
354     #endif  
355     
356         return(false);
357     }
358 
359     this->sensorsNumber=sensorsNumber;
360     
361     for(int i=0;i<sensorsNumber;i++)
362     {
363     
364         this->sensors[i]\&.reference=reference[i];
365         
366         this->sensors[i]\&.type=type[i];
367 
368         this->sensors[i]\&.address=address[i];
369     
370     }
371     
372     return(true);
373 
374 }
.fi
.SS "void ExternalSensors::printConf ()"
\fBExternalSensors::printConf()\fP: This method is provided to print the configuration to the Serial Monitor 
.PP
Definition at line 381 of file ExternalSensors\&.cpp\&.
.PP
.nf
382 {
383 
384 #if DEBUG == 1
385 
386     Serial\&.println( F("Entering ExternalSensors\&.printConf()") );
387     Serial\&.println();
388 
389 #endif 
390 
391     Serial\&.println("External Sensors configuration ");
392 
393     Serial\&.print("sensorsNumber : ");
394     Serial\&.println(sensorsNumber);
395 
396     for(int i=0;i<sensorsNumber;i++)
397     {
398         Serial\&.print("sensor ");
399         Serial\&.print(i);
400         Serial\&.print(" reference : ");
401         Serial\&.println(this->sensors[i]\&.reference);
402 
403         Serial\&.print("sensor ");
404         Serial\&.print(i);
405         Serial\&.print(" type : ");
406         Serial\&.println(this->sensors[i]\&.type);
407                 
408         Serial\&.print("sensor ");
409         Serial\&.print(i);
410         Serial\&.print(" address : ");
411         Serial\&.println(this->sensors[i]\&.address);
412     
413     }
414 }
.fi
.SS "String ExternalSensors::read (void)"
\fBExternalSensors::read()\fP: This method is provided to read the data from the external sensors
.PP
\fBReturns:\fP
.RS 4
json string that contains the sensors data 
.RE
.PP

.PP
Definition at line 100 of file ExternalSensors\&.cpp\&.
.PP
.nf
101 {
102 
103 #if DEBUG == 1
104 
105     Serial\&.println( F("Entering ExternalSensors\&.read()") );
106     Serial\&.println();
107 
108 #endif 
109 
110     String data;
111     DynamicJsonBuffer  jsonBuffer ;
112     JsonObject& root = jsonBuffer\&.createObject();
113 
114     if(!root\&.success() )
115     {
116  
117     #if DEBUG == 1
118 
119         Serial\&.println( F("failed to create json ") );
120     
121     #endif 
122 
123         return("00");
124     }
125     else
126     {
127         if(sensorsNumber>0)
128         {
129             for(int i=0;i<sensorsNumber;i++)
130             {
131                 if(sensors[i]\&.exSensor != NULL )
132                 {
133                     root[sensors[i]\&.type]=sensors[i]\&.exSensor->read();        
134                 }
135             
136             #if DEBUG == 1
137                 else
138                 {
139                     Serial\&.println(F("null pointer "));
140                 }
141             #endif  
142             }
143         }   
144         
145         root\&.printTo(data);
146     
147     #if DEBUG == 1
148 
149         Serial\&.println( F("sensors data :") );
150         Serial\&.println(data);
151         Serial\&.println();
152 
153         Serial\&.print(F("jsonBuffer size: "));
154         Serial\&.println(jsonBuffer\&.size());
155         Serial\&.println();
156 
157     
158     #endif
159     
160         return(data);
161     }
162 
163 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "struct \fBExternalSensors::sensor\fP ExternalSensors::sensors[50]\fC [private]\fP"

.SS "int ExternalSensors::sensorsNumber =0\fC [private]\fP"

.PP
Definition at line 68 of file ExternalSensors\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolBoardAPI from the source code\&.
