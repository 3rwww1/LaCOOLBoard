.TH "CoolFileSystem" 3 "Tue Aug 22 2017" "CoolBoardAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoolFileSystem \- This class handles the file system\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolFileSystem\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "bool \fBbegin\fP ()"
.br
.ti -1c
.RI "bool \fBupdateConfigFiles\fP (String answer)"
.br
.ti -1c
.RI "bool \fBfileUpdate\fP (String update, const char *path)"
.br
.ti -1c
.RI "bool \fBsaveSensorData\fP (const char *data)"
.br
.ti -1c
.RI "bool \fBsaveSensorDataCSV\fP (const char *data)"
.br
.ti -1c
.RI "int \fBisDataSaved\fP ()"
.br
.ti -1c
.RI "String * \fBgetSensorSavedData\fP (int &size)"
.br
.ti -1c
.RI "bool \fBincrementsavedData\fP ()"
.br
.ti -1c
.RI "void \fBgetsavedData\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "int \fBsavedData\fP =0"
.br
.ti -1c
.RI "int \fBlinesToSkip\fP =0"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class handles the file system\&. 
.PP
Definition at line 23 of file CoolFileSystem\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "bool CoolFileSystem::begin ()"
\fBCoolFileSystem::begin()\fP: This method is provided to start the SPIFFS object\&.
.PP
\fBReturns:\fP
.RS 4
true if SPIFFS was initialized correctly, false otherwise 
.RE
.PP

.PP
Definition at line 27 of file CoolFileSystem\&.cpp\&.
.PP
.nf
28 {
29     bool sResult=SPIFFS\&.begin();
30     
31 
32 #if DEBUG == 1
33 
34     Serial\&.println( F("Entering CoolFileSystem\&.begin()") );
35     Serial\&.println();    
36     Serial\&.print( F("SPIFFS success ? ") );
37     Serial\&.println(sResult);
38     Serial\&.println(  );
39 
40 #endif
41     //get the data from the files
42     this->getsavedData();
43 
44     return( sResult  );                                   //Initialize Filesystem
45 
46 }
.fi
.SS "bool CoolFileSystem::fileUpdate (String update, const char * path)"
CoolFileSystem::fileUpdate( update msg, file path): This method is provided to ensure the correct update for each configuration file in the File system
.PP
\fBReturns:\fP
.RS 4
true if successful , false otherwise 
.RE
.PP

.PP
Definition at line 980 of file CoolFileSystem\&.cpp\&.
.PP
.nf
981 {
982 
983 #if DEBUG == 1
984 
985     Serial\&.println( F("Entering CoolFileSystem\&.fileUpdate()") );
986     Serial\&.println();
987     
988     Serial\&.println(F("update msg is :"));
989     Serial\&.println(update);
990     
991     Serial\&.println(F("file path is : "));
992     Serial\&.println(path);    
993 
994 #endif
995     //transfer update String to json
996     DynamicJsonBuffer updateBuffer;
997     JsonObject& updateJson = updateBuffer\&.parseObject(update\&.c_str() );
998     
999     if(updateJson\&.success())
1000     {
1001     
1002     #if DEBUG ==1
1003         
1004         Serial\&.println(F("root parsing success :"));
1005         updateJson\&.printTo(Serial);
1006     
1007     #endif
1008 
1009     }
1010     else
1011     {
1012     
1013     #if DEBUG == 1 
1014     
1015         Serial\&.println(F("root parsing failure "));
1016     
1017     #endif
1018         
1019         return(false);  
1020 
1021     }
1022     
1023     //open file in read mode
1024     File configFile = SPIFFS\&.open( path , "r");
1025     
1026     if(!configFile)
1027     {   
1028     #if DEBUG == 1
1029         
1030         Serial\&.print( F("failed to read ") );
1031         Serial\&.println(path);
1032 
1033     #endif
1034         return(false);
1035     }
1036 
1037     //copy file to a json
1038     size_t size = configFile\&.size();
1039 
1040     // Allocate a buffer to store contents of the file\&.
1041     std::unique_ptr < char[] > buf(new char[size]);
1042 
1043     configFile\&.readBytes(buf\&.get(), size);
1044 
1045     DynamicJsonBuffer fileBuffer;
1046 
1047     JsonObject & fileJson = fileBuffer\&.parseObject(buf\&.get());
1048 
1049     if (!fileJson\&.success())
1050     {
1051 
1052     #if DEBUG == 1
1053 
1054         Serial\&.println( F("failed to parse json") );
1055 
1056     #endif
1057 
1058         return(false);
1059     }
1060     
1061     //modify root to contain all the json keys: updated ones and non updated ones
1062     for (auto kv : fileJson) 
1063     {
1064         if( updateJson[kv\&.key]\&.success() )
1065         {
1066             fileJson[kv\&.key]=updateJson[kv\&.key];          
1067         }
1068         else
1069         {
1070             fileJson[kv\&.key]=fileJson[kv\&.key];
1071         }
1072 
1073                 
1074     }
1075 
1076 #if DEBUG == 1
1077 
1078     Serial\&.println(F("fileJson is now : "));
1079     fileJson\&.printTo(Serial);
1080 
1081 #endif
1082 
1083     //close the file
1084     configFile\&.close();
1085 
1086     //open file in w mode
1087     configFile = SPIFFS\&.open( path , "w");
1088     
1089     if(!configFile)
1090     {   
1091     #if DEBUG == 1
1092         
1093         Serial\&.print( F("failed to open ") );
1094         Serial\&.println(path);
1095 
1096     #endif
1097         return(false);
1098     }
1099     //print json to file    
1100     
1101     fileJson\&.printTo(configFile);
1102     
1103     //close file
1104     configFile\&.close();
1105 
1106 
1107 #if DEBUG == 1
1108 
1109     Serial\&.println( F("config is") );
1110     fileJson\&.printTo(Serial);
1111     Serial\&.println();
1112 
1113 #endif
1114     
1115     return(true);
1116     
1117 }
.fi
.SS "void CoolFileSystem::getsavedData ()"
\fBCoolFileSystem::getsavedData()\fP: This method is provided to get the savedData flag from the file system 
.PP
Definition at line 1179 of file CoolFileSystem\&.cpp\&.
.PP
.nf
1180 {
1181 
1182 
1183 #if DEBUG == 1
1184     
1185     Serial\&.println(F("Entering CoolFileSystem\&.getsavedData()"));  
1186     
1187 #endif
1188     //open file
1189     File file=SPIFFS\&.open("/savedDataFlag\&.txt","r");  
1190     //read file
1191     if( !file)  
1192     {
1193         Serial\&.println( F("failed to read savedDataFlag\&.txt") );
1194         
1195     }
1196     else
1197     {       
1198         //read from file    
1199         String temp=file\&.readStringUntil(' ');
1200         
1201         this->savedData=temp\&.toInt();
1202 
1203         
1204         temp=file\&.readStringUntil('\n');
1205         this-> linesToSkip=temp\&.toInt();;    
1206         
1207         file\&.close();    
1208     }
1209     
1210 #if DEBUG == 1
1211 
1212     Serial\&.print(F("number of lines to read :"));
1213     Serial\&.println(this->savedData);
1214     
1215     Serial\&.print(F("number of lines to skip :"));
1216     Serial\&.println(this->linesToSkip);
1217 
1218 #endif
1219     
1220 }
.fi
.SS "String * CoolFileSystem::getSensorSavedData (int & lines)"
CoolFileSystem::getSensorData(int &lines): This method is provided to return the sensor data saved in the File System 10 lines at a time
.PP
\fBReturns:\fP
.RS 4
String array containing 50 first lines from the file modifies tge lines argument to reflect the number of lines left 
.RE
.PP

.PP
Definition at line 819 of file CoolFileSystem\&.cpp\&.
.PP
.nf
820 {
821     int maxString=50;
822     String *sensorsDataArray=new String[maxString];
823     lines=0;
824 
825 #if DEBUG == 1 
826 
827     Serial\&.println( F("Entering CoolFileSystem\&.getSensorSavedData()") );
828     Serial\&.println();
829 
830 #endif
831 
832     //open sensors data file
833     File sensorsData=SPIFFS\&.open("/sensorsData\&.json","r");
834     
835     if (!sensorsData)
836     {
837 
838     #if DEBUG == 1 
839 
840         Serial\&.println( F("Failed to read /sensorsData\&.json") );
841 
842     #endif
843          
844         sensorsDataArray[0]="Failed to read /sensorsData\&.json";
845         lines++;
846 
847         //result=sensorsDataArray;
848         return(sensorsDataArray);
849 
850     }
851 
852     else
853     {
854         //read the file line by line and put it in the String array(aka String*)        
855 
856         //while loop until EOF is reached
857         String temp;
858         while(sensorsData\&.available())
859         {
860             yield();
861             
862             temp=sensorsData\&.readStringUntil('\r');
863 
864             if(linesToSkip>0)
865             {
866 
867                 linesToSkip--;
868         
869             }
870             else
871             {
872 
873             #if DEBUG == 1
874 
875                 Serial\&.println(F("temp String : "));
876                 Serial\&.println(temp);
877                 Serial\&.println();
878             
879             #endif
880             
881                 sensorsDataArray[lines]=temp;
882                 sensorsData\&.read();
883             
884             
885         
886             #if DEBUG== 1
887      
888                 Serial\&.print(F("read String NÂ°"));
889                 Serial\&.print(lines);
890                 Serial\&.println(F(" is : "));
891                 Serial\&.println( sensorsDataArray[lines] );
892                 Serial\&.println();
893                 Serial\&.println(F("next char is : "));
894                 Serial\&.println((char)sensorsData\&.peek());
895                 Serial\&.println();            
896             
897             #endif
898                 lines++;
899             
900                 //maximum size is maxString(index : 0\&.\&.maxString-1)
901                 if(lines>=maxString)
902                 {
903                     break;
904                 }
905             
906                 yield();
907             
908             }
909 
910         }
911         
912                     
913         //close the file
914         sensorsData\&.close();
915 
916         //position the saved data flag to the number of unread lines
917         this->savedData=savedData-lines;
918         
919         //position the number of lines to skip to the number of read lines  
920         this->linesToSkip=lines;
921 
922         //delete data in the file only if savedData<=0
923         if(this->savedData<=0)
924         {
925             File sensorsData=SPIFFS\&.open("/sensorsData\&.json","w");
926             File sensorsDataCSV=SPIFFS\&.open("/sensorsData\&.csv","w");
927             if( (!sensorsData)||(!sensorsDataCSV) ) 
928             {
929             #if DEBUG == 1
930     
931                 Serial\&.println( F("failed to delete data in the file") );
932     
933             #endif
934                 lines++;
935                 sensorsDataArray[lines]="failed to delete data in the file";
936 
937                 return(sensorsDataArray);
938 
939             }
940 
941             sensorsData\&.close();
942             sensorsDataCSV\&.close();
943             
944             this->linesToSkip=0;
945         
946         }
947 
948         //save the changes to linesToSkip and savedData in the file system
949         this->incrementsavedData();
950 
951         //return the string
952         #if DEBUG == 1
953         
954             for(int i=0;i<lines;i++)
955             {
956                 Serial\&.print(F("String NÂ°"));
957                 Serial\&.println(i);
958                 Serial\&.println(sensorsDataArray[i]);
959                 Serial\&.println();            
960             }
961     
962         #endif
963         return(sensorsDataArray);
964         
965         
966         
967     }
968 
969 }
.fi
.SS "bool CoolFileSystem::incrementsavedData ()"
\fBCoolFileSystem::incrementsavedData()\fP: This method is provided to increment the savedData flag
.PP
\fBReturns:\fP
.RS 4
true if successful , false otherwise 
.RE
.PP

.PP
Definition at line 1129 of file CoolFileSystem\&.cpp\&.
.PP
.nf
1130 {
1131 
1132 
1133 #if DEBUG == 1
1134     
1135     Serial\&.println(F("Entering CoolFileSystem\&.incrementsavedData()"));    
1136     
1137 #endif
1138     //open file
1139     File file=SPIFFS\&.open("/savedDataFlag\&.txt","w");  
1140     //read file
1141     if( !file)  
1142     {
1143         Serial\&.println( F("failed to open savedDataFlag\&.txt") );
1144         
1145         return(false);      
1146     }
1147     else
1148     {       
1149         //write to file 
1150         file\&.print(this->savedData);
1151         
1152         file\&.print(" ");
1153         
1154         file\&.println(this->linesToSkip);
1155     
1156         file\&.close();
1157 
1158     #if DEBUG == 1
1159 
1160         Serial\&.print(F("number of lines to read :"));
1161         Serial\&.println(this->savedData);
1162     
1163         Serial\&.print(F("number of lines to skip :"));
1164         Serial\&.println(this->linesToSkip);
1165 
1166     #endif
1167         
1168         return(true);
1169     }
1170     
1171 }
.fi
.SS "int CoolFileSystem::isDataSaved ()"
\fBCoolFileSystem::isDataSaved()\fP: This method is provided to report wether there is sensor data saved in the File System\&.
.PP
\fBReturns:\fP
.RS 4
true if there is data saved, false otherwise 
.RE
.PP

.PP
Definition at line 759 of file CoolFileSystem\&.cpp\&.
.PP
.nf
760 {
761 
762 #if DEBUG == 1 
763 
764     Serial\&.println( F("Entering CoolFileSystem\&.isDataSaved()") );
765     Serial\&.println();
766 
767     FSInfo fs_info;
768 
769     if(SPIFFS\&.info(fs_info)==true)
770     {
771         Serial\&.print(F("used bytes/total bytes : "));    
772         Serial\&.print(fs_info\&.usedBytes);
773         Serial\&.print(F("/"));
774         Serial\&.print(fs_info\&.totalBytes);
775         Serial\&.println();
776 
777     }
778 
779     File sensorsData=SPIFFS\&.open("/sensorsData\&.json","r");
780     File sensorsDataCSV=SPIFFS\&.open("/sensorsData\&.csv","r");
781     
782     if( (!sensorsData)||(!sensorsDataCSV) ) 
783     {
784         Serial\&.println( F("failed to open files") );     
785     }
786     else
787     {       
788             Serial\&.print(F("sensors Data file size in bytes : "));
789             Serial\&.println(sensorsData\&.size());
790             Serial\&.println();
791             
792             Serial\&.print(F("sensors Data CSV file size in bytes : "));               
793             Serial\&.println(sensorsDataCSV\&.size());
794             Serial\&.println();
795     }
796 
797 
798 
799     Serial\&.print( F("savedData : ") );
800     Serial\&.println(this->savedData);
801 
802 #endif
803 
804     return( this->savedData );
805 }
.fi
.SS "bool CoolFileSystem::saveSensorData (const char * data)"
CoolFileSystem::saveSensorData( data ): This method is provided to save the data on the local memory when there is no internet available
.PP
increments the saved data flag when successful
.PP
\fBReturns:\fP
.RS 4
true if the data was saved, false otherwise 
.RE
.PP

.PP
Definition at line 58 of file CoolFileSystem\&.cpp\&.
.PP
.nf
59 {
60 
61 #if DEBUG == 1
62 
63     Serial\&.println( F("Entering CoolFileSystem\&.saveSensorData()") );
64     Serial\&.println();
65 
66 #endif
67     
68     File sensorsData=SPIFFS\&.open("/sensorsData\&.json","a");
69 
70     if(!sensorsData)
71     {
72     
73     #if DEBUG == 1
74     
75         Serial\&.println( F("failed to append to /sensorsData\&.json") );
76         Serial\&.println();
77     
78     #endif
79         //keep the old data
80         this->savedData=savedData;
81 
82         return (false); 
83     }   
84 
85     DynamicJsonBuffer jsonBuffer;
86     JsonObject& root = jsonBuffer\&.parseObject(data);
87 
88     if( root\&.success() )
89     {
90         root\&.printTo(sensorsData);
91         sensorsData\&.println();
92         sensorsData\&.close();
93 
94 
95     #if DEBUG == 1
96         
97         Serial\&.print(F("jsonBuffer size: "));
98         Serial\&.println(jsonBuffer\&.size());
99         Serial\&.println();
100 
101         sensorsData=SPIFFS\&.open("/sensorsData\&.json","r");
102         
103         if(!sensorsData)
104         {
105             
106             Serial\&.println(F("failed to reopen /sensorsData\&.json"));
107             return(true);
108                         
109         }
110     
111         Serial\&.println( F("saved data is : ") );
112         root\&.printTo(Serial);
113         Serial\&.println();
114 
115         Serial\&.println(F("/sensorsData\&.json") );
116         while (sensorsData\&.available()) 
117         {
118             Serial\&.println(sensorsData\&.readString()) ;
119         }
120         
121         Serial\&.println();
122         
123         sensorsData\&.close();
124     
125     #endif
126 
127         this->saveSensorDataCSV(data);      
128 
129         //new data
130         this->savedData++;
131 
132         this->incrementsavedData();
133         
134         return (true);      
135     }
136     else
137     {
138     
139     #if DEBUG == 1
140 
141         Serial\&.println( F("failed to parse json") );
142     
143     #endif
144         //old data
145         this->savedData=savedData;
146 
147         return(false);
148     }
149     
150 
151 }
.fi
.SS "bool CoolFileSystem::saveSensorDataCSV (const char * data)"
CoolFileSystem::saveSensorDataCSV( data ): This method is provided to save the data on the local memory in CSV format\&.
.PP
\fBReturns:\fP
.RS 4
true if the data was saved, false otherwise 
.RE
.PP

.PP
Definition at line 162 of file CoolFileSystem\&.cpp\&.
.PP
.nf
163 {
164 #if DEBUG == 1
165 
166     Serial\&.println( F("Entering CoolFileSystem\&.saveSensorDataCSV()") );
167     Serial\&.println();
168 
169 #endif
170     //parsing json
171     DynamicJsonBuffer jsonBuffer;
172     JsonObject& root = jsonBuffer\&.parseObject(data);
173     String header="",values="";
174     
175     //if json parse success
176     if( root\&.success() )
177     {       
178         for (auto kv : root) 
179         {
180             //print the header(json keys ) to header string
181             header+=kv\&.key;
182             header+=',';
183             
184             //print the values to header string
185             values+=( kv\&.value\&.as<char*>() );
186             values+=',';
187         }
188 
189         header\&.remove(header\&.lastIndexOf(','), 1);
190         values\&.remove(values\&.lastIndexOf(','), 1);        
191     
192     #if DEBUG == 1
193     
194         Serial\&.println( F(" data is : ") );
195         root\&.printTo(Serial);
196         Serial\&.println();
197         
198         Serial\&.println(F(" header is :" ) ) ;
199         Serial\&.println(header);
200         Serial\&.println(F(" values are : "));
201         Serial\&.println(values);
202         
203         Serial\&.print(F("jsonBuffer size: "));
204         Serial\&.println(jsonBuffer\&.size());
205         Serial\&.println();
206 
207     
208     #endif
209     
210     }
211     //failed to parse json
212     else
213     {
214     
215     #if DEBUG == 1
216 
217         Serial\&.println( F("failed to parse json") );
218     
219     #endif
220 
221         return(false);
222     }
223 
224     //check if file exists
225     File sensorsData=SPIFFS\&.open("/sensorsData\&.csv","r");
226     
227     //file doesn't exist
228     if( (!sensorsData) || (sensorsData\&.size()==0 ) )
229     {
230     
231     #if DEBUG == 1
232     
233         Serial\&.println( F("/sensorsData\&.csv not found") );
234         Serial\&.println( F("creating /sensorsData\&.csv") );
235         Serial\&.println();
236     
237     #endif
238         //create file
239         sensorsData=SPIFFS\&.open("/sensorsData\&.csv","w");
240         
241         if(!sensorsData)
242         {
243 
244         #if DEBUG == 1
245         
246             Serial\&.println( F("failed to create /sensorsData\&.csv") );
247             Serial\&.println();
248         
249         #endif
250         
251             return(false);
252 
253         }
254         
255         //print the header(json keys ) to the CSV file
256         sensorsData\&.println(header);
257 
258         //print the values to the CSV file
259         sensorsData\&.println(values);
260         
261         sensorsData\&.close();
262     
263     #if DEBUG == 1
264 
265         sensorsData=SPIFFS\&.open("/sensorsData\&.csv","r");
266         
267         if(!sensorsData)
268         {
269             Serial\&.println(F("failed to reopen /sensorsData\&.csv "));
270             return(false);      
271         }
272 
273         Serial\&.println( F("/sensorsData\&.csv : ") );
274 
275         while (sensorsData\&.available()) 
276         {
277             Serial\&.print(sensorsData\&.readString()) ;
278         }
279         Serial\&.println();
280 
281         //close the file
282         sensorsData\&.close();
283 
284     #endif
285         
286 
287         
288         return(true);
289         
290     }
291 
292     //file exist
293     else
294     {
295 
296     #if DEBUG == 1
297     
298         Serial\&.println( F("/sensorsData\&.csv  found") );
299         Serial\&.println( F("appending to /sensorsData\&.csv") );
300         Serial\&.println();
301     
302     #endif
303 
304         //append to file
305         sensorsData=SPIFFS\&.open("/sensorsData\&.csv","a");
306         
307         if(!sensorsData)
308         {
309         
310         #if DEBUG == 1
311             
312             Serial\&.println( F("failed to open /sensorsData\&.csv") );
313             Serial\&.println();
314 
315         #endif
316             
317             return(false);
318         
319         }
320 
321         //print the values to the CSV file
322         sensorsData\&.println(values);
323         
324         sensorsData\&.close();
325 
326     #if DEBUG == 1
327 
328         sensorsData=SPIFFS\&.open("/sensorsData\&.csv","r");
329         
330         if(!sensorsData)
331         {
332             Serial\&.println(F("failed to reopen /sensorsData\&.csv "));
333             return(false);      
334         }
335 
336         
337         Serial\&.println( F("/sensorsData\&.csv : ") );
338 
339         while (sensorsData\&.available()) 
340         {
341             Serial\&.println(sensorsData\&.readString()) ;
342         }
343         
344         Serial\&.println();
345         
346         sensorsData\&.close();
347         
348     #endif      
349         
350         return(true);
351     
352     }   
353 
354 
355 
356 }
.fi
.SS "bool CoolFileSystem::updateConfigFiles (String answer)"
CoolFileSystem::updateConfigFiles( mqtt answer ): This method is provided to update the configuration files when the appropriate mqtt answer is received
.PP
\fBReturns:\fP
.RS 4
true if the files are updated correctly, false otherwise 
.RE
.PP

.PP
Definition at line 367 of file CoolFileSystem\&.cpp\&.
.PP
.nf
368 {
369 
370 #if DEBUG == 1
371 
372     Serial\&.println( F("Entering CoolFileSystem\&.updateConfigFiles") );
373     Serial\&.println();
374     
375     Serial\&.println( F("input answer : ") );
376     Serial\&.println(answer);
377 #endif
378 
379     //total json object 
380     DynamicJsonBuffer jsonBuffer;
381     JsonObject& root = jsonBuffer\&.parseObject( answer\&.c_str() );
382 
383 #if DEBUG == 1
384     
385     Serial\&.println( F("json object : ") );   
386     root\&.printTo(Serial);
387     Serial\&.println();
388     
389     Serial\&.print(F("jsonBuffer size: "));
390     Serial\&.println(jsonBuffer\&.size());
391     Serial\&.println();
392 
393 
394 #endif
395 
396     if(! ( root\&.success() ))
397     {
398     
399     #if DEBUG == 1
400 
401         Serial\&.println( F("failed to parse root ") );
402         Serial\&.println();
403     
404     #endif
405 
406         return(false);
407     }
408     else
409     {
410     #if DEBUG == 1
411         
412         Serial\&.println( F("success to parse root ") );
413         Serial\&.println();
414         
415     #endif  
416     }
417     
418 #if DEBUG == 1
419 
420     Serial\&.println( F("input message is : ") );
421     root\&.printTo(Serial);
422     Serial\&.println();
423 
424 #endif
425     //temp string
426     String temp;
427 
428     //CoolBoard Configuration File
429 
430         JsonObject& jsonCoolBoard=root["CoolBoard"];
431 
432 #if DEBUG == 1
433 
434     Serial\&.println( F("before config CoolBoard json") );
435     jsonCoolBoard\&.printTo(Serial);
436 
437 #endif
438 
439     if(jsonCoolBoard\&.success())
440     {
441         String update;
442     
443         jsonCoolBoard\&.printTo(update);
444 
445         this->fileUpdate(update,"/coolBoardConfig\&.json");        
446         
447     }
448     else
449     {
450     
451     #if DEBUG == 1 
452 
453         Serial\&.println( F("failed to parse CoolBoard ") );
454     
455     #endif
456 
457     }       
458 
459     
460     //Cool Board Sensors Configuration File
461         JsonObject& jsonSensorsBoard=root["CoolSensorsBoard"];
462 
463 #if DEBUG == 1 
464 
465     Serial\&.println( F("before config CoolSensorsBoard json") );
466     jsonSensorsBoard\&.printTo(Serial);
467 
468 #endif 
469     
470     if(jsonSensorsBoard\&.success())
471     {   
472         String update;
473     
474         jsonSensorsBoard\&.printTo(update);
475 
476         this->fileUpdate(update,"/coolBoardSensorsConfig\&.json");     
477 
478     }
479     else
480     {
481 
482     #if DEBUG == 1
483 
484         Serial\&.println( F("failed to parse CoolSensorsBoard sensors ") );    
485     
486     #endif
487 
488     }
489 
490     //Cool Board Actor Configuration File
491         JsonObject& jsonCoolBoardActor=root["CoolBoardActor"];
492 
493 #if DEBUG == 1 
494 
495     Serial\&.println( F("before config CoolBoardActor json") );
496     jsonCoolBoardActor\&.printTo(Serial);
497 
498 #endif 
499     
500     if(jsonCoolBoardActor\&.success())
501     {   
502         String update;
503     
504         jsonCoolBoardActor\&.printTo(update);
505 
506         this->fileUpdate(update,"/coolBoardActorConfig\&.json");       
507 
508     }
509     else
510     {
511 
512     #if DEBUG == 1
513 
514         Serial\&.println( F("failed to parse CoolBoardActor json ") ); 
515     
516     #endif
517 
518     }
519 
520     
521     //rtc configuration file
522         JsonObject& jsonRTC=root["rtc"];
523 
524 #if DEBUG == 1 
525     
526     Serial\&.println( F("before config rtc json") );
527     jsonRTC\&.printTo(Serial);
528 
529 #endif
530     if(jsonRTC\&.success() )
531     {
532         String update;
533 
534         jsonRTC\&.printTo(update);
535 
536         this->fileUpdate(update,"/rtcConfig\&.json");          
537     }
538     else
539     {
540     
541     #if DEBUG == 1 
542 
543         Serial\&.println( F("failed to parse rtc ") );
544     
545     #endif
546 
547     }
548     
549     
550         //cool board led configuration
551         JsonObject& jsonLedBoard=root["led"];
552     
553 #if DEBUG == 1 
554 
555     Serial\&.println( F("before config Led json") );
556     jsonLedBoard\&.printTo(Serial);
557 
558 #endif
559 
560     if(jsonLedBoard\&.success())
561     {   
562         String update;
563     
564         jsonLedBoard\&.printTo(update);
565 
566         this->fileUpdate(update,"/coolBoardLedConfig\&.json");     
567 
568     
569     }
570     else
571     {
572     
573     #if DEBUG == 1 
574 
575         Serial\&.println( F("failed to parse led") );
576     
577     #endif 
578 
579     }
580         
581 
582     
583 
584     //jetpack configuration
585         JsonObject& jsonJetpack=root["jetPack"];
586 
587 #if DEBUG == 1 
588 
589     Serial\&.println( F("before config jetpack json") );
590     jsonJetpack\&.printTo(Serial);
591 
592 #endif
593 
594     if(jsonJetpack\&.success())
595     {
596     
597         String update;
598     
599         jsonJetpack\&.printTo(update);
600 
601         this->fileUpdate(update,"/jetPackConfig\&.json");      
602 
603     }
604 
605     else
606     {
607     
608     #if DEBUG == 1 
609 
610         Serial\&.println( F("failed to parse jetpack") );  
611     
612     #endif
613 
614     }
615     
616     //irene configuration   
617         JsonObject& jsonIrene=root["irene3000"];
618     
619 #if DEBUG == 1 
620 
621     Serial\&.println( F("before config irene json") ); 
622     jsonIrene\&.printTo(Serial);
623 
624 #endif 
625 
626     if(jsonIrene\&.success())
627     {
628 
629         String update;
630     
631         jsonIrene\&.printTo(update);
632 
633         this->fileUpdate(update,"/irene3000Config\&.json");        
634     
635     }
636     else
637     {
638     
639     #if DEBUG == 1 
640 
641         Serial\&.println( F("failed to parse irene") );    
642     
643     #endif 
644 
645 
646     }
647     
648     //external sensors
649         JsonObject& jsonExternalSensors=root["externalSensors"];
650 
651 #if DEBUG == 1 
652 
653     Serial\&.println( F("before config external Sensors json") );
654     jsonExternalSensors\&.printTo(Serial);
655 
656 #endif
657 
658     if(jsonExternalSensors\&.success())
659     {
660 
661         String update;
662     
663         jsonExternalSensors\&.printTo(update);
664 
665         this->fileUpdate(update,"/externalSensorsConfig\&.json");      
666 
667     }
668 
669     else
670     {   
671 
672     #if DEBUG == 1
673         
674         Serial\&.println( F("failed to parse external sensors") );
675 
676     #endif
677 
678 
679     }
680 
681     
682     //mqtt config
683         JsonObject& jsonMQTT=root["mqtt"];
684     
685 #if DEBUG == 1 
686 
687     Serial\&.println( F("before config mqtt json") );
688     jsonMQTT\&.printTo(Serial);
689 
690 #endif
691 
692     if(jsonMQTT\&.success())
693     {
694 
695         String update;
696     
697         jsonMQTT\&.printTo(update);
698 
699         this->fileUpdate(update,"/mqttConfig\&.json");     
700 
701     }
702     else
703     {
704 
705     #if DEBUG == 1 
706 
707         Serial\&.println( F("failed to parse mqtt") );
708     
709     #endif
710 
711     
712     }   
713 
714     //wifi config
715         JsonObject& jsonWifi=root["wifi"];
716     
717 #if DEBUG == 1 
718 
719     Serial\&.println( F("before config wifi json") );
720     jsonWifi\&.printTo(Serial);
721 
722 #endif
723 
724     if(jsonWifi\&.success())
725     {
726 
727         String update;
728     
729         jsonWifi\&.printTo(update);
730 
731         this->fileUpdate(update,"/wifiConfig\&.json");     
732 
733     }
734     else
735     {
736 
737     #if DEBUG == 1 
738 
739         Serial\&.println( F("failed to parse wifi") );
740     
741     #endif
742 
743     
744     }   
745         
746     return true;
747 
748 }   
.fi
.SH "Member Data Documentation"
.PP 
.SS "int CoolFileSystem::linesToSkip =0\fC [private]\fP"

.PP
Definition at line 49 of file CoolFileSystem\&.h\&.
.SS "int CoolFileSystem::savedData =0\fC [private]\fP"

.PP
Definition at line 47 of file CoolFileSystem\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolBoardAPI from the source code\&.
