.TH "CoolFileSystem" 3 "Thu Aug 24 2017" "CoolBoardAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoolFileSystem \- This class handles the file system\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolFileSystem\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "bool \fBbegin\fP ()"
.br
.ti -1c
.RI "bool \fBupdateConfigFiles\fP (String answer)"
.br
.ti -1c
.RI "bool \fBfileUpdate\fP (String update, const char *path)"
.br
.ti -1c
.RI "bool \fBsaveSensorData\fP (const char *data)"
.br
.ti -1c
.RI "bool \fBsaveSensorDataCSV\fP (const char *data)"
.br
.ti -1c
.RI "int \fBisDataSaved\fP ()"
.br
.ti -1c
.RI "String * \fBgetSensorSavedData\fP (int &size)"
.br
.ti -1c
.RI "bool \fBincrementsavedData\fP ()"
.br
.ti -1c
.RI "void \fBgetsavedData\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "int \fBsavedData\fP =0"
.br
.ti -1c
.RI "int \fBlinesToSkip\fP =0"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class handles the file system\&. 
.PP
Definition at line 44 of file CoolFileSystem\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "bool CoolFileSystem::begin ()"
\fBCoolFileSystem::begin()\fP: This method is provided to start the SPIFFS object\&.
.PP
\fBReturns:\fP
.RS 4
true if SPIFFS was initialized correctly, false otherwise 
.RE
.PP

.PP
Definition at line 48 of file CoolFileSystem\&.cpp\&.
.PP
.nf
49 {
50     bool sResult=SPIFFS\&.begin();
51     
52 
53 #if DEBUG == 1
54 
55     Serial\&.println( F("Entering CoolFileSystem\&.begin()") );
56     Serial\&.println();    
57     Serial\&.print( F("SPIFFS success ? ") );
58     Serial\&.println(sResult);
59     Serial\&.println(  );
60 
61 #endif
62     //get the data from the files
63     this->getsavedData();
64 
65     return( sResult  );                                   //Initialize Filesystem
66 
67 }
.fi
.SS "bool CoolFileSystem::fileUpdate (String update, const char * path)"
CoolFileSystem::fileUpdate( update msg, file path): This method is provided to ensure the correct update for each configuration file in the File system
.PP
\fBReturns:\fP
.RS 4
true if successful , false otherwise 
.RE
.PP

.PP
Definition at line 1001 of file CoolFileSystem\&.cpp\&.
.PP
.nf
1002 {
1003 
1004 #if DEBUG == 1
1005 
1006     Serial\&.println( F("Entering CoolFileSystem\&.fileUpdate()") );
1007     Serial\&.println();
1008     
1009     Serial\&.println(F("update msg is :"));
1010     Serial\&.println(update);
1011     
1012     Serial\&.println(F("file path is : "));
1013     Serial\&.println(path);    
1014 
1015 #endif
1016     //transfer update String to json
1017     DynamicJsonBuffer updateBuffer;
1018     JsonObject& updateJson = updateBuffer\&.parseObject(update\&.c_str() );
1019     
1020     if(updateJson\&.success())
1021     {
1022     
1023     #if DEBUG ==1
1024         
1025         Serial\&.println(F("root parsing success :"));
1026         updateJson\&.printTo(Serial);
1027     
1028     #endif
1029 
1030     }
1031     else
1032     {
1033     
1034     #if DEBUG == 1 
1035     
1036         Serial\&.println(F("root parsing failure "));
1037     
1038     #endif
1039         
1040         return(false);  
1041 
1042     }
1043     
1044     //open file in read mode
1045     File configFile = SPIFFS\&.open( path , "r");
1046     
1047     if(!configFile)
1048     {   
1049     #if DEBUG == 1
1050         
1051         Serial\&.print( F("failed to read ") );
1052         Serial\&.println(path);
1053 
1054     #endif
1055         return(false);
1056     }
1057 
1058     //copy file to a json
1059     size_t size = configFile\&.size();
1060 
1061     // Allocate a buffer to store contents of the file\&.
1062     std::unique_ptr < char[] > buf(new char[size]);
1063 
1064     configFile\&.readBytes(buf\&.get(), size);
1065 
1066     DynamicJsonBuffer fileBuffer;
1067 
1068     JsonObject & fileJson = fileBuffer\&.parseObject(buf\&.get());
1069 
1070     if (!fileJson\&.success())
1071     {
1072 
1073     #if DEBUG == 1
1074 
1075         Serial\&.println( F("failed to parse json") );
1076 
1077     #endif
1078 
1079         return(false);
1080     }
1081     
1082     //modify root to contain all the json keys: updated ones and non updated ones
1083     for (auto kv : fileJson) 
1084     {
1085         if( updateJson[kv\&.key]\&.success() )
1086         {
1087             fileJson[kv\&.key]=updateJson[kv\&.key];          
1088         }
1089         else
1090         {
1091             fileJson[kv\&.key]=fileJson[kv\&.key];
1092         }
1093 
1094                 
1095     }
1096 
1097 #if DEBUG == 1
1098 
1099     Serial\&.println(F("fileJson is now : "));
1100     fileJson\&.printTo(Serial);
1101 
1102 #endif
1103 
1104     //close the file
1105     configFile\&.close();
1106 
1107     //open file in w mode
1108     configFile = SPIFFS\&.open( path , "w");
1109     
1110     if(!configFile)
1111     {   
1112     #if DEBUG == 1
1113         
1114         Serial\&.print( F("failed to open ") );
1115         Serial\&.println(path);
1116 
1117     #endif
1118         return(false);
1119     }
1120     //print json to file    
1121     
1122     fileJson\&.printTo(configFile);
1123     
1124     //close file
1125     configFile\&.close();
1126 
1127 
1128 #if DEBUG == 1
1129 
1130     Serial\&.println( F("config is") );
1131     fileJson\&.printTo(Serial);
1132     Serial\&.println();
1133 
1134 #endif
1135     
1136     return(true);
1137     
1138 }
.fi
.SS "void CoolFileSystem::getsavedData ()"
\fBCoolFileSystem::getsavedData()\fP: This method is provided to get the savedData flag from the file system 
.PP
Definition at line 1200 of file CoolFileSystem\&.cpp\&.
.PP
.nf
1201 {
1202 
1203 
1204 #if DEBUG == 1
1205     
1206     Serial\&.println(F("Entering CoolFileSystem\&.getsavedData()"));  
1207     
1208 #endif
1209     //open file
1210     File file=SPIFFS\&.open("/savedDataFlag\&.txt","r");  
1211     //read file
1212     if( !file)  
1213     {
1214         Serial\&.println( F("failed to read savedDataFlag\&.txt") );
1215         
1216     }
1217     else
1218     {       
1219         //read from file    
1220         String temp=file\&.readStringUntil(' ');
1221         
1222         this->savedData=temp\&.toInt();
1223 
1224         
1225         temp=file\&.readStringUntil('\n');
1226         this-> linesToSkip=temp\&.toInt();;    
1227         
1228         file\&.close();    
1229     }
1230     
1231 #if DEBUG == 1
1232 
1233     Serial\&.print(F("number of lines to read :"));
1234     Serial\&.println(this->savedData);
1235     
1236     Serial\&.print(F("number of lines to skip :"));
1237     Serial\&.println(this->linesToSkip);
1238 
1239 #endif
1240     
1241 }
.fi
.SS "String * CoolFileSystem::getSensorSavedData (int & lines)"
CoolFileSystem::getSensorData(int &lines): This method is provided to return the sensor data saved in the File System 10 lines at a time
.PP
\fBReturns:\fP
.RS 4
String array containing 50 first lines from the file modifies tge lines argument to reflect the number of lines left 
.RE
.PP

.PP
Definition at line 840 of file CoolFileSystem\&.cpp\&.
.PP
.nf
841 {
842     int maxString=50;
843     String *sensorsDataArray=new String[maxString];
844     lines=0;
845 
846 #if DEBUG == 1 
847 
848     Serial\&.println( F("Entering CoolFileSystem\&.getSensorSavedData()") );
849     Serial\&.println();
850 
851 #endif
852 
853     //open sensors data file
854     File sensorsData=SPIFFS\&.open("/sensorsData\&.json","r");
855     
856     if (!sensorsData)
857     {
858 
859     #if DEBUG == 1 
860 
861         Serial\&.println( F("Failed to read /sensorsData\&.json") );
862 
863     #endif
864          
865         sensorsDataArray[0]="Failed to read /sensorsData\&.json";
866         lines++;
867 
868         //result=sensorsDataArray;
869         return(sensorsDataArray);
870 
871     }
872 
873     else
874     {
875         //read the file line by line and put it in the String array(aka String*)        
876 
877         //while loop until EOF is reached
878         String temp;
879         while(sensorsData\&.available())
880         {
881             yield();
882             
883             temp=sensorsData\&.readStringUntil('\r');
884 
885             if(linesToSkip>0)
886             {
887 
888                 linesToSkip--;
889         
890             }
891             else
892             {
893 
894             #if DEBUG == 1
895 
896                 Serial\&.println(F("temp String : "));
897                 Serial\&.println(temp);
898                 Serial\&.println();
899             
900             #endif
901             
902                 sensorsDataArray[lines]=temp;
903                 sensorsData\&.read();
904             
905             
906         
907             #if DEBUG== 1
908      
909                 Serial\&.print(F("read String NÂ°"));
910                 Serial\&.print(lines);
911                 Serial\&.println(F(" is : "));
912                 Serial\&.println( sensorsDataArray[lines] );
913                 Serial\&.println();
914                 Serial\&.println(F("next char is : "));
915                 Serial\&.println((char)sensorsData\&.peek());
916                 Serial\&.println();            
917             
918             #endif
919                 lines++;
920             
921                 //maximum size is maxString(index : 0\&.\&.maxString-1)
922                 if(lines>=maxString)
923                 {
924                     break;
925                 }
926             
927                 yield();
928             
929             }
930 
931         }
932         
933                     
934         //close the file
935         sensorsData\&.close();
936 
937         //position the saved data flag to the number of unread lines
938         this->savedData=savedData-lines;
939         
940         //position the number of lines to skip to the number of read lines  
941         this->linesToSkip=lines;
942 
943         //delete data in the file only if savedData<=0
944         if(this->savedData<=0)
945         {
946             File sensorsData=SPIFFS\&.open("/sensorsData\&.json","w");
947             File sensorsDataCSV=SPIFFS\&.open("/sensorsData\&.csv","w");
948             if( (!sensorsData)||(!sensorsDataCSV) ) 
949             {
950             #if DEBUG == 1
951     
952                 Serial\&.println( F("failed to delete data in the file") );
953     
954             #endif
955                 lines++;
956                 sensorsDataArray[lines]="failed to delete data in the file";
957 
958                 return(sensorsDataArray);
959 
960             }
961 
962             sensorsData\&.close();
963             sensorsDataCSV\&.close();
964             
965             this->linesToSkip=0;
966         
967         }
968 
969         //save the changes to linesToSkip and savedData in the file system
970         this->incrementsavedData();
971 
972         //return the string
973         #if DEBUG == 1
974         
975             for(int i=0;i<lines;i++)
976             {
977                 Serial\&.print(F("String NÂ°"));
978                 Serial\&.println(i);
979                 Serial\&.println(sensorsDataArray[i]);
980                 Serial\&.println();            
981             }
982     
983         #endif
984         return(sensorsDataArray);
985         
986         
987         
988     }
989 
990 }
.fi
.SS "bool CoolFileSystem::incrementsavedData ()"
\fBCoolFileSystem::incrementsavedData()\fP: This method is provided to increment the savedData flag
.PP
\fBReturns:\fP
.RS 4
true if successful , false otherwise 
.RE
.PP

.PP
Definition at line 1150 of file CoolFileSystem\&.cpp\&.
.PP
.nf
1151 {
1152 
1153 
1154 #if DEBUG == 1
1155     
1156     Serial\&.println(F("Entering CoolFileSystem\&.incrementsavedData()"));    
1157     
1158 #endif
1159     //open file
1160     File file=SPIFFS\&.open("/savedDataFlag\&.txt","w");  
1161     //read file
1162     if( !file)  
1163     {
1164         Serial\&.println( F("failed to open savedDataFlag\&.txt") );
1165         
1166         return(false);      
1167     }
1168     else
1169     {       
1170         //write to file 
1171         file\&.print(this->savedData);
1172         
1173         file\&.print(" ");
1174         
1175         file\&.println(this->linesToSkip);
1176     
1177         file\&.close();
1178 
1179     #if DEBUG == 1
1180 
1181         Serial\&.print(F("number of lines to read :"));
1182         Serial\&.println(this->savedData);
1183     
1184         Serial\&.print(F("number of lines to skip :"));
1185         Serial\&.println(this->linesToSkip);
1186 
1187     #endif
1188         
1189         return(true);
1190     }
1191     
1192 }
.fi
.SS "int CoolFileSystem::isDataSaved ()"
\fBCoolFileSystem::isDataSaved()\fP: This method is provided to report wether there is sensor data saved in the File System\&.
.PP
\fBReturns:\fP
.RS 4
true if there is data saved, false otherwise 
.RE
.PP

.PP
Definition at line 780 of file CoolFileSystem\&.cpp\&.
.PP
.nf
781 {
782 
783 #if DEBUG == 1 
784 
785     Serial\&.println( F("Entering CoolFileSystem\&.isDataSaved()") );
786     Serial\&.println();
787 
788     FSInfo fs_info;
789 
790     if(SPIFFS\&.info(fs_info)==true)
791     {
792         Serial\&.print(F("used bytes/total bytes : "));    
793         Serial\&.print(fs_info\&.usedBytes);
794         Serial\&.print(F("/"));
795         Serial\&.print(fs_info\&.totalBytes);
796         Serial\&.println();
797 
798     }
799 
800     File sensorsData=SPIFFS\&.open("/sensorsData\&.json","r");
801     File sensorsDataCSV=SPIFFS\&.open("/sensorsData\&.csv","r");
802     
803     if( (!sensorsData)||(!sensorsDataCSV) ) 
804     {
805         Serial\&.println( F("failed to open files") );     
806     }
807     else
808     {       
809             Serial\&.print(F("sensors Data file size in bytes : "));
810             Serial\&.println(sensorsData\&.size());
811             Serial\&.println();
812             
813             Serial\&.print(F("sensors Data CSV file size in bytes : "));               
814             Serial\&.println(sensorsDataCSV\&.size());
815             Serial\&.println();
816     }
817 
818 
819 
820     Serial\&.print( F("savedData : ") );
821     Serial\&.println(this->savedData);
822 
823 #endif
824 
825     return( this->savedData );
826 }
.fi
.SS "bool CoolFileSystem::saveSensorData (const char * data)"
CoolFileSystem::saveSensorData( data ): This method is provided to save the data on the local memory when there is no internet available
.PP
increments the saved data flag when successful
.PP
\fBReturns:\fP
.RS 4
true if the data was saved, false otherwise 
.RE
.PP

.PP
Definition at line 79 of file CoolFileSystem\&.cpp\&.
.PP
.nf
80 {
81 
82 #if DEBUG == 1
83 
84     Serial\&.println( F("Entering CoolFileSystem\&.saveSensorData()") );
85     Serial\&.println();
86 
87 #endif
88     
89     File sensorsData=SPIFFS\&.open("/sensorsData\&.json","a");
90 
91     if(!sensorsData)
92     {
93     
94     #if DEBUG == 1
95     
96         Serial\&.println( F("failed to append to /sensorsData\&.json") );
97         Serial\&.println();
98     
99     #endif
100         //keep the old data
101         this->savedData=savedData;
102 
103         return (false); 
104     }   
105 
106     DynamicJsonBuffer jsonBuffer;
107     JsonObject& root = jsonBuffer\&.parseObject(data);
108 
109     if( root\&.success() )
110     {
111         root\&.printTo(sensorsData);
112         sensorsData\&.println();
113         sensorsData\&.close();
114 
115 
116     #if DEBUG == 1
117         
118         Serial\&.print(F("jsonBuffer size: "));
119         Serial\&.println(jsonBuffer\&.size());
120         Serial\&.println();
121 
122         sensorsData=SPIFFS\&.open("/sensorsData\&.json","r");
123         
124         if(!sensorsData)
125         {
126             
127             Serial\&.println(F("failed to reopen /sensorsData\&.json"));
128             return(true);
129                         
130         }
131     
132         Serial\&.println( F("saved data is : ") );
133         root\&.printTo(Serial);
134         Serial\&.println();
135 
136         Serial\&.println(F("/sensorsData\&.json") );
137         while (sensorsData\&.available()) 
138         {
139             Serial\&.println(sensorsData\&.readString()) ;
140         }
141         
142         Serial\&.println();
143         
144         sensorsData\&.close();
145     
146     #endif
147 
148         this->saveSensorDataCSV(data);      
149 
150         //new data
151         this->savedData++;
152 
153         this->incrementsavedData();
154         
155         return (true);      
156     }
157     else
158     {
159     
160     #if DEBUG == 1
161 
162         Serial\&.println( F("failed to parse json") );
163     
164     #endif
165         //old data
166         this->savedData=savedData;
167 
168         return(false);
169     }
170     
171 
172 }
.fi
.SS "bool CoolFileSystem::saveSensorDataCSV (const char * data)"
CoolFileSystem::saveSensorDataCSV( data ): This method is provided to save the data on the local memory in CSV format\&.
.PP
\fBReturns:\fP
.RS 4
true if the data was saved, false otherwise 
.RE
.PP

.PP
Definition at line 183 of file CoolFileSystem\&.cpp\&.
.PP
.nf
184 {
185 #if DEBUG == 1
186 
187     Serial\&.println( F("Entering CoolFileSystem\&.saveSensorDataCSV()") );
188     Serial\&.println();
189 
190 #endif
191     //parsing json
192     DynamicJsonBuffer jsonBuffer;
193     JsonObject& root = jsonBuffer\&.parseObject(data);
194     String header="",values="";
195     
196     //if json parse success
197     if( root\&.success() )
198     {       
199         for (auto kv : root) 
200         {
201             //print the header(json keys ) to header string
202             header+=kv\&.key;
203             header+=',';
204             
205             //print the values to header string
206             values+=( kv\&.value\&.as<char*>() );
207             values+=',';
208         }
209 
210         header\&.remove(header\&.lastIndexOf(','), 1);
211         values\&.remove(values\&.lastIndexOf(','), 1);        
212     
213     #if DEBUG == 1
214     
215         Serial\&.println( F(" data is : ") );
216         root\&.printTo(Serial);
217         Serial\&.println();
218         
219         Serial\&.println(F(" header is :" ) ) ;
220         Serial\&.println(header);
221         Serial\&.println(F(" values are : "));
222         Serial\&.println(values);
223         
224         Serial\&.print(F("jsonBuffer size: "));
225         Serial\&.println(jsonBuffer\&.size());
226         Serial\&.println();
227 
228     
229     #endif
230     
231     }
232     //failed to parse json
233     else
234     {
235     
236     #if DEBUG == 1
237 
238         Serial\&.println( F("failed to parse json") );
239     
240     #endif
241 
242         return(false);
243     }
244 
245     //check if file exists
246     File sensorsData=SPIFFS\&.open("/sensorsData\&.csv","r");
247     
248     //file doesn't exist
249     if( (!sensorsData) || (sensorsData\&.size()==0 ) )
250     {
251     
252     #if DEBUG == 1
253     
254         Serial\&.println( F("/sensorsData\&.csv not found") );
255         Serial\&.println( F("creating /sensorsData\&.csv") );
256         Serial\&.println();
257     
258     #endif
259         //create file
260         sensorsData=SPIFFS\&.open("/sensorsData\&.csv","w");
261         
262         if(!sensorsData)
263         {
264 
265         #if DEBUG == 1
266         
267             Serial\&.println( F("failed to create /sensorsData\&.csv") );
268             Serial\&.println();
269         
270         #endif
271         
272             return(false);
273 
274         }
275         
276         //print the header(json keys ) to the CSV file
277         sensorsData\&.println(header);
278 
279         //print the values to the CSV file
280         sensorsData\&.println(values);
281         
282         sensorsData\&.close();
283     
284     #if DEBUG == 1
285 
286         sensorsData=SPIFFS\&.open("/sensorsData\&.csv","r");
287         
288         if(!sensorsData)
289         {
290             Serial\&.println(F("failed to reopen /sensorsData\&.csv "));
291             return(false);      
292         }
293 
294         Serial\&.println( F("/sensorsData\&.csv : ") );
295 
296         while (sensorsData\&.available()) 
297         {
298             Serial\&.print(sensorsData\&.readString()) ;
299         }
300         Serial\&.println();
301 
302         //close the file
303         sensorsData\&.close();
304 
305     #endif
306         
307 
308         
309         return(true);
310         
311     }
312 
313     //file exist
314     else
315     {
316 
317     #if DEBUG == 1
318     
319         Serial\&.println( F("/sensorsData\&.csv  found") );
320         Serial\&.println( F("appending to /sensorsData\&.csv") );
321         Serial\&.println();
322     
323     #endif
324 
325         //append to file
326         sensorsData=SPIFFS\&.open("/sensorsData\&.csv","a");
327         
328         if(!sensorsData)
329         {
330         
331         #if DEBUG == 1
332             
333             Serial\&.println( F("failed to open /sensorsData\&.csv") );
334             Serial\&.println();
335 
336         #endif
337             
338             return(false);
339         
340         }
341 
342         //print the values to the CSV file
343         sensorsData\&.println(values);
344         
345         sensorsData\&.close();
346 
347     #if DEBUG == 1
348 
349         sensorsData=SPIFFS\&.open("/sensorsData\&.csv","r");
350         
351         if(!sensorsData)
352         {
353             Serial\&.println(F("failed to reopen /sensorsData\&.csv "));
354             return(false);      
355         }
356 
357         
358         Serial\&.println( F("/sensorsData\&.csv : ") );
359 
360         while (sensorsData\&.available()) 
361         {
362             Serial\&.println(sensorsData\&.readString()) ;
363         }
364         
365         Serial\&.println();
366         
367         sensorsData\&.close();
368         
369     #endif      
370         
371         return(true);
372     
373     }   
374 
375 
376 
377 }
.fi
.SS "bool CoolFileSystem::updateConfigFiles (String answer)"
CoolFileSystem::updateConfigFiles( mqtt answer ): This method is provided to update the configuration files when the appropriate mqtt answer is received
.PP
\fBReturns:\fP
.RS 4
true if the files are updated correctly, false otherwise 
.RE
.PP

.PP
Definition at line 388 of file CoolFileSystem\&.cpp\&.
.PP
.nf
389 {
390 
391 #if DEBUG == 1
392 
393     Serial\&.println( F("Entering CoolFileSystem\&.updateConfigFiles") );
394     Serial\&.println();
395     
396     Serial\&.println( F("input answer : ") );
397     Serial\&.println(answer);
398 #endif
399 
400     //total json object 
401     DynamicJsonBuffer jsonBuffer;
402     JsonObject& root = jsonBuffer\&.parseObject( answer\&.c_str() );
403 
404 #if DEBUG == 1
405     
406     Serial\&.println( F("json object : ") );   
407     root\&.printTo(Serial);
408     Serial\&.println();
409     
410     Serial\&.print(F("jsonBuffer size: "));
411     Serial\&.println(jsonBuffer\&.size());
412     Serial\&.println();
413 
414 
415 #endif
416 
417     if(! ( root\&.success() ))
418     {
419     
420     #if DEBUG == 1
421 
422         Serial\&.println( F("failed to parse root ") );
423         Serial\&.println();
424     
425     #endif
426 
427         return(false);
428     }
429     else
430     {
431     #if DEBUG == 1
432         
433         Serial\&.println( F("success to parse root ") );
434         Serial\&.println();
435         
436     #endif  
437     }
438     
439 #if DEBUG == 1
440 
441     Serial\&.println( F("input message is : ") );
442     root\&.printTo(Serial);
443     Serial\&.println();
444 
445 #endif
446     //temp string
447     String temp;
448 
449     //CoolBoard Configuration File
450 
451         JsonObject& jsonCoolBoard=root["CoolBoard"];
452 
453 #if DEBUG == 1
454 
455     Serial\&.println( F("before config CoolBoard json") );
456     jsonCoolBoard\&.printTo(Serial);
457 
458 #endif
459 
460     if(jsonCoolBoard\&.success())
461     {
462         String update;
463     
464         jsonCoolBoard\&.printTo(update);
465 
466         this->fileUpdate(update,"/coolBoardConfig\&.json");        
467         
468     }
469     else
470     {
471     
472     #if DEBUG == 1 
473 
474         Serial\&.println( F("failed to parse CoolBoard ") );
475     
476     #endif
477 
478     }       
479 
480     
481     //Cool Board Sensors Configuration File
482         JsonObject& jsonSensorsBoard=root["CoolSensorsBoard"];
483 
484 #if DEBUG == 1 
485 
486     Serial\&.println( F("before config CoolSensorsBoard json") );
487     jsonSensorsBoard\&.printTo(Serial);
488 
489 #endif 
490     
491     if(jsonSensorsBoard\&.success())
492     {   
493         String update;
494     
495         jsonSensorsBoard\&.printTo(update);
496 
497         this->fileUpdate(update,"/coolBoardSensorsConfig\&.json");     
498 
499     }
500     else
501     {
502 
503     #if DEBUG == 1
504 
505         Serial\&.println( F("failed to parse CoolSensorsBoard sensors ") );    
506     
507     #endif
508 
509     }
510 
511     //Cool Board Actor Configuration File
512         JsonObject& jsonCoolBoardActor=root["CoolBoardActor"];
513 
514 #if DEBUG == 1 
515 
516     Serial\&.println( F("before config CoolBoardActor json") );
517     jsonCoolBoardActor\&.printTo(Serial);
518 
519 #endif 
520     
521     if(jsonCoolBoardActor\&.success())
522     {   
523         String update;
524     
525         jsonCoolBoardActor\&.printTo(update);
526 
527         this->fileUpdate(update,"/coolBoardActorConfig\&.json");       
528 
529     }
530     else
531     {
532 
533     #if DEBUG == 1
534 
535         Serial\&.println( F("failed to parse CoolBoardActor json ") ); 
536     
537     #endif
538 
539     }
540 
541     
542     //rtc configuration file
543         JsonObject& jsonRTC=root["rtc"];
544 
545 #if DEBUG == 1 
546     
547     Serial\&.println( F("before config rtc json") );
548     jsonRTC\&.printTo(Serial);
549 
550 #endif
551     if(jsonRTC\&.success() )
552     {
553         String update;
554 
555         jsonRTC\&.printTo(update);
556 
557         this->fileUpdate(update,"/rtcConfig\&.json");          
558     }
559     else
560     {
561     
562     #if DEBUG == 1 
563 
564         Serial\&.println( F("failed to parse rtc ") );
565     
566     #endif
567 
568     }
569     
570     
571         //cool board led configuration
572         JsonObject& jsonLedBoard=root["led"];
573     
574 #if DEBUG == 1 
575 
576     Serial\&.println( F("before config Led json") );
577     jsonLedBoard\&.printTo(Serial);
578 
579 #endif
580 
581     if(jsonLedBoard\&.success())
582     {   
583         String update;
584     
585         jsonLedBoard\&.printTo(update);
586 
587         this->fileUpdate(update,"/coolBoardLedConfig\&.json");     
588 
589     
590     }
591     else
592     {
593     
594     #if DEBUG == 1 
595 
596         Serial\&.println( F("failed to parse led") );
597     
598     #endif 
599 
600     }
601         
602 
603     
604 
605     //jetpack configuration
606         JsonObject& jsonJetpack=root["jetPack"];
607 
608 #if DEBUG == 1 
609 
610     Serial\&.println( F("before config jetpack json") );
611     jsonJetpack\&.printTo(Serial);
612 
613 #endif
614 
615     if(jsonJetpack\&.success())
616     {
617     
618         String update;
619     
620         jsonJetpack\&.printTo(update);
621 
622         this->fileUpdate(update,"/jetPackConfig\&.json");      
623 
624     }
625 
626     else
627     {
628     
629     #if DEBUG == 1 
630 
631         Serial\&.println( F("failed to parse jetpack") );  
632     
633     #endif
634 
635     }
636     
637     //irene configuration   
638         JsonObject& jsonIrene=root["irene3000"];
639     
640 #if DEBUG == 1 
641 
642     Serial\&.println( F("before config irene json") ); 
643     jsonIrene\&.printTo(Serial);
644 
645 #endif 
646 
647     if(jsonIrene\&.success())
648     {
649 
650         String update;
651     
652         jsonIrene\&.printTo(update);
653 
654         this->fileUpdate(update,"/irene3000Config\&.json");        
655     
656     }
657     else
658     {
659     
660     #if DEBUG == 1 
661 
662         Serial\&.println( F("failed to parse irene") );    
663     
664     #endif 
665 
666 
667     }
668     
669     //external sensors
670         JsonObject& jsonExternalSensors=root["externalSensors"];
671 
672 #if DEBUG == 1 
673 
674     Serial\&.println( F("before config external Sensors json") );
675     jsonExternalSensors\&.printTo(Serial);
676 
677 #endif
678 
679     if(jsonExternalSensors\&.success())
680     {
681 
682         String update;
683     
684         jsonExternalSensors\&.printTo(update);
685 
686         this->fileUpdate(update,"/externalSensorsConfig\&.json");      
687 
688     }
689 
690     else
691     {   
692 
693     #if DEBUG == 1
694         
695         Serial\&.println( F("failed to parse external sensors") );
696 
697     #endif
698 
699 
700     }
701 
702     
703     //mqtt config
704         JsonObject& jsonMQTT=root["mqtt"];
705     
706 #if DEBUG == 1 
707 
708     Serial\&.println( F("before config mqtt json") );
709     jsonMQTT\&.printTo(Serial);
710 
711 #endif
712 
713     if(jsonMQTT\&.success())
714     {
715 
716         String update;
717     
718         jsonMQTT\&.printTo(update);
719 
720         this->fileUpdate(update,"/mqttConfig\&.json");     
721 
722     }
723     else
724     {
725 
726     #if DEBUG == 1 
727 
728         Serial\&.println( F("failed to parse mqtt") );
729     
730     #endif
731 
732     
733     }   
734 
735     //wifi config
736         JsonObject& jsonWifi=root["wifi"];
737     
738 #if DEBUG == 1 
739 
740     Serial\&.println( F("before config wifi json") );
741     jsonWifi\&.printTo(Serial);
742 
743 #endif
744 
745     if(jsonWifi\&.success())
746     {
747 
748         String update;
749     
750         jsonWifi\&.printTo(update);
751 
752         this->fileUpdate(update,"/wifiConfig\&.json");     
753 
754     }
755     else
756     {
757 
758     #if DEBUG == 1 
759 
760         Serial\&.println( F("failed to parse wifi") );
761     
762     #endif
763 
764     
765     }   
766         
767     return true;
768 
769 }   
.fi
.SH "Member Data Documentation"
.PP 
.SS "int CoolFileSystem::linesToSkip =0\fC [private]\fP"

.PP
Definition at line 70 of file CoolFileSystem\&.h\&.
.SS "int CoolFileSystem::savedData =0\fC [private]\fP"

.PP
Definition at line 68 of file CoolFileSystem\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolBoardAPI from the source code\&.
