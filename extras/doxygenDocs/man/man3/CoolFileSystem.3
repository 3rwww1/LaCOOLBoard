.TH "CoolFileSystem" 3 "Wed Aug 30 2017" "CoolBoardAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoolFileSystem \- This class handles the file system\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolFileSystem\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "bool \fBbegin\fP ()"
.br
.ti -1c
.RI "bool \fBupdateConfigFiles\fP (String answer)"
.br
.ti -1c
.RI "bool \fBfileUpdate\fP (String update, const char *path)"
.br
.ti -1c
.RI "bool \fBsaveSensorData\fP (const char *data)"
.br
.ti -1c
.RI "bool \fBsaveSensorDataCSV\fP (const char *data)"
.br
.ti -1c
.RI "int \fBisDataSaved\fP ()"
.br
.ti -1c
.RI "String * \fBgetSensorSavedData\fP (int &size)"
.br
.ti -1c
.RI "bool \fBincrementsavedData\fP ()"
.br
.ti -1c
.RI "void \fBgetsavedData\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "int \fBsavedData\fP =0"
.br
.ti -1c
.RI "int \fBlinesToSkip\fP =0"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class handles the file system\&. 
.PP
Definition at line 46 of file CoolFileSystem\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "bool CoolFileSystem::begin ()"
\fBCoolFileSystem::begin()\fP: This method is provided to start the SPIFFS object\&.
.PP
\fBReturns:\fP
.RS 4
true if SPIFFS was initialized correctly, false otherwise 
.RE
.PP

.PP
Definition at line 50 of file CoolFileSystem\&.cpp\&.
.PP
.nf
51 {
52     bool sResult=SPIFFS\&.begin();
53     
54 
55 #if DEBUG == 1
56 
57     Serial\&.println( F("Entering CoolFileSystem\&.begin()") );
58     Serial\&.println();    
59     Serial\&.print( F("SPIFFS success ? ") );
60     Serial\&.println(sResult);
61     Serial\&.println(  );
62 
63 #endif
64     //get the data from the files
65     this->getsavedData();
66 
67     return( sResult  );                                   //Initialize Filesystem
68 
69 }
.fi
.SS "bool CoolFileSystem::fileUpdate (String update, const char * path)"
CoolFileSystem::fileUpdate( update msg, file path): This method is provided to ensure the correct update for each configuration file in the File system
.PP
\fBReturns:\fP
.RS 4
true if successful , false otherwise 
.RE
.PP

.PP
Definition at line 1003 of file CoolFileSystem\&.cpp\&.
.PP
.nf
1004 {
1005 
1006 #if DEBUG == 1
1007 
1008     Serial\&.println( F("Entering CoolFileSystem\&.fileUpdate()") );
1009     Serial\&.println();
1010     
1011     Serial\&.println(F("update msg is :"));
1012     Serial\&.println(update);
1013     
1014     Serial\&.println(F("file path is : "));
1015     Serial\&.println(path);    
1016 
1017 #endif
1018     //transfer update String to json
1019     DynamicJsonBuffer updateBuffer;
1020     JsonObject& updateJson = updateBuffer\&.parseObject(update\&.c_str() );
1021     
1022     if(updateJson\&.success())
1023     {
1024     
1025     #if DEBUG ==1
1026         
1027         Serial\&.println(F("root parsing success :"));
1028         updateJson\&.printTo(Serial);
1029     
1030     #endif
1031 
1032     }
1033     else
1034     {
1035     
1036     #if DEBUG == 1 
1037     
1038         Serial\&.println(F("root parsing failure "));
1039     
1040     #endif
1041         
1042         return(false);  
1043 
1044     }
1045     
1046     //open file in read mode
1047     File configFile = SPIFFS\&.open( path , "r");
1048     
1049     if(!configFile)
1050     {   
1051     #if DEBUG == 1
1052         
1053         Serial\&.print( F("failed to read ") );
1054         Serial\&.println(path);
1055 
1056     #endif
1057         return(false);
1058     }
1059 
1060     //copy file to a json
1061     size_t size = configFile\&.size();
1062 
1063     // Allocate a buffer to store contents of the file\&.
1064     std::unique_ptr < char[] > buf(new char[size]);
1065 
1066     configFile\&.readBytes(buf\&.get(), size);
1067 
1068     DynamicJsonBuffer fileBuffer;
1069 
1070     JsonObject & fileJson = fileBuffer\&.parseObject(buf\&.get());
1071 
1072     if (!fileJson\&.success())
1073     {
1074 
1075     #if DEBUG == 1
1076 
1077         Serial\&.println( F("failed to parse json") );
1078 
1079     #endif
1080 
1081         return(false);
1082     }
1083     
1084     //modify root to contain all the json keys: updated ones and non updated ones
1085     for (auto kv : fileJson) 
1086     {
1087         if( updateJson[kv\&.key]\&.success() )
1088         {
1089             fileJson[kv\&.key]=updateJson[kv\&.key];          
1090         }
1091         else
1092         {
1093             fileJson[kv\&.key]=fileJson[kv\&.key];
1094         }
1095 
1096                 
1097     }
1098 
1099 #if DEBUG == 1
1100 
1101     Serial\&.println(F("fileJson is now : "));
1102     fileJson\&.printTo(Serial);
1103 
1104 #endif
1105 
1106     //close the file
1107     configFile\&.close();
1108 
1109     //open file in w mode
1110     configFile = SPIFFS\&.open( path , "w");
1111     
1112     if(!configFile)
1113     {   
1114     #if DEBUG == 1
1115         
1116         Serial\&.print( F("failed to open ") );
1117         Serial\&.println(path);
1118 
1119     #endif
1120         return(false);
1121     }
1122     //print json to file    
1123     
1124     fileJson\&.printTo(configFile);
1125     
1126     //close file
1127     configFile\&.close();
1128 
1129 
1130 #if DEBUG == 1
1131 
1132     Serial\&.println( F("config is") );
1133     fileJson\&.printTo(Serial);
1134     Serial\&.println();
1135 
1136 #endif
1137     
1138     return(true);
1139     
1140 }
.fi
.SS "void CoolFileSystem::getsavedData ()"
\fBCoolFileSystem::getsavedData()\fP: This method is provided to get the savedData flag from the file system 
.PP
Definition at line 1202 of file CoolFileSystem\&.cpp\&.
.PP
.nf
1203 {
1204 
1205 
1206 #if DEBUG == 1
1207     
1208     Serial\&.println(F("Entering CoolFileSystem\&.getsavedData()"));  
1209     
1210 #endif
1211     //open file
1212     File file=SPIFFS\&.open("/savedDataFlag\&.txt","r");  
1213     //read file
1214     if( !file)  
1215     {
1216         Serial\&.println( F("failed to read savedDataFlag\&.txt") );
1217         
1218     }
1219     else
1220     {       
1221         //read from file    
1222         String temp=file\&.readStringUntil(' ');
1223         
1224         this->savedData=temp\&.toInt();
1225 
1226         
1227         temp=file\&.readStringUntil('\n');
1228         this-> linesToSkip=temp\&.toInt();;    
1229         
1230         file\&.close();    
1231     }
1232     
1233 #if DEBUG == 1
1234 
1235     Serial\&.print(F("number of lines to read :"));
1236     Serial\&.println(this->savedData);
1237     
1238     Serial\&.print(F("number of lines to skip :"));
1239     Serial\&.println(this->linesToSkip);
1240 
1241 #endif
1242     
1243 }
.fi
.SS "String * CoolFileSystem::getSensorSavedData (int & lines)"
CoolFileSystem::getSensorData(int &lines): This method is provided to return the sensor data saved in the File System 10 lines at a time
.PP
\fBReturns:\fP
.RS 4
String array containing 50 first lines from the file modifies tge lines argument to reflect the number of lines left 
.RE
.PP

.PP
Definition at line 842 of file CoolFileSystem\&.cpp\&.
.PP
.nf
843 {
844     int maxString=50;
845     String *sensorsDataArray=new String[maxString];
846     lines=0;
847 
848 #if DEBUG == 1 
849 
850     Serial\&.println( F("Entering CoolFileSystem\&.getSensorSavedData()") );
851     Serial\&.println();
852 
853 #endif
854 
855     //open sensors data file
856     File sensorsData=SPIFFS\&.open("/sensorsData\&.json","r");
857     
858     if (!sensorsData)
859     {
860 
861     #if DEBUG == 1 
862 
863         Serial\&.println( F("Failed to read /sensorsData\&.json") );
864 
865     #endif
866          
867         sensorsDataArray[0]="Failed to read /sensorsData\&.json";
868         lines++;
869 
870         //result=sensorsDataArray;
871         return(sensorsDataArray);
872 
873     }
874 
875     else
876     {
877         //read the file line by line and put it in the String array(aka String*)        
878 
879         //while loop until EOF is reached
880         String temp;
881         while(sensorsData\&.available())
882         {
883             yield();
884             
885             temp=sensorsData\&.readStringUntil('\r');
886 
887             if(linesToSkip>0)
888             {
889 
890                 linesToSkip--;
891         
892             }
893             else
894             {
895 
896             #if DEBUG == 1
897 
898                 Serial\&.println(F("temp String : "));
899                 Serial\&.println(temp);
900                 Serial\&.println();
901             
902             #endif
903             
904                 sensorsDataArray[lines]=temp;
905                 sensorsData\&.read();
906             
907             
908         
909             #if DEBUG== 1
910      
911                 Serial\&.print(F("read String NÂ°"));
912                 Serial\&.print(lines);
913                 Serial\&.println(F(" is : "));
914                 Serial\&.println( sensorsDataArray[lines] );
915                 Serial\&.println();
916                 Serial\&.println(F("next char is : "));
917                 Serial\&.println((char)sensorsData\&.peek());
918                 Serial\&.println();            
919             
920             #endif
921                 lines++;
922             
923                 //maximum size is maxString(index : 0\&.\&.maxString-1)
924                 if(lines>=maxString)
925                 {
926                     break;
927                 }
928             
929                 yield();
930             
931             }
932 
933         }
934         
935                     
936         //close the file
937         sensorsData\&.close();
938 
939         //position the saved data flag to the number of unread lines
940         this->savedData=savedData-lines;
941         
942         //position the number of lines to skip to the number of read lines  
943         this->linesToSkip=lines;
944 
945         //delete data in the file only if savedData<=0
946         if(this->savedData<=0)
947         {
948             File sensorsData=SPIFFS\&.open("/sensorsData\&.json","w");
949             File sensorsDataCSV=SPIFFS\&.open("/sensorsData\&.csv","w");
950             if( (!sensorsData)||(!sensorsDataCSV) ) 
951             {
952             #if DEBUG == 1
953     
954                 Serial\&.println( F("failed to delete data in the file") );
955     
956             #endif
957                 lines++;
958                 sensorsDataArray[lines]="failed to delete data in the file";
959 
960                 return(sensorsDataArray);
961 
962             }
963 
964             sensorsData\&.close();
965             sensorsDataCSV\&.close();
966             
967             this->linesToSkip=0;
968         
969         }
970 
971         //save the changes to linesToSkip and savedData in the file system
972         this->incrementsavedData();
973 
974         //return the string
975         #if DEBUG == 1
976         
977             for(int i=0;i<lines;i++)
978             {
979                 Serial\&.print(F("String NÂ°"));
980                 Serial\&.println(i);
981                 Serial\&.println(sensorsDataArray[i]);
982                 Serial\&.println();            
983             }
984     
985         #endif
986         return(sensorsDataArray);
987         
988         
989         
990     }
991 
992 }
.fi
.SS "bool CoolFileSystem::incrementsavedData ()"
\fBCoolFileSystem::incrementsavedData()\fP: This method is provided to increment the savedData flag
.PP
\fBReturns:\fP
.RS 4
true if successful , false otherwise 
.RE
.PP

.PP
Definition at line 1152 of file CoolFileSystem\&.cpp\&.
.PP
.nf
1153 {
1154 
1155 
1156 #if DEBUG == 1
1157     
1158     Serial\&.println(F("Entering CoolFileSystem\&.incrementsavedData()"));    
1159     
1160 #endif
1161     //open file
1162     File file=SPIFFS\&.open("/savedDataFlag\&.txt","w");  
1163     //read file
1164     if( !file)  
1165     {
1166         Serial\&.println( F("failed to open savedDataFlag\&.txt") );
1167         
1168         return(false);      
1169     }
1170     else
1171     {       
1172         //write to file 
1173         file\&.print(this->savedData);
1174         
1175         file\&.print(" ");
1176         
1177         file\&.println(this->linesToSkip);
1178     
1179         file\&.close();
1180 
1181     #if DEBUG == 1
1182 
1183         Serial\&.print(F("number of lines to read :"));
1184         Serial\&.println(this->savedData);
1185     
1186         Serial\&.print(F("number of lines to skip :"));
1187         Serial\&.println(this->linesToSkip);
1188 
1189     #endif
1190         
1191         return(true);
1192     }
1193     
1194 }
.fi
.SS "int CoolFileSystem::isDataSaved ()"
\fBCoolFileSystem::isDataSaved()\fP: This method is provided to report wether there is sensor data saved in the File System\&.
.PP
\fBReturns:\fP
.RS 4
true if there is data saved, false otherwise 
.RE
.PP

.PP
Definition at line 782 of file CoolFileSystem\&.cpp\&.
.PP
.nf
783 {
784 
785 #if DEBUG == 1 
786 
787     Serial\&.println( F("Entering CoolFileSystem\&.isDataSaved()") );
788     Serial\&.println();
789 
790     FSInfo fs_info;
791 
792     if(SPIFFS\&.info(fs_info)==true)
793     {
794         Serial\&.print(F("used bytes/total bytes : "));    
795         Serial\&.print(fs_info\&.usedBytes);
796         Serial\&.print(F("/"));
797         Serial\&.print(fs_info\&.totalBytes);
798         Serial\&.println();
799 
800     }
801 
802     File sensorsData=SPIFFS\&.open("/sensorsData\&.json","r");
803     File sensorsDataCSV=SPIFFS\&.open("/sensorsData\&.csv","r");
804     
805     if( (!sensorsData)||(!sensorsDataCSV) ) 
806     {
807         Serial\&.println( F("failed to open files") );     
808     }
809     else
810     {       
811             Serial\&.print(F("sensors Data file size in bytes : "));
812             Serial\&.println(sensorsData\&.size());
813             Serial\&.println();
814             
815             Serial\&.print(F("sensors Data CSV file size in bytes : "));               
816             Serial\&.println(sensorsDataCSV\&.size());
817             Serial\&.println();
818     }
819 
820 
821 
822     Serial\&.print( F("savedData : ") );
823     Serial\&.println(this->savedData);
824 
825 #endif
826 
827     return( this->savedData );
828 }
.fi
.SS "bool CoolFileSystem::saveSensorData (const char * data)"
CoolFileSystem::saveSensorData( data ): This method is provided to save the data on the local memory when there is no internet available
.PP
increments the saved data flag when successful
.PP
\fBReturns:\fP
.RS 4
true if the data was saved, false otherwise 
.RE
.PP

.PP
Definition at line 81 of file CoolFileSystem\&.cpp\&.
.PP
.nf
82 {
83 
84 #if DEBUG == 1
85 
86     Serial\&.println( F("Entering CoolFileSystem\&.saveSensorData()") );
87     Serial\&.println();
88 
89 #endif
90     
91     File sensorsData=SPIFFS\&.open("/sensorsData\&.json","a");
92 
93     if(!sensorsData)
94     {
95     
96     #if DEBUG == 1
97     
98         Serial\&.println( F("failed to append to /sensorsData\&.json") );
99         Serial\&.println();
100     
101     #endif
102         //keep the old data
103         this->savedData=savedData;
104 
105         return (false); 
106     }   
107 
108     DynamicJsonBuffer jsonBuffer;
109     JsonObject& root = jsonBuffer\&.parseObject(data);
110 
111     if( root\&.success() )
112     {
113         root\&.printTo(sensorsData);
114         sensorsData\&.println();
115         sensorsData\&.close();
116 
117 
118     #if DEBUG == 1
119         
120         Serial\&.print(F("jsonBuffer size: "));
121         Serial\&.println(jsonBuffer\&.size());
122         Serial\&.println();
123 
124         sensorsData=SPIFFS\&.open("/sensorsData\&.json","r");
125         
126         if(!sensorsData)
127         {
128             
129             Serial\&.println(F("failed to reopen /sensorsData\&.json"));
130             return(true);
131                         
132         }
133     
134         Serial\&.println( F("saved data is : ") );
135         root\&.printTo(Serial);
136         Serial\&.println();
137 
138         Serial\&.println(F("/sensorsData\&.json") );
139         while (sensorsData\&.available()) 
140         {
141             Serial\&.println(sensorsData\&.readString()) ;
142         }
143         
144         Serial\&.println();
145         
146         sensorsData\&.close();
147     
148     #endif
149 
150         this->saveSensorDataCSV(data);      
151 
152         //new data
153         this->savedData++;
154 
155         this->incrementsavedData();
156         
157         return (true);      
158     }
159     else
160     {
161     
162     #if DEBUG == 1
163 
164         Serial\&.println( F("failed to parse json") );
165     
166     #endif
167         //old data
168         this->savedData=savedData;
169 
170         return(false);
171     }
172     
173 
174 }
.fi
.SS "bool CoolFileSystem::saveSensorDataCSV (const char * data)"
CoolFileSystem::saveSensorDataCSV( data ): This method is provided to save the data on the local memory in CSV format\&.
.PP
\fBReturns:\fP
.RS 4
true if the data was saved, false otherwise 
.RE
.PP

.PP
Definition at line 185 of file CoolFileSystem\&.cpp\&.
.PP
.nf
186 {
187 #if DEBUG == 1
188 
189     Serial\&.println( F("Entering CoolFileSystem\&.saveSensorDataCSV()") );
190     Serial\&.println();
191 
192 #endif
193     //parsing json
194     DynamicJsonBuffer jsonBuffer;
195     JsonObject& root = jsonBuffer\&.parseObject(data);
196     String header="",values="";
197     
198     //if json parse success
199     if( root\&.success() )
200     {       
201         for (auto kv : root) 
202         {
203             //print the header(json keys ) to header string
204             header+=kv\&.key;
205             header+=',';
206             
207             //print the values to header string
208             values+=( kv\&.value\&.as<char*>() );
209             values+=',';
210         }
211 
212         header\&.remove(header\&.lastIndexOf(','), 1);
213         values\&.remove(values\&.lastIndexOf(','), 1);        
214     
215     #if DEBUG == 1
216     
217         Serial\&.println( F(" data is : ") );
218         root\&.printTo(Serial);
219         Serial\&.println();
220         
221         Serial\&.println(F(" header is :" ) ) ;
222         Serial\&.println(header);
223         Serial\&.println(F(" values are : "));
224         Serial\&.println(values);
225         
226         Serial\&.print(F("jsonBuffer size: "));
227         Serial\&.println(jsonBuffer\&.size());
228         Serial\&.println();
229 
230     
231     #endif
232     
233     }
234     //failed to parse json
235     else
236     {
237     
238     #if DEBUG == 1
239 
240         Serial\&.println( F("failed to parse json") );
241     
242     #endif
243 
244         return(false);
245     }
246 
247     //check if file exists
248     File sensorsData=SPIFFS\&.open("/sensorsData\&.csv","r");
249     
250     //file doesn't exist
251     if( (!sensorsData) || (sensorsData\&.size()==0 ) )
252     {
253     
254     #if DEBUG == 1
255     
256         Serial\&.println( F("/sensorsData\&.csv not found") );
257         Serial\&.println( F("creating /sensorsData\&.csv") );
258         Serial\&.println();
259     
260     #endif
261         //create file
262         sensorsData=SPIFFS\&.open("/sensorsData\&.csv","w");
263         
264         if(!sensorsData)
265         {
266 
267         #if DEBUG == 1
268         
269             Serial\&.println( F("failed to create /sensorsData\&.csv") );
270             Serial\&.println();
271         
272         #endif
273         
274             return(false);
275 
276         }
277         
278         //print the header(json keys ) to the CSV file
279         sensorsData\&.println(header);
280 
281         //print the values to the CSV file
282         sensorsData\&.println(values);
283         
284         sensorsData\&.close();
285     
286     #if DEBUG == 1
287 
288         sensorsData=SPIFFS\&.open("/sensorsData\&.csv","r");
289         
290         if(!sensorsData)
291         {
292             Serial\&.println(F("failed to reopen /sensorsData\&.csv "));
293             return(false);      
294         }
295 
296         Serial\&.println( F("/sensorsData\&.csv : ") );
297 
298         while (sensorsData\&.available()) 
299         {
300             Serial\&.print(sensorsData\&.readString()) ;
301         }
302         Serial\&.println();
303 
304         //close the file
305         sensorsData\&.close();
306 
307     #endif
308         
309 
310         
311         return(true);
312         
313     }
314 
315     //file exist
316     else
317     {
318 
319     #if DEBUG == 1
320     
321         Serial\&.println( F("/sensorsData\&.csv  found") );
322         Serial\&.println( F("appending to /sensorsData\&.csv") );
323         Serial\&.println();
324     
325     #endif
326 
327         //append to file
328         sensorsData=SPIFFS\&.open("/sensorsData\&.csv","a");
329         
330         if(!sensorsData)
331         {
332         
333         #if DEBUG == 1
334             
335             Serial\&.println( F("failed to open /sensorsData\&.csv") );
336             Serial\&.println();
337 
338         #endif
339             
340             return(false);
341         
342         }
343 
344         //print the values to the CSV file
345         sensorsData\&.println(values);
346         
347         sensorsData\&.close();
348 
349     #if DEBUG == 1
350 
351         sensorsData=SPIFFS\&.open("/sensorsData\&.csv","r");
352         
353         if(!sensorsData)
354         {
355             Serial\&.println(F("failed to reopen /sensorsData\&.csv "));
356             return(false);      
357         }
358 
359         
360         Serial\&.println( F("/sensorsData\&.csv : ") );
361 
362         while (sensorsData\&.available()) 
363         {
364             Serial\&.println(sensorsData\&.readString()) ;
365         }
366         
367         Serial\&.println();
368         
369         sensorsData\&.close();
370         
371     #endif      
372         
373         return(true);
374     
375     }   
376 
377 
378 
379 }
.fi
.SS "bool CoolFileSystem::updateConfigFiles (String answer)"
CoolFileSystem::updateConfigFiles( mqtt answer ): This method is provided to update the configuration files when the appropriate mqtt answer is received
.PP
\fBReturns:\fP
.RS 4
true if the files are updated correctly, false otherwise 
.RE
.PP

.PP
Definition at line 390 of file CoolFileSystem\&.cpp\&.
.PP
.nf
391 {
392 
393 #if DEBUG == 1
394 
395     Serial\&.println( F("Entering CoolFileSystem\&.updateConfigFiles") );
396     Serial\&.println();
397     
398     Serial\&.println( F("input answer : ") );
399     Serial\&.println(answer);
400 #endif
401 
402     //total json object 
403     DynamicJsonBuffer jsonBuffer;
404     JsonObject& root = jsonBuffer\&.parseObject( answer\&.c_str() );
405 
406 #if DEBUG == 1
407     
408     Serial\&.println( F("json object : ") );   
409     root\&.printTo(Serial);
410     Serial\&.println();
411     
412     Serial\&.print(F("jsonBuffer size: "));
413     Serial\&.println(jsonBuffer\&.size());
414     Serial\&.println();
415 
416 
417 #endif
418 
419     if(! ( root\&.success() ))
420     {
421     
422     #if DEBUG == 1
423 
424         Serial\&.println( F("failed to parse root ") );
425         Serial\&.println();
426     
427     #endif
428 
429         return(false);
430     }
431     else
432     {
433     #if DEBUG == 1
434         
435         Serial\&.println( F("success to parse root ") );
436         Serial\&.println();
437         
438     #endif  
439     }
440     
441 #if DEBUG == 1
442 
443     Serial\&.println( F("input message is : ") );
444     root\&.printTo(Serial);
445     Serial\&.println();
446 
447 #endif
448     //temp string
449     String temp;
450 
451     //CoolBoard Configuration File
452 
453         JsonObject& jsonCoolBoard=root["CoolBoard"];
454 
455 #if DEBUG == 1
456 
457     Serial\&.println( F("before config CoolBoard json") );
458     jsonCoolBoard\&.printTo(Serial);
459 
460 #endif
461 
462     if(jsonCoolBoard\&.success())
463     {
464         String update;
465     
466         jsonCoolBoard\&.printTo(update);
467 
468         this->fileUpdate(update,"/coolBoardConfig\&.json");        
469         
470     }
471     else
472     {
473     
474     #if DEBUG == 1 
475 
476         Serial\&.println( F("failed to parse CoolBoard ") );
477     
478     #endif
479 
480     }       
481 
482     
483     //Cool Board Sensors Configuration File
484         JsonObject& jsonSensorsBoard=root["CoolSensorsBoard"];
485 
486 #if DEBUG == 1 
487 
488     Serial\&.println( F("before config CoolSensorsBoard json") );
489     jsonSensorsBoard\&.printTo(Serial);
490 
491 #endif 
492     
493     if(jsonSensorsBoard\&.success())
494     {   
495         String update;
496     
497         jsonSensorsBoard\&.printTo(update);
498 
499         this->fileUpdate(update,"/coolBoardSensorsConfig\&.json");     
500 
501     }
502     else
503     {
504 
505     #if DEBUG == 1
506 
507         Serial\&.println( F("failed to parse CoolSensorsBoard sensors ") );    
508     
509     #endif
510 
511     }
512 
513     //Cool Board Actor Configuration File
514         JsonObject& jsonCoolBoardActor=root["CoolBoardActor"];
515 
516 #if DEBUG == 1 
517 
518     Serial\&.println( F("before config CoolBoardActor json") );
519     jsonCoolBoardActor\&.printTo(Serial);
520 
521 #endif 
522     
523     if(jsonCoolBoardActor\&.success())
524     {   
525         String update;
526     
527         jsonCoolBoardActor\&.printTo(update);
528 
529         this->fileUpdate(update,"/coolBoardActorConfig\&.json");       
530 
531     }
532     else
533     {
534 
535     #if DEBUG == 1
536 
537         Serial\&.println( F("failed to parse CoolBoardActor json ") ); 
538     
539     #endif
540 
541     }
542 
543     
544     //rtc configuration file
545         JsonObject& jsonRTC=root["rtc"];
546 
547 #if DEBUG == 1 
548     
549     Serial\&.println( F("before config rtc json") );
550     jsonRTC\&.printTo(Serial);
551 
552 #endif
553     if(jsonRTC\&.success() )
554     {
555         String update;
556 
557         jsonRTC\&.printTo(update);
558 
559         this->fileUpdate(update,"/rtcConfig\&.json");          
560     }
561     else
562     {
563     
564     #if DEBUG == 1 
565 
566         Serial\&.println( F("failed to parse rtc ") );
567     
568     #endif
569 
570     }
571     
572     
573         //cool board led configuration
574         JsonObject& jsonLedBoard=root["led"];
575     
576 #if DEBUG == 1 
577 
578     Serial\&.println( F("before config Led json") );
579     jsonLedBoard\&.printTo(Serial);
580 
581 #endif
582 
583     if(jsonLedBoard\&.success())
584     {   
585         String update;
586     
587         jsonLedBoard\&.printTo(update);
588 
589         this->fileUpdate(update,"/coolBoardLedConfig\&.json");     
590 
591     
592     }
593     else
594     {
595     
596     #if DEBUG == 1 
597 
598         Serial\&.println( F("failed to parse led") );
599     
600     #endif 
601 
602     }
603         
604 
605     
606 
607     //jetpack configuration
608         JsonObject& jsonJetpack=root["jetPack"];
609 
610 #if DEBUG == 1 
611 
612     Serial\&.println( F("before config jetpack json") );
613     jsonJetpack\&.printTo(Serial);
614 
615 #endif
616 
617     if(jsonJetpack\&.success())
618     {
619     
620         String update;
621     
622         jsonJetpack\&.printTo(update);
623 
624         this->fileUpdate(update,"/jetPackConfig\&.json");      
625 
626     }
627 
628     else
629     {
630     
631     #if DEBUG == 1 
632 
633         Serial\&.println( F("failed to parse jetpack") );  
634     
635     #endif
636 
637     }
638     
639     //irene configuration   
640         JsonObject& jsonIrene=root["irene3000"];
641     
642 #if DEBUG == 1 
643 
644     Serial\&.println( F("before config irene json") ); 
645     jsonIrene\&.printTo(Serial);
646 
647 #endif 
648 
649     if(jsonIrene\&.success())
650     {
651 
652         String update;
653     
654         jsonIrene\&.printTo(update);
655 
656         this->fileUpdate(update,"/irene3000Config\&.json");        
657     
658     }
659     else
660     {
661     
662     #if DEBUG == 1 
663 
664         Serial\&.println( F("failed to parse irene") );    
665     
666     #endif 
667 
668 
669     }
670     
671     //external sensors
672         JsonObject& jsonExternalSensors=root["externalSensors"];
673 
674 #if DEBUG == 1 
675 
676     Serial\&.println( F("before config external Sensors json") );
677     jsonExternalSensors\&.printTo(Serial);
678 
679 #endif
680 
681     if(jsonExternalSensors\&.success())
682     {
683 
684         String update;
685     
686         jsonExternalSensors\&.printTo(update);
687 
688         this->fileUpdate(update,"/externalSensorsConfig\&.json");      
689 
690     }
691 
692     else
693     {   
694 
695     #if DEBUG == 1
696         
697         Serial\&.println( F("failed to parse external sensors") );
698 
699     #endif
700 
701 
702     }
703 
704     
705     //mqtt config
706         JsonObject& jsonMQTT=root["mqtt"];
707     
708 #if DEBUG == 1 
709 
710     Serial\&.println( F("before config mqtt json") );
711     jsonMQTT\&.printTo(Serial);
712 
713 #endif
714 
715     if(jsonMQTT\&.success())
716     {
717 
718         String update;
719     
720         jsonMQTT\&.printTo(update);
721 
722         this->fileUpdate(update,"/mqttConfig\&.json");     
723 
724     }
725     else
726     {
727 
728     #if DEBUG == 1 
729 
730         Serial\&.println( F("failed to parse mqtt") );
731     
732     #endif
733 
734     
735     }   
736 
737     //wifi config
738         JsonObject& jsonWifi=root["wifi"];
739     
740 #if DEBUG == 1 
741 
742     Serial\&.println( F("before config wifi json") );
743     jsonWifi\&.printTo(Serial);
744 
745 #endif
746 
747     if(jsonWifi\&.success())
748     {
749 
750         String update;
751     
752         jsonWifi\&.printTo(update);
753 
754         this->fileUpdate(update,"/wifiConfig\&.json");     
755 
756     }
757     else
758     {
759 
760     #if DEBUG == 1 
761 
762         Serial\&.println( F("failed to parse wifi") );
763     
764     #endif
765 
766     
767     }   
768         
769     return true;
770 
771 }   
.fi
.SH "Member Data Documentation"
.PP 
.SS "int CoolFileSystem::linesToSkip =0\fC [private]\fP"
Number of lines to Skip when retrieving saved Data 
.PP
Definition at line 80 of file CoolFileSystem\&.h\&.
.SS "int CoolFileSystem::savedData =0\fC [private]\fP"
Number of lines to read when retrieving saved Data 
.PP
Definition at line 74 of file CoolFileSystem\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolBoardAPI from the source code\&.
