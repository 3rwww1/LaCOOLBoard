.TH "CoolFileSystem" 3 "Thu Aug 17 2017" "CoolBoardAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoolFileSystem \- This class handles the file system\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolFileSystem\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "bool \fBbegin\fP ()"
.br
.ti -1c
.RI "bool \fBupdateConfigFiles\fP (String answer)"
.br
.ti -1c
.RI "bool \fBfileUpdate\fP (String update, const char *path)"
.br
.ti -1c
.RI "bool \fBsaveSensorData\fP (const char *data)"
.br
.ti -1c
.RI "bool \fBsaveSensorDataCSV\fP (const char *data)"
.br
.ti -1c
.RI "int \fBisDataSaved\fP ()"
.br
.ti -1c
.RI "String * \fBgetSensorSavedData\fP (int &size)"
.br
.ti -1c
.RI "bool \fBincrementsavedData\fP ()"
.br
.ti -1c
.RI "void \fBgetsavedData\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "int \fBsavedData\fP =0"
.br
.ti -1c
.RI "int \fBlinesToSkip\fP =0"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class handles the file system\&. 
.PP
Definition at line 23 of file CoolFileSystem\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "bool CoolFileSystem::begin ()"
\fBCoolFileSystem::begin()\fP: This method is provided to start the SPIFFS object\&.
.PP
\fBReturns:\fP
.RS 4
true if SPIFFS was initialized correctly, false otherwise 
.RE
.PP

.PP
Definition at line 27 of file CoolFileSystem\&.cpp\&.
.PP
.nf
28 {
29     bool sResult=SPIFFS\&.begin();
30     
31 
32 #if DEBUG == 1
33 
34     Serial\&.println( F("Entering CoolFileSystem\&.begin()") );
35     Serial\&.println();    
36     Serial\&.print( F("SPIFFS success ? ") );
37     Serial\&.println(sResult);
38     Serial\&.println(  );
39 
40 #endif
41     //get the data from the files
42     this->getsavedData();
43 
44     return( sResult  );                                   //Initialize Filesystem
45 
46 }
.fi
.SS "bool CoolFileSystem::fileUpdate (String update, const char * path)"
CoolFileSystem::fileUpdate( update msg, file path): This method is provided to ensure the correct update for each configuration file in the File system
.PP
\fBReturns:\fP
.RS 4
true if successful , false otherwise 
.RE
.PP

.PP
Definition at line 950 of file CoolFileSystem\&.cpp\&.
.PP
.nf
951 {
952 
953 #if DEBUG == 1
954 
955     Serial\&.println( F("Entering CoolFileSystem\&.fileUpdate()") );
956     Serial\&.println();
957     
958     Serial\&.println(F("update msg is :"));
959     Serial\&.println(update);
960     
961     Serial\&.println(F("file path is : "));
962     Serial\&.println(path);    
963 
964 #endif
965     //transfer update String to json
966     DynamicJsonBuffer updateBuffer;
967     JsonObject& updateJson = updateBuffer\&.parseObject(update\&.c_str() );
968     
969     if(updateJson\&.success())
970     {
971     
972     #if DEBUG ==1
973         
974         Serial\&.println(F("root parsing success :"));
975         updateJson\&.printTo(Serial);
976     
977     #endif
978 
979     }
980     else
981     {
982     
983     #if DEBUG == 1 
984     
985         Serial\&.println(F("root parsing failure "));
986     
987     #endif
988         
989         return(false);  
990 
991     }
992     
993     //open file in read mode
994     File configFile = SPIFFS\&.open( path , "r");
995     
996     if(!configFile)
997     {   
998     #if DEBUG == 1
999         
1000         Serial\&.print( F("failed to read ") );
1001         Serial\&.println(path);
1002 
1003     #endif
1004         return(false);
1005     }
1006 
1007     //copy file to a json
1008     size_t size = configFile\&.size();
1009 
1010     // Allocate a buffer to store contents of the file\&.
1011     std::unique_ptr < char[] > buf(new char[size]);
1012 
1013     configFile\&.readBytes(buf\&.get(), size);
1014 
1015     DynamicJsonBuffer fileBuffer;
1016 
1017     JsonObject & fileJson = fileBuffer\&.parseObject(buf\&.get());
1018 
1019     if (!fileJson\&.success())
1020     {
1021 
1022     #if DEBUG == 1
1023 
1024         Serial\&.println( F("failed to parse json") );
1025 
1026     #endif
1027 
1028         return(false);
1029     }
1030     
1031     //modify root to contain all the json keys: updated ones and non updated ones
1032     for (auto kv : fileJson) 
1033     {
1034         if( updateJson[kv\&.key]\&.success() )
1035         {
1036             fileJson[kv\&.key]=updateJson[kv\&.key];          
1037         }
1038         else
1039         {
1040             fileJson[kv\&.key]=fileJson[kv\&.key];
1041         }
1042 
1043                 
1044     }
1045 
1046 #if DEBUG == 1
1047 
1048     Serial\&.println(F("fileJson is now : "));
1049     fileJson\&.printTo(Serial);
1050 
1051 #endif
1052 
1053     //close the file
1054     configFile\&.close();
1055 
1056     //open file in w mode
1057     configFile = SPIFFS\&.open( path , "w");
1058     
1059     if(!configFile)
1060     {   
1061     #if DEBUG == 1
1062         
1063         Serial\&.print( F("failed to open ") );
1064         Serial\&.println(path);
1065 
1066     #endif
1067         return(false);
1068     }
1069     //print json to file    
1070     
1071     fileJson\&.printTo(configFile);
1072     
1073     //close file
1074     configFile\&.close();
1075 
1076 
1077 #if DEBUG == 1
1078 
1079     Serial\&.println( F("config is") );
1080     fileJson\&.printTo(Serial);
1081     Serial\&.println();
1082 
1083 #endif
1084     
1085     return(true);
1086     
1087 }
.fi
.SS "void CoolFileSystem::getsavedData ()"
\fBCoolFileSystem::getsavedData()\fP: This method is provided to get the savedData flag from the file system 
.PP
Definition at line 1149 of file CoolFileSystem\&.cpp\&.
.PP
.nf
1150 {
1151 
1152 
1153 #if DEBUG == 1
1154     
1155     Serial\&.println(F("Entering CoolFileSystem\&.getsavedData()"));  
1156     
1157 #endif
1158     //open file
1159     File file=SPIFFS\&.open("/savedDataFlag\&.txt","r");  
1160     //read file
1161     if( !file)  
1162     {
1163         Serial\&.println( F("failed to read savedDataFlag\&.txt") );
1164         
1165     }
1166     else
1167     {       
1168         //read from file    
1169         String temp=file\&.readStringUntil(' ');
1170         
1171         this->savedData=temp\&.toInt();
1172 
1173         
1174         temp=file\&.readStringUntil('\n');
1175         this-> linesToSkip=temp\&.toInt();;    
1176         
1177         file\&.close();    
1178     }
1179     
1180 #if DEBUG == 1
1181 
1182     Serial\&.print(F("number of lines to read :"));
1183     Serial\&.println(this->savedData);
1184     
1185     Serial\&.print(F("number of lines to skip :"));
1186     Serial\&.println(this->linesToSkip);
1187 
1188 #endif
1189     
1190 }
.fi
.SS "String * CoolFileSystem::getSensorSavedData (int & lines)"
CoolFileSystem::getSensorData(int &lines): This method is provided to return the sensor data saved in the File System 10 lines at a time
.PP
\fBReturns:\fP
.RS 4
String array containing 50 first lines from the file modifies tge lines argument to reflect the number of lines left 
.RE
.PP

.PP
Definition at line 789 of file CoolFileSystem\&.cpp\&.
.PP
.nf
790 {
791     int maxString=50;
792     String *sensorsDataArray=new String[maxString];
793     lines=0;
794 
795 #if DEBUG == 1 
796 
797     Serial\&.println( F("Entering CoolFileSystem\&.getSensorSavedData()") );
798     Serial\&.println();
799 
800 #endif
801 
802     //open sensors data file
803     File sensorsData=SPIFFS\&.open("/sensorsData\&.json","r");
804     
805     if (!sensorsData)
806     {
807 
808     #if DEBUG == 1 
809 
810         Serial\&.println( F("Failed to read /sensorsData\&.json") );
811 
812     #endif
813          
814         sensorsDataArray[0]="Failed to read /sensorsData\&.json";
815         lines++;
816 
817         //result=sensorsDataArray;
818         return(sensorsDataArray);
819 
820     }
821 
822     else
823     {
824         //read the file line by line and put it in the String array(aka String*)        
825 
826         //while loop until EOF is reached
827         String temp;
828         while(sensorsData\&.available())
829         {
830             yield();
831             
832             temp=sensorsData\&.readStringUntil('\r');
833 
834             if(linesToSkip>0)
835             {
836 
837                 linesToSkip--;
838         
839             }
840             else
841             {
842 
843             #if DEBUG == 1
844 
845                 Serial\&.println(F("temp String : "));
846                 Serial\&.println(temp);
847                 Serial\&.println();
848             
849             #endif
850             
851                 sensorsDataArray[lines]=temp;
852                 sensorsData\&.read();
853             
854             
855         
856             #if DEBUG== 1
857      
858                 Serial\&.print(F("read String NÂ°"));
859                 Serial\&.print(lines);
860                 Serial\&.println(F(" is : "));
861                 Serial\&.println( sensorsDataArray[lines] );
862                 Serial\&.println();
863                 Serial\&.println(F("next char is : "));
864                 Serial\&.println((char)sensorsData\&.peek());
865                 Serial\&.println();            
866             
867             #endif
868                 lines++;
869             
870                 //maximum size is maxString(index : 0\&.\&.maxString-1)
871                 if(lines>=maxString)
872                 {
873                     break;
874                 }
875             
876                 yield();
877             
878             }
879 
880         }
881         
882                     
883         //close the file
884         sensorsData\&.close();
885 
886         //position the saved data flag to the number of unread lines
887         this->savedData=savedData-lines;
888         
889         //position the number of lines to skip to the number of read lines  
890         this->linesToSkip=lines;
891 
892         //delete data in the file only if savedData<=0
893         if(this->savedData<=0)
894         {
895             File sensorsData=SPIFFS\&.open("/sensorsData\&.json","w");
896             File sensorsDataCSV=SPIFFS\&.open("/sensorsData\&.csv","w");
897             if( (!sensorsData)||(!sensorsDataCSV) ) 
898             {
899             #if DEBUG == 1
900     
901                 Serial\&.println( F("failed to delete data in the file") );
902     
903             #endif
904                 lines++;
905                 sensorsDataArray[lines]="failed to delete data in the file";
906 
907                 return(sensorsDataArray);
908 
909             }
910 
911             sensorsData\&.close();
912             sensorsDataCSV\&.close();
913             
914             this->linesToSkip=0;
915         
916         }
917 
918         //save the changes to linesToSkip and savedData in the file system
919         this->incrementsavedData();
920 
921         //return the string
922         #if DEBUG == 1
923         
924             for(int i=0;i<lines;i++)
925             {
926                 Serial\&.print(F("String NÂ°"));
927                 Serial\&.println(i);
928                 Serial\&.println(sensorsDataArray[i]);
929                 Serial\&.println();            
930             }
931     
932         #endif
933         return(sensorsDataArray);
934         
935         
936         
937     }
938 
939 }
.fi
.SS "bool CoolFileSystem::incrementsavedData ()"
\fBCoolFileSystem::incrementsavedData()\fP: This method is provided to increment the savedData flag
.PP
\fBReturns:\fP
.RS 4
true if successful , false otherwise 
.RE
.PP

.PP
Definition at line 1099 of file CoolFileSystem\&.cpp\&.
.PP
.nf
1100 {
1101 
1102 
1103 #if DEBUG == 1
1104     
1105     Serial\&.println(F("Entering CoolFileSystem\&.incrementsavedData()"));    
1106     
1107 #endif
1108     //open file
1109     File file=SPIFFS\&.open("/savedDataFlag\&.txt","w");  
1110     //read file
1111     if( !file)  
1112     {
1113         Serial\&.println( F("failed to open savedDataFlag\&.txt") );
1114         
1115         return(false);      
1116     }
1117     else
1118     {       
1119         //write to file 
1120         file\&.print(this->savedData);
1121         
1122         file\&.print(" ");
1123         
1124         file\&.println(this->linesToSkip);
1125     
1126         file\&.close();
1127 
1128     #if DEBUG == 1
1129 
1130         Serial\&.print(F("number of lines to read :"));
1131         Serial\&.println(this->savedData);
1132     
1133         Serial\&.print(F("number of lines to skip :"));
1134         Serial\&.println(this->linesToSkip);
1135 
1136     #endif
1137         
1138         return(true);
1139     }
1140     
1141 }
.fi
.SS "int CoolFileSystem::isDataSaved ()"
\fBCoolFileSystem::isDataSaved()\fP: This method is provided to report wether there is sensor data saved in the File System\&.
.PP
\fBReturns:\fP
.RS 4
true if there is data saved, false otherwise 
.RE
.PP

.PP
Definition at line 729 of file CoolFileSystem\&.cpp\&.
.PP
.nf
730 {
731 
732 #if DEBUG == 1 
733 
734     Serial\&.println( F("Entering CoolFileSystem\&.isDataSaved()") );
735     Serial\&.println();
736 
737     FSInfo fs_info;
738 
739     if(SPIFFS\&.info(fs_info)==true)
740     {
741         Serial\&.print(F("used bytes/total bytes : "));    
742         Serial\&.print(fs_info\&.usedBytes);
743         Serial\&.print(F("/"));
744         Serial\&.print(fs_info\&.totalBytes);
745         Serial\&.println();
746 
747     }
748 
749     File sensorsData=SPIFFS\&.open("/sensorsData\&.json","r");
750     File sensorsDataCSV=SPIFFS\&.open("/sensorsData\&.csv","r");
751     
752     if( (!sensorsData)||(!sensorsDataCSV) ) 
753     {
754         Serial\&.println( F("failed to open files") );     
755     }
756     else
757     {       
758             Serial\&.print(F("sensors Data file size in bytes : "));
759             Serial\&.println(sensorsData\&.size());
760             Serial\&.println();
761             
762             Serial\&.print(F("sensors Data CSV file size in bytes : "));               
763             Serial\&.println(sensorsDataCSV\&.size());
764             Serial\&.println();
765     }
766 
767 
768 
769     Serial\&.print( F("savedData : ") );
770     Serial\&.println(this->savedData);
771 
772 #endif
773 
774     return( this->savedData );
775 }
.fi
.SS "bool CoolFileSystem::saveSensorData (const char * data)"
CoolFileSystem::saveSensorData( data ): This method is provided to save the data on the local memory when there is no internet available
.PP
increments the saved data flag when successful
.PP
\fBReturns:\fP
.RS 4
true if the data was saved, false otherwise 
.RE
.PP

.PP
Definition at line 58 of file CoolFileSystem\&.cpp\&.
.PP
.nf
59 {
60 
61 #if DEBUG == 1
62 
63     Serial\&.println( F("Entering CoolFileSystem\&.saveSensorData()") );
64     Serial\&.println();
65 
66 #endif
67     
68     File sensorsData=SPIFFS\&.open("/sensorsData\&.json","a");
69 
70     if(!sensorsData)
71     {
72     
73     #if DEBUG == 1
74     
75         Serial\&.println( F("failed to append to /sensorsData\&.json") );
76         Serial\&.println();
77     
78     #endif
79         //keep the old data
80         this->savedData=savedData;
81 
82         return (false); 
83     }   
84 
85     DynamicJsonBuffer jsonBuffer;
86     JsonObject& root = jsonBuffer\&.parseObject(data);
87 
88     if( root\&.success() )
89     {
90         root\&.printTo(sensorsData);
91         sensorsData\&.println();
92         sensorsData\&.close();
93 
94 
95     #if DEBUG == 1
96         
97         Serial\&.print(F("jsonBuffer size: "));
98         Serial\&.println(jsonBuffer\&.size());
99         Serial\&.println();
100 
101         sensorsData=SPIFFS\&.open("/sensorsData\&.json","r");
102         
103         if(!sensorsData)
104         {
105             
106             Serial\&.println(F("failed to reopen /sensorsData\&.json"));
107             return(true);
108                         
109         }
110     
111         Serial\&.println( F("saved data is : ") );
112         root\&.printTo(Serial);
113         Serial\&.println();
114 
115         Serial\&.println(F("/sensorsData\&.json") );
116         while (sensorsData\&.available()) 
117         {
118             Serial\&.println(sensorsData\&.readString()) ;
119         }
120         
121         Serial\&.println();
122         
123         sensorsData\&.close();
124     
125     #endif
126 
127         this->saveSensorDataCSV(data);      
128 
129         //new data
130         this->savedData++;
131 
132         this->incrementsavedData();
133         
134         return (true);      
135     }
136     else
137     {
138     
139     #if DEBUG == 1
140 
141         Serial\&.println( F("failed to parse json") );
142     
143     #endif
144         //old data
145         this->savedData=savedData;
146 
147         return(false);
148     }
149     
150 
151 }
.fi
.SS "bool CoolFileSystem::saveSensorDataCSV (const char * data)"
CoolFileSystem::saveSensorDataCSV( data ): This method is provided to save the data on the local memory in CSV format\&.
.PP
\fBReturns:\fP
.RS 4
true if the data was saved, false otherwise 
.RE
.PP

.PP
Definition at line 162 of file CoolFileSystem\&.cpp\&.
.PP
.nf
163 {
164 #if DEBUG == 1
165 
166     Serial\&.println( F("Entering CoolFileSystem\&.saveSensorDataCSV()") );
167     Serial\&.println();
168 
169 #endif
170     //parsing json
171     DynamicJsonBuffer jsonBuffer;
172     JsonObject& root = jsonBuffer\&.parseObject(data);
173     String header="",values="";
174     
175     //if json parse success
176     if( root\&.success() )
177     {       
178         for (auto kv : root) 
179         {
180             //print the header(json keys ) to header string
181             header+=kv\&.key;
182             header+=',';
183             
184             //print the values to header string
185             values+=( kv\&.value\&.as<char*>() );
186             values+=',';
187         }
188 
189         header\&.remove(header\&.lastIndexOf(','), 1);
190         values\&.remove(values\&.lastIndexOf(','), 1);        
191     
192     #if DEBUG == 1
193     
194         Serial\&.println( F(" data is : ") );
195         root\&.printTo(Serial);
196         Serial\&.println();
197         
198         Serial\&.println(F(" header is :" ) ) ;
199         Serial\&.println(header);
200         Serial\&.println(F(" values are : "));
201         Serial\&.println(values);
202         
203         Serial\&.print(F("jsonBuffer size: "));
204         Serial\&.println(jsonBuffer\&.size());
205         Serial\&.println();
206 
207     
208     #endif
209     
210     }
211     //failed to parse json
212     else
213     {
214     
215     #if DEBUG == 1
216 
217         Serial\&.println( F("failed to parse json") );
218     
219     #endif
220 
221         return(false);
222     }
223 
224     //check if file exists
225     File sensorsData=SPIFFS\&.open("/sensorsData\&.csv","r");
226     
227     //file doesn't exist
228     if( (!sensorsData) || (sensorsData\&.size()==0 ) )
229     {
230     
231     #if DEBUG == 1
232     
233         Serial\&.println( F("/sensorsData\&.csv not found") );
234         Serial\&.println( F("creating /sensorsData\&.csv") );
235         Serial\&.println();
236     
237     #endif
238         //create file
239         sensorsData=SPIFFS\&.open("/sensorsData\&.csv","w");
240         
241         if(!sensorsData)
242         {
243 
244         #if DEBUG == 1
245         
246             Serial\&.println( F("failed to create /sensorsData\&.csv") );
247             Serial\&.println();
248         
249         #endif
250         
251             return(false);
252 
253         }
254         
255         //print the header(json keys ) to the CSV file
256         sensorsData\&.println(header);
257 
258         //print the values to the CSV file
259         sensorsData\&.println(values);
260         
261         sensorsData\&.close();
262     
263     #if DEBUG == 1
264 
265         sensorsData=SPIFFS\&.open("/sensorsData\&.csv","r");
266         
267         if(!sensorsData)
268         {
269             Serial\&.println(F("failed to reopen /sensorsData\&.csv "));
270             return(false);      
271         }
272 
273         Serial\&.println( F("/sensorsData\&.csv : ") );
274 
275         while (sensorsData\&.available()) 
276         {
277             Serial\&.print(sensorsData\&.readString()) ;
278         }
279         Serial\&.println();
280 
281         //close the file
282         sensorsData\&.close();
283 
284     #endif
285         
286 
287         
288         return(true);
289         
290     }
291 
292     //file exist
293     else
294     {
295 
296     #if DEBUG == 1
297     
298         Serial\&.println( F("/sensorsData\&.csv  found") );
299         Serial\&.println( F("appending to /sensorsData\&.csv") );
300         Serial\&.println();
301     
302     #endif
303 
304         //append to file
305         sensorsData=SPIFFS\&.open("/sensorsData\&.csv","a");
306         
307         if(!sensorsData)
308         {
309         
310         #if DEBUG == 1
311             
312             Serial\&.println( F("failed to open /sensorsData\&.csv") );
313             Serial\&.println();
314 
315         #endif
316             
317             return(false);
318         
319         }
320 
321         //print the values to the CSV file
322         sensorsData\&.println(values);
323         
324         sensorsData\&.close();
325 
326     #if DEBUG == 1
327 
328         sensorsData=SPIFFS\&.open("/sensorsData\&.csv","r");
329         
330         if(!sensorsData)
331         {
332             Serial\&.println(F("failed to reopen /sensorsData\&.csv "));
333             return(false);      
334         }
335 
336         
337         Serial\&.println( F("/sensorsData\&.csv : ") );
338 
339         while (sensorsData\&.available()) 
340         {
341             Serial\&.println(sensorsData\&.readString()) ;
342         }
343         
344         Serial\&.println();
345         
346         sensorsData\&.close();
347         
348     #endif      
349         
350         return(true);
351     
352     }   
353 
354 
355 
356 }
.fi
.SS "bool CoolFileSystem::updateConfigFiles (String answer)"
CoolFileSystem::updateConfigFiles( mqtt answer ): This method is provided to update the configuration files when the appropriate mqtt answer is received
.PP
\fBReturns:\fP
.RS 4
true if the files are updated correctly, false otherwise 
.RE
.PP

.PP
Definition at line 367 of file CoolFileSystem\&.cpp\&.
.PP
.nf
368 {
369 
370 #if DEBUG == 1
371 
372     Serial\&.println( F("Entering CoolFileSystem\&.updateConfigFiles") );
373     Serial\&.println();
374     
375     Serial\&.println( F("input answer : ") );
376     Serial\&.println(answer);
377 #endif
378 
379     //total json object 
380     DynamicJsonBuffer jsonBuffer;
381     JsonObject& root = jsonBuffer\&.parseObject( answer\&.c_str() );
382 
383 #if DEBUG == 1
384     
385     Serial\&.println( F("json object : ") );   
386     root\&.printTo(Serial);
387     Serial\&.println();
388     
389     Serial\&.print(F("jsonBuffer size: "));
390     Serial\&.println(jsonBuffer\&.size());
391     Serial\&.println();
392 
393 
394 #endif
395 
396     if(! ( root\&.success() ))
397     {
398     
399     #if DEBUG == 1
400 
401         Serial\&.println( F("failed to parse root ") );
402         Serial\&.println();
403     
404     #endif
405 
406         return(false);
407     }
408     else
409     {
410     #if DEBUG == 1
411         
412         Serial\&.println( F("success to parse root ") );
413         Serial\&.println();
414         
415     #endif  
416     }
417     
418 #if DEBUG == 1
419 
420     Serial\&.println( F("input message is : ") );
421     root\&.printTo(Serial);
422     Serial\&.println();
423 
424 #endif
425     //temp string
426     String temp;
427 
428     //CoolBoard Configuration File
429 
430         JsonObject& jsonCoolBoard=root["CoolBoard"];
431 
432 #if DEBUG == 1
433 
434     Serial\&.println( F("before config CoolBoard json") );
435     jsonCoolBoard\&.printTo(Serial);
436 
437 #endif
438 
439     if(jsonCoolBoard\&.success())
440     {
441         String update;
442     
443         jsonCoolBoard\&.printTo(update);
444 
445         this->fileUpdate(update,"/coolBoardConfig\&.json");        
446         
447     }
448     else
449     {
450     
451     #if DEBUG == 1 
452 
453         Serial\&.println( F("failed to parse CoolBoard ") );
454     
455     #endif
456 
457     }       
458 
459     
460     //Cool Board Sensors Configuration File
461         JsonObject& jsonSensorsBoard=root["CoolSensorsBoard"];
462 
463 #if DEBUG == 1 
464 
465     Serial\&.println( F("before config CoolSensorsBoard json") );
466     jsonSensorsBoard\&.printTo(Serial);
467 
468 #endif 
469     
470     if(jsonSensorsBoard\&.success())
471     {   
472         String update;
473     
474         jsonSensorsBoard\&.printTo(update);
475 
476         this->fileUpdate(update,"/coolBoardSensorsConfig\&.json");     
477 
478     }
479     else
480     {
481 
482     #if DEBUG == 1
483 
484         Serial\&.println( F("failed to parse CoolSensorsBoard sensors ") );    
485     
486     #endif
487 
488     }
489 
490     
491     //rtc configuration file
492         JsonObject& jsonRTC=root["rtc"];
493 
494 #if DEBUG == 1 
495     
496     Serial\&.println( F("before config rtc json") );
497     jsonRTC\&.printTo(Serial);
498 
499 #endif
500     if(jsonRTC\&.success() )
501     {
502         String update;
503 
504         jsonRTC\&.printTo(update);
505 
506         this->fileUpdate(update,"/rtcConfig\&.json");          
507     }
508     else
509     {
510     
511     #if DEBUG == 1 
512 
513         Serial\&.println( F("failed to parse rtc ") );
514     
515     #endif
516 
517     }
518     
519     
520         //cool board led configuration
521         JsonObject& jsonLedBoard=root["led"];
522     
523 #if DEBUG == 1 
524 
525     Serial\&.println( F("before config Led json") );
526     jsonLedBoard\&.printTo(Serial);
527 
528 #endif
529 
530     if(jsonLedBoard\&.success())
531     {   
532         String update;
533     
534         jsonLedBoard\&.printTo(update);
535 
536         this->fileUpdate(update,"/coolBoardLedConfig\&.json");     
537 
538     
539     }
540     else
541     {
542     
543     #if DEBUG == 1 
544 
545         Serial\&.println( F("failed to parse led") );
546     
547     #endif 
548 
549     }
550         
551 
552     
553 
554     //jetpack configuration
555         JsonObject& jsonJetpack=root["jetPack"];
556 
557 #if DEBUG == 1 
558 
559     Serial\&.println( F("before config jetpack json") );
560     jsonJetpack\&.printTo(Serial);
561 
562 #endif
563 
564     if(jsonJetpack\&.success())
565     {
566     
567         String update;
568     
569         jsonJetpack\&.printTo(update);
570 
571         this->fileUpdate(update,"/jetPackConfig\&.json");      
572 
573     }
574 
575     else
576     {
577     
578     #if DEBUG == 1 
579 
580         Serial\&.println( F("failed to parse jetpack") );  
581     
582     #endif
583 
584     }
585     
586     //irene configuration   
587         JsonObject& jsonIrene=root["irene3000"];
588     
589 #if DEBUG == 1 
590 
591     Serial\&.println( F("before config irene json") ); 
592     jsonIrene\&.printTo(Serial);
593 
594 #endif 
595 
596     if(jsonIrene\&.success())
597     {
598 
599         String update;
600     
601         jsonIrene\&.printTo(update);
602 
603         this->fileUpdate(update,"/irene3000Config\&.json");        
604     
605     }
606     else
607     {
608     
609     #if DEBUG == 1 
610 
611         Serial\&.println( F("failed to parse irene") );    
612     
613     #endif 
614 
615 
616     }
617     
618     //external sensors
619         JsonObject& jsonExternalSensors=root["externalSensors"];
620 
621 #if DEBUG == 1 
622 
623     Serial\&.println( F("before config external Sensors json") );
624     jsonExternalSensors\&.printTo(Serial);
625 
626 #endif
627 
628     if(jsonExternalSensors\&.success())
629     {
630 
631         String update;
632     
633         jsonExternalSensors\&.printTo(update);
634 
635         this->fileUpdate(update,"/externalSensorsConfig\&.json");      
636 
637     }
638 
639     else
640     {   
641 
642     #if DEBUG == 1
643         
644         Serial\&.println( F("failed to parse external sensors") );
645 
646     #endif
647 
648 
649     }
650 
651     
652     //mqtt config
653         JsonObject& jsonMQTT=root["mqtt"];
654     
655 #if DEBUG == 1 
656 
657     Serial\&.println( F("before config mqtt json") );
658     jsonMQTT\&.printTo(Serial);
659 
660 #endif
661 
662     if(jsonMQTT\&.success())
663     {
664 
665         String update;
666     
667         jsonMQTT\&.printTo(update);
668 
669         this->fileUpdate(update,"/mqttConfig\&.json");     
670 
671     }
672     else
673     {
674 
675     #if DEBUG == 1 
676 
677         Serial\&.println( F("failed to parse mqtt") );
678     
679     #endif
680 
681     
682     }   
683 
684     //wifi config
685         JsonObject& jsonWifi=root["wifi"];
686     
687 #if DEBUG == 1 
688 
689     Serial\&.println( F("before config wifi json") );
690     jsonWifi\&.printTo(Serial);
691 
692 #endif
693 
694     if(jsonWifi\&.success())
695     {
696 
697         String update;
698     
699         jsonWifi\&.printTo(update);
700 
701         this->fileUpdate(update,"/wifiConfig\&.json");     
702 
703     }
704     else
705     {
706 
707     #if DEBUG == 1 
708 
709         Serial\&.println( F("failed to parse wifi") );
710     
711     #endif
712 
713     
714     }   
715         
716     return true;
717 
718 }   
.fi
.SH "Member Data Documentation"
.PP 
.SS "int CoolFileSystem::linesToSkip =0\fC [private]\fP"

.PP
Definition at line 49 of file CoolFileSystem\&.h\&.
.SS "int CoolFileSystem::savedData =0\fC [private]\fP"

.PP
Definition at line 47 of file CoolFileSystem\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolBoardAPI from the source code\&.
