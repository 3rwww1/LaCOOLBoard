.TH "CoolBoardActor" 3 "Wed Aug 30 2017" "CoolBoardAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoolBoardActor \- This class manages the \fBCoolBoardActor\fP\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolBoardActor\&.h>\fP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBstate\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBbegin\fP ()"
.br
.ti -1c
.RI "void \fBwrite\fP (bool action)"
.br
.ti -1c
.RI "void \fBdoAction\fP (const char *data)"
.br
.ti -1c
.RI "void \fBnormalAction\fP (float measurment)"
.br
.ti -1c
.RI "void \fBinvertedAction\fP (float measurment)"
.br
.ti -1c
.RI "void \fBtemporalActionOff\fP ()"
.br
.ti -1c
.RI "void \fBtemporalActionOn\fP ()"
.br
.ti -1c
.RI "void \fBmixedTemporalActionOff\fP (float measurment)"
.br
.ti -1c
.RI "void \fBmixedTemporalActionOn\fP (float measurment)"
.br
.ti -1c
.RI "void \fBhourAction\fP (int hour)"
.br
.ti -1c
.RI "void \fBmixedHourAction\fP (int hour, float measurment)"
.br
.ti -1c
.RI "void \fBminuteAction\fP (int minute)"
.br
.ti -1c
.RI "void \fBmixedMinuteAction\fP (int minute, float measurment)"
.br
.ti -1c
.RI "void \fBhourMinuteAction\fP (int hour, int minute)"
.br
.ti -1c
.RI "void \fBmixedHourMinuteAction\fP (int hour, int minute, float measurment)"
.br
.ti -1c
.RI "bool \fBconfig\fP ()"
.br
.ti -1c
.RI "void \fBprintConf\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "struct \fBCoolBoardActor::state\fP \fBactor\fP"
.br
.ti -1c
.RI "const int \fBpin\fP = 15"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class manages the \fBCoolBoardActor\fP\&. 
.PP
Definition at line 44 of file CoolBoardActor\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "void CoolBoardActor::begin ()"
\fBCoolBoardActor::begin()\fP: This method is provided to initialise the \fBCoolBoardActor\fP pin 
.PP
Definition at line 48 of file CoolBoardActor\&.cpp\&.
.PP
.nf
49 {
50 
51 #if DEBUG == 1 
52  
53     Serial\&.println( F("Entering CoolBoardActor\&.begin() ") );
54     Serial\&.println();
55 
56 #endif
57 
58     pinMode(this->pin,OUTPUT);
59     
60     
61 
62 }
.fi
.SS "bool CoolBoardActor::config ()"
\fBCoolBoardActor::config()\fP: This method is provided to configure the \fBCoolBoardActor\fP with a configuration file
.PP
\fBReturns:\fP
.RS 4
true if successful,false otherwise 
.RE
.PP

.PP
Definition at line 258 of file CoolBoardActor\&.cpp\&.
.PP
.nf
259 {
260 
261 #if DEBUG == 1 
262 
263     Serial\&.println( F("Entering CoolBoardActor\&.config() ") );
264     Serial\&.println();
265 
266 #endif
267 
268     File coolBoardActorConfig = SPIFFS\&.open("/coolBoardActorConfig\&.json", "r");
269 
270     if (!coolBoardActorConfig) 
271     {
272 
273     #if DEBUG == 1 
274 
275         Serial\&.println( F("failed to read /coolBoardActorConfig\&.json ") );
276         Serial\&.println();
277 
278     #endif
279 
280         return(false);
281     }
282     else
283     {
284         size_t size = coolBoardActorConfig\&.size();
285         // Allocate a buffer to store contents of the file\&.
286         std::unique_ptr<char[]> buf(new char[size]);
287 
288         coolBoardActorConfig\&.readBytes(buf\&.get(), size);
289         DynamicJsonBuffer jsonBuffer;
290         JsonObject& json = jsonBuffer\&.parseObject(buf\&.get());
291         if (!json\&.success()) 
292         {
293         
294         #if DEBUG == 1 
295 
296             Serial\&.println( F("failed to parse coolBoardActor Config  json from file ") );
297             Serial\&.println();
298 
299         #endif
300 
301             return(false);
302         } 
303         else
304         { 
305         
306         #if DEBUG == 1 
307 
308             Serial\&.println( F("read configuration file : ") );
309             json\&.printTo(Serial);
310             Serial\&.println();
311 
312             Serial\&.print(F("jsonBuffer size: "));
313             Serial\&.println(jsonBuffer\&.size());
314             Serial\&.println();
315 
316         
317         #endif
318   
319             //parsing actif key
320             if(json["actif"]\&.success() )
321             {
322                 this->actor\&.actif=json["actif"];
323             }
324             else
325             {
326                 this->actor\&.actif=this->actor\&.actif;
327             }
328             json["actif"]=this->actor\&.actif;
329             
330             //parsing temporal key
331             if(json["temporal"]\&.success() )
332             {
333                 this->actor\&.temporal=json["temporal"];
334             }
335             else
336             {
337                 this->actor\&.temporal=this->actor\&.temporal;
338             }
339             json["temporal"]=this->actor\&.temporal;
340             
341             //parsing inverted key
342             if(json["inverted"]\&.success() )
343             {
344                 this->actor\&.inverted=json["inverted"];
345             }
346             else
347             {
348                 this->actor\&.inverted=this->actor\&.inverted;
349             }
350             json["inverted"]=this->actor\&.inverted;
351 
352             //parsing inverted key
353             if(json["inverted"]\&.success() )
354             {
355                 this->actor\&.inverted=json["inverted"];
356             }
357             else
358             {
359                 this->actor\&.inverted=this->actor\&.inverted;
360             }
361             json["inverted"]=this->actor\&.inverted;
362             
363             //parsing low key
364             if(json["low"]\&.success() )
365             {
366                 this->actor\&.rangeLow=json["low"][0];
367                 this->actor\&.timeLow=json["low"][1];
368                 this->actor\&.hourLow=json["low"][2];                      
369                 this->actor\&.minuteLow=json["low"][3];                        
370             }
371             else
372             {
373                 this->actor\&.rangeLow=this->actor\&.rangeLow;
374                 this->actor\&.timeLow=this->actor\&.timeLow;
375                 this->actor\&.hourLow=this->actor\&.hourLow;
376                 this->actor\&.minuteLow=this->actor\&.minuteLow;                      
377             }
378             json["low"][0]=this->actor\&.rangeLow;
379             json["low"][1]=this->actor\&.timeLow;
380             json["low"][2]=this->actor\&.hourLow;
381             json["low"][3]=this->actor\&.minuteLow;
382 
383             //parsing high key
384             if(json["high"]\&.success() )
385             {
386                 this->actor\&.rangeHigh=json["high"][0];
387                 this->actor\&.timeHigh=json["high"][1];
388                 this->actor\&.hourHigh=json["high"][2];                        
389                 this->actor\&.minuteHigh=json["high"][3];                      
390             }
391             else
392             {
393                 this->actor\&.rangeHigh=this->actor\&.rangeHigh;
394                 this->actor\&.timeHigh=this->actor\&.timeHigh;
395                 this->actor\&.hourHigh=this->actor\&.hourHigh;
396                 this->actor\&.minuteHigh=this->actor\&.minuteHigh;
397             }
398             json["high"][0]=this->actor\&.rangeHigh;
399             json["high"][1]=this->actor\&.timeHigh;
400             json["high"][2]=this->actor\&.hourHigh;
401             json["high"][3]=this->actor\&.minuteHigh;
402 
403             //parsing type key
404             if(json["type"]\&.success() )
405             {
406                 this->actor\&.primaryType=json["type"][0]\&.as<String>();
407                 this->actor\&.secondaryType=json["type"][1]\&.as<String>();                       
408                 
409             }
410             else
411             {
412                 this->actor\&.primaryType=this->actor\&.primaryType;
413                 this->actor\&.secondaryType=this->actor\&.secondaryType;
414             }
415             json["type"][0]=this->actor\&.primaryType;
416             json["type"][1]=this->actor\&.secondaryType;
417             
418 
419             coolBoardActorConfig\&.close();            
420             coolBoardActorConfig = SPIFFS\&.open("/coolBoardActorConfig\&.json", "w");            
421             if(!coolBoardActorConfig)
422             {
423             
424             #if DEBUG == 1 
425 
426                 Serial\&.println( F("failed to write to /coolBoardActorConfig\&.json ") );
427                 Serial\&.println();
428             
429             #endif
430                 
431                 return(false);          
432             }  
433 
434             json\&.printTo(coolBoardActorConfig);
435             coolBoardActorConfig\&.close();
436 
437         #if DEBUG == 1 
438             
439             Serial\&.println(F("saved configuration : "));
440             json\&.printTo(Serial );
441             Serial\&.println();        
442         
443         #endif
444 
445             return(true); 
446         }
447     }   
448     
449 
450 }
.fi
.SS "void CoolBoardActor::doAction (const char * data)"
CoolBoardActor::doAction(sensor data ): This method is provided to automate the \fBCoolBoardActor\fP\&.
.PP
The result action is the result of checking the different flags of the actor (actif , temporal ,inverted, primaryType and secondaryType ) and the corresponding call to the appropriate helping method 
.PP
Definition at line 101 of file CoolBoardActor\&.cpp\&.
.PP
.nf
102 {
103 
104 #if DEBUG == 1 
105 
106     Serial\&.println( F("Entering CoolBoardActor\&.doAction()") );
107     Serial\&.println();
108 
109     Serial\&.println( F("input data is :") );
110     Serial\&.println(data);
111     Serial\&.println();
112 
113 #endif 
114 
115     DynamicJsonBuffer jsonBuffer;
116     JsonObject& root = jsonBuffer\&.parseObject(data);
117     
118     if (!root\&.success()) 
119     {
120     
121     #if DEBUG == 1 
122 
123         Serial\&.println( F("failed to parse json object ") );
124         Serial\&.println();
125     
126     #endif 
127 
128     }
129     else
130     {
131     
132     #if DEBUG == 1 
133 
134         Serial\&.println( F("created Json object :") );
135         root\&.printTo(Serial);
136         Serial\&.println();
137 
138         Serial\&.print(F("jsonBuffer size: "));
139         Serial\&.println(jsonBuffer\&.size());
140         Serial\&.println();
141 
142     
143     #endif 
144 
145         //invert the current action state for the actor
146         //if the value is outside the limits
147         
148         //check if actor is actif
149         if(this->actor\&.actif==1)
150         {
151             //normal actor
152             if(this->actor\&.temporal == 0)
153             {
154                 //not inverted actor
155                 if(this->actor\&.inverted==0)
156                 {
157                     this->normalAction(root[this->actor\&.primaryType]\&.as<float>());                
158                 }
159                 //inverted actor
160                 else if(this->actor\&.inverted==1)
161                 {
162                     this->invertedAction(root[this->actor\&.primaryType]\&.as<float>());              
163                 }
164             }
165             //temporal actor
166             else if(this->actor\&.temporal == 1 )
167             {
168                 //hour actor
169                 if(this->actor\&.secondaryType=="hour")
170                 {
171                     //mixed hour actor
172                     if(root[this->actor\&.primaryType]\&.success() )
173                     {
174                         this->mixedHourAction(root[this->actor\&.secondaryType]\&.as<int>(),root[this->actor\&.primaryType]\&.as<float>());
175                     }
176                     //normal hour actor
177                     else
178                     {
179                         this->hourAction(root[this->actor\&.secondaryType]\&.as<int>());
180                     }
181                 
182                 }
183                 //minute actor
184                 else if(this->actor\&.secondaryType=="minute")
185                 {
186                     //mixed minute actor
187                     if(root[this->actor\&.primaryType]\&.success() )
188                     {
189                         this->mixedMinuteAction(root[this->actor\&.secondaryType]\&.as<int>(),root[this->actor\&.primaryType]\&.as<float>());
190                     }
191                     //normal minute actor
192                     else
193                     {
194                         this->minuteAction(root[this->actor\&.secondaryType]\&.as<int>());
195                     }
196                 }
197                 //hourMinute actor
198                 else if(this->actor\&.secondaryType=="hourMinute")
199                 {
200                     //mixed hourMinute actor
201                     if(root[this->actor\&.primaryType]\&.success() )
202                     {
203                         this->mixedHourMinuteAction(root["hour"]\&.as<int>(),root["minute"]\&.as<int>(),root[this->actor\&.primaryType]\&.as<float>());
204                     }
205                     //normal hourMinute actor
206                     else
207                     {
208                         this->hourMinuteAction(root["hour"]\&.as<int>(),root["minute"]\&.as<int>());
209                     }
210                 }
211                 //normal temporal actor
212                 else if(this->actor\&.secondaryType=="")
213                 {
214                     //mixed temporal actor
215                     if(root[this->actor\&.primaryType]\&.success() )
216                     {
217                         this->mixedTemporalActionOn(root[this->actor\&.primaryType]\&.as<float>());
218                     }
219                     //normal temporal actor
220                     else
221                     {
222                         this->temporalActionOn();
223                     }
224                                         
225                 }
226 
227             }
228         }
229         //inactif actor
230         else if(this->actor\&.actif == 0 )
231         {
232             //temporal actor
233             if(this->actor\&.temporal==1)
234             {
235                 //mixed temporal actor
236                 if(root[this->actor\&.primaryType]\&.success() )
237                 {
238                     this->mixedTemporalActionOff(root[this->actor\&.primaryType]\&.as<float>());
239                 }
240                 //normal temporal actor
241                 else
242                 {
243                     this->temporalActionOff();
244                 }
245             }           
246         }
247 
248     } 
249 }
.fi
.SS "void CoolBoardActor::hourAction (int hour)"
CoolBoardActor::hourAction( current hour ): This method is provided to handle hour actors\&. it changes the action according to:
.PP
hour >= hourLow : deactivate the actor hour >= hourHigh : activate the actor 
.PP
Definition at line 922 of file CoolBoardActor\&.cpp\&.
.PP
.nf
923 {
924 
925 #if DEBUG == 1
926     
927     Serial\&.print(F("hour Actor "));
928     Serial\&.println();
929 
930     Serial\&.print(F(" hour : "));
931     Serial\&.println(hour);
932 
933     Serial\&.print(F("high hour : "));
934     Serial\&.println(this->actor\&.hourHigh);
935 
936     Serial\&.print(F("low hour : "));
937     Serial\&.println(this->actor\&.hourLow);
938 
939 #endif
940 
941     //stop the actor    
942     if(hour >= this->actor\&.hourLow)
943     {
944         this->write( 0) ;
945 
946     #if DEBUG == 1 
947 
948         Serial\&.println(F("actor OFF "));
949 
950     #endif  
951 
952     }
953     //starting the actor
954     else if(hour >= this->actor\&.hourHigh)
955     {
956         this->write( 1) ;
957 
958     #if DEBUG == 1 
959 
960         Serial\&.println(F("actor ON "));
961 
962     #endif  
963     
964     }
965 
966 }
.fi
.SS "void CoolBoardActor::hourMinuteAction (int hour, int minute)"
CoolBoardActor::minteAction( current hour,current minute ): This method is provided to handle hour minute actors\&. it changes the action according to:
.PP
hour == hourLow : minute >= minuteLow : deactivate the actor
.PP
hour > hourLow : deactivate the actor
.PP
hour == hourHigh : minute >= minteHigh : activate the actor
.PP
hour > hourHigh : activate the actor 
.PP
Definition at line 1266 of file CoolBoardActor\&.cpp\&.
.PP
.nf
1267 {
1268 
1269 #if DEBUG == 1
1270 
1271     Serial\&.print(F("hourMinute Actor "));
1272     Serial\&.println();
1273 
1274     Serial\&.print(F(" hour : "));
1275     Serial\&.println(hour);
1276     Serial\&.print(F(" minute : "));
1277     Serial\&.println(minute);
1278 
1279     Serial\&.print(F("high hour : "));
1280     Serial\&.println(this->actor\&.hourHigh);
1281 
1282     Serial\&.print(F("high minute : "));
1283     Serial\&.println(this->actor\&.minuteHigh);
1284 
1285     Serial\&.print(F("low hour : "));
1286     Serial\&.println(this->actor\&.hourLow);
1287 
1288     Serial\&.print(F("low minute : "));
1289     Serial\&.println(this->actor\&.minuteLow);
1290 
1291 #endif
1292     //stop the actor
1293     if(hour==this->actor\&.hourLow)
1294     {
1295         if(minute>= this->actor\&.minuteLow)
1296         {
1297             this->write( 0) ;
1298         #if DEBUG == 1 
1299 
1300             Serial\&.println(F("actor OFF "));
1301 
1302         #endif  
1303         }
1304     }
1305     else if(hour > this->actor\&.hourLow)
1306     {
1307 
1308         this->write( 0) ;
1309     #if DEBUG == 1 
1310 
1311         Serial\&.println(F("actor OFF "));
1312 
1313     #endif  
1314     
1315     }
1316     //start the actor
1317     else if(hour==this->actor\&.hourHigh)
1318     {
1319         if(minute>= this->actor\&.minuteHigh)
1320         {
1321             this->write( 1) ;
1322 
1323         #if DEBUG == 1 
1324 
1325             Serial\&.println(F("actor ON "));
1326 
1327         #endif  
1328         }
1329     }
1330     else if(hour > this->actor\&.hourHigh)
1331     {
1332 
1333         this->write( 1) ;
1334 
1335     #if DEBUG == 1 
1336 
1337         Serial\&.println(F("actor ON "));
1338 
1339     #endif      
1340 
1341     }
1342 
1343     
1344 }
.fi
.SS "void CoolBoardActor::invertedAction (float measurment)"
CoolBoardActor::invertedAction( measured value): This method is provided to handle inverted actors\&. it changes the action according to wether the measured value is: 
.PP
.RS 4
rangeHigh (activate actor) 
.RE
.PP
< rangeLow ( deactivate actor ) 
.PP
Definition at line 589 of file CoolBoardActor\&.cpp\&.
.PP
.nf
590 {
591 #if DEBUG == 1
592     
593     Serial\&.print("inverted Actor ");
594     Serial\&.println();
595 
596     Serial\&.print("measured value : ");
597     Serial\&.println(measurment);
598 
599     Serial\&.print("high range : ");
600     Serial\&.println(this->actor\&.rangeHigh);
601 
602     Serial\&.print("low range : ");
603     Serial\&.println(this->actor\&.rangeLow);
604 
605 #endif
606 
607     //measured value lower than minimum range : deactivate actor
608     if(measurment < this->actor\&.rangeLow)
609     {
610         this->write( 0) ;
611 
612     #if DEBUG == 1 
613 
614         Serial\&.println(F("actor OFF "));
615     
616     #endif
617 
618     }
619     //measured value higher than maximum range : activate actor
620     else if(measurment > this->actor\&.rangeHigh)
621     {
622         this->write( 1) ;
623 
624     #if DEBUG == 1 
625 
626         Serial\&.println(F("actor ON "));
627     
628     #endif
629 
630     }
631 
632 
633 }
.fi
.SS "void CoolBoardActor::minuteAction (int minute)"
CoolBoardActor::minteAction( current minute ): This method is provided to handle minute actors\&. it changes the action according to:
.PP
minute >= minuteLow : deactivate the actor minute >= minuteHigh : activate the actor 
.PP
Definition at line 1090 of file CoolBoardActor\&.cpp\&.
.PP
.nf
1091 {
1092 
1093 #if DEBUG == 1
1094     
1095     Serial\&.print(F("minute Actor "));
1096     Serial\&.println();
1097 
1098     Serial\&.print(F(" minute : "));
1099     Serial\&.println(minute);
1100 
1101     Serial\&.print(F("high minute : "));
1102     Serial\&.println(this->actor\&.minuteHigh);
1103 
1104     Serial\&.print(F("low minute : "));
1105     Serial\&.println(this->actor\&.minuteLow);
1106 
1107 #endif
1108 
1109     //stop the actor    
1110     if(minute >= this->actor\&.minuteLow)
1111     {
1112         this->write( 0) ;
1113 
1114     #if DEBUG == 1 
1115 
1116         Serial\&.println(F("actor OFF "));
1117 
1118     #endif  
1119 
1120     }   
1121     //starting the actor
1122     else if(minute >= this->actor\&.minuteHigh)
1123     {
1124         this->write( 1) ;
1125 
1126     #if DEBUG == 1 
1127 
1128         Serial\&.println(F("actor ON "));
1129 
1130     #endif  
1131 
1132     }
1133 
1134 } 
.fi
.SS "void CoolBoardActor::mixedHourAction (int hour, float measurment)"
CoolBoardActor::mixedHourAction( current hour, measured value ): This method is provided to handle mixed hour actors\&. it changes the action according to :
.PP
hour >= hourLow : -measuredValue >= rangeHigh : deactivate actor -measured < rangeHigh : activate actor
.PP
hour >= hourHigh : -measuredValue < rangeLow : activate actor -measuredValue >=rangeLow : activate actor 
.PP
Definition at line 983 of file CoolBoardActor\&.cpp\&.
.PP
.nf
984 {
985 
986 #if DEBUG == 1
987     
988     Serial\&.print("mixed hour Actor N° : ");
989     Serial\&.println();
990 
991     Serial\&.print(" hour : ");
992     Serial\&.println(hour);
993 
994     Serial\&.print("high hour : ");
995     Serial\&.println(this->actor\&.hourHigh);
996 
997     Serial\&.print("low hour : ");
998     Serial\&.println(this->actor\&.hourLow);
999 
1000     Serial\&.print("measured value : ");
1001     Serial\&.println(measurment);
1002 
1003     Serial\&.print("high range : ");
1004     Serial\&.println(this->actor\&.rangeHigh);
1005 
1006     Serial\&.print("low range : ");
1007     Serial\&.println(this->actor\&.rangeLow);
1008 
1009 #endif
1010     //stop the actor    
1011     if(hour >= this->actor\&.hourLow)
1012     {
1013             if( measurment >= this->actor\&.rangeHigh )
1014             {
1015                 this->write( 0) ;
1016 
1017             #if DEBUG == 1 
1018 
1019                 Serial\&.print(measurment);
1020                 Serial\&.print(F(" > " ));
1021                 Serial\&.println(this->actor\&.rangeHigh);
1022 
1023                 Serial\&.println(F("actor OFF "));
1024 
1025             #endif  
1026 
1027             }
1028             else 
1029             {
1030                 this->write( 1) ;
1031 
1032             #if DEBUG == 1 
1033 
1034                 Serial\&.print(measurment);
1035                 Serial\&.print(F(" < " ));
1036                 Serial\&.print(this->actor\&.rangeHigh);
1037 
1038                 Serial\&.println(F("actor ON "));
1039 
1040             #endif  
1041                 
1042             }
1043     }
1044     //starting the actor
1045     else if(hour >= this->actor\&.hourHigh)
1046     {
1047             if( measurment < this->actor\&.rangeLow )
1048             {
1049                 this->write( 1) ;
1050 
1051             #if DEBUG == 1 
1052 
1053                 Serial\&.print(measurment);
1054                 Serial\&.print(F(" < " ));
1055                 Serial\&.println(this->actor\&.rangeLow);
1056 
1057                 Serial\&.println(F("actor ON "));
1058 
1059             #endif  
1060             }
1061             else 
1062             {
1063                 this->write( 0) ;
1064 
1065             #if DEBUG == 1 
1066 
1067                 Serial\&.print(measurment);
1068                 Serial\&.print(F(" > " ));
1069                 Serial\&.println(this->actor\&.rangeLow);
1070 
1071                 Serial\&.println(F("actor OFF "));
1072 
1073             #endif                  
1074             }
1075 
1076     }
1077 
1078 }
.fi
.SS "void CoolBoardActor::mixedHourMinuteAction (int hour, int minute, float measurment)"
CoolBoardActor::minteAction( current hour,current minute , measured Value ): This method is provided to handle hour minute actors\&. it changes the action according to:
.PP
hour == hourLow : minute >= minuteLow : measuredValue >= rangeHigh : deactivate actor measuredValue < rangeHigh : activate actor
.PP
hour > hourLow : measuredValue >= rangeHigh : deactivate actor measuredValue < rangeHigh : activate actor
.PP
hour == hourHigh : minute >= minteHigh : measuredValue >= rangeLow : deactivate actor measuredValue < rangeLow : activate actor
.PP
hour > hourHigh : measuredValue >= rangeLow : deactivate actor measuredValue < rangeLow : activate actor 
.PP
Definition at line 1371 of file CoolBoardActor\&.cpp\&.
.PP
.nf
1372 {
1373 
1374 #if DEBUG == 1
1375     
1376     Serial\&.print("hourMinute Actor  ");
1377     Serial\&.println();
1378 
1379     Serial\&.print(" hour : ");
1380     Serial\&.println(hour);
1381     Serial\&.print(" minute : ");
1382     Serial\&.println(minute);
1383 
1384     Serial\&.print("high hour : ");
1385     Serial\&.println(this->actor\&.hourHigh);
1386 
1387     Serial\&.print("high minute : ");
1388     Serial\&.println(this->actor\&.minuteHigh);
1389 
1390     Serial\&.print("low hour : ");
1391     Serial\&.println(this->actor\&.hourLow);
1392 
1393     Serial\&.print("low minute : ");
1394     Serial\&.println(this->actor\&.minuteLow);
1395 
1396     Serial\&.print("measured value : ");
1397     Serial\&.println(measurment);
1398 
1399     Serial\&.print("high range : ");
1400     Serial\&.println(this->actor\&.rangeHigh);
1401 
1402     Serial\&.print("low range : ");
1403     Serial\&.println(this->actor\&.rangeLow);
1404 
1405 #endif
1406     //stop the actor
1407     if(hour==this->actor\&.hourLow)
1408     {
1409         if(minute>= this->actor\&.minuteLow)
1410         {
1411             if( measurment >= this->actor\&.rangeHigh )
1412             {
1413                 this->write( 0) ;
1414 
1415             #if DEBUG == 1 
1416 
1417                 Serial\&.print(measurment);
1418                 Serial\&.print(F(" >= " ));
1419                 Serial\&.println(this->actor\&.rangeHigh);
1420 
1421                 Serial\&.println(F("actor OFF "));
1422 
1423             #endif  
1424 
1425             }
1426             else 
1427             {
1428                 this->write( 1) ;
1429 
1430             #if DEBUG == 1 
1431 
1432                 Serial\&.print(measurment);
1433                 Serial\&.print(F(" < " ));
1434                 Serial\&.println(this->actor\&.rangeHigh);
1435 
1436                 Serial\&.println(F("actor ON "));
1437 
1438             #endif  
1439                 
1440             }
1441         }
1442     }
1443     else if(hour > this->actor\&.hourLow)
1444     {
1445 
1446         if( measurment >= this->actor\&.rangeHigh )
1447         {
1448             this->write( 0) ;
1449 
1450         #if DEBUG == 1 
1451 
1452             Serial\&.print(measurment);
1453             Serial\&.print(F(" >= " ));
1454             Serial\&.println(this->actor\&.rangeHigh);
1455 
1456             Serial\&.println(F("actor OFF "));
1457 
1458         #endif  
1459 
1460         }
1461         else 
1462         {
1463             this->write( 1) ;
1464 
1465         #if DEBUG == 1 
1466 
1467             Serial\&.print(measurment);
1468             Serial\&.print(F(" < " ));
1469             Serial\&.println(this->actor\&.rangeHigh);
1470 
1471             Serial\&.println(F("actor ON "));
1472 
1473         #endif  
1474             
1475         }
1476 
1477 
1478     }
1479     //start the actor
1480     else if(hour==this->actor\&.hourHigh)
1481     {
1482         if(minute>= this->actor\&.minuteHigh)
1483         {
1484             if( measurment < this->actor\&.rangeLow )
1485             {
1486                 this->write( 1) ;
1487 
1488             #if DEBUG == 1 
1489 
1490                 Serial\&.print(measurment);
1491                 Serial\&.print(F(" < " ));
1492                 Serial\&.println(this->actor\&.rangeLow);
1493 
1494                 Serial\&.println(F("actor ON "));
1495 
1496             #endif  
1497 
1498             }
1499             else 
1500             {
1501                 this->write( 0) ;
1502 
1503             #if DEBUG == 1 
1504 
1505                 Serial\&.print(measurment);
1506                 Serial\&.println(F(" > " ));
1507                 Serial\&.print(this->actor\&.rangeLow);
1508 
1509                 Serial\&.println(F("actor OFF "));
1510 
1511             #endif  
1512                 
1513             }
1514         }
1515     }
1516     else if(hour > this->actor\&.hourHigh)
1517     {
1518 
1519         if( measurment < this->actor\&.rangeLow )
1520         {
1521             this->write( 1) ;
1522 
1523         #if DEBUG == 1 
1524 
1525             Serial\&.print(measurment);
1526             Serial\&.print(F(" < " ));
1527             Serial\&.println(this->actor\&.rangeLow);
1528 
1529             Serial\&.println(F("actor ON "));
1530 
1531         #endif  
1532 
1533         }
1534         else 
1535         {
1536             this->write( 0) ;
1537 
1538         #if DEBUG == 1 
1539 
1540             Serial\&.print(measurment);
1541             Serial\&.println(F(" > " ));
1542             Serial\&.print(this->actor\&.rangeLow);
1543 
1544             Serial\&.println(F("actor OFF "));
1545 
1546         #endif  
1547             
1548         }
1549     
1550     }
1551 
1552 }
.fi
.SS "void CoolBoardActor::mixedMinuteAction (int minute, float measurment)"
CoolBoardActor::mixedMinuteAction( current minute, measured value ): This method is provided to handle mixed minute actors\&. it changes the action according to :
.PP
minute >= minuteLow : -measuredValue >= rangeHigh : deactivate actor -measured < rangeHigh : activate actor
.PP
minute >= minuteHigh : -measuredValue < rangeLow : activate actor -measuredValue >=rangeLow : activate actor 
.PP
Definition at line 1150 of file CoolBoardActor\&.cpp\&.
.PP
.nf
1151 {
1152 
1153 #if DEBUG == 1
1154     
1155     Serial\&.print("mixed minute Actor ");
1156     Serial\&.println();
1157 
1158     Serial\&.print(" minute : ");
1159     Serial\&.println(minute);
1160 
1161     Serial\&.print("high minute : ");
1162     Serial\&.println(this->actor\&.minuteHigh);
1163 
1164     Serial\&.print("low minute : ");
1165     Serial\&.println(this->actor\&.minuteLow);
1166 
1167     Serial\&.print("measured value : ");
1168     Serial\&.println(measurment);
1169 
1170     Serial\&.print("high range : ");
1171     Serial\&.println(this->actor\&.rangeHigh);
1172 
1173     Serial\&.print("low range : ");
1174     Serial\&.println(this->actor\&.rangeLow);
1175 
1176 #endif
1177     //stop the actor    
1178     if(minute >= this->actor\&.minuteLow)
1179     {
1180             if( measurment > this->actor\&.rangeHigh )
1181             {
1182                 this->write( 0) ;
1183 
1184             #if DEBUG == 1 
1185 
1186                 Serial\&.print(measurment);
1187                 Serial\&.print(F(" > " ));
1188                 Serial\&.println(this->actor\&.rangeHigh);
1189 
1190                 Serial\&.println(F("actor OFF "));
1191 
1192             #endif
1193     
1194             }
1195             else 
1196             {
1197                 this->write( 1) ;
1198 
1199             #if DEBUG == 1 
1200 
1201                 Serial\&.print(measurment);
1202                 Serial\&.print(F(" < " ));
1203                 Serial\&.println(this->actor\&.rangeHigh);
1204 
1205                 Serial\&.println(F("actor ON "));
1206 
1207             #endif  
1208                 
1209             }
1210     }   
1211     //starting the actor
1212     else if(minute >= this->actor\&.minuteHigh)
1213     {
1214             if( measurment < this->actor\&.rangeLow )
1215             {
1216                 this->write( 1) ;
1217 
1218             #if DEBUG == 1 
1219 
1220                 Serial\&.print(measurment);
1221                 Serial\&.print(F(" < " ));
1222                 Serial\&.println(this->actor\&.rangeLow);
1223 
1224                 Serial\&.println(F("actor ON "));
1225 
1226             #endif  
1227 
1228             }
1229             else 
1230             {
1231                 this->write( 0) ;
1232             
1233             #if DEBUG == 1 
1234 
1235                 Serial\&.print(measurment);
1236                 Serial\&.print(F(" > " ));
1237                 Serial\&.println(this->actor\&.rangeLow);
1238 
1239                 Serial\&.println(F("actor OFF "));
1240 
1241             #endif  
1242                 
1243             }
1244 
1245     }
1246 
1247 }
.fi
.SS "void CoolBoardActor::mixedTemporalActionOff (float measurment)"
CoolBoardActor::mixedTemporalActionOff( measured value ): This method is provided to handle mixed temporal actors\&. it changes the action according to:
.PP
currentTime - startTime >= timeHigh : measured value >= rangeHigh : deactivate actor measured value < rangeHigh : activate actor 
.PP
Definition at line 695 of file CoolBoardActor\&.cpp\&.
.PP
.nf
696 {
697 
698 #if DEBUG == 1
699     
700     Serial\&.print("mixed Temporal Actor N° : ");
701     Serial\&.println();
702 
703     Serial\&.print("measured value : ");
704     Serial\&.println(measurment);
705 
706     Serial\&.print("high range : ");
707     Serial\&.println(this->actor\&.rangeHigh);
708 
709     Serial\&.print("time high : ");
710     Serial\&.println(this->actor\&.timeHigh);
711 
712     Serial\&.print("actif Time : ");
713     Serial\&.println(this->actor\&.actifTime);
714 
715     Serial\&.print(F("millis : "));
716     Serial\&.println(millis());
717 
718 #endif
719     if( ( millis()- this->actor\&.actifTime  ) >= (  this->actor\&.timeHigh  ) )
720     {   
721         if( measurment >= this->actor\&.rangeHigh )
722         {
723             //stop the actor
724             this->write( 0) ;
725 
726             //make the actor inactif:
727             this->actor\&.actif=0;
728 
729             //start the low timer
730             this->actor\&.inactifTime=millis();
731 
732         #if DEBUG == 1 
733 
734             Serial\&.print(F("actor was on for at least "));
735             Serial\&.print(this->actor\&.timeHigh);
736             Serial\&.println(F(" ms "));
737 
738             Serial\&.print(measurment);
739             Serial\&.print(F(" > " ));
740             Serial\&.println(this->actor\&.rangeHigh);
741 
742             
743             Serial\&.println(F("actor OFF "));
744 
745         #endif
746 
747         }
748         else 
749         {
750             this->write( 1) ;
751 
752         #if DEBUG == 1 
753             
754             Serial\&.print(F("actor was on for at least "));
755             Serial\&.print(this->actor\&.timeHigh);
756             Serial\&.println(F(" ms "));
757 
758             Serial\&.print(measurment);
759             Serial\&.print(F(" < " ));
760             Serial\&.println(this->actor\&.rangeHigh);
761 
762             Serial\&.println(F("actor ON "));
763 
764         #endif              
765 
766         }           
767     }
768 
769 }
.fi
.SS "void CoolBoardActor::mixedTemporalActionOn (float measurment)"
CoolBoardActor::mixedTemporalActionOn( measured value ): This method is provided to handle mixed temporal actors\&. it changes the action according to :
.PP
currentTime - stopTime > timeLow : measured value >= rangeLow : deactivate actor measured value < rangeLow : activate actor 
.PP
Definition at line 833 of file CoolBoardActor\&.cpp\&.
.PP
.nf
834 {
835 
836 #if DEBUG == 1
837     
838     Serial\&.print("mixed Temporal Actor  ");
839     Serial\&.println();
840 
841     Serial\&.print("measured value : ");
842     Serial\&.println(measurment);
843 
844     Serial\&.print("low range : ");
845     Serial\&.println(this->actor\&.rangeLow);
846 
847     Serial\&.print("time low : ");
848     Serial\&.println(this->actor\&.timeLow);
849 
850     Serial\&.print("inactif Time : ");
851     Serial\&.println(this->actor\&.inactifTime);
852 
853     Serial\&.print(F("millis : "));
854     Serial\&.println(millis());
855 
856 #endif
857 
858     if( ( millis() - this->actor\&.inactifTime ) >= (  this->actor\&.timeLow  ) )
859     {
860         if( measurment < this->actor\&.rangeLow )
861         {
862             //start the actor
863             this->write( 1) ;
864 
865             //make the actor actif:
866             this->actor\&.actif=1;
867 
868             //start the low timer
869             this->actor\&.actifTime=millis();
870 
871         #if DEBUG == 1 
872 
873             Serial\&.print(F("actor was off for at least "));
874             Serial\&.print(this->actor\&.timeLow);
875             Serial\&.println(F(" ms "));
876 
877             Serial\&.print(measurment);
878             Serial\&.print(F(" < " ));
879             Serial\&.println(this->actor\&.rangeLow);
880     
881             Serial\&.println(F("actor ON "));
882     
883         #endif  
884 
885         }
886         else 
887         {
888             this->write( 0) ;   
889 
890         #if DEBUG == 1 
891 
892             Serial\&.print(F("actor was off for at least "));
893             Serial\&.print(this->actor\&.timeLow);
894             Serial\&.println(F(" ms "));
895 
896             Serial\&.print(measurment);
897             Serial\&.print(F(" > " ));
898             Serial\&.println(this->actor\&.rangeLow);
899 
900             Serial\&.println(F("actor OFF "));
901     
902         #endif              
903 
904         }
905 
906     }
907 
908     
909 }
.fi
.SS "void CoolBoardActor::normalAction (float measurment)"
CoolBoardActor::normalAction( measured value): This method is provided to handle normal actors\&. it changes the action according to wether the measured value is: > rangeHigh ( deactivate actor) or < rangeLow (activate actor ) 
.PP
Definition at line 532 of file CoolBoardActor\&.cpp\&.
.PP
.nf
533 {
534 
535 #if DEBUG == 1
536     
537     Serial\&.print(F("none inverted Actor"));
538     Serial\&.println();
539 
540     Serial\&.print(F("measured value : "));
541     Serial\&.println(measurment);
542 
543     Serial\&.print(F("high range : "));
544     Serial\&.println(this->actor\&.rangeHigh);
545 
546     Serial\&.print(F("low range : "));
547     Serial\&.println(this->actor\&.rangeLow);
548 
549 #endif
550 
551     //measured value lower than minimum range : activate actor
552     if(measurment < this->actor\&.rangeLow)
553     {
554         this->write( 1) ;
555 
556     #if DEBUG == 1 
557 
558         Serial\&.println(F("actor ON "));s
559     
560     #endif
561                 
562     }
563     //measured value higher than maximum range : deactivate actor
564     else if(measurment > this->actor\&.rangeHigh)
565     {
566         this->write( 0) ;
567 
568     #if DEBUG == 1 
569 
570         Serial\&.println(F("actor OFF "));
571     
572     #endif
573     
574     }
575 
576 
577 }
.fi
.SS "void CoolBoardActor::printConf ()"
\fBCoolBoardActor::printConf()\fP: This method is provided to print the configuration to the Serial Monitor 
.PP
Definition at line 458 of file CoolBoardActor\&.cpp\&.
.PP
.nf
459 {
460 
461 #if DEBUG == 1 
462 
463     Serial\&.println( F("Enter CoolBoardActor\&.printConf() ") );
464     Serial\&.println();
465 
466 #endif 
467     Serial\&.println(F( "CoolBoardActor configuration " ) ) ;
468  
469     Serial\&.print(F(" actif :"));
470     Serial\&.println(this->actor\&.actif);
471     
472 
473     Serial\&.print(F(" temporal :"));
474     Serial\&.println(this->actor\&.temporal);
475 
476 
477     Serial\&.print(F(" inverted :"));
478     Serial\&.println(this->actor\&.inverted);
479 
480 
481 
482     Serial\&.print(F(" primary Type :"));
483     Serial\&.println(this->actor\&.primaryType);
484 
485     Serial\&.print(F(" secondary Type :"));        
486     Serial\&.println(this->actor\&.secondaryType);
487 
488 
489     Serial\&.print(F(" range Low :"));
490     Serial\&.println(this->actor\&.rangeLow);
491 
492 
493     Serial\&.print(F(" time Low :"));
494     Serial\&.println(this->actor\&.timeLow);
495 
496 
497     Serial\&.print(F(" hour low:"));
498     Serial\&.println(this->actor\&.hourLow);
499 
500 
501     Serial\&.print(F(" minute low:"));
502     Serial\&.println(this->actor\&.minuteLow);
503 
504 
505     Serial\&.print(F(" range High:"));
506     Serial\&.println(this->actor\&.rangeHigh);
507 
508 
509     Serial\&.print(F(" time High:"));
510     Serial\&.println(this->actor\&.timeHigh);
511 
512 
513     Serial\&.print(F(" hour high:"));
514     Serial\&.println(this->actor\&.hourHigh);
515 
516 
517     Serial\&.print(F(" minute high:"));
518     Serial\&.println(this->actor\&.minuteHigh);
519 
520     Serial\&.println(); 
521 
522 }
.fi
.SS "void CoolBoardActor::temporalActionOff ()"
\fBCoolBoardActor::temporalActionOff( )\fP: This method is provided to handle temporal actors\&. it changes the action according to:
.PP
currentTime - startTime > timeHigh : deactivate actor 
.PP
Definition at line 644 of file CoolBoardActor\&.cpp\&.
.PP
.nf
645 {
646 
647 #if DEBUG == 1
648     
649     Serial\&.print(F("temporal Actor  "));
650     Serial\&.println();
651 
652     Serial\&.print(F("millis : "));
653     Serial\&.println(millis());
654 
655     Serial\&.print(F("actif Time : "));
656     Serial\&.println(this->actor\&.actifTime);
657 
658     Serial\&.print(F("high time : "));
659     Serial\&.println(this->actor\&.timeHigh);
660 
661 
662 #endif
663     
664     if( ( millis()- this->actor\&.actifTime  ) >= (  this->actor\&.timeHigh  ) )
665     {
666         //stop the actor
667         this->write( 0) ;
668 
669         //make the actor inactif:
670         this->actor\&.actif=0;
671 
672         //start the low timer
673         this->actor\&.inactifTime=millis();
674 
675     #if DEBUG == 1 
676 
677         Serial\&.println(F("actor OFF "));
678     
679     #endif
680                 
681     }   
682 }
.fi
.SS "void CoolBoardActor::temporalActionOn ()"
\fBCoolBoardActor::temporalActionOn( )\fP: This method is provided to handle temporal actors\&. it changes the action according to :
.PP
currentTime - stopTime > timeLow : activate actor 
.PP
Definition at line 781 of file CoolBoardActor\&.cpp\&.
.PP
.nf
782 {
783 
784 #if DEBUG == 1
785     
786     Serial\&.print(F("temporal Actor "));
787     Serial\&.println();
788 
789     Serial\&.print(F("millis : "));
790     Serial\&.println(millis());
791 
792     Serial\&.print(F("inactif Time : "));
793     Serial\&.println(this->actor\&.inactifTime);
794 
795     Serial\&.print(F("low time : "));
796     Serial\&.println(this->actor\&.timeLow);
797 
798 
799 #endif
800     
801      if( ( millis() - this->actor\&.inactifTime ) >= (  this->actor\&.timeLow  ) )
802     {
803         //start the actor
804         this->write( 1) ;
805 
806         //make the actor actif:
807         this->actor\&.actif=1;
808 
809         //start the low timer
810         this->actor\&.actifTime=millis();
811 
812     #if DEBUG == 1 
813 
814         Serial\&.println(F("actor ON "));
815 
816     #endif              
817 
818     }
819 
820 }
.fi
.SS "void CoolBoardActor::write (bool action)"
CoolBoardActor::write(action): This method is provided to write the given action to the \fBCoolBoardActor\fP\&. 
.PP
Definition at line 71 of file CoolBoardActor\&.cpp\&.
.PP
.nf
72 {
73 
74 #if DEBUG == 1
75 
76     Serial\&.println( F("Entering CoolBoardActor\&.write()") );
77     Serial\&.println();
78 
79     Serial\&.println( F("writing this action : ") );
80     Serial\&.println(action,BIN);
81     Serial\&.println();
82 
83 #endif 
84     
85     digitalWrite(this->pin,action);
86     
87 
88 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "struct \fBCoolBoardActor::state\fP CoolBoardActor::actor\fC [private]\fP"

.SS "const int CoolBoardActor::pin = 15\fC [private]\fP"
pin Number value the only available pin that can be used to run a small actor is pin 15 
.PP
Definition at line 178 of file CoolBoardActor\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolBoardAPI from the source code\&.
