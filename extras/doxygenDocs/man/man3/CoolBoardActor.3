.TH "CoolBoardActor" 3 "Wed Aug 30 2017" "CoolBoardAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoolBoardActor \- This class manages the \fBCoolBoardActor\fP\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolBoardActor\&.h>\fP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBstate\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBbegin\fP ()"
.br
.ti -1c
.RI "void \fBwrite\fP (bool action)"
.br
.ti -1c
.RI "void \fBdoAction\fP (const char *data)"
.br
.ti -1c
.RI "void \fBnormalAction\fP (float measurment)"
.br
.ti -1c
.RI "void \fBinvertedAction\fP (float measurment)"
.br
.ti -1c
.RI "void \fBtemporalActionOff\fP ()"
.br
.ti -1c
.RI "void \fBtemporalActionOn\fP ()"
.br
.ti -1c
.RI "void \fBmixedTemporalActionOff\fP (float measurment)"
.br
.ti -1c
.RI "void \fBmixedTemporalActionOn\fP (float measurment)"
.br
.ti -1c
.RI "void \fBhourAction\fP (int hour)"
.br
.ti -1c
.RI "void \fBmixedHourAction\fP (int hour, float measurment)"
.br
.ti -1c
.RI "void \fBminuteAction\fP (int minute)"
.br
.ti -1c
.RI "void \fBmixedMinuteAction\fP (int minute, float measurment)"
.br
.ti -1c
.RI "void \fBhourMinuteAction\fP (int hour, int minute)"
.br
.ti -1c
.RI "void \fBmixedHourMinuteAction\fP (int hour, int minute, float measurment)"
.br
.ti -1c
.RI "bool \fBconfig\fP ()"
.br
.ti -1c
.RI "void \fBprintConf\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "struct \fBCoolBoardActor::state\fP \fBactor\fP"
.br
.ti -1c
.RI "const int \fBpin\fP = 15"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class manages the \fBCoolBoardActor\fP\&. 
.PP
Definition at line 43 of file CoolBoardActor\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "void CoolBoardActor::begin ()"
\fBCoolBoardActor::begin()\fP: This method is provided to initialise the \fBCoolBoardActor\fP pin 
.PP
Definition at line 47 of file CoolBoardActor\&.cpp\&.
.PP
.nf
48 {
49 
50 #if DEBUG == 1 
51  
52     Serial\&.println( F("Entering CoolBoardActor\&.begin() ") );
53     Serial\&.println();
54 
55 #endif
56 
57     pinMode(this->pin,OUTPUT);
58     
59     
60 
61 }
.fi
.SS "bool CoolBoardActor::config ()"
\fBCoolBoardActor::config()\fP: This method is provided to configure the \fBCoolBoardActor\fP with a configuration file
.PP
\fBReturns:\fP
.RS 4
true if successful,false otherwise 
.RE
.PP

.PP
Definition at line 257 of file CoolBoardActor\&.cpp\&.
.PP
.nf
258 {
259 
260 #if DEBUG == 1 
261 
262     Serial\&.println( F("Entering CoolBoardActor\&.config() ") );
263     Serial\&.println();
264 
265 #endif
266 
267     File coolBoardActorConfig = SPIFFS\&.open("/coolBoardActorConfig\&.json", "r");
268 
269     if (!coolBoardActorConfig) 
270     {
271 
272     #if DEBUG == 1 
273 
274         Serial\&.println( F("failed to read /coolBoardActorConfig\&.json ") );
275         Serial\&.println();
276 
277     #endif
278 
279         return(false);
280     }
281     else
282     {
283         size_t size = coolBoardActorConfig\&.size();
284         // Allocate a buffer to store contents of the file\&.
285         std::unique_ptr<char[]> buf(new char[size]);
286 
287         coolBoardActorConfig\&.readBytes(buf\&.get(), size);
288         DynamicJsonBuffer jsonBuffer;
289         JsonObject& json = jsonBuffer\&.parseObject(buf\&.get());
290         if (!json\&.success()) 
291         {
292         
293         #if DEBUG == 1 
294 
295             Serial\&.println( F("failed to parse coolBoardActor Config  json from file ") );
296             Serial\&.println();
297 
298         #endif
299 
300             return(false);
301         } 
302         else
303         { 
304         
305         #if DEBUG == 1 
306 
307             Serial\&.println( F("read configuration file : ") );
308             json\&.printTo(Serial);
309             Serial\&.println();
310 
311             Serial\&.print(F("jsonBuffer size: "));
312             Serial\&.println(jsonBuffer\&.size());
313             Serial\&.println();
314 
315         
316         #endif
317   
318             //parsing actif key
319             if(json["actif"]\&.success() )
320             {
321                 this->actor\&.actif=json["actif"];
322             }
323             else
324             {
325                 this->actor\&.actif=this->actor\&.actif;
326             }
327             json["actif"]=this->actor\&.actif;
328             
329             //parsing temporal key
330             if(json["temporal"]\&.success() )
331             {
332                 this->actor\&.temporal=json["temporal"];
333             }
334             else
335             {
336                 this->actor\&.temporal=this->actor\&.temporal;
337             }
338             json["temporal"]=this->actor\&.temporal;
339             
340             //parsing inverted key
341             if(json["inverted"]\&.success() )
342             {
343                 this->actor\&.inverted=json["inverted"];
344             }
345             else
346             {
347                 this->actor\&.inverted=this->actor\&.inverted;
348             }
349             json["inverted"]=this->actor\&.inverted;
350 
351             //parsing inverted key
352             if(json["inverted"]\&.success() )
353             {
354                 this->actor\&.inverted=json["inverted"];
355             }
356             else
357             {
358                 this->actor\&.inverted=this->actor\&.inverted;
359             }
360             json["inverted"]=this->actor\&.inverted;
361             
362             //parsing low key
363             if(json["low"]\&.success() )
364             {
365                 this->actor\&.rangeLow=json["low"][0];
366                 this->actor\&.timeLow=json["low"][1];
367                 this->actor\&.hourLow=json["low"][2];                      
368                 this->actor\&.minuteLow=json["low"][3];                        
369             }
370             else
371             {
372                 this->actor\&.rangeLow=this->actor\&.rangeLow;
373                 this->actor\&.timeLow=this->actor\&.timeLow;
374                 this->actor\&.hourLow=this->actor\&.hourLow;
375                 this->actor\&.minuteLow=this->actor\&.minuteLow;                      
376             }
377             json["low"][0]=this->actor\&.rangeLow;
378             json["low"][1]=this->actor\&.timeLow;
379             json["low"][2]=this->actor\&.hourLow;
380             json["low"][3]=this->actor\&.minuteLow;
381 
382             //parsing high key
383             if(json["high"]\&.success() )
384             {
385                 this->actor\&.rangeHigh=json["high"][0];
386                 this->actor\&.timeHigh=json["high"][1];
387                 this->actor\&.hourHigh=json["high"][2];                        
388                 this->actor\&.minuteHigh=json["high"][3];                      
389             }
390             else
391             {
392                 this->actor\&.rangeHigh=this->actor\&.rangeHigh;
393                 this->actor\&.timeHigh=this->actor\&.timeHigh;
394                 this->actor\&.hourHigh=this->actor\&.hourHigh;
395                 this->actor\&.minuteHigh=this->actor\&.minuteHigh;
396             }
397             json["high"][0]=this->actor\&.rangeHigh;
398             json["high"][1]=this->actor\&.timeHigh;
399             json["high"][2]=this->actor\&.hourHigh;
400             json["high"][3]=this->actor\&.minuteHigh;
401 
402             //parsing type key
403             if(json["type"]\&.success() )
404             {
405                 this->actor\&.primaryType=json["type"][0]\&.as<String>();
406                 this->actor\&.secondaryType=json["type"][1]\&.as<String>();                       
407                 
408             }
409             else
410             {
411                 this->actor\&.primaryType=this->actor\&.primaryType;
412                 this->actor\&.secondaryType=this->actor\&.secondaryType;
413             }
414             json["type"][0]=this->actor\&.primaryType;
415             json["type"][1]=this->actor\&.secondaryType;
416             
417 
418             coolBoardActorConfig\&.close();            
419             coolBoardActorConfig = SPIFFS\&.open("/coolBoardActorConfig\&.json", "w");            
420             if(!coolBoardActorConfig)
421             {
422             
423             #if DEBUG == 1 
424 
425                 Serial\&.println( F("failed to write to /coolBoardActorConfig\&.json ") );
426                 Serial\&.println();
427             
428             #endif
429                 
430                 return(false);          
431             }  
432 
433             json\&.printTo(coolBoardActorConfig);
434             coolBoardActorConfig\&.close();
435 
436         #if DEBUG == 1 
437             
438             Serial\&.println(F("saved configuration : "));
439             json\&.printTo(Serial );
440             Serial\&.println();        
441         
442         #endif
443 
444             return(true); 
445         }
446     }   
447     
448 
449 }
.fi
.SS "void CoolBoardActor::doAction (const char * data)"
CoolBoardActor::doAction(sensor data ): This method is provided to automate the \fBCoolBoardActor\fP\&.
.PP
The result action is the result of checking the different flags of the actor (actif , temporal ,inverted, primaryType and secondaryType ) and the corresponding call to the appropriate helping method 
.PP
Definition at line 100 of file CoolBoardActor\&.cpp\&.
.PP
.nf
101 {
102 
103 #if DEBUG == 1 
104 
105     Serial\&.println( F("Entering CoolBoardActor\&.doAction()") );
106     Serial\&.println();
107 
108     Serial\&.println( F("input data is :") );
109     Serial\&.println(data);
110     Serial\&.println();
111 
112 #endif 
113 
114     DynamicJsonBuffer jsonBuffer;
115     JsonObject& root = jsonBuffer\&.parseObject(data);
116     
117     if (!root\&.success()) 
118     {
119     
120     #if DEBUG == 1 
121 
122         Serial\&.println( F("failed to parse json object ") );
123         Serial\&.println();
124     
125     #endif 
126 
127     }
128     else
129     {
130     
131     #if DEBUG == 1 
132 
133         Serial\&.println( F("created Json object :") );
134         root\&.printTo(Serial);
135         Serial\&.println();
136 
137         Serial\&.print(F("jsonBuffer size: "));
138         Serial\&.println(jsonBuffer\&.size());
139         Serial\&.println();
140 
141     
142     #endif 
143 
144         //invert the current action state for the actor
145         //if the value is outside the limits
146         
147         //check if actor is actif
148         if(this->actor\&.actif==1)
149         {
150             //normal actor
151             if(this->actor\&.temporal == 0)
152             {
153                 //not inverted actor
154                 if(this->actor\&.inverted==0)
155                 {
156                     this->normalAction(root[this->actor\&.primaryType]\&.as<float>());                
157                 }
158                 //inverted actor
159                 else if(this->actor\&.inverted==1)
160                 {
161                     this->invertedAction(root[this->actor\&.primaryType]\&.as<float>());              
162                 }
163             }
164             //temporal actor
165             else if(this->actor\&.temporal == 1 )
166             {
167                 //hour actor
168                 if(this->actor\&.secondaryType=="hour")
169                 {
170                     //mixed hour actor
171                     if(root[this->actor\&.primaryType]\&.success() )
172                     {
173                         this->mixedHourAction(root[this->actor\&.secondaryType]\&.as<int>(),root[this->actor\&.primaryType]\&.as<float>());
174                     }
175                     //normal hour actor
176                     else
177                     {
178                         this->hourAction(root[this->actor\&.secondaryType]\&.as<int>());
179                     }
180                 
181                 }
182                 //minute actor
183                 else if(this->actor\&.secondaryType=="minute")
184                 {
185                     //mixed minute actor
186                     if(root[this->actor\&.primaryType]\&.success() )
187                     {
188                         this->mixedMinuteAction(root[this->actor\&.secondaryType]\&.as<int>(),root[this->actor\&.primaryType]\&.as<float>());
189                     }
190                     //normal minute actor
191                     else
192                     {
193                         this->minuteAction(root[this->actor\&.secondaryType]\&.as<int>());
194                     }
195                 }
196                 //hourMinute actor
197                 else if(this->actor\&.secondaryType=="hourMinute")
198                 {
199                     //mixed hourMinute actor
200                     if(root[this->actor\&.primaryType]\&.success() )
201                     {
202                         this->mixedHourMinuteAction(root["hour"]\&.as<int>(),root["minute"]\&.as<int>(),root[this->actor\&.primaryType]\&.as<float>());
203                     }
204                     //normal hourMinute actor
205                     else
206                     {
207                         this->hourMinuteAction(root["hour"]\&.as<int>(),root["minute"]\&.as<int>());
208                     }
209                 }
210                 //normal temporal actor
211                 else if(this->actor\&.secondaryType=="")
212                 {
213                     //mixed temporal actor
214                     if(root[this->actor\&.primaryType]\&.success() )
215                     {
216                         this->mixedTemporalActionOn(root[this->actor\&.primaryType]\&.as<float>());
217                     }
218                     //normal temporal actor
219                     else
220                     {
221                         this->temporalActionOn();
222                     }
223                                         
224                 }
225 
226             }
227         }
228         //inactif actor
229         else if(this->actor\&.actif == 0 )
230         {
231             //temporal actor
232             if(this->actor\&.temporal==1)
233             {
234                 //mixed temporal actor
235                 if(root[this->actor\&.primaryType]\&.success() )
236                 {
237                     this->mixedTemporalActionOff(root[this->actor\&.primaryType]\&.as<float>());
238                 }
239                 //normal temporal actor
240                 else
241                 {
242                     this->temporalActionOff();
243                 }
244             }           
245         }
246 
247     } 
248 }
.fi
.SS "void CoolBoardActor::hourAction (int hour)"
CoolBoardActor::hourAction( current hour ): This method is provided to handle hour actors\&. it changes the action according to:
.PP
hour >= hourLow : deactivate the actor hour >= hourHigh : activate the actor 
.PP
Definition at line 921 of file CoolBoardActor\&.cpp\&.
.PP
.nf
922 {
923 
924 #if DEBUG == 1
925     
926     Serial\&.print(F("hour Actor "));
927     Serial\&.println();
928 
929     Serial\&.print(F(" hour : "));
930     Serial\&.println(hour);
931 
932     Serial\&.print(F("high hour : "));
933     Serial\&.println(this->actor\&.hourHigh);
934 
935     Serial\&.print(F("low hour : "));
936     Serial\&.println(this->actor\&.hourLow);
937 
938 #endif
939 
940     //stop the actor    
941     if(hour >= this->actor\&.hourLow)
942     {
943         this->write( 0) ;
944 
945     #if DEBUG == 1 
946 
947         Serial\&.println(F("actor OFF "));
948 
949     #endif  
950 
951     }
952     //starting the actor
953     else if(hour >= this->actor\&.hourHigh)
954     {
955         this->write( 1) ;
956 
957     #if DEBUG == 1 
958 
959         Serial\&.println(F("actor ON "));
960 
961     #endif  
962     
963     }
964 
965 }
.fi
.SS "void CoolBoardActor::hourMinuteAction (int hour, int minute)"
CoolBoardActor::minteAction( current hour,current minute ): This method is provided to handle hour minute actors\&. it changes the action according to:
.PP
hour == hourLow : minute >= minuteLow : deactivate the actor
.PP
hour > hourLow : deactivate the actor
.PP
hour == hourHigh : minute >= minteHigh : activate the actor
.PP
hour > hourHigh : activate the actor 
.PP
Definition at line 1265 of file CoolBoardActor\&.cpp\&.
.PP
.nf
1266 {
1267 
1268 #if DEBUG == 1
1269 
1270     Serial\&.print(F("hourMinute Actor "));
1271     Serial\&.println();
1272 
1273     Serial\&.print(F(" hour : "));
1274     Serial\&.println(hour);
1275     Serial\&.print(F(" minute : "));
1276     Serial\&.println(minute);
1277 
1278     Serial\&.print(F("high hour : "));
1279     Serial\&.println(this->actor\&.hourHigh);
1280 
1281     Serial\&.print(F("high minute : "));
1282     Serial\&.println(this->actor\&.minuteHigh);
1283 
1284     Serial\&.print(F("low hour : "));
1285     Serial\&.println(this->actor\&.hourLow);
1286 
1287     Serial\&.print(F("low minute : "));
1288     Serial\&.println(this->actor\&.minuteLow);
1289 
1290 #endif
1291     //stop the actor
1292     if(hour==this->actor\&.hourLow)
1293     {
1294         if(minute>= this->actor\&.minuteLow)
1295         {
1296             this->write( 0) ;
1297         #if DEBUG == 1 
1298 
1299             Serial\&.println(F("actor OFF "));
1300 
1301         #endif  
1302         }
1303     }
1304     else if(hour > this->actor\&.hourLow)
1305     {
1306 
1307         this->write( 0) ;
1308     #if DEBUG == 1 
1309 
1310         Serial\&.println(F("actor OFF "));
1311 
1312     #endif  
1313     
1314     }
1315     //start the actor
1316     else if(hour==this->actor\&.hourHigh)
1317     {
1318         if(minute>= this->actor\&.minuteHigh)
1319         {
1320             this->write( 1) ;
1321 
1322         #if DEBUG == 1 
1323 
1324             Serial\&.println(F("actor ON "));
1325 
1326         #endif  
1327         }
1328     }
1329     else if(hour > this->actor\&.hourHigh)
1330     {
1331 
1332         this->write( 1) ;
1333 
1334     #if DEBUG == 1 
1335 
1336         Serial\&.println(F("actor ON "));
1337 
1338     #endif      
1339 
1340     }
1341 
1342     
1343 }
.fi
.SS "void CoolBoardActor::invertedAction (float measurment)"
CoolBoardActor::invertedAction( measured value): This method is provided to handle inverted actors\&. it changes the action according to wether the measured value is: 
.PP
.RS 4
rangeHigh (activate actor) 
.RE
.PP
< rangeLow ( deactivate actor ) 
.PP
Definition at line 588 of file CoolBoardActor\&.cpp\&.
.PP
.nf
589 {
590 #if DEBUG == 1
591     
592     Serial\&.print("inverted Actor ");
593     Serial\&.println();
594 
595     Serial\&.print("measured value : ");
596     Serial\&.println(measurment);
597 
598     Serial\&.print("high range : ");
599     Serial\&.println(this->actor\&.rangeHigh);
600 
601     Serial\&.print("low range : ");
602     Serial\&.println(this->actor\&.rangeLow);
603 
604 #endif
605 
606     //measured value lower than minimum range : deactivate actor
607     if(measurment < this->actor\&.rangeLow)
608     {
609         this->write( 0) ;
610 
611     #if DEBUG == 1 
612 
613         Serial\&.println(F("actor OFF "));
614     
615     #endif
616 
617     }
618     //measured value higher than maximum range : activate actor
619     else if(measurment > this->actor\&.rangeHigh)
620     {
621         this->write( 1) ;
622 
623     #if DEBUG == 1 
624 
625         Serial\&.println(F("actor ON "));
626     
627     #endif
628 
629     }
630 
631 
632 }
.fi
.SS "void CoolBoardActor::minuteAction (int minute)"
CoolBoardActor::minteAction( current minute ): This method is provided to handle minute actors\&. it changes the action according to:
.PP
minute >= minuteLow : deactivate the actor minute >= minuteHigh : activate the actor 
.PP
Definition at line 1089 of file CoolBoardActor\&.cpp\&.
.PP
.nf
1090 {
1091 
1092 #if DEBUG == 1
1093     
1094     Serial\&.print(F("minute Actor "));
1095     Serial\&.println();
1096 
1097     Serial\&.print(F(" minute : "));
1098     Serial\&.println(minute);
1099 
1100     Serial\&.print(F("high minute : "));
1101     Serial\&.println(this->actor\&.minuteHigh);
1102 
1103     Serial\&.print(F("low minute : "));
1104     Serial\&.println(this->actor\&.minuteLow);
1105 
1106 #endif
1107 
1108     //stop the actor    
1109     if(minute >= this->actor\&.minuteLow)
1110     {
1111         this->write( 0) ;
1112 
1113     #if DEBUG == 1 
1114 
1115         Serial\&.println(F("actor OFF "));
1116 
1117     #endif  
1118 
1119     }   
1120     //starting the actor
1121     else if(minute >= this->actor\&.minuteHigh)
1122     {
1123         this->write( 1) ;
1124 
1125     #if DEBUG == 1 
1126 
1127         Serial\&.println(F("actor ON "));
1128 
1129     #endif  
1130 
1131     }
1132 
1133 } 
.fi
.SS "void CoolBoardActor::mixedHourAction (int hour, float measurment)"
CoolBoardActor::mixedHourAction( current hour, measured value ): This method is provided to handle mixed hour actors\&. it changes the action according to :
.PP
hour >= hourLow : -measuredValue >= rangeHigh : deactivate actor -measured < rangeHigh : activate actor
.PP
hour >= hourHigh : -measuredValue < rangeLow : activate actor -measuredValue >=rangeLow : activate actor 
.PP
Definition at line 982 of file CoolBoardActor\&.cpp\&.
.PP
.nf
983 {
984 
985 #if DEBUG == 1
986     
987     Serial\&.print("mixed hour Actor N° : ");
988     Serial\&.println();
989 
990     Serial\&.print(" hour : ");
991     Serial\&.println(hour);
992 
993     Serial\&.print("high hour : ");
994     Serial\&.println(this->actor\&.hourHigh);
995 
996     Serial\&.print("low hour : ");
997     Serial\&.println(this->actor\&.hourLow);
998 
999     Serial\&.print("measured value : ");
1000     Serial\&.println(measurment);
1001 
1002     Serial\&.print("high range : ");
1003     Serial\&.println(this->actor\&.rangeHigh);
1004 
1005     Serial\&.print("low range : ");
1006     Serial\&.println(this->actor\&.rangeLow);
1007 
1008 #endif
1009     //stop the actor    
1010     if(hour >= this->actor\&.hourLow)
1011     {
1012             if( measurment >= this->actor\&.rangeHigh )
1013             {
1014                 this->write( 0) ;
1015 
1016             #if DEBUG == 1 
1017 
1018                 Serial\&.print(measurment);
1019                 Serial\&.print(F(" > " ));
1020                 Serial\&.println(this->actor\&.rangeHigh);
1021 
1022                 Serial\&.println(F("actor OFF "));
1023 
1024             #endif  
1025 
1026             }
1027             else 
1028             {
1029                 this->write( 1) ;
1030 
1031             #if DEBUG == 1 
1032 
1033                 Serial\&.print(measurment);
1034                 Serial\&.print(F(" < " ));
1035                 Serial\&.print(this->actor\&.rangeHigh);
1036 
1037                 Serial\&.println(F("actor ON "));
1038 
1039             #endif  
1040                 
1041             }
1042     }
1043     //starting the actor
1044     else if(hour >= this->actor\&.hourHigh)
1045     {
1046             if( measurment < this->actor\&.rangeLow )
1047             {
1048                 this->write( 1) ;
1049 
1050             #if DEBUG == 1 
1051 
1052                 Serial\&.print(measurment);
1053                 Serial\&.print(F(" < " ));
1054                 Serial\&.println(this->actor\&.rangeLow);
1055 
1056                 Serial\&.println(F("actor ON "));
1057 
1058             #endif  
1059             }
1060             else 
1061             {
1062                 this->write( 0) ;
1063 
1064             #if DEBUG == 1 
1065 
1066                 Serial\&.print(measurment);
1067                 Serial\&.print(F(" > " ));
1068                 Serial\&.println(this->actor\&.rangeLow);
1069 
1070                 Serial\&.println(F("actor OFF "));
1071 
1072             #endif                  
1073             }
1074 
1075     }
1076 
1077 }
.fi
.SS "void CoolBoardActor::mixedHourMinuteAction (int hour, int minute, float measurment)"
CoolBoardActor::minteAction( current hour,current minute , measured Value ): This method is provided to handle hour minute actors\&. it changes the action according to:
.PP
hour == hourLow : minute >= minuteLow : measuredValue >= rangeHigh : deactivate actor measuredValue < rangeHigh : activate actor
.PP
hour > hourLow : measuredValue >= rangeHigh : deactivate actor measuredValue < rangeHigh : activate actor
.PP
hour == hourHigh : minute >= minteHigh : measuredValue >= rangeLow : deactivate actor measuredValue < rangeLow : activate actor
.PP
hour > hourHigh : measuredValue >= rangeLow : deactivate actor measuredValue < rangeLow : activate actor 
.PP
Definition at line 1370 of file CoolBoardActor\&.cpp\&.
.PP
.nf
1371 {
1372 
1373 #if DEBUG == 1
1374     
1375     Serial\&.print("hourMinute Actor  ");
1376     Serial\&.println();
1377 
1378     Serial\&.print(" hour : ");
1379     Serial\&.println(hour);
1380     Serial\&.print(" minute : ");
1381     Serial\&.println(minute);
1382 
1383     Serial\&.print("high hour : ");
1384     Serial\&.println(this->actor\&.hourHigh);
1385 
1386     Serial\&.print("high minute : ");
1387     Serial\&.println(this->actor\&.minuteHigh);
1388 
1389     Serial\&.print("low hour : ");
1390     Serial\&.println(this->actor\&.hourLow);
1391 
1392     Serial\&.print("low minute : ");
1393     Serial\&.println(this->actor\&.minuteLow);
1394 
1395     Serial\&.print("measured value : ");
1396     Serial\&.println(measurment);
1397 
1398     Serial\&.print("high range : ");
1399     Serial\&.println(this->actor\&.rangeHigh);
1400 
1401     Serial\&.print("low range : ");
1402     Serial\&.println(this->actor\&.rangeLow);
1403 
1404 #endif
1405     //stop the actor
1406     if(hour==this->actor\&.hourLow)
1407     {
1408         if(minute>= this->actor\&.minuteLow)
1409         {
1410             if( measurment >= this->actor\&.rangeHigh )
1411             {
1412                 this->write( 0) ;
1413 
1414             #if DEBUG == 1 
1415 
1416                 Serial\&.print(measurment);
1417                 Serial\&.print(F(" >= " ));
1418                 Serial\&.println(this->actor\&.rangeHigh);
1419 
1420                 Serial\&.println(F("actor OFF "));
1421 
1422             #endif  
1423 
1424             }
1425             else 
1426             {
1427                 this->write( 1) ;
1428 
1429             #if DEBUG == 1 
1430 
1431                 Serial\&.print(measurment);
1432                 Serial\&.print(F(" < " ));
1433                 Serial\&.println(this->actor\&.rangeHigh);
1434 
1435                 Serial\&.println(F("actor ON "));
1436 
1437             #endif  
1438                 
1439             }
1440         }
1441     }
1442     else if(hour > this->actor\&.hourLow)
1443     {
1444 
1445         if( measurment >= this->actor\&.rangeHigh )
1446         {
1447             this->write( 0) ;
1448 
1449         #if DEBUG == 1 
1450 
1451             Serial\&.print(measurment);
1452             Serial\&.print(F(" >= " ));
1453             Serial\&.println(this->actor\&.rangeHigh);
1454 
1455             Serial\&.println(F("actor OFF "));
1456 
1457         #endif  
1458 
1459         }
1460         else 
1461         {
1462             this->write( 1) ;
1463 
1464         #if DEBUG == 1 
1465 
1466             Serial\&.print(measurment);
1467             Serial\&.print(F(" < " ));
1468             Serial\&.println(this->actor\&.rangeHigh);
1469 
1470             Serial\&.println(F("actor ON "));
1471 
1472         #endif  
1473             
1474         }
1475 
1476 
1477     }
1478     //start the actor
1479     else if(hour==this->actor\&.hourHigh)
1480     {
1481         if(minute>= this->actor\&.minuteHigh)
1482         {
1483             if( measurment < this->actor\&.rangeLow )
1484             {
1485                 this->write( 1) ;
1486 
1487             #if DEBUG == 1 
1488 
1489                 Serial\&.print(measurment);
1490                 Serial\&.print(F(" < " ));
1491                 Serial\&.println(this->actor\&.rangeLow);
1492 
1493                 Serial\&.println(F("actor ON "));
1494 
1495             #endif  
1496 
1497             }
1498             else 
1499             {
1500                 this->write( 0) ;
1501 
1502             #if DEBUG == 1 
1503 
1504                 Serial\&.print(measurment);
1505                 Serial\&.println(F(" > " ));
1506                 Serial\&.print(this->actor\&.rangeLow);
1507 
1508                 Serial\&.println(F("actor OFF "));
1509 
1510             #endif  
1511                 
1512             }
1513         }
1514     }
1515     else if(hour > this->actor\&.hourHigh)
1516     {
1517 
1518         if( measurment < this->actor\&.rangeLow )
1519         {
1520             this->write( 1) ;
1521 
1522         #if DEBUG == 1 
1523 
1524             Serial\&.print(measurment);
1525             Serial\&.print(F(" < " ));
1526             Serial\&.println(this->actor\&.rangeLow);
1527 
1528             Serial\&.println(F("actor ON "));
1529 
1530         #endif  
1531 
1532         }
1533         else 
1534         {
1535             this->write( 0) ;
1536 
1537         #if DEBUG == 1 
1538 
1539             Serial\&.print(measurment);
1540             Serial\&.println(F(" > " ));
1541             Serial\&.print(this->actor\&.rangeLow);
1542 
1543             Serial\&.println(F("actor OFF "));
1544 
1545         #endif  
1546             
1547         }
1548     
1549     }
1550 
1551 }
.fi
.SS "void CoolBoardActor::mixedMinuteAction (int minute, float measurment)"
CoolBoardActor::mixedMinuteAction( current minute, measured value ): This method is provided to handle mixed minute actors\&. it changes the action according to :
.PP
minute >= minuteLow : -measuredValue >= rangeHigh : deactivate actor -measured < rangeHigh : activate actor
.PP
minute >= minuteHigh : -measuredValue < rangeLow : activate actor -measuredValue >=rangeLow : activate actor 
.PP
Definition at line 1149 of file CoolBoardActor\&.cpp\&.
.PP
.nf
1150 {
1151 
1152 #if DEBUG == 1
1153     
1154     Serial\&.print("mixed minute Actor ");
1155     Serial\&.println();
1156 
1157     Serial\&.print(" minute : ");
1158     Serial\&.println(minute);
1159 
1160     Serial\&.print("high minute : ");
1161     Serial\&.println(this->actor\&.minuteHigh);
1162 
1163     Serial\&.print("low minute : ");
1164     Serial\&.println(this->actor\&.minuteLow);
1165 
1166     Serial\&.print("measured value : ");
1167     Serial\&.println(measurment);
1168 
1169     Serial\&.print("high range : ");
1170     Serial\&.println(this->actor\&.rangeHigh);
1171 
1172     Serial\&.print("low range : ");
1173     Serial\&.println(this->actor\&.rangeLow);
1174 
1175 #endif
1176     //stop the actor    
1177     if(minute >= this->actor\&.minuteLow)
1178     {
1179             if( measurment > this->actor\&.rangeHigh )
1180             {
1181                 this->write( 0) ;
1182 
1183             #if DEBUG == 1 
1184 
1185                 Serial\&.print(measurment);
1186                 Serial\&.print(F(" > " ));
1187                 Serial\&.println(this->actor\&.rangeHigh);
1188 
1189                 Serial\&.println(F("actor OFF "));
1190 
1191             #endif
1192     
1193             }
1194             else 
1195             {
1196                 this->write( 1) ;
1197 
1198             #if DEBUG == 1 
1199 
1200                 Serial\&.print(measurment);
1201                 Serial\&.print(F(" < " ));
1202                 Serial\&.println(this->actor\&.rangeHigh);
1203 
1204                 Serial\&.println(F("actor ON "));
1205 
1206             #endif  
1207                 
1208             }
1209     }   
1210     //starting the actor
1211     else if(minute >= this->actor\&.minuteHigh)
1212     {
1213             if( measurment < this->actor\&.rangeLow )
1214             {
1215                 this->write( 1) ;
1216 
1217             #if DEBUG == 1 
1218 
1219                 Serial\&.print(measurment);
1220                 Serial\&.print(F(" < " ));
1221                 Serial\&.println(this->actor\&.rangeLow);
1222 
1223                 Serial\&.println(F("actor ON "));
1224 
1225             #endif  
1226 
1227             }
1228             else 
1229             {
1230                 this->write( 0) ;
1231             
1232             #if DEBUG == 1 
1233 
1234                 Serial\&.print(measurment);
1235                 Serial\&.print(F(" > " ));
1236                 Serial\&.println(this->actor\&.rangeLow);
1237 
1238                 Serial\&.println(F("actor OFF "));
1239 
1240             #endif  
1241                 
1242             }
1243 
1244     }
1245 
1246 }
.fi
.SS "void CoolBoardActor::mixedTemporalActionOff (float measurment)"
CoolBoardActor::mixedTemporalActionOff( measured value ): This method is provided to handle mixed temporal actors\&. it changes the action according to:
.PP
currentTime - startTime >= timeHigh : measured value >= rangeHigh : deactivate actor measured value < rangeHigh : activate actor 
.PP
Definition at line 694 of file CoolBoardActor\&.cpp\&.
.PP
.nf
695 {
696 
697 #if DEBUG == 1
698     
699     Serial\&.print("mixed Temporal Actor N° : ");
700     Serial\&.println();
701 
702     Serial\&.print("measured value : ");
703     Serial\&.println(measurment);
704 
705     Serial\&.print("high range : ");
706     Serial\&.println(this->actor\&.rangeHigh);
707 
708     Serial\&.print("time high : ");
709     Serial\&.println(this->actor\&.timeHigh);
710 
711     Serial\&.print("actif Time : ");
712     Serial\&.println(this->actor\&.actifTime);
713 
714     Serial\&.print(F("millis : "));
715     Serial\&.println(millis());
716 
717 #endif
718     if( ( millis()- this->actor\&.actifTime  ) >= (  this->actor\&.timeHigh  ) )
719     {   
720         if( measurment >= this->actor\&.rangeHigh )
721         {
722             //stop the actor
723             this->write( 0) ;
724 
725             //make the actor inactif:
726             this->actor\&.actif=0;
727 
728             //start the low timer
729             this->actor\&.inactifTime=millis();
730 
731         #if DEBUG == 1 
732 
733             Serial\&.print(F("actor was on for at least "));
734             Serial\&.print(this->actor\&.timeHigh);
735             Serial\&.println(F(" ms "));
736 
737             Serial\&.print(measurment);
738             Serial\&.print(F(" > " ));
739             Serial\&.println(this->actor\&.rangeHigh);
740 
741             
742             Serial\&.println(F("actor OFF "));
743 
744         #endif
745 
746         }
747         else 
748         {
749             this->write( 1) ;
750 
751         #if DEBUG == 1 
752             
753             Serial\&.print(F("actor was on for at least "));
754             Serial\&.print(this->actor\&.timeHigh);
755             Serial\&.println(F(" ms "));
756 
757             Serial\&.print(measurment);
758             Serial\&.print(F(" < " ));
759             Serial\&.println(this->actor\&.rangeHigh);
760 
761             Serial\&.println(F("actor ON "));
762 
763         #endif              
764 
765         }           
766     }
767 
768 }
.fi
.SS "void CoolBoardActor::mixedTemporalActionOn (float measurment)"
CoolBoardActor::mixedTemporalActionOn( measured value ): This method is provided to handle mixed temporal actors\&. it changes the action according to :
.PP
currentTime - stopTime > timeLow : measured value >= rangeLow : deactivate actor measured value < rangeLow : activate actor 
.PP
Definition at line 832 of file CoolBoardActor\&.cpp\&.
.PP
.nf
833 {
834 
835 #if DEBUG == 1
836     
837     Serial\&.print("mixed Temporal Actor  ");
838     Serial\&.println();
839 
840     Serial\&.print("measured value : ");
841     Serial\&.println(measurment);
842 
843     Serial\&.print("low range : ");
844     Serial\&.println(this->actor\&.rangeLow);
845 
846     Serial\&.print("time low : ");
847     Serial\&.println(this->actor\&.timeLow);
848 
849     Serial\&.print("inactif Time : ");
850     Serial\&.println(this->actor\&.inactifTime);
851 
852     Serial\&.print(F("millis : "));
853     Serial\&.println(millis());
854 
855 #endif
856 
857     if( ( millis() - this->actor\&.inactifTime ) >= (  this->actor\&.timeLow  ) )
858     {
859         if( measurment < this->actor\&.rangeLow )
860         {
861             //start the actor
862             this->write( 1) ;
863 
864             //make the actor actif:
865             this->actor\&.actif=1;
866 
867             //start the low timer
868             this->actor\&.actifTime=millis();
869 
870         #if DEBUG == 1 
871 
872             Serial\&.print(F("actor was off for at least "));
873             Serial\&.print(this->actor\&.timeLow);
874             Serial\&.println(F(" ms "));
875 
876             Serial\&.print(measurment);
877             Serial\&.print(F(" < " ));
878             Serial\&.println(this->actor\&.rangeLow);
879     
880             Serial\&.println(F("actor ON "));
881     
882         #endif  
883 
884         }
885         else 
886         {
887             this->write( 0) ;   
888 
889         #if DEBUG == 1 
890 
891             Serial\&.print(F("actor was off for at least "));
892             Serial\&.print(this->actor\&.timeLow);
893             Serial\&.println(F(" ms "));
894 
895             Serial\&.print(measurment);
896             Serial\&.print(F(" > " ));
897             Serial\&.println(this->actor\&.rangeLow);
898 
899             Serial\&.println(F("actor OFF "));
900     
901         #endif              
902 
903         }
904 
905     }
906 
907     
908 }
.fi
.SS "void CoolBoardActor::normalAction (float measurment)"
CoolBoardActor::normalAction( measured value): This method is provided to handle normal actors\&. it changes the action according to wether the measured value is: > rangeHigh ( deactivate actor) or < rangeLow (activate actor ) 
.PP
Definition at line 531 of file CoolBoardActor\&.cpp\&.
.PP
.nf
532 {
533 
534 #if DEBUG == 1
535     
536     Serial\&.print(F("none inverted Actor"));
537     Serial\&.println();
538 
539     Serial\&.print(F("measured value : "));
540     Serial\&.println(measurment);
541 
542     Serial\&.print(F("high range : "));
543     Serial\&.println(this->actor\&.rangeHigh);
544 
545     Serial\&.print(F("low range : "));
546     Serial\&.println(this->actor\&.rangeLow);
547 
548 #endif
549 
550     //measured value lower than minimum range : activate actor
551     if(measurment < this->actor\&.rangeLow)
552     {
553         this->write( 1) ;
554 
555     #if DEBUG == 1 
556 
557         Serial\&.println(F("actor ON "));s
558     
559     #endif
560                 
561     }
562     //measured value higher than maximum range : deactivate actor
563     else if(measurment > this->actor\&.rangeHigh)
564     {
565         this->write( 0) ;
566 
567     #if DEBUG == 1 
568 
569         Serial\&.println(F("actor OFF "));
570     
571     #endif
572     
573     }
574 
575 
576 }
.fi
.SS "void CoolBoardActor::printConf ()"
\fBCoolBoardActor::printConf()\fP: This method is provided to print the configuration to the Serial Monitor 
.PP
Definition at line 457 of file CoolBoardActor\&.cpp\&.
.PP
.nf
458 {
459 
460 #if DEBUG == 1 
461 
462     Serial\&.println( F("Enter CoolBoardActor\&.printConf() ") );
463     Serial\&.println();
464 
465 #endif 
466     Serial\&.println(F( "CoolBoardActor configuration " ) ) ;
467  
468     Serial\&.print(F(" actif :"));
469     Serial\&.println(this->actor\&.actif);
470     
471 
472     Serial\&.print(F(" temporal :"));
473     Serial\&.println(this->actor\&.temporal);
474 
475 
476     Serial\&.print(F(" inverted :"));
477     Serial\&.println(this->actor\&.inverted);
478 
479 
480 
481     Serial\&.print(F(" primary Type :"));
482     Serial\&.println(this->actor\&.primaryType);
483 
484     Serial\&.print(F(" secondary Type :"));        
485     Serial\&.println(this->actor\&.secondaryType);
486 
487 
488     Serial\&.print(F(" range Low :"));
489     Serial\&.println(this->actor\&.rangeLow);
490 
491 
492     Serial\&.print(F(" time Low :"));
493     Serial\&.println(this->actor\&.timeLow);
494 
495 
496     Serial\&.print(F(" hour low:"));
497     Serial\&.println(this->actor\&.hourLow);
498 
499 
500     Serial\&.print(F(" minute low:"));
501     Serial\&.println(this->actor\&.minuteLow);
502 
503 
504     Serial\&.print(F(" range High:"));
505     Serial\&.println(this->actor\&.rangeHigh);
506 
507 
508     Serial\&.print(F(" time High:"));
509     Serial\&.println(this->actor\&.timeHigh);
510 
511 
512     Serial\&.print(F(" hour high:"));
513     Serial\&.println(this->actor\&.hourHigh);
514 
515 
516     Serial\&.print(F(" minute high:"));
517     Serial\&.println(this->actor\&.minuteHigh);
518 
519     Serial\&.println(); 
520 
521 }
.fi
.SS "void CoolBoardActor::temporalActionOff ()"
\fBCoolBoardActor::temporalActionOff( )\fP: This method is provided to handle temporal actors\&. it changes the action according to:
.PP
currentTime - startTime > timeHigh : deactivate actor 
.PP
Definition at line 643 of file CoolBoardActor\&.cpp\&.
.PP
.nf
644 {
645 
646 #if DEBUG == 1
647     
648     Serial\&.print(F("temporal Actor  "));
649     Serial\&.println();
650 
651     Serial\&.print(F("millis : "));
652     Serial\&.println(millis());
653 
654     Serial\&.print(F("actif Time : "));
655     Serial\&.println(this->actor\&.actifTime);
656 
657     Serial\&.print(F("high time : "));
658     Serial\&.println(this->actor\&.timeHigh);
659 
660 
661 #endif
662     
663     if( ( millis()- this->actor\&.actifTime  ) >= (  this->actor\&.timeHigh  ) )
664     {
665         //stop the actor
666         this->write( 0) ;
667 
668         //make the actor inactif:
669         this->actor\&.actif=0;
670 
671         //start the low timer
672         this->actor\&.inactifTime=millis();
673 
674     #if DEBUG == 1 
675 
676         Serial\&.println(F("actor OFF "));
677     
678     #endif
679                 
680     }   
681 }
.fi
.SS "void CoolBoardActor::temporalActionOn ()"
\fBCoolBoardActor::temporalActionOn( )\fP: This method is provided to handle temporal actors\&. it changes the action according to :
.PP
currentTime - stopTime > timeLow : activate actor 
.PP
Definition at line 780 of file CoolBoardActor\&.cpp\&.
.PP
.nf
781 {
782 
783 #if DEBUG == 1
784     
785     Serial\&.print(F("temporal Actor "));
786     Serial\&.println();
787 
788     Serial\&.print(F("millis : "));
789     Serial\&.println(millis());
790 
791     Serial\&.print(F("inactif Time : "));
792     Serial\&.println(this->actor\&.inactifTime);
793 
794     Serial\&.print(F("low time : "));
795     Serial\&.println(this->actor\&.timeLow);
796 
797 
798 #endif
799     
800      if( ( millis() - this->actor\&.inactifTime ) >= (  this->actor\&.timeLow  ) )
801     {
802         //start the actor
803         this->write( 1) ;
804 
805         //make the actor actif:
806         this->actor\&.actif=1;
807 
808         //start the low timer
809         this->actor\&.actifTime=millis();
810 
811     #if DEBUG == 1 
812 
813         Serial\&.println(F("actor ON "));
814 
815     #endif              
816 
817     }
818 
819 }
.fi
.SS "void CoolBoardActor::write (bool action)"
CoolBoardActor::write(action): This method is provided to write the given action to the \fBCoolBoardActor\fP\&. 
.PP
Definition at line 70 of file CoolBoardActor\&.cpp\&.
.PP
.nf
71 {
72 
73 #if DEBUG == 1
74 
75     Serial\&.println( F("Entering CoolBoardActor\&.write()") );
76     Serial\&.println();
77 
78     Serial\&.println( F("writing this action : ") );
79     Serial\&.println(action,BIN);
80     Serial\&.println();
81 
82 #endif 
83     
84     digitalWrite(this->pin,action);
85     
86 
87 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "struct \fBCoolBoardActor::state\fP CoolBoardActor::actor\fC [private]\fP"

.SS "const int CoolBoardActor::pin = 15\fC [private]\fP"
pin Number value the only available pin that can be used to run a small actor is pin 15 
.PP
Definition at line 177 of file CoolBoardActor\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolBoardAPI from the source code\&.
