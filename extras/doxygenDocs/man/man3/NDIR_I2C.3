.TH "NDIR_I2C" 3 "Fri Aug 11 2017" "CoolBoardAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
NDIR_I2C
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolNDIR_I2C\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBNDIR_I2C\fP (uint8_t \fBi2c_addr\fP)"
.br
.ti -1c
.RI "uint8_t \fBbegin\fP ()"
.br
.ti -1c
.RI "uint8_t \fBmeasure\fP ()"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "uint8_t \fBi2c_addr\fP"
.br
.ti -1c
.RI "uint32_t \fBppm\fP"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "uint8_t \fBsend\fP (uint8_t *pdata, uint8_t n)"
.br
.ti -1c
.RI "uint8_t \fBreceive\fP (uint8_t *pbuf, uint8_t n)"
.br
.ti -1c
.RI "uint8_t \fBread_register\fP (uint8_t reg_addr, uint8_t *pval)"
.br
.ti -1c
.RI "uint8_t \fBwrite_register\fP (uint8_t reg_addr, uint8_t *pdata, uint8_t n)"
.br
.ti -1c
.RI "uint8_t \fBwrite_register\fP (uint8_t reg_addr, uint8_t val)"
.br
.ti -1c
.RI "uint8_t \fBparse\fP (uint8_t *pbuf)"
.br
.in -1c
.SS "Static Private Attributes"

.in +1c
.ti -1c
.RI "static uint8_t \fBcmd_measure\fP [9] = {0xFF,0x01,0x9C,0x00,0x00,0x00,0x00,0x00,0x63}"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 27 of file CoolNDIR_I2C\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "NDIR_I2C::NDIR_I2C (uint8_t i2c_addr)"

.PP
Definition at line 77 of file CoolNDIR_I2C\&.cpp\&.
.PP
.nf
78 {
79     if (i2c_addr >= 8 && i2c_addr < 120) {
80         NDIR_I2C::i2c_addr = i2c_addr;
81     } else {
82         NDIR_I2C::i2c_addr = 0;
83     }
84 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "uint8_t NDIR_I2C::begin (void)"

.PP
Definition at line 87 of file CoolNDIR_I2C\&.cpp\&.
.PP
.nf
88 {
89     if (i2c_addr) {
90         WIRE\&.begin(2,14);
91         write_register(IOCONTROL, 0x08);
92 
93         if (write_register(FCR, 0x07)) {
94             if (write_register(LCR, 0x83)) {
95                 if (write_register(DLL, 0x60)) {
96                     if (write_register(DLH, 0x00)) {
97                         if (write_register(LCR, 0x03)) {
98                             if (measure()) {
99                                 return true;
100                             }
101                         }
102                     }
103                 }
104             }
105         }
106     }
107 
108     return false;
109 }
.fi
.SS "uint8_t NDIR_I2C::measure ()"

.PP
Definition at line 111 of file CoolNDIR_I2C\&.cpp\&.
.PP
.nf
112 {
113     uint8_t buf[9];
114 
115     if (i2c_addr) {
116         if (write_register(FCR, 0x07)) {
117             delayMicroseconds(1);
118 
119             if (send(cmd_measure, 9)) {
120                 if (receive(buf, 9)) {
121                     if (parse(buf)) {
122                         return true;
123                     }
124                 }
125             }
126         }
127     }
128 
129     return false;
130 }
.fi
.SS "uint8_t NDIR_I2C::parse (uint8_t * pbuf)\fC [private]\fP"

.PP
Definition at line 133 of file CoolNDIR_I2C\&.cpp\&.
.PP
.nf
134 {
135     uint8_t i;
136     uint8_t checksum = 0;
137 
138     for (i=0; i<9; i++) {
139         checksum += pbuf[i];
140     }
141 
142     if (pbuf[0] == 0xFF && pbuf[1] == 0x9C && checksum == 0xFF) {
143         ppm = (uint32_t)pbuf[2] << 24 | (uint32_t)pbuf[3] << 16 | (uint32_t)pbuf[4] << 8 | pbuf[5];
144         return true;
145     } else {
146         return false;
147     }
148 }
.fi
.SS "uint8_t NDIR_I2C::read_register (uint8_t reg_addr, uint8_t * pval)\fC [private]\fP"

.PP
Definition at line 208 of file CoolNDIR_I2C\&.cpp\&.
.PP
.nf
209 {
210     uint8_t result;
211 
212     WIRE\&.beginTransmission(i2c_addr);
213     WIRE\&.write(reg_addr << 3);
214 
215     if (WIRE\&.endTransmission() != 0) {
216         return false;
217     }
218 
219     if (WIRE\&.requestFrom(i2c_addr, (uint8_t)1) != 1) {
220         return false;
221     }
222 
223    *pval = WIRE\&.read();
224     return true;
225 }
.fi
.SS "uint8_t NDIR_I2C::receive (uint8_t * pbuf, uint8_t n)\fC [private]\fP"

.PP
Definition at line 166 of file CoolNDIR_I2C\&.cpp\&.
.PP
.nf
166                                                   {
167     uint8_t  i;
168     uint8_t  rx_level;
169     uint32_t start = millis();
170 
171     while (n) {
172         if (read_register(RXLVL, &rx_level)) {
173             if (rx_level > n) {
174                 rx_level = n;
175             }
176 
177             if (rx_level) {
178                 WIRE\&.beginTransmission(i2c_addr);
179                 WIRE\&.write(RHR << 3);
180 
181                 if (WIRE\&.endTransmission() != 0) {
182                     return false;
183                 }//delay(10);
184 
185                 if (rx_level == WIRE\&.requestFrom(i2c_addr, rx_level)) {
186                     for (i=0; i<rx_level; i++) {
187                        *pbuf = WIRE\&.read();
188                         pbuf++;
189                         n--;
190                     }
191                 } else {
192                     return false;
193                 }
194             }
195         } else {
196             return false;
197         }
198 
199         if (millis() - start > RECEIVE_TIMEOUT) {
200             return false;
201         }
202     }
203 
204     return true;
205 }
.fi
.SS "uint8_t NDIR_I2C::send (uint8_t * pdata, uint8_t n)\fC [private]\fP"

.PP
Definition at line 151 of file CoolNDIR_I2C\&.cpp\&.
.PP
.nf
151                                                 {
152     uint8_t result;
153 
154     if (read_register(TXLVL, &result)) {
155         if (result >= n) {
156             if (write_register(THR, pdata, n)) {
157                 return true;
158             }
159         }
160     }
161 
162     return false;
163 }
.fi
.SS "uint8_t NDIR_I2C::write_register (uint8_t reg_addr, uint8_t * pdata, uint8_t n)\fC [private]\fP"

.PP
Definition at line 228 of file CoolNDIR_I2C\&.cpp\&.
.PP
.nf
229 {
230     uint8_t result;
231 
232     WIRE\&.beginTransmission(i2c_addr);
233     WIRE\&.write(reg_addr << 3);
234 
235     while (n--) {
236         WIRE\&.write(*pdata);
237         pdata++;
238     }
239 
240     if (WIRE\&.endTransmission() != 0) {
241         return false;
242     } else {
243         return true;
244     }
245 }
.fi
.SS "uint8_t NDIR_I2C::write_register (uint8_t reg_addr, uint8_t val)\fC [private]\fP"

.PP
Definition at line 248 of file CoolNDIR_I2C\&.cpp\&.
.PP
.nf
249 {
250     return write_register(reg_addr, &val, 1);
251 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "uint8_t NDIR_I2C::cmd_measure = {0xFF,0x01,0x9C,0x00,0x00,0x00,0x00,0x00,0x63}\fC [static]\fP, \fC [private]\fP"

.PP
Definition at line 38 of file CoolNDIR_I2C\&.h\&.
.SS "uint8_t NDIR_I2C::i2c_addr"

.PP
Definition at line 31 of file CoolNDIR_I2C\&.h\&.
.SS "uint32_t NDIR_I2C::ppm"

.PP
Definition at line 32 of file CoolNDIR_I2C\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolBoardAPI from the source code\&.
