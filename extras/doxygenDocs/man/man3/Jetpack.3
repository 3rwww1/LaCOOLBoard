.TH "Jetpack" 3 "Thu Aug 17 2017" "CoolBoardAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Jetpack \- This class manages the \fBJetpack\fP shield\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Jetpack\&.h>\fP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBstate\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBbegin\fP ()"
.br
.ti -1c
.RI "void \fBwrite\fP (byte \fBaction\fP)"
.br
.ti -1c
.RI "void \fBwriteBit\fP (byte pin, bool \fBstate\fP)"
.br
.ti -1c
.RI "void \fBdoAction\fP (const char *data)"
.br
.ti -1c
.RI "bool \fBconfig\fP ()"
.br
.ti -1c
.RI "void \fBprintConf\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "byte \fBaction\fP = B00000000"
.br
.ti -1c
.RI "struct \fBJetpack::state\fP \fBactors\fP [8]"
.br
.ti -1c
.RI "const int \fBclockPin\fP = 4"
.br
.ti -1c
.RI "const int \fBdataPin\fP = 15"
.br
.ti -1c
.RI "const int \fBEnI2C\fP =5"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class manages the \fBJetpack\fP shield\&. 
.PP
Definition at line 21 of file Jetpack\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "void Jetpack::begin (void)"
\fBJetpack::begin()\fP: This method is provided to initialise the pin that control the \fBJetpack\fP shield 
.PP
Definition at line 26 of file Jetpack\&.cpp\&.
.PP
.nf
27 {
28 
29 #if DEBUG == 1 
30  
31     Serial\&.println( F("Entering Jetpack\&.begin() ") );
32     Serial\&.println();
33 
34 #endif
35 
36     pinMode(EnI2C,OUTPUT);
37     pinMode(dataPin,OUTPUT);
38     pinMode(clockPin,OUTPUT);
39     
40     
41 
42 }
.fi
.SS "bool Jetpack::config ()"
\fBJetpack::config()\fP: This method is provided to configure the \fBJetpack\fP with a configuration file
.PP
\fBReturns:\fP
.RS 4
true if successful,false otherwise 
.RE
.PP

.PP
Definition at line 550 of file Jetpack\&.cpp\&.
.PP
.nf
551 {
552 
553 #if DEBUG == 1 
554 
555     Serial\&.println( F("Entering Jetpack\&.config() ") );
556     Serial\&.println();
557 
558 #endif
559 
560     File jetPackConfig = SPIFFS\&.open("/jetPackConfig\&.json", "r");
561 
562     if (!jetPackConfig) 
563     {
564 
565     #if DEBUG == 1 
566 
567         Serial\&.println( F("failed to read /jetPackConfig\&.json ") );
568         Serial\&.println();
569 
570     #endif
571 
572         return(false);
573     }
574     else
575     {
576         size_t size = jetPackConfig\&.size();
577         // Allocate a buffer to store contents of the file\&.
578         std::unique_ptr<char[]> buf(new char[size]);
579 
580         jetPackConfig\&.readBytes(buf\&.get(), size);
581         DynamicJsonBuffer jsonBuffer;
582         JsonObject& json = jsonBuffer\&.parseObject(buf\&.get());
583         if (!json\&.success()) 
584         {
585         
586         #if DEBUG == 1 
587 
588             Serial\&.println( F("failed to parse jetpack config json from file ") );
589             Serial\&.println();
590 
591         #endif
592 
593             return(false);
594         } 
595         else
596         { 
597         
598         #if DEBUG == 1 
599 
600             Serial\&.println( F("read configuration file : ") );
601             json\&.printTo(Serial);
602             Serial\&.println();
603 
604             Serial\&.print(F("jsonBuffer size: "));
605             Serial\&.println(jsonBuffer\&.size());
606             Serial\&.println();
607 
608         
609         #endif
610   
611             for(int i=0;i<8;i++)
612             {   
613                 if(json[String("Act")+String(i)]\&.success())
614                 {
615                     //parsing actif key
616                     if(json[String("Act")+String(i)]["actif"]\&.success() )
617                     {
618                         this->actors[i]\&.actif=json[String("Act")+String(i)]["actif"];
619                     }
620                     else
621                     {
622                         this->actors[i]\&.actif=this->actors[i]\&.actif;
623                     }
624                     json[String("Act")+String(i)]["actif"]=this->actors[i]\&.actif;
625                     
626                     //parsing temporal key
627                     if(json[String("Act")+String(i)]["temporal"]\&.success() )
628                     {
629                         this->actors[i]\&.temporal=json[String("Act")+String(i)]["temporal"];
630                     }
631                     else
632                     {
633                         this->actors[i]\&.temporal=this->actors[i]\&.temporal;
634                     }
635                     json[String("Act")+String(i)]["temporal"]=this->actors[i]\&.temporal;
636                     
637                     //parsing inverted key
638                     if(json[String("Act")+String(i)]["inverted"]\&.success() )
639                     {
640                         this->actors[i]\&.inverted=json[String("Act")+String(i)]["inverted"];
641                     }
642                     else
643                     {
644                         this->actors[i]\&.inverted=this->actors[i]\&.inverted;
645                     }
646                     json[String("Act")+String(i)]["inverted"]=this->actors[i]\&.inverted;
647 
648                     //parsing inverted key
649                     if(json[String("Act")+String(i)]["inverted"]\&.success() )
650                     {
651                         this->actors[i]\&.inverted=json[String("Act")+String(i)]["inverted"];
652                     }
653                     else
654                     {
655                         this->actors[i]\&.inverted=this->actors[i]\&.inverted;
656                     }
657                     json[String("Act")+String(i)]["inverted"]=this->actors[i]\&.inverted;
658                     
659                     //parsing low key
660                     if(json[String("Act")+String(i)]["low"]\&.success() )
661                     {
662                         this->actors[i]\&.rangeLow=json[String("Act")+String(i)]["low"][0];
663                         this->actors[i]\&.timeLow=json[String("Act")+String(i)]["low"][1];
664                         this->actors[i]\&.hourLow=json[String("Act")+String(i)]["low"][2];                     
665                         this->actors[i]\&.minuteLow=json[String("Act")+String(i)]["low"][3];                       
666                     }
667                     else
668                     {
669                         this->actors[i]\&.rangeLow=this->actors[i]\&.rangeLow;
670                         this->actors[i]\&.timeLow=this->actors[i]\&.timeLow;
671                         this->actors[i]\&.hourLow=this->actors[i]\&.hourLow;
672                         this->actors[i]\&.minuteLow=this->actors[i]\&.minuteLow;                      
673                     }
674                     json[String("Act")+String(i)]["low"][0]=this->actors[i]\&.rangeLow;
675                     json[String("Act")+String(i)]["low"][1]=this->actors[i]\&.timeLow;
676                     json[String("Act")+String(i)]["low"][2]=this->actors[i]\&.hourLow;
677                     json[String("Act")+String(i)]["low"][3]=this->actors[i]\&.minuteLow;
678 
679                     //parsing high key
680                     if(json[String("Act")+String(i)]["high"]\&.success() )
681                     {
682                         this->actors[i]\&.rangeHigh=json[String("Act")+String(i)]["high"][0];
683                         this->actors[i]\&.timeHigh=json[String("Act")+String(i)]["high"][1];
684                         this->actors[i]\&.hourHigh=json[String("Act")+String(i)]["high"][2];                       
685                         this->actors[i]\&.minuteHigh=json[String("Act")+String(i)]["high"][3];                     
686                     }
687                     else
688                     {
689                         this->actors[i]\&.rangeHigh=this->actors[i]\&.rangeHigh;
690                         this->actors[i]\&.timeHigh=this->actors[i]\&.timeHigh;
691                         this->actors[i]\&.hourHigh=this->actors[i]\&.hourHigh;
692                         this->actors[i]\&.minuteHigh=this->actors[i]\&.minuteHigh;
693                     }
694                     json[String("Act")+String(i)]["high"][0]=this->actors[i]\&.rangeHigh;
695                     json[String("Act")+String(i)]["high"][1]=this->actors[i]\&.timeHigh;
696                     json[String("Act")+String(i)]["high"][2]=this->actors[i]\&.hourHigh;
697                     json[String("Act")+String(i)]["high"][3]=this->actors[i]\&.minuteHigh;
698 
699                     //parsing type key
700                     if(json[String("Act")+String(i)]["type"]\&.success() )
701                     {
702                         this->actors[i]\&.primaryType=json[String("Act")+String(i)]["type"][0]\&.as<String>();
703                         this->actors[i]\&.secondaryType=json[String("Act")+String(i)]["type"][1]\&.as<String>();                      
704                         
705                     }
706                     else
707                     {
708                         this->actors[i]\&.primaryType=this->actors[i]\&.primaryType;
709                         this->actors[i]\&.secondaryType=this->actors[i]\&.secondaryType;
710                     }
711                     json[String("Act")+String(i)]["type"][0]=this->actors[i]\&.primaryType;
712                     json[String("Act")+String(i)]["type"][1]=this->actors[i]\&.secondaryType;
713                         
714 
715 
716                     
717                     
718                      
719                 }
720                 else
721                 {
722                     this->actors[i]=this->actors[i];
723                 }
724                 
725                 json[String("Act")+String(i)]["actif"]=this->actors[i]\&.actif;
726                 json[String("Act")+String(i)]["temporal"]=this->actors[i]\&.temporal;
727                 json[String("Act")+String(i)]["inverted"]=this->actors[i]\&.inverted;
728 
729                 json[String("Act")+String(i)]["low"][0]=this->actors[i]\&.rangeLow;
730                 json[String("Act")+String(i)]["low"][1]=this->actors[i]\&.timeLow;
731                 json[String("Act")+String(i)]["low"][2]=this->actors[i]\&.hourLow;
732                 json[String("Act")+String(i)]["low"][3]=this->actors[i]\&.minuteLow;
733 
734                 json[String("Act")+String(i)]["high"][0]=this->actors[i]\&.rangeHigh;
735                 json[String("Act")+String(i)]["high"][1]=this->actors[i]\&.timeHigh;
736                 json[String("Act")+String(i)]["high"][2]=this->actors[i]\&.hourHigh;
737                 json[String("Act")+String(i)]["high"][3]=this->actors[i]\&.minuteHigh;
738 
739                 json[String("Act")+String(i)]["type"][0]=this->actors[i]\&.primaryType;
740                 json[String("Act")+String(i)]["type"][1]=this->actors[i]\&.secondaryType;
741 
742 
743 
744             }
745             
746 
747             jetPackConfig\&.close();           
748             jetPackConfig = SPIFFS\&.open("/jetPackConfig\&.json", "w");          
749             if(!jetPackConfig)
750             {
751             
752             #if DEBUG == 1 
753 
754                 Serial\&.println( F("failed to write to /jetPackConfig\&.json ") );
755                 Serial\&.println();
756             
757             #endif
758                 
759                 return(false);          
760             }  
761 
762             json\&.printTo(jetPackConfig);
763             jetPackConfig\&.close();
764 
765         #if DEBUG == 1 
766             
767             Serial\&.println(F("saved configuration : "));
768             json\&.printTo(Serial );
769             Serial\&.println();        
770         
771         #endif
772 
773             return(true); 
774         }
775     }   
776     
777 
778 }
.fi
.SS "void Jetpack::doAction (const char * data)"
Jetpack::doAction(sensor data ): This method is provided to automate the \fBJetpack\fP\&. exemple: initial state: current Temperature = 23 °C actors[i]\&.actif=1 actors[i]\&.rangeLow=25 °C actors[i]\&.rangeHigh=30 °C actors[i]\&.primaryType='Temperature'
.PP
condition verified: root['Temperature'] < actors[i]\&.rangeLow
.PP
action : activate the actor at pin[i]
.PP
initial state: actors[i]\&.actif=1 actors[i]\&.rangeLow=2°C actors[i]\&.rangeHigh=12°C actors[i]\&.inverted=1 actors[i]\&.primaryType='Temperature'
.PP
condition verified: root['Temperature'] > actors[i]\&.rangeHigh
.PP
action: activate the actor at pin[i]
.PP
initial state: actors[i]\&.actif=1 actors[i]\&.timeLow=2500ms actors[i]\&.timeHigh=3000ms actors[i]\&.temporal=1
.PP
condition verified: millis()-actors[i]\&.actifTime >=actors[i]\&.timeHigh
.PP
action: deactivate the actor at pin[i]
.PP
initial state: actors[i]\&.actif=1 actors[i]\&.hourLow=10 actors[i]\&.hourHigh=8 actors[i]\&.temporal=1 actors[i]\&.secondaryType='hour'( or 'minute' or 'hourMinute')
.PP
condition verified: root['hour']>=actors[i]\&.hourHigh
.PP
action: activate the actor at pin[i] 
.PP
Definition at line 166 of file Jetpack\&.cpp\&.
.PP
.nf
167 {
168 
169 #if DEBUG == 1 
170 
171     Serial\&.println( F("Entering Jetpack\&.doAction()") );
172     Serial\&.println();
173 
174     Serial\&.println( F("input data is :") );
175     Serial\&.println(data);
176     Serial\&.println();
177 
178 #endif 
179 
180     DynamicJsonBuffer jsonBuffer;
181     JsonObject& root = jsonBuffer\&.parseObject(data);
182     
183     if (!root\&.success()) 
184     {
185     
186     #if DEBUG == 1 
187 
188         Serial\&.println( F("failed to parse json object ") );
189         Serial\&.println();
190     
191     #endif 
192 
193     }
194     else
195     {
196     
197     #if DEBUG == 1 
198 
199         Serial\&.println( F("created Json object :") );
200         root\&.printTo(Serial);
201         Serial\&.println();
202 
203         Serial\&.print(F("jsonBuffer size: "));
204         Serial\&.println(jsonBuffer\&.size());
205         Serial\&.println();
206 
207     
208     #endif 
209 
210         //invert the current action state for each actor
211         //if the value is outside the limits
212         for(int i=0;i<8;i++)
213         {
214             //check if the actor is actif 
215             if(this->actors[i]\&.actif==1)
216             {                       
217                 //if the actor is not temporal
218                 if( this->actors[i]\&.temporal==0 ) 
219                 {   
220                     //regular actor
221                     if( (this->actors[i]\&.inverted) == 0 )
222                     {
223                         //measure >= high limit : stop actor
224                         if( ( root[this->actors[i]\&.primaryType] ) >= ( this->actors[i]\&.rangeHigh ) )  
225                         {   
226                             bitWrite( this->action , i , 0 ) ;  
227 
228                         #if DEBUG == 1
229                             
230                             Serial\&.print(F("not inverted Actor N° : "));
231                             Serial\&.println(i);
232 
233                             Serial\&.print(F("measured value : "));
234                             Serial\&.println(root[this->actors[i]\&.primaryType]\&.as<float>());
235 
236                             Serial\&.print(F("high range : "));
237                             Serial\&.println(this->actors[i]\&.rangeHigh);
238                         
239                         #endif
240                         
241                         }
242                         //measure <= low limit : start actor
243                         else if( ( root[ this->actors[i]\&.primaryType ] ) <= ( this->actors[i]\&.rangeLow ) )
244                         {
245                             bitWrite( this->action , i , 1 ) ;
246 
247                         #if DEBUG == 1
248 
249                             Serial\&.print(F("not inverted Actor N° : "));
250                             Serial\&.println(i);
251 
252                             Serial\&.print(F("measured value : "));
253                             Serial\&.println(root[this->actors[i]\&.primaryType]\&.as<float>());
254 
255                             Serial\&.print(F("low range : "));
256                             Serial\&.println(this->actors[i]\&.rangeLow);
257                         
258                         #endif
259                                             
260                         }
261                         else 
262                         {
263                             bitWrite( this->action , i , 0 ) ;                      
264                         }
265                     }
266                     //inverted actor
267                     else if( (this->actors[i]\&.inverted) == 1 )
268                     {
269                         //measure >= high limit : start actor
270                         if( ( root[this->actors[i]\&.primaryType] ) >= ( this->actors[i]\&.rangeHigh ) )  
271                         {   
272                             bitWrite( this->action , i , 1 ) ;
273 
274                         #if DEBUG == 1
275 
276                             Serial\&.print(F(" inverted Actor N° : "));
277                             Serial\&.println(i);
278                             
279                             Serial\&.print(F("measured value : "));
280                             Serial\&.println(root[this->actors[i]\&.primaryType]\&.as<float>());
281 
282                             Serial\&.print(F("high range : "));
283                             Serial\&.println(this->actors[i]\&.rangeHigh);
284                         
285                         #endif
286                             
287                         }
288                         //measure <= low limit : stop actor
289                         else if( ( root[ this->actors[i]\&.primaryType ] ) <= ( this->actors[i]\&.rangeLow ) )
290                         {
291                             bitWrite( this->action , i , 0 ) ;
292 
293                         #if DEBUG == 1
294                             
295                             Serial\&.print(F("inverted Actor N° : "));
296                             Serial\&.println(i);
297 
298                             Serial\&.print(F("measured value : "));
299                             Serial\&.println(root[this->actors[i]\&.primaryType]\&.as<float>());
300 
301                             Serial\&.print(F("low range : "));
302                             Serial\&.println(this->actors[i]\&.rangeLow);
303                         
304                         #endif
305                                             
306                         }
307                         else 
308                         {
309                             bitWrite( this->action , i , 0 ) ;                      
310                         }
311 
312                     
313                     }
314                 }
315 
316                 //if the actor is temporal
317                 else
318                 {
319                     //actor has a secondary type (either hour,minute or hourMinute)
320                     if( ( this->actors[i]\&.secondaryType ) !="" )     
321                     {
322                     
323                     #if DEBUG == 1
324                         
325                         Serial\&.print(this->actors[i]\&.secondaryType);
326                         Serial\&.print(" actor N° ");
327                         Serial\&.println(i);
328                         Serial\&.println();
329                     #endif
330                         //secondary type is hour    
331                         if( ( this->actors[i]\&.secondaryType=="hour" ) )
332                         {
333                             //time >= hourLow : stop actor
334                             if( ( root[this->actors[i]\&.secondaryType] ) >= ( this->actors[i]\&.hourLow ) )  
335                             {
336                         
337                             #if DEBUG == 1 
338                             
339                                 Serial\&.print("deactive actor N° ");
340                                 Serial\&.println(i);
341                         
342                             #endif  
343                                 bitWrite( this->action , i , 0 ) ;  
344                             }
345                             //time >= hourHigh : start actor
346                             else if( ( root[ this->actors[i]\&.secondaryType ] ) >= ( this->actors[i]\&.hourHigh ) )
347                             {
348                         
349                             #if DEBUG == 1 
350                         
351                                 Serial\&.print("active actor N° ");
352                                 Serial\&.println(i);
353                         
354                             #endif
355                                 bitWrite( this->action , i , 1 ) ;                  
356                             }
357                         }
358 
359                         //secondary type is minute  
360                         if( ( this->actors[i]\&.secondaryType=="minute" ) )
361                         {
362                             //time >= minuteLow : stop actor
363                             if( ( root[this->actors[i]\&.secondaryType] ) >= ( this->actors[i]\&.minuteLow ) )    
364                             {
365                         
366                             #if DEBUG == 1 
367                             
368                                 Serial\&.print("deactive actor N° ");
369                                 Serial\&.println(i);
370                         
371                             #endif  
372                                 bitWrite( this->action , i , 0 ) ;  
373                             }
374                             //time >= minuteHigh : start actor
375                             else if( ( root[ this->actors[i]\&.secondaryType ] ) >= ( this->actors[i]\&.minuteHigh ) )
376                             {
377                         
378                             #if DEBUG == 1 
379                         
380                                 Serial\&.print("active actor N° ");
381                                 Serial\&.println(i);
382                         
383                             #endif
384                                 bitWrite( this->action , i , 1 ) ;                  
385                             }
386                         }
387 
388                         //secondary type is hourMinute  
389                         if( ( this->actors[i]\&.secondaryType=="hourMinute" ) )
390                         {
391                             //time == hourLow :
392                             if( ( root["hour"] ) == ( this->actors[i]\&.hourLow ) )    
393                             {
394                                 //time > minuteLow : stop actor
395                                 if( (root["minute"])>=(this->actors[i]\&.minuteLow) )                      
396                                 {
397                                 #if DEBUG == 1 
398                         
399                                     Serial\&.print(" time\&.hour == hourLow, time\&.minute>=minuteLow : deactive actor N° ");
400                                     Serial\&.println(i);
401                     
402                                 #endif  
403                                     bitWrite( this->action , i , 0 ) ;
404                                 }   
405                             }
406                             //time > hourLow: stop actor
407                             else if( ( root["hour" ] ) > ( this->actors[i]\&.hourLow ) )
408                             {
409     
410                             #if DEBUG == 1 
411                         
412                                 Serial\&.print("time\&.hour>hourLow : deactive actor N° ");
413                                 Serial\&.println(i);
414                 
415                             #endif      
416                                 bitWrite( this->action , i , 0 ) ;
417                                                     
418                             }
419                             //time == hourHigh:
420                             else if( ( root["hour" ] ) == ( this->actors[i]\&.hourHigh ) )
421                             {
422                                 //time > minuteHigh: start actor
423                                 if( (root["minute"])>=(this->actors[i]\&.minuteHigh) )
424                                 {
425                         
426                                 #if DEBUG == 1 
427                         
428                                     Serial\&.print("time\&.hour==hourHigh, time\&.mintue>=minuteHigh : active actor N° ");
429                                     Serial\&.println(i);
430                         
431                                 #endif
432                                     bitWrite( this->action , i , 1 ) ;
433                                 }                   
434                             }
435                             //time > hourHigh : start actor
436                             else if( ( root["hour" ] ) > ( this->actors[i]\&.hourHigh ) )
437                             {
438                                 
439                             #if DEBUG == 1 
440                         
441                                 Serial\&.print("time\&.hour>hourHigh : active actor N° ");
442                                 Serial\&.println(i);
443                 
444                             #endif      
445 
446                                 bitWrite( this->action , i , 1 ) ;
447                                                     
448                             }
449 
450                         }
451 
452 
453                     }
454                     //actor not of type hour
455                     else if( ( this->actors[i]\&.secondaryType ) == ( "" ) )    
456                     {
457                     
458                     #if DEBUG == 1 
459                         
460                         Serial\&.println("not hour temporal actor");
461                         Serial\&.println(i);
462                         Serial\&.println(this->actors[i]\&.secondaryType);
463                         Serial\&.println("actifTime : ");
464                         Serial\&.println(this->actors[i]\&.actifTime);
465                         Serial\&.println("millis : ");
466                         Serial\&.println(millis() );
467                         Serial\&.println(" high : ");
468                         Serial\&.println(this->actors[i]\&.timeHigh );
469                         Serial\&.println();
470                     
471                     #endif
472                         //if the actor was actif for highTime or more :
473                         if( ( millis()- this->actors[i]\&.actifTime  ) >= (  this->actors[i]\&.timeHigh  ) )
474                         {
475                             //stop the actor
476                             bitWrite( this->action , i , 0) ;
477 
478                             //make the actor inactif:
479                             this->actors[i]\&.actif=0;
480 
481                             //start the low timer
482                             this->actors[i]\&.inactifTime=millis();                
483                         }
484                     }           
485                             
486                 }
487             }
488             //check if actor is inactif
489             else if(this->actors[i]\&.actif==0)
490             {   //check if actor is temporal
491                 if(this->actors[i]\&.temporal==1)
492                 {
493                     //if the actor was inactif for lowTime or more :
494                     if( ( millis() - this->actors[i]\&.inactifTime ) >= (  this->actors[i]\&.timeLow  ) )
495                     {
496                         //start the actor
497                         bitWrite( this->action , i , 1) ;
498 
499                         //make the actor actif:
500                         this->actors[i]\&.actif=1;
501 
502                         //start the low timer
503                         this->actors[i]\&.actifTime=millis();
504 
505                     #if DEBUG == 1 
506                         
507                         Serial\&.println("inactif temporal actor");
508                         Serial\&.println(this->actors[i]\&.primaryType);
509                         Serial\&.print("temporal : ");
510                         Serial\&.println(this->actors[i]\&.temporal);
511                         Serial\&.println(i);
512                         Serial\&.println("inactifTime : ");
513                         Serial\&.println(this->actors[i]\&.inactifTime);
514                         Serial\&.println("millis : ");
515                         Serial\&.println(millis() );
516                         Serial\&.println(" low : ");
517                         Serial\&.println(this->actors[i]\&.timeLow );
518                         Serial\&.println();
519 
520                         Serial\&.println();
521                     
522                     #endif
523                 
524                     }           
525             
526                 }
527             }
528         }
529     
530     #if DEBUG == 1 
531 
532         Serial\&.println( F("new action is : ") );
533         Serial\&.println(this->action,BIN);
534         Serial\&.println();
535     
536     #endif 
537 
538         this->write(this->action);
539 
540     } 
541 }
.fi
.SS "void Jetpack::printConf ()"
\fBJetpack::printConf()\fP: This method is provided to print the configuration to the Serial Monitor 
.PP
Definition at line 786 of file Jetpack\&.cpp\&.
.PP
.nf
787 {
788 
789 #if DEBUG == 1 
790 
791     Serial\&.println( F("Enter Jetpack\&.printConf() ") );
792     Serial\&.println();
793 
794 #endif 
795     Serial\&.println(F( "Jetpack configuration " ) ) ;
796  
797         for(int i=0;i<8;i++)
798     {   
799         Serial\&.print(F("actor N°"));
800         Serial\&.print(i);
801         Serial\&.print(F(" actif :"));
802         Serial\&.println(this->actors[i]\&.actif);
803         
804         Serial\&.print(F("actor N°"));
805         Serial\&.print(i);
806         Serial\&.print(F(" temporal :"));
807         Serial\&.println(this->actors[i]\&.temporal);
808 
809         Serial\&.print(F("actor N°"));
810         Serial\&.print(i);
811         Serial\&.print(F(" inverted :"));
812         Serial\&.println(this->actors[i]\&.inverted);
813 
814 
815         Serial\&.print(F("actor N°"));
816         Serial\&.print(i);
817         Serial\&.print(F(" primary Type :"));
818         Serial\&.println(this->actors[i]\&.primaryType);
819 
820         Serial\&.print(F("actor N°"));
821         Serial\&.print(i);
822         Serial\&.print(F(" secondary Type :"));        
823         Serial\&.println(this->actors[i]\&.secondaryType);
824 
825         Serial\&.print(F("actor N°"));
826         Serial\&.print(i);
827         Serial\&.print(F(" range Low :"));
828         Serial\&.println(this->actors[i]\&.rangeLow);
829 
830         Serial\&.print(F("actor N°"));
831         Serial\&.print(i);
832         Serial\&.print(F(" time Low :"));
833         Serial\&.println(this->actors[i]\&.timeLow);
834 
835         Serial\&.print(F("actor N°"));
836         Serial\&.print(i);
837         Serial\&.print(F(" hour low:"));
838         Serial\&.println(this->actors[i]\&.hourLow);
839 
840         Serial\&.print(F("actor N°"));
841         Serial\&.print(i);
842         Serial\&.print(F(" minute low:"));
843         Serial\&.println(this->actors[i]\&.minuteLow);
844 
845         Serial\&.print(F("actor N°"));
846         Serial\&.print(i);
847         Serial\&.print(F(" range High:"));
848         Serial\&.println(this->actors[i]\&.rangeHigh);
849 
850         Serial\&.print(F("actor N°"));
851         Serial\&.print(i);
852         Serial\&.print(F(" time High:"));
853         Serial\&.println(this->actors[i]\&.timeHigh);
854 
855         Serial\&.print(F("actor N°"));
856         Serial\&.print(i);
857         Serial\&.print(F(" hour high:"));
858         Serial\&.println(this->actors[i]\&.hourHigh);
859 
860         Serial\&.print(F("actor N°"));
861         Serial\&.print(i);
862         Serial\&.print(F(" minute high:"));
863         Serial\&.println(this->actors[i]\&.minuteHigh);
864 
865         Serial\&.println(); 
866 
867     }
868 
869     Serial\&.println();
870 }
.fi
.SS "void Jetpack::write (byte action)"
Jetpack::write(action): This method is provided to write the given action to the entire \fBJetpack\fP action is a Byte (8 bits ), each bit goes to an output\&. MSBFirst 
.PP
Definition at line 53 of file Jetpack\&.cpp\&.
.PP
.nf
54 {
55 
56 #if DEBUG == 1
57 
58     Serial\&.println( F("Entering Jetpack\&.write()") );
59     Serial\&.println();
60 
61     Serial\&.println( F("writing this action : ") );
62     Serial\&.println(action,BIN);
63     Serial\&.println();
64 
65 #endif 
66 
67     this->action=action;
68 
69     
70     digitalWrite(EnI2C, LOW);
71     
72     shiftOut(dataPin, clockPin, MSBFIRST, this->action);
73 
74     digitalWrite(EnI2C, HIGH);
75 
76 
77 }
.fi
.SS "void Jetpack::writeBit (byte pin, bool state)"
Jetpack::writeBit(pin,state): This method is provided to write the given state to the given pin 
.PP
Definition at line 84 of file Jetpack\&.cpp\&.
.PP
.nf
85 {
86 
87 #if DEBUG == 1 
88 
89     Serial\&.println( F("Entering Jetpack\&.writeBit() ") );
90 
91     Serial\&.print( F("Writing ") );
92     Serial\&.print(state);
93 
94     Serial\&.print( F("to pin N°") );
95     Serial\&.print(pin);
96 
97     Serial\&.println();
98 
99 #endif
100 
101     bitWrite(this->action, pin, state);
102     digitalWrite(EnI2C, LOW);
103     
104     shiftOut(dataPin, clockPin, MSBFIRST, this->action);
105 
106     digitalWrite(EnI2C, HIGH);
107 
108 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "byte Jetpack::action = B00000000\fC [private]\fP"

.PP
Definition at line 41 of file Jetpack\&.h\&.
.SS "struct \fBJetpack::state\fP Jetpack::actors[8]\fC [private]\fP"

.SS "const int Jetpack::clockPin = 4\fC [private]\fP"

.PP
Definition at line 81 of file Jetpack\&.h\&.
.SS "const int Jetpack::dataPin = 15\fC [private]\fP"

.PP
Definition at line 83 of file Jetpack\&.h\&.
.SS "const int Jetpack::EnI2C =5\fC [private]\fP"

.PP
Definition at line 85 of file Jetpack\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolBoardAPI from the source code\&.
