.TH "ExternalSensor< NDIR_I2C >" 3 "Thu Aug 24 2017" "CoolBoardAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ExternalSensor< NDIR_I2C > \- \fBNDIR_I2C\fP Specialization Class This is the template specialization for the \fBNDIR_I2C\fP CO2 sensor\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <ExternalSensor\&.h>\fP
.PP
Inherits \fBBaseExternalSensor\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBExternalSensor\fP (uint8_t i2c_addr)"
.br
.ti -1c
.RI "virtual uint8_t \fBbegin\fP ()"
.br
.ti -1c
.RI "virtual float \fBread\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBNDIR_I2C\fP \fBsensor\fP =NULL"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<>
.br
class ExternalSensor< NDIR_I2C >"
\fBNDIR_I2C\fP Specialization Class This is the template specialization for the \fBNDIR_I2C\fP CO2 sensor\&. 
.PP
Definition at line 203 of file ExternalSensor\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBExternalSensor\fP< \fBNDIR_I2C\fP >::\fBExternalSensor\fP (uint8_t i2c_addr)\fC [inline]\fP"
\fBExternalSensor(I2C address)\fP: \fBNDIR_I2C\fP specific constructor 
.PP
Definition at line 211 of file ExternalSensor\&.h\&.
.PP
.nf
212     {
213     
214     #if DEBUGExternal == 1 
215 
216         Serial\&.println( "ExternalSensor <NDIR_I2C> constructor");
217         Serial\&.println();
218     
219     #endif
220 
221         sensor=NDIR_I2C(i2c_addr);
222     }
.fi
.SH "Member Function Documentation"
.PP 
.SS "virtual uint8_t \fBExternalSensor\fP< \fBNDIR_I2C\fP >::begin (void)\fC [inline]\fP, \fC [virtual]\fP"
\fBbegin()\fP: \fBNDIR_I2C\fP specific begin method
.PP
\fBReturns:\fP
.RS 4
true if successful, false otherwise 
.RE
.PP

.PP
Reimplemented from \fBBaseExternalSensor\fP\&.
.PP
Definition at line 231 of file ExternalSensor\&.h\&.
.PP
.nf
232     {
233     
234     #if DEBUGExternal == 1 
235 
236         Serial\&.println( "ExternalSensor <NDIR_I2C> begin()" );
237         Serial\&.println();
238     
239     #endif 
240 
241         if (sensor\&.begin()) 
242         {
243         
244         #if DEBUGExternal == 1 
245             
246             Serial\&.println( "NDIR_I2C init : wait 10 seconds" );
247             Serial\&.println();
248         
249         #endif
250 
251             delay(10000);
252             return(true);
253 
254             }
255         else 
256         {
257         
258         #if DEBUGExternal == 1 
259 
260             Serial\&.println( "NDIR_I2C init : fail " );
261             Serial\&.println();
262         
263         #endif
264 
265             return(false);
266         }   
267     }
.fi
.SS "virtual float \fBExternalSensor\fP< \fBNDIR_I2C\fP >::read (void)\fC [inline]\fP, \fC [virtual]\fP"
\fBread()\fP: \fBNDIR_I2C\fP specific read method
.PP
\fBReturns:\fP
.RS 4
the ppm value if successful, else return -42 
.RE
.PP

.PP
Reimplemented from \fBBaseExternalSensor\fP\&.
.PP
Definition at line 276 of file ExternalSensor\&.h\&.
.PP
.nf
277     {
278         
279     #if DEBUGExternal == 1 
280         
281         Serial\&.println( "ExternalSensor <NDIR_I2C> read()" );
282         Serial\&.println();
283 
284     #endif
285 
286         if (sensor\&.measure())
287         {
288         
289         #if DEBUGExternal == 1 
290 
291             Serial\&.print( "NDIR_I2C ppm :" );
292             Serial\&.println( (float) sensor\&.ppm);
293             
294             Serial\&.println();            
295 
296         #endif
297 
298             return( (float) sensor\&.ppm);
299             
300         }
301         
302         else
303         {
304         
305         #if DEBUGExternal == 1 
306 
307             Serial\&.println( "NDIR_I2C read fail " );
308             Serial\&.println();
309         
310         #endif
311 
312             return(-42);
313         }
314     }
.fi
.SH "Member Data Documentation"
.PP 
.SS "\fBNDIR_I2C\fP \fBExternalSensor\fP< \fBNDIR_I2C\fP >::sensor =NULL\fC [private]\fP"

.PP
Definition at line 318 of file ExternalSensor\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolBoardAPI from the source code\&.
