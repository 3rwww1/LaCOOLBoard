.TH "ExternalSensor< NDIR_I2C >" 3 "Wed Aug 30 2017" "CoolBoardAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ExternalSensor< NDIR_I2C > \- \fBNDIR_I2C\fP Specialization Class This is the template specialization for the \fBNDIR_I2C\fP CO2 sensor\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <ExternalSensor\&.h>\fP
.PP
Inherits \fBBaseExternalSensor\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBExternalSensor\fP (uint8_t i2c_addr)"
.br
.ti -1c
.RI "virtual uint8_t \fBbegin\fP ()"
.br
.ti -1c
.RI "virtual float \fBread\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBNDIR_I2C\fP \fBsensor\fP =NULL"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<>
.br
class ExternalSensor< NDIR_I2C >"
\fBNDIR_I2C\fP Specialization Class This is the template specialization for the \fBNDIR_I2C\fP CO2 sensor\&. 
.PP
Definition at line 204 of file ExternalSensor\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBExternalSensor\fP< \fBNDIR_I2C\fP >::\fBExternalSensor\fP (uint8_t i2c_addr)\fC [inline]\fP"
\fBExternalSensor(I2C address)\fP: \fBNDIR_I2C\fP specific constructor 
.PP
Definition at line 212 of file ExternalSensor\&.h\&.
.PP
.nf
213     {
214     
215     #if DEBUGExternal == 1 
216 
217         Serial\&.println( "ExternalSensor <NDIR_I2C> constructor");
218         Serial\&.println();
219     
220     #endif
221 
222         sensor=NDIR_I2C(i2c_addr);
223     }
.fi
.SH "Member Function Documentation"
.PP 
.SS "virtual uint8_t \fBExternalSensor\fP< \fBNDIR_I2C\fP >::begin (void)\fC [inline]\fP, \fC [virtual]\fP"
\fBbegin()\fP: \fBNDIR_I2C\fP specific begin method
.PP
\fBReturns:\fP
.RS 4
true if successful, false otherwise 
.RE
.PP

.PP
Reimplemented from \fBBaseExternalSensor\fP\&.
.PP
Definition at line 232 of file ExternalSensor\&.h\&.
.PP
.nf
233     {
234     
235     #if DEBUGExternal == 1 
236 
237         Serial\&.println( "ExternalSensor <NDIR_I2C> begin()" );
238         Serial\&.println();
239     
240     #endif 
241 
242         if (sensor\&.begin()) 
243         {
244         
245         #if DEBUGExternal == 1 
246             
247             Serial\&.println( "NDIR_I2C init : wait 10 seconds" );
248             Serial\&.println();
249         
250         #endif
251 
252             delay(10000);
253             return(true);
254 
255             }
256         else 
257         {
258         
259         #if DEBUGExternal == 1 
260 
261             Serial\&.println( "NDIR_I2C init : fail " );
262             Serial\&.println();
263         
264         #endif
265 
266             return(false);
267         }   
268     }
.fi
.SS "virtual float \fBExternalSensor\fP< \fBNDIR_I2C\fP >::read (void)\fC [inline]\fP, \fC [virtual]\fP"
\fBread()\fP: \fBNDIR_I2C\fP specific read method
.PP
\fBReturns:\fP
.RS 4
the ppm value if successful, else return -42 
.RE
.PP

.PP
Reimplemented from \fBBaseExternalSensor\fP\&.
.PP
Definition at line 277 of file ExternalSensor\&.h\&.
.PP
.nf
278     {
279         
280     #if DEBUGExternal == 1 
281         
282         Serial\&.println( "ExternalSensor <NDIR_I2C> read()" );
283         Serial\&.println();
284 
285     #endif
286 
287         if (sensor\&.measure())
288         {
289         
290         #if DEBUGExternal == 1 
291 
292             Serial\&.print( "NDIR_I2C ppm :" );
293             Serial\&.println( (float) sensor\&.ppm);
294             
295             Serial\&.println();            
296 
297         #endif
298 
299             return( (float) sensor\&.ppm);
300             
301         }
302         
303         else
304         {
305         
306         #if DEBUGExternal == 1 
307 
308             Serial\&.println( "NDIR_I2C read fail " );
309             Serial\&.println();
310         
311         #endif
312 
313             return(-42);
314         }
315     }
.fi
.SH "Member Data Documentation"
.PP 
.SS "\fBNDIR_I2C\fP \fBExternalSensor\fP< \fBNDIR_I2C\fP >::sensor =NULL\fC [private]\fP"

.PP
Definition at line 319 of file ExternalSensor\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolBoardAPI from the source code\&.
