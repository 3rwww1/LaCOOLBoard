.TH "ExternalSensor< NDIR_I2C >" 3 "Wed Aug 30 2017" "CoolBoardAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ExternalSensor< NDIR_I2C > \- \fBNDIR_I2C\fP Specialization Class This is the template specialization for the \fBNDIR_I2C\fP CO2 sensor\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <ExternalSensor\&.h>\fP
.PP
Inherits \fBBaseExternalSensor\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBExternalSensor\fP (uint8_t i2c_addr)"
.br
.ti -1c
.RI "virtual uint8_t \fBbegin\fP ()"
.br
.ti -1c
.RI "virtual float \fBread\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBNDIR_I2C\fP \fBsensor\fP =NULL"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<>
.br
class ExternalSensor< NDIR_I2C >"
\fBNDIR_I2C\fP Specialization Class This is the template specialization for the \fBNDIR_I2C\fP CO2 sensor\&. 
.PP
Definition at line 205 of file ExternalSensor\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBExternalSensor\fP< \fBNDIR_I2C\fP >::\fBExternalSensor\fP (uint8_t i2c_addr)\fC [inline]\fP"
\fBExternalSensor(I2C address)\fP: \fBNDIR_I2C\fP specific constructor 
.PP
Definition at line 213 of file ExternalSensor\&.h\&.
.PP
.nf
214     {
215     
216     #if DEBUGExternal == 1 
217 
218         Serial\&.println( "ExternalSensor <NDIR_I2C> constructor");
219         Serial\&.println();
220     
221     #endif
222 
223         sensor=NDIR_I2C(i2c_addr);
224     }
.fi
.SH "Member Function Documentation"
.PP 
.SS "virtual uint8_t \fBExternalSensor\fP< \fBNDIR_I2C\fP >::begin (void)\fC [inline]\fP, \fC [virtual]\fP"
\fBbegin()\fP: \fBNDIR_I2C\fP specific begin method
.PP
\fBReturns:\fP
.RS 4
true if successful, false otherwise 
.RE
.PP

.PP
Reimplemented from \fBBaseExternalSensor\fP\&.
.PP
Definition at line 233 of file ExternalSensor\&.h\&.
.PP
.nf
234     {
235     
236     #if DEBUGExternal == 1 
237 
238         Serial\&.println( "ExternalSensor <NDIR_I2C> begin()" );
239         Serial\&.println();
240     
241     #endif 
242 
243         if (sensor\&.begin()) 
244         {
245         
246         #if DEBUGExternal == 1 
247             
248             Serial\&.println( "NDIR_I2C init : wait 10 seconds" );
249             Serial\&.println();
250         
251         #endif
252 
253             delay(10000);
254             return(true);
255 
256             }
257         else 
258         {
259         
260         #if DEBUGExternal == 1 
261 
262             Serial\&.println( "NDIR_I2C init : fail " );
263             Serial\&.println();
264         
265         #endif
266 
267             return(false);
268         }   
269     }
.fi
.SS "virtual float \fBExternalSensor\fP< \fBNDIR_I2C\fP >::read (void)\fC [inline]\fP, \fC [virtual]\fP"
\fBread()\fP: \fBNDIR_I2C\fP specific read method
.PP
\fBReturns:\fP
.RS 4
the ppm value if successful, else return -42 
.RE
.PP

.PP
Reimplemented from \fBBaseExternalSensor\fP\&.
.PP
Definition at line 278 of file ExternalSensor\&.h\&.
.PP
.nf
279     {
280         
281     #if DEBUGExternal == 1 
282         
283         Serial\&.println( "ExternalSensor <NDIR_I2C> read()" );
284         Serial\&.println();
285 
286     #endif
287 
288         if (sensor\&.measure())
289         {
290         
291         #if DEBUGExternal == 1 
292 
293             Serial\&.print( "NDIR_I2C ppm :" );
294             Serial\&.println( (float) sensor\&.ppm);
295             
296             Serial\&.println();            
297 
298         #endif
299 
300             return( (float) sensor\&.ppm);
301             
302         }
303         
304         else
305         {
306         
307         #if DEBUGExternal == 1 
308 
309             Serial\&.println( "NDIR_I2C read fail " );
310             Serial\&.println();
311         
312         #endif
313 
314             return(-42);
315         }
316     }
.fi
.SH "Member Data Documentation"
.PP 
.SS "\fBNDIR_I2C\fP \fBExternalSensor\fP< \fBNDIR_I2C\fP >::sensor =NULL\fC [private]\fP"

.PP
Definition at line 320 of file ExternalSensor\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolBoardAPI from the source code\&.
