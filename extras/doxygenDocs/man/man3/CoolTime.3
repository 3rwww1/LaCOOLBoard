.TH "CoolTime" 3 "Thu Aug 24 2017" "CoolBoardAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoolTime \- This class manages the DS1337 RTC \&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolTime\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBbegin\fP ()"
.br
.ti -1c
.RI "void \fBupdate\fP ()"
.br
.ti -1c
.RI "bool \fBconfig\fP ()"
.br
.ti -1c
.RI "void \fBconfig\fP (IPAddress \fBtimeServer\fP, unsigned int \fBlocalPort\fP)"
.br
.ti -1c
.RI "void \fBprintConf\fP ()"
.br
.ti -1c
.RI "void \fBsetDateTime\fP (int year, int month, int day, int hour, int minutes, int seconds)"
.br
.ti -1c
.RI "tmElements_t \fBgetTimeDate\fP ()"
.br
.ti -1c
.RI "String \fBgetESDate\fP ()"
.br
.ti -1c
.RI "unsigned long \fBgetLastSyncTime\fP ()"
.br
.ti -1c
.RI "bool \fBisTimeSync\fP (unsigned long seconds=604800)"
.br
.ti -1c
.RI "time_t \fBgetNtpTime\fP ()"
.br
.ti -1c
.RI "void \fBsendNTPpacket\fP (IPAddress &address)"
.br
.ti -1c
.RI "String \fBformatDigits\fP (int digits)"
.br
.ti -1c
.RI "bool \fBsaveTimeSync\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "unsigned long \fBtimeSync\fP =0"
.br
.ti -1c
.RI "IPAddress \fBtimeServer\fP"
.br
.ti -1c
.RI "WiFiUDP \fBUdp\fP"
.br
.ti -1c
.RI "unsigned int \fBlocalPort\fP =0"
.br
.ti -1c
.RI "byte \fBpacketBuffer\fP [\fBNTP_PACKET_SIZE\fP]"
.br
.ti -1c
.RI "tmElements_t \fBtmSet\fP"
.br
.ti -1c
.RI "DS1337RTC \fBrtc\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class manages the DS1337 RTC \&. 
.PP
Definition at line 52 of file CoolTime\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "void CoolTime::begin ()"
\fBCoolTime::begin()\fP: This method is provided to init the udp connection 
.PP
Definition at line 52 of file CoolTime\&.cpp\&.
.PP
.nf
53 {
54 
55 #if DEBUG == 1 
56 
57     Serial\&.println( F("Entering CoolTime\&.begin()") );
58     Serial\&.println();
59 
60 #endif 
61 
62 
63     Udp\&.begin(localPort);
64     
65     this->update();
66     
67 }
.fi
.SS "bool CoolTime::config ()"
\fBCoolTime::config()\fP: This method is provided to configure the \fBCoolTime\fP object through a configuration file\&.
.PP
\fBReturns:\fP
.RS 4
true if successful,false otherwise 
.RE
.PP

.PP
Definition at line 425 of file CoolTime\&.cpp\&.
.PP
.nf
426 {
427 
428 #if DEBUG == 1 
429 
430     Serial\&.println( F("Enter CoolTime\&.config()") );
431     Serial\&.println();
432 
433 #endif 
434 
435     File rtcConfig = SPIFFS\&.open("/rtcConfig\&.json", "r");
436 
437     if (!rtcConfig) 
438     {
439     
440         Serial\&.println( F("failed to read /rtcConfig\&.json") );
441         Serial\&.println();
442 
443         return(false);
444     }
445     else
446     {
447         size_t size = rtcConfig\&.size();
448         // Allocate a buffer to store contents of the file\&.
449         std::unique_ptr<char[]> buf(new char[size]);
450 
451         rtcConfig\&.readBytes(buf\&.get(), size);
452         DynamicJsonBuffer jsonBuffer;
453         JsonObject& json = jsonBuffer\&.parseObject(buf\&.get());
454         if (!json\&.success()) 
455         {
456 
457             Serial\&.println( F("failed to parse rtcConfig json") );
458             Serial\&.println();
459 
460             return(false);
461         } 
462         else
463         {  
464         
465         #if DEBUG == 1 
466 
467             Serial\&.println( F("configuration json is :") );
468             json\&.printTo(Serial);
469             Serial\&.println();
470 
471             Serial\&.print(F("jsonBuffer size: "));
472             Serial\&.println(jsonBuffer\&.size());
473             Serial\&.println();
474 
475 
476         #endif
477 
478             String ip;
479             
480             if(json["timeServer"]\&.success() )
481             {           
482                  ip=json["timeServer"]\&.as<String>();
483                 this->timeServer\&.fromString(ip);
484                 
485             }
486             else
487             {
488                 this->timeServer=this->timeServer;
489             }
490             json["timeServer"]=ip;
491             
492             if(json["localPort"]\&.success() )
493             {                       
494                 this->localPort=json["localPort"];
495             }
496             else
497             {
498                 this->localPort=this->localPort;
499             }
500             json["localPort"]=this->localPort;
501 
502 
503             if( json["timeSync"]\&.success() )
504             {
505 
506                 this->timeSync=json["timeSync"];
507             }
508             else
509             {
510                 this->timeSync=this->timeSync;
511             }
512             json["timeSync"]=this->timeSync;
513 
514             rtcConfig\&.close();
515             rtcConfig= SPIFFS\&.open("/rtcConfig\&.json", "w");
516             
517             if(!rtcConfig)
518             {
519             
520             #if DEBUG == 1
521 
522                 Serial\&.println( F("failed to write to /rtcConfig\&.json") );
523                 Serial\&.println();
524             
525             #endif
526 
527                 return(false);
528             }
529             
530             json\&.printTo(rtcConfig);
531             rtcConfig\&.close();
532 
533         #if DEBUG == 1 
534 
535             Serial\&.println( F("configuration is :") );
536             json\&.printTo(Serial);
537             Serial\&.println();
538         
539         #endif
540         
541             return(true); 
542         }
543     }   
544 
545 
546 
547 }
.fi
.SS "void CoolTime::config (IPAddress timeServer, unsigned int localPort)"
CoolTime::config(Time server IP , udp Port): This method is provided to do manual configuration\&. 
.PP
Definition at line 402 of file CoolTime\&.cpp\&.
.PP
.nf
403 {
404 
405 #if DEBUG == 1 
406 
407     Serial\&.println( F("Enter CoomTime\&.config() , no SPIFFS variant ") );
408     Serial\&.println();
409 
410 #endif 
411 
412     this->timeServer=timeServer;
413     this->localPort=localPort;
414     
415 } 
.fi
.SS "String CoolTime::formatDigits (int digits)"
CoolTime::printDigits(digit)
.PP
utility method for digital clock display adds leading 0
.PP
\fBReturns:\fP
.RS 4
formatted string of the input digit 
.RE
.PP

.PP
Definition at line 706 of file CoolTime\&.cpp\&.
.PP
.nf
707 {
708 
709 #if DEBUG == 1 
710 
711     Serial\&.println( F("Entering CoolTime\&.formatDigits()") );
712     Serial\&.println();
713 
714 #endif 
715 
716     if(digits < 10)
717     {
718     
719     #if DEBUG == 1
720 
721         Serial\&.println( F("output digit : ") );
722         Serial\&.println( String("0") + String(digits) );
723 
724     #endif
725 
726         return( String("0") + String(digits) );
727     }
728     
729 #if DEBUG == 1 
730 
731     Serial\&.println( F("output digit : ") );
732     Serial\&.println(digits);
733 
734 #endif
735 
736     return( String(digits) );
737 }
.fi
.SS "String CoolTime::getESDate ()"
CoolTime::getESD(): This method is provided to return an Elastic Search compatible date Format
.PP
\fBReturns:\fP
.RS 4
date String in Elastic Search format 
.RE
.PP

.PP
Definition at line 204 of file CoolTime\&.cpp\&.
.PP
.nf
205 {
206 
207 #if DEBUG == 1 
208 
209     Serial\&.println( F("Entering CoolTime\&.getESDate()") );
210     Serial\&.println();
211 
212 #endif 
213 
214     tmElements_t tm=this->getTimeDate();
215 
216     //"20yy-mm-ddT00:00:00Z"
217     String elasticSearchString =String(tm\&.Year+1970)+"-"+this->formatDigits(tm\&.Month)+"-";
218 
219     elasticSearchString +=this->formatDigits(tm\&.Day)+"T"+this->formatDigits(tm\&.Hour)+":";
220     
221     elasticSearchString +=this->formatDigits(tm\&.Minute)+":"+this->formatDigits(tm\&.Second)+"Z";
222 
223 #if DEBUG == 1 
224 
225     Serial\&.print( F("elastic Search date : ") );
226     Serial\&.println(elasticSearchString);
227     Serial\&.println();
228 
229 #endif
230 
231     return (elasticSearchString);
232 }
.fi
.SS "unsigned long CoolTime::getLastSyncTime ()"
\fBCoolTime::getLastSyncTime()\fP: This method is provided to get the last time we syncronised the time
.PP
\fBReturns:\fP
.RS 4
unsigned long representation of last syncronisation time in seconds 
.RE
.PP

.PP
Definition at line 242 of file CoolTime\&.cpp\&.
.PP
.nf
243 {
244 
245 #if DEBUG == 1 
246 
247     Serial\&.println( F("Entering CoolTime\&.getLastSyncTime()") );
248     Serial\&.println();
249     
250     Serial\&.print( F("last sync time : ") );
251     Serial\&.println(this->timeSync);
252 
253 #endif 
254 
255     return(this->timeSync);
256 }
.fi
.SS "time_t CoolTime::getNtpTime ()"
CoolTime::getNtopTime(): This method is provided to get the Time through an NTP request to a Time Server
.PP
\fBReturns:\fP
.RS 4
a time_t (unsigned long ) timestamp in seconds 
.RE
.PP

.PP
Definition at line 308 of file CoolTime\&.cpp\&.
.PP
.nf
309 {
310 
311 #if DEBUG == 1 
312 
313     Serial\&.println( F("Entering CoolTime\&.getNtpTime()") );
314     Serial\&.println();
315 
316 #endif 
317 
318     while (Udp\&.parsePacket() > 0) ; // discard any previously received packets
319 
320     Serial\&.println( F("Transmit NTP Request") );
321 
322     sendNTPpacket(timeServer);
323 
324     uint32_t beginWait = millis();
325 
326     while (millis() - beginWait < 1500) 
327     {
328         int size = Udp\&.parsePacket();
329         if (size >= NTP_PACKET_SIZE) 
330         {
331         
332         #if DEBUG == 1
333 
334             Serial\&.println( F("Receive NTP Response") );
335         
336         #endif
337 
338             Udp\&.read(packetBuffer, NTP_PACKET_SIZE);  // read packet into the buffer
339             unsigned long secsSince1900;
340             // convert four bytes starting at location 40 to a long integer
341             secsSince1900 =  (unsigned long)packetBuffer[40] << 24;
342             secsSince1900 |= (unsigned long)packetBuffer[41] << 16;
343             secsSince1900 |= (unsigned long)packetBuffer[42] << 8;
344             secsSince1900 |= (unsigned long)packetBuffer[43];
345         
346         #if DEBUG == 1 
347     
348             Serial\&.print( F("received unix time : ") );
349             Serial\&.println(secsSince1900 - 2208988800UL);
350             Serial\&.println();
351 
352         #endif 
353 
354             return secsSince1900 - 2208988800UL ;
355         }
356     }
357     
358     Serial\&.println( F("No NTP Response :-(") );
359 
360     return 0; // return 0 if unable to get the time
361 }
.fi
.SS "tmElements_t CoolTime::getTimeDate ()"
\fBCoolTime::getTimeDate()\fP: This method is provided to get the RTC Time
.PP
\fBReturns:\fP
.RS 4
a tmElements_t structre that has the time in it 
.RE
.PP

.PP
Definition at line 161 of file CoolTime\&.cpp\&.
.PP
.nf
162 {
163 
164 #if DEBUG == 1 
165     
166     Serial\&.println( F("Entering CoolTime\&.getTimeDate()") );
167     Serial\&.println();
168 
169 #endif
170 
171     tmElements_t tm;
172     time_t timeDate = this->rtc\&.get(CLOCK_ADDRESS);
173     breakTime(timeDate,tm);
174 
175 #if DEBUG == 1
176     
177     Serial\&.print( F("time is : ") );
178     Serial\&.print(tm\&.Year+ 1970 );
179     Serial\&.print( F("-") );
180     Serial\&.print( this->formatDigits( tm\&.Month ) );
181     Serial\&.print( F("-") );
182     Serial\&.print( this->formatDigits( tm\&.Day ) );
183     Serial\&.print( F("T") );
184     Serial\&.print( this->formatDigits( tm\&.Hour ) );
185     Serial\&.print( F(":") );
186     Serial\&.print( this->formatDigits( tm\&.Minute ) );
187     Serial\&.print( F(":") );
188     Serial\&.print( this->formatDigits( tm\&.Second ) );
189     Serial\&.print( F("Z") );
190 
191 #endif
192     
193     return(tm);
194 }
.fi
.SS "bool CoolTime::isTimeSync (unsigned long seconds = \fC604800\fP)"
CoolTime::isTimeSync( time in seconds): This method is provided to test if the time is syncronised or not\&. By default we test once per week\&.
.PP
\fBReturns:\fP
.RS 4
true if time is syncronised,false otherwise 
.RE
.PP

.PP
Definition at line 268 of file CoolTime\&.cpp\&.
.PP
.nf
269 {
270 
271 #if DEBUG == 1
272 
273     Serial\&.println( F("Entering CoolTime\&.isTimeSync() ") );
274     Serial\&.println();
275 
276 #endif 
277 
278 #if DEBUG == 0
279 
280     Serial\&.println( F("Check if Clock is ok and in sync\&.\&.\&."));
281 
282 #endif
283 
284     //default is once per week we try to get a time update
285     if( ( RTC\&.get(CLOCK_ADDRESS) - this->getLastSyncTime() ) > ( seconds ) ) 
286     {
287 
288         Serial\&.println( F("time is not syncronised ") );
289     
290         return(false);  
291     }
292     
293     Serial\&.println( F("time is syncronised : OK") );
294     Serial\&.println();
295 
296     return(true);
297 }
.fi
.SS "void CoolTime::printConf ()"
\fBCoolTime::printConf()\fP: This method is provided to print the \fBCoolTime\fP configuration to the Serial Monitor 
.PP
Definition at line 679 of file CoolTime\&.cpp\&.
.PP
.nf
680 {
681 
682 #if DEBUG == 1
683 
684     Serial\&.println( F("Entering CoolTime\&.printConf()") );
685     Serial\&.println();
686 
687 #endif 
688 
689     Serial\&.println("RTC Configuration") ;
690 
691     Serial\&.print("timeServer : ");
692     Serial\&.println(timeServer);
693     
694     Serial\&.print("localPort : :");
695     Serial\&.println(localPort);
696 }
.fi
.SS "bool CoolTime::saveTimeSync ()"
\fBCoolTime::saveTimeSync()\fP This method is provided to save the last sync time in the SPIFFS\&.
.PP
\fBReturns:\fP
.RS 4
true if successful,false otherwise 
.RE
.PP

.PP
Definition at line 558 of file CoolTime\&.cpp\&.
.PP
.nf
559 {
560     Serial\&.println( F("Enter CoolTime\&.saveTimeSync()") );
561     Serial\&.println();
562 
563     File rtcConfig = SPIFFS\&.open("/rtcConfig\&.json", "r");
564 
565     if (!rtcConfig) 
566     {
567         Serial\&.println( F("failed to read /rtcConfig\&.json") );
568         Serial\&.println();
569 
570         return(false);
571     }
572     else
573     {
574         size_t size = rtcConfig\&.size();
575         // Allocate a buffer to store contents of the file\&.
576         std::unique_ptr<char[]> buf(new char[size]);
577 
578         rtcConfig\&.readBytes(buf\&.get(), size);
579         DynamicJsonBuffer jsonBuffer;
580         JsonObject& json = jsonBuffer\&.parseObject(buf\&.get());
581         if (!json\&.success()) 
582         {
583 
584             Serial\&.println( F("failed to parse json") );
585             Serial\&.println();
586 
587             return(false);
588         } 
589         else
590         {
591 
592         #if DEBUG == 1
593     
594             Serial\&.println( F("configuration json is :") );
595             json\&.printTo(Serial);
596             Serial\&.println();
597 
598             Serial\&.print(F("jsonBuffer size: "));
599             Serial\&.println(jsonBuffer\&.size());
600             Serial\&.println();
601 
602         #endif
603 
604             String ip;
605                     
606             if(json["timeServer"]\&.success() )
607             {           
608                  ip=json["timeServer"]\&.as<String>();
609                 this->timeServer\&.fromString(ip);
610                 
611             }
612             else
613             {
614                 this->timeServer=this->timeServer;
615             }
616             json["timeServer"]=ip;
617             
618             if(json["localPort"]\&.success() )
619             {                       
620                 this->localPort=json["localPort"];
621             }
622             else
623             {
624                 this->localPort=this->localPort;
625             }
626             json["localPort"]=this->localPort;
627 
628 
629             if( json["timeSync"]\&.success() )
630             {
631                 json["timeSync"]=this->timeSync;
632             }
633             else
634             {
635                 this->timeSync=this->timeSync;
636             }
637             json["timeSync"]=this->timeSync;
638 
639 
640             rtcConfig\&.close();
641             rtcConfig= SPIFFS\&.open("/rtcConfig\&.json", "w");
642             
643             if(!rtcConfig)
644             {
645             #if DEBUG == 1
646 
647                 Serial\&.println( F("failed to write timeSync to /rtcConfig\&.json") );
648                 Serial\&.println();
649             
650             #endif
651 
652                 return(false);
653             }
654             
655             json\&.printTo(rtcConfig);
656             rtcConfig\&.close();
657     
658         #if DEBUG == 1
659 
660             Serial\&.println( F("configuration is :") );
661             json\&.printTo(Serial);
662             Serial\&.println();
663         
664         #endif
665             return(true); 
666         }
667     }   
668 
669 
670 
671 }
.fi
.SS "void CoolTime::sendNTPpacket (IPAddress & address)"
CoolTime::sendNTPpacket( Time Server IP address): This method is provided to send an NTP request to the time server at the given address 
.PP
Definition at line 368 of file CoolTime\&.cpp\&.
.PP
.nf
369 {
370 
371 #if DEBUG == 1 
372 
373     Serial\&.println( F("Enter CoolTime\&.sendNTPpacket()") );
374     Serial\&.println();
375 
376 #endif
377 
378     memset(packetBuffer, 0, NTP_PACKET_SIZE);
379     // Initialize values needed to form NTP request
380     // (see URL above for details on the packets)
381     packetBuffer[0] = 0b11100011;   // LI, Version, Mode
382     packetBuffer[1] = 0;     // Stratum, or type of clock
383     packetBuffer[2] = 6;     // Polling Interval
384     packetBuffer[3] = 0xEC;  // Peer Clock Precision
385     // 8 bytes of zero for Root Delay & Root Dispersion
386     packetBuffer[12]  = 49;
387     packetBuffer[13]  = 0x4E;
388     packetBuffer[14]  = 49;
389     packetBuffer[15]  = 52;
390     // all NTP fields have been given values, now
391     // you can send a packet requesting a timestamp:                 
392     Udp\&.beginPacket(address, 123); //NTP requests are to port 123
393     Udp\&.write(packetBuffer, NTP_PACKET_SIZE);
394     Udp\&.endPacket(); 
395 }
.fi
.SS "void CoolTime::setDateTime (int year, int month, int day, int hour, int minutes, int seconds)"
CoolTime::setDateTime(year,month,dat,hour,minutes,seconds): This method is provided to manually set the RTc Time 
.PP
Definition at line 107 of file CoolTime\&.cpp\&.
.PP
.nf
108 { 
109 
110 #if DEBUG == 1
111 
112     Serial\&.println( F("Entering CoolTime\&.setDateTime") );
113     Serial\&.println();
114 
115 #endif
116 
117     tmElements_t tm;
118     tm\&.Second=seconds; 
119     tm\&.Minute=minutes; 
120     tm\&.Hour=hour; 
121     tm\&.Day=day;
122     tm\&.Month=month; 
123     tm\&.Year=year;
124     
125     this->rtc\&.set(makeTime(tm),CLOCK_ADDRESS);   
126 
127 #if DEBUG == 1
128 
129     Serial\&.print( F("setting time to : ") );//"20yy-mm-ddT00:00:00Z
130 
131     Serial\&.print(tm\&.Year);
132     Serial\&.print( F("-") );
133     Serial\&.print( this->formatDigits( tm\&.Month ) );
134     Serial\&.print( F("-") );
135     Serial\&.print( this->formatDigits( tm\&.Day ) );
136     Serial\&.print( F("T") );
137     Serial\&.print( this->formatDigits( tm\&.Hour ) );
138     Serial\&.print( F(":") );
139     Serial\&.print( this->formatDigits( tm\&.Minute ) );
140     Serial\&.print( F(":") );
141     Serial\&.print( this->formatDigits( tm\&.Second ) );
142     Serial\&.print( F("Z") );
143 
144     Serial\&.println();
145     
146     Serial\&.print( F("time set to : ") );
147     Serial\&.println(this->getESDate());
148     Serial\&.println();
149 
150 #endif
151 
152 }
.fi
.SS "void CoolTime::update ()"
\fBCoolTime::update()\fP: This method is provided to correct the rtc Time when it drifts,once every week\&. 
.PP
Definition at line 74 of file CoolTime\&.cpp\&.
.PP
.nf
75 {
76 
77 #if DEBUG == 1
78 
79     Serial\&.println( F("Entering CoolTime\&.update()") );
80     Serial\&.println();
81 
82 #endif 
83 
84     if( !( this->isTimeSync() ) )
85     {
86     
87     #if DEBUG == 1
88 
89         Serial\&.println( F("waiting for sync") );
90         Serial\&.println();
91 
92     #endif 
93 
94         this->timeSync=this->getNtpTime();
95         breakTime(this->getNtpTime(), this->tmSet);
96         this->rtc\&.set(makeTime(this->tmSet), CLOCK_ADDRESS); // set the clock
97         this->saveTimeSync();
98     }
99     
100 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "unsigned int CoolTime::localPort =0\fC [private]\fP"

.PP
Definition at line 92 of file CoolTime\&.h\&.
.SS "byte CoolTime::packetBuffer[\fBNTP_PACKET_SIZE\fP]\fC [private]\fP"

.PP
Definition at line 94 of file CoolTime\&.h\&.
.SS "DS1337RTC CoolTime::rtc\fC [private]\fP"

.PP
Definition at line 98 of file CoolTime\&.h\&.
.SS "IPAddress CoolTime::timeServer\fC [private]\fP"

.PP
Definition at line 88 of file CoolTime\&.h\&.
.SS "unsigned long CoolTime::timeSync =0\fC [private]\fP"

.PP
Definition at line 86 of file CoolTime\&.h\&.
.SS "tmElements_t CoolTime::tmSet\fC [private]\fP"

.PP
Definition at line 96 of file CoolTime\&.h\&.
.SS "WiFiUDP CoolTime::Udp\fC [private]\fP"

.PP
Definition at line 90 of file CoolTime\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolBoardAPI from the source code\&.
