.TH "CoolTime" 3 "Wed Aug 30 2017" "CoolBoardAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoolTime \- This class manages the DS1337 RTC \&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolTime\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBbegin\fP ()"
.br
.ti -1c
.RI "void \fBupdate\fP ()"
.br
.ti -1c
.RI "bool \fBconfig\fP ()"
.br
.ti -1c
.RI "void \fBconfig\fP (IPAddress \fBtimeServer\fP, unsigned int \fBlocalPort\fP)"
.br
.ti -1c
.RI "void \fBprintConf\fP ()"
.br
.ti -1c
.RI "void \fBsetDateTime\fP (int year, int month, int day, int hour, int minutes, int seconds)"
.br
.ti -1c
.RI "tmElements_t \fBgetTimeDate\fP ()"
.br
.ti -1c
.RI "String \fBgetESDate\fP ()"
.br
.ti -1c
.RI "unsigned long \fBgetLastSyncTime\fP ()"
.br
.ti -1c
.RI "bool \fBisTimeSync\fP (unsigned long seconds=604800)"
.br
.ti -1c
.RI "time_t \fBgetNtpTime\fP ()"
.br
.ti -1c
.RI "void \fBsendNTPpacket\fP (IPAddress &address)"
.br
.ti -1c
.RI "String \fBformatDigits\fP (int digits)"
.br
.ti -1c
.RI "bool \fBsaveTimeSync\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "unsigned long \fBtimeSync\fP =0"
.br
.ti -1c
.RI "IPAddress \fBtimeServer\fP"
.br
.ti -1c
.RI "WiFiUDP \fBUdp\fP"
.br
.ti -1c
.RI "unsigned int \fBlocalPort\fP =0"
.br
.ti -1c
.RI "byte \fBpacketBuffer\fP [\fBNTP_PACKET_SIZE\fP]"
.br
.ti -1c
.RI "tmElements_t \fBtmSet\fP"
.br
.ti -1c
.RI "DS1337RTC \fBrtc\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class manages the DS1337 RTC \&. 
.PP
Definition at line 53 of file CoolTime\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "void CoolTime::begin ()"
\fBCoolTime::begin()\fP: This method is provided to init the udp connection 
.PP
Definition at line 53 of file CoolTime\&.cpp\&.
.PP
.nf
54 {
55 
56 #if DEBUG == 1 
57 
58     Serial\&.println( F("Entering CoolTime\&.begin()") );
59     Serial\&.println();
60 
61 #endif 
62 
63 
64     Udp\&.begin(localPort);
65     
66     this->update();
67     
68 }
.fi
.SS "bool CoolTime::config ()"
\fBCoolTime::config()\fP: This method is provided to configure the \fBCoolTime\fP object through a configuration file\&.
.PP
\fBReturns:\fP
.RS 4
true if successful,false otherwise 
.RE
.PP

.PP
Definition at line 426 of file CoolTime\&.cpp\&.
.PP
.nf
427 {
428 
429 #if DEBUG == 1 
430 
431     Serial\&.println( F("Enter CoolTime\&.config()") );
432     Serial\&.println();
433 
434 #endif 
435 
436     File rtcConfig = SPIFFS\&.open("/rtcConfig\&.json", "r");
437 
438     if (!rtcConfig) 
439     {
440     
441         Serial\&.println( F("failed to read /rtcConfig\&.json") );
442         Serial\&.println();
443 
444         return(false);
445     }
446     else
447     {
448         size_t size = rtcConfig\&.size();
449         // Allocate a buffer to store contents of the file\&.
450         std::unique_ptr<char[]> buf(new char[size]);
451 
452         rtcConfig\&.readBytes(buf\&.get(), size);
453         DynamicJsonBuffer jsonBuffer;
454         JsonObject& json = jsonBuffer\&.parseObject(buf\&.get());
455         if (!json\&.success()) 
456         {
457 
458             Serial\&.println( F("failed to parse rtcConfig json") );
459             Serial\&.println();
460 
461             return(false);
462         } 
463         else
464         {  
465         
466         #if DEBUG == 1 
467 
468             Serial\&.println( F("configuration json is :") );
469             json\&.printTo(Serial);
470             Serial\&.println();
471 
472             Serial\&.print(F("jsonBuffer size: "));
473             Serial\&.println(jsonBuffer\&.size());
474             Serial\&.println();
475 
476 
477         #endif
478 
479             String ip;
480             
481             if(json["timeServer"]\&.success() )
482             {           
483                  ip=json["timeServer"]\&.as<String>();
484                 this->timeServer\&.fromString(ip);
485                 
486             }
487             else
488             {
489                 this->timeServer=this->timeServer;
490             }
491             json["timeServer"]=ip;
492             
493             if(json["localPort"]\&.success() )
494             {                       
495                 this->localPort=json["localPort"];
496             }
497             else
498             {
499                 this->localPort=this->localPort;
500             }
501             json["localPort"]=this->localPort;
502 
503 
504             if( json["timeSync"]\&.success() )
505             {
506 
507                 this->timeSync=json["timeSync"];
508             }
509             else
510             {
511                 this->timeSync=this->timeSync;
512             }
513             json["timeSync"]=this->timeSync;
514 
515             rtcConfig\&.close();
516             rtcConfig= SPIFFS\&.open("/rtcConfig\&.json", "w");
517             
518             if(!rtcConfig)
519             {
520             
521             #if DEBUG == 1
522 
523                 Serial\&.println( F("failed to write to /rtcConfig\&.json") );
524                 Serial\&.println();
525             
526             #endif
527 
528                 return(false);
529             }
530             
531             json\&.printTo(rtcConfig);
532             rtcConfig\&.close();
533 
534         #if DEBUG == 1 
535 
536             Serial\&.println( F("configuration is :") );
537             json\&.printTo(Serial);
538             Serial\&.println();
539         
540         #endif
541         
542             return(true); 
543         }
544     }   
545 
546 
547 
548 }
.fi
.SS "void CoolTime::config (IPAddress timeServer, unsigned int localPort)"
CoolTime::config(Time server IP , udp Port): This method is provided to do manual configuration\&. 
.PP
Definition at line 403 of file CoolTime\&.cpp\&.
.PP
.nf
404 {
405 
406 #if DEBUG == 1 
407 
408     Serial\&.println( F("Enter CoomTime\&.config() , no SPIFFS variant ") );
409     Serial\&.println();
410 
411 #endif 
412 
413     this->timeServer=timeServer;
414     this->localPort=localPort;
415     
416 } 
.fi
.SS "String CoolTime::formatDigits (int digits)"
CoolTime::printDigits(digit)
.PP
utility method for digital clock display adds leading 0
.PP
\fBReturns:\fP
.RS 4
formatted string of the input digit 
.RE
.PP

.PP
Definition at line 707 of file CoolTime\&.cpp\&.
.PP
.nf
708 {
709 
710 #if DEBUG == 1 
711 
712     Serial\&.println( F("Entering CoolTime\&.formatDigits()") );
713     Serial\&.println();
714 
715 #endif 
716 
717     if(digits < 10)
718     {
719     
720     #if DEBUG == 1
721 
722         Serial\&.println( F("output digit : ") );
723         Serial\&.println( String("0") + String(digits) );
724 
725     #endif
726 
727         return( String("0") + String(digits) );
728     }
729     
730 #if DEBUG == 1 
731 
732     Serial\&.println( F("output digit : ") );
733     Serial\&.println(digits);
734 
735 #endif
736 
737     return( String(digits) );
738 }
.fi
.SS "String CoolTime::getESDate ()"
CoolTime::getESD(): This method is provided to return an Elastic Search compatible date Format
.PP
\fBReturns:\fP
.RS 4
date String in Elastic Search format 
.RE
.PP

.PP
Definition at line 205 of file CoolTime\&.cpp\&.
.PP
.nf
206 {
207 
208 #if DEBUG == 1 
209 
210     Serial\&.println( F("Entering CoolTime\&.getESDate()") );
211     Serial\&.println();
212 
213 #endif 
214 
215     tmElements_t tm=this->getTimeDate();
216 
217     //"20yy-mm-ddT00:00:00Z"
218     String elasticSearchString =String(tm\&.Year+1970)+"-"+this->formatDigits(tm\&.Month)+"-";
219 
220     elasticSearchString +=this->formatDigits(tm\&.Day)+"T"+this->formatDigits(tm\&.Hour)+":";
221     
222     elasticSearchString +=this->formatDigits(tm\&.Minute)+":"+this->formatDigits(tm\&.Second)+"Z";
223 
224 #if DEBUG == 1 
225 
226     Serial\&.print( F("elastic Search date : ") );
227     Serial\&.println(elasticSearchString);
228     Serial\&.println();
229 
230 #endif
231 
232     return (elasticSearchString);
233 }
.fi
.SS "unsigned long CoolTime::getLastSyncTime ()"
\fBCoolTime::getLastSyncTime()\fP: This method is provided to get the last time we syncronised the time
.PP
\fBReturns:\fP
.RS 4
unsigned long representation of last syncronisation time in seconds 
.RE
.PP

.PP
Definition at line 243 of file CoolTime\&.cpp\&.
.PP
.nf
244 {
245 
246 #if DEBUG == 1 
247 
248     Serial\&.println( F("Entering CoolTime\&.getLastSyncTime()") );
249     Serial\&.println();
250     
251     Serial\&.print( F("last sync time : ") );
252     Serial\&.println(this->timeSync);
253 
254 #endif 
255 
256     return(this->timeSync);
257 }
.fi
.SS "time_t CoolTime::getNtpTime ()"
CoolTime::getNtopTime(): This method is provided to get the Time through an NTP request to a Time Server
.PP
\fBReturns:\fP
.RS 4
a time_t (unsigned long ) timestamp in seconds 
.RE
.PP

.PP
Definition at line 309 of file CoolTime\&.cpp\&.
.PP
.nf
310 {
311 
312 #if DEBUG == 1 
313 
314     Serial\&.println( F("Entering CoolTime\&.getNtpTime()") );
315     Serial\&.println();
316 
317 #endif 
318 
319     while (Udp\&.parsePacket() > 0) ; // discard any previously received packets
320 
321     Serial\&.println( F("Transmit NTP Request") );
322 
323     sendNTPpacket(timeServer);
324 
325     uint32_t beginWait = millis();
326 
327     while (millis() - beginWait < 1500) 
328     {
329         int size = Udp\&.parsePacket();
330         if (size >= NTP_PACKET_SIZE) 
331         {
332         
333         #if DEBUG == 1
334 
335             Serial\&.println( F("Receive NTP Response") );
336         
337         #endif
338 
339             Udp\&.read(packetBuffer, NTP_PACKET_SIZE);  // read packet into the buffer
340             unsigned long secsSince1900;
341             // convert four bytes starting at location 40 to a long integer
342             secsSince1900 =  (unsigned long)packetBuffer[40] << 24;
343             secsSince1900 |= (unsigned long)packetBuffer[41] << 16;
344             secsSince1900 |= (unsigned long)packetBuffer[42] << 8;
345             secsSince1900 |= (unsigned long)packetBuffer[43];
346         
347         #if DEBUG == 1 
348     
349             Serial\&.print( F("received unix time : ") );
350             Serial\&.println(secsSince1900 - 2208988800UL);
351             Serial\&.println();
352 
353         #endif 
354 
355             return secsSince1900 - 2208988800UL ;
356         }
357     }
358     
359     Serial\&.println( F("No NTP Response :-(") );
360 
361     return 0; // return 0 if unable to get the time
362 }
.fi
.SS "tmElements_t CoolTime::getTimeDate ()"
\fBCoolTime::getTimeDate()\fP: This method is provided to get the RTC Time
.PP
\fBReturns:\fP
.RS 4
a tmElements_t structre that has the time in it 
.RE
.PP

.PP
Definition at line 162 of file CoolTime\&.cpp\&.
.PP
.nf
163 {
164 
165 #if DEBUG == 1 
166     
167     Serial\&.println( F("Entering CoolTime\&.getTimeDate()") );
168     Serial\&.println();
169 
170 #endif
171 
172     tmElements_t tm;
173     time_t timeDate = this->rtc\&.get(CLOCK_ADDRESS);
174     breakTime(timeDate,tm);
175 
176 #if DEBUG == 1
177     
178     Serial\&.print( F("time is : ") );
179     Serial\&.print(tm\&.Year+ 1970 );
180     Serial\&.print( F("-") );
181     Serial\&.print( this->formatDigits( tm\&.Month ) );
182     Serial\&.print( F("-") );
183     Serial\&.print( this->formatDigits( tm\&.Day ) );
184     Serial\&.print( F("T") );
185     Serial\&.print( this->formatDigits( tm\&.Hour ) );
186     Serial\&.print( F(":") );
187     Serial\&.print( this->formatDigits( tm\&.Minute ) );
188     Serial\&.print( F(":") );
189     Serial\&.print( this->formatDigits( tm\&.Second ) );
190     Serial\&.print( F("Z") );
191 
192 #endif
193     
194     return(tm);
195 }
.fi
.SS "bool CoolTime::isTimeSync (unsigned long seconds = \fC604800\fP)"
CoolTime::isTimeSync( time in seconds): This method is provided to test if the time is syncronised or not\&. By default we test once per week\&.
.PP
\fBReturns:\fP
.RS 4
true if time is syncronised,false otherwise 
.RE
.PP

.PP
Definition at line 269 of file CoolTime\&.cpp\&.
.PP
.nf
270 {
271 
272 #if DEBUG == 1
273 
274     Serial\&.println( F("Entering CoolTime\&.isTimeSync() ") );
275     Serial\&.println();
276 
277 #endif 
278 
279 #if DEBUG == 0
280 
281     Serial\&.println( F("Check if Clock is ok and in sync\&.\&.\&."));
282 
283 #endif
284 
285     //default is once per week we try to get a time update
286     if( ( RTC\&.get(CLOCK_ADDRESS) - this->getLastSyncTime() ) > ( seconds ) ) 
287     {
288 
289         Serial\&.println( F("time is not syncronised ") );
290     
291         return(false);  
292     }
293     
294     Serial\&.println( F("time is syncronised : OK") );
295     Serial\&.println();
296 
297     return(true);
298 }
.fi
.SS "void CoolTime::printConf ()"
\fBCoolTime::printConf()\fP: This method is provided to print the \fBCoolTime\fP configuration to the Serial Monitor 
.PP
Definition at line 680 of file CoolTime\&.cpp\&.
.PP
.nf
681 {
682 
683 #if DEBUG == 1
684 
685     Serial\&.println( F("Entering CoolTime\&.printConf()") );
686     Serial\&.println();
687 
688 #endif 
689 
690     Serial\&.println("RTC Configuration") ;
691 
692     Serial\&.print("timeServer : ");
693     Serial\&.println(timeServer);
694     
695     Serial\&.print("localPort : :");
696     Serial\&.println(localPort);
697 }
.fi
.SS "bool CoolTime::saveTimeSync ()"
\fBCoolTime::saveTimeSync()\fP This method is provided to save the last sync time in the SPIFFS\&.
.PP
\fBReturns:\fP
.RS 4
true if successful,false otherwise 
.RE
.PP

.PP
Definition at line 559 of file CoolTime\&.cpp\&.
.PP
.nf
560 {
561     Serial\&.println( F("Enter CoolTime\&.saveTimeSync()") );
562     Serial\&.println();
563 
564     File rtcConfig = SPIFFS\&.open("/rtcConfig\&.json", "r");
565 
566     if (!rtcConfig) 
567     {
568         Serial\&.println( F("failed to read /rtcConfig\&.json") );
569         Serial\&.println();
570 
571         return(false);
572     }
573     else
574     {
575         size_t size = rtcConfig\&.size();
576         // Allocate a buffer to store contents of the file\&.
577         std::unique_ptr<char[]> buf(new char[size]);
578 
579         rtcConfig\&.readBytes(buf\&.get(), size);
580         DynamicJsonBuffer jsonBuffer;
581         JsonObject& json = jsonBuffer\&.parseObject(buf\&.get());
582         if (!json\&.success()) 
583         {
584 
585             Serial\&.println( F("failed to parse json") );
586             Serial\&.println();
587 
588             return(false);
589         } 
590         else
591         {
592 
593         #if DEBUG == 1
594     
595             Serial\&.println( F("configuration json is :") );
596             json\&.printTo(Serial);
597             Serial\&.println();
598 
599             Serial\&.print(F("jsonBuffer size: "));
600             Serial\&.println(jsonBuffer\&.size());
601             Serial\&.println();
602 
603         #endif
604 
605             String ip;
606                     
607             if(json["timeServer"]\&.success() )
608             {           
609                  ip=json["timeServer"]\&.as<String>();
610                 this->timeServer\&.fromString(ip);
611                 
612             }
613             else
614             {
615                 this->timeServer=this->timeServer;
616             }
617             json["timeServer"]=ip;
618             
619             if(json["localPort"]\&.success() )
620             {                       
621                 this->localPort=json["localPort"];
622             }
623             else
624             {
625                 this->localPort=this->localPort;
626             }
627             json["localPort"]=this->localPort;
628 
629 
630             if( json["timeSync"]\&.success() )
631             {
632                 json["timeSync"]=this->timeSync;
633             }
634             else
635             {
636                 this->timeSync=this->timeSync;
637             }
638             json["timeSync"]=this->timeSync;
639 
640 
641             rtcConfig\&.close();
642             rtcConfig= SPIFFS\&.open("/rtcConfig\&.json", "w");
643             
644             if(!rtcConfig)
645             {
646             #if DEBUG == 1
647 
648                 Serial\&.println( F("failed to write timeSync to /rtcConfig\&.json") );
649                 Serial\&.println();
650             
651             #endif
652 
653                 return(false);
654             }
655             
656             json\&.printTo(rtcConfig);
657             rtcConfig\&.close();
658     
659         #if DEBUG == 1
660 
661             Serial\&.println( F("configuration is :") );
662             json\&.printTo(Serial);
663             Serial\&.println();
664         
665         #endif
666             return(true); 
667         }
668     }   
669 
670 
671 
672 }
.fi
.SS "void CoolTime::sendNTPpacket (IPAddress & address)"
CoolTime::sendNTPpacket( Time Server IP address): This method is provided to send an NTP request to the time server at the given address 
.PP
Definition at line 369 of file CoolTime\&.cpp\&.
.PP
.nf
370 {
371 
372 #if DEBUG == 1 
373 
374     Serial\&.println( F("Enter CoolTime\&.sendNTPpacket()") );
375     Serial\&.println();
376 
377 #endif
378 
379     memset(packetBuffer, 0, NTP_PACKET_SIZE);
380     // Initialize values needed to form NTP request
381     // (see URL above for details on the packets)
382     packetBuffer[0] = 0b11100011;   // LI, Version, Mode
383     packetBuffer[1] = 0;     // Stratum, or type of clock
384     packetBuffer[2] = 6;     // Polling Interval
385     packetBuffer[3] = 0xEC;  // Peer Clock Precision
386     // 8 bytes of zero for Root Delay & Root Dispersion
387     packetBuffer[12]  = 49;
388     packetBuffer[13]  = 0x4E;
389     packetBuffer[14]  = 49;
390     packetBuffer[15]  = 52;
391     // all NTP fields have been given values, now
392     // you can send a packet requesting a timestamp:                 
393     Udp\&.beginPacket(address, 123); //NTP requests are to port 123
394     Udp\&.write(packetBuffer, NTP_PACKET_SIZE);
395     Udp\&.endPacket(); 
396 }
.fi
.SS "void CoolTime::setDateTime (int year, int month, int day, int hour, int minutes, int seconds)"
CoolTime::setDateTime(year,month,dat,hour,minutes,seconds): This method is provided to manually set the RTc Time 
.PP
Definition at line 108 of file CoolTime\&.cpp\&.
.PP
.nf
109 { 
110 
111 #if DEBUG == 1
112 
113     Serial\&.println( F("Entering CoolTime\&.setDateTime") );
114     Serial\&.println();
115 
116 #endif
117 
118     tmElements_t tm;
119     tm\&.Second=seconds; 
120     tm\&.Minute=minutes; 
121     tm\&.Hour=hour; 
122     tm\&.Day=day;
123     tm\&.Month=month; 
124     tm\&.Year=year;
125     
126     this->rtc\&.set(makeTime(tm),CLOCK_ADDRESS);   
127 
128 #if DEBUG == 1
129 
130     Serial\&.print( F("setting time to : ") );//"20yy-mm-ddT00:00:00Z
131 
132     Serial\&.print(tm\&.Year);
133     Serial\&.print( F("-") );
134     Serial\&.print( this->formatDigits( tm\&.Month ) );
135     Serial\&.print( F("-") );
136     Serial\&.print( this->formatDigits( tm\&.Day ) );
137     Serial\&.print( F("T") );
138     Serial\&.print( this->formatDigits( tm\&.Hour ) );
139     Serial\&.print( F(":") );
140     Serial\&.print( this->formatDigits( tm\&.Minute ) );
141     Serial\&.print( F(":") );
142     Serial\&.print( this->formatDigits( tm\&.Second ) );
143     Serial\&.print( F("Z") );
144 
145     Serial\&.println();
146     
147     Serial\&.print( F("time set to : ") );
148     Serial\&.println(this->getESDate());
149     Serial\&.println();
150 
151 #endif
152 
153 }
.fi
.SS "void CoolTime::update ()"
\fBCoolTime::update()\fP: This method is provided to correct the rtc Time when it drifts,once every week\&. 
.PP
Definition at line 75 of file CoolTime\&.cpp\&.
.PP
.nf
76 {
77 
78 #if DEBUG == 1
79 
80     Serial\&.println( F("Entering CoolTime\&.update()") );
81     Serial\&.println();
82 
83 #endif 
84 
85     if( !( this->isTimeSync() ) )
86     {
87     
88     #if DEBUG == 1
89 
90         Serial\&.println( F("waiting for sync") );
91         Serial\&.println();
92 
93     #endif 
94 
95         this->timeSync=this->getNtpTime();
96         breakTime(this->getNtpTime(), this->tmSet);
97         this->rtc\&.set(makeTime(this->tmSet), CLOCK_ADDRESS); // set the clock
98         this->saveTimeSync();
99     }
100     
101 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "unsigned int CoolTime::localPort =0\fC [private]\fP"
port number for UDP packets 
.PP
Definition at line 106 of file CoolTime\&.h\&.
.SS "byte CoolTime::packetBuffer[\fBNTP_PACKET_SIZE\fP]\fC [private]\fP"
UDP buffer to hold incoming & outgoing packets 
.PP
Definition at line 112 of file CoolTime\&.h\&.
.SS "DS1337RTC CoolTime::rtc\fC [private]\fP"
RTC instance 
.PP
Definition at line 122 of file CoolTime\&.h\&.
.SS "IPAddress CoolTime::timeServer\fC [private]\fP"
NTP Server IP Address 
.PP
Definition at line 96 of file CoolTime\&.h\&.
.SS "unsigned long CoolTime::timeSync =0\fC [private]\fP"
last Time the RTC syncronised with the NTP server unix Time 
.PP
Definition at line 91 of file CoolTime\&.h\&.
.SS "tmElements_t CoolTime::tmSet\fC [private]\fP"
Time Elements Instance to hold various Time Values 
.PP
Definition at line 117 of file CoolTime\&.h\&.
.SS "WiFiUDP CoolTime::Udp\fC [private]\fP"
UDP Client instance 
.PP
Definition at line 101 of file CoolTime\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolBoardAPI from the source code\&.
