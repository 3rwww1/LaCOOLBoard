.TH "CoolTime" 3 "Thu Aug 17 2017" "CoolBoardAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoolTime \- This class manages the DS1337 RTC \&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolTime\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBbegin\fP ()"
.br
.ti -1c
.RI "void \fBupdate\fP ()"
.br
.ti -1c
.RI "bool \fBconfig\fP ()"
.br
.ti -1c
.RI "void \fBconfig\fP (IPAddress \fBtimeServer\fP, unsigned int \fBlocalPort\fP)"
.br
.ti -1c
.RI "void \fBprintConf\fP ()"
.br
.ti -1c
.RI "void \fBsetDateTime\fP (int year, int month, int day, int hour, int minutes, int seconds)"
.br
.ti -1c
.RI "tmElements_t \fBgetTimeDate\fP ()"
.br
.ti -1c
.RI "String \fBgetESDate\fP ()"
.br
.ti -1c
.RI "unsigned long \fBgetLastSyncTime\fP ()"
.br
.ti -1c
.RI "bool \fBisTimeSync\fP (unsigned long seconds=604800)"
.br
.ti -1c
.RI "time_t \fBgetNtpTime\fP ()"
.br
.ti -1c
.RI "void \fBsendNTPpacket\fP (IPAddress &address)"
.br
.ti -1c
.RI "String \fBformatDigits\fP (int digits)"
.br
.ti -1c
.RI "bool \fBsaveTimeSync\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "unsigned long \fBtimeSync\fP =0"
.br
.ti -1c
.RI "IPAddress \fBtimeServer\fP"
.br
.ti -1c
.RI "WiFiUDP \fBUdp\fP"
.br
.ti -1c
.RI "unsigned int \fBlocalPort\fP =0"
.br
.ti -1c
.RI "byte \fBpacketBuffer\fP [\fBNTP_PACKET_SIZE\fP]"
.br
.ti -1c
.RI "tmElements_t \fBtmSet\fP"
.br
.ti -1c
.RI "DS1337RTC \fBrtc\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class manages the DS1337 RTC \&. 
.PP
Definition at line 31 of file CoolTime\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "void CoolTime::begin ()"
\fBCoolTime::begin()\fP: This method is provided to init the udp connection 
.PP
Definition at line 31 of file CoolTime\&.cpp\&.
.PP
.nf
32 {
33 
34 #if DEBUG == 1 
35 
36     Serial\&.println( F("Entering CoolTime\&.begin()") );
37     Serial\&.println();
38 
39 #endif 
40 
41 
42     Udp\&.begin(localPort);
43     
44     this->update();
45     
46 }
.fi
.SS "bool CoolTime::config ()"
\fBCoolTime::config()\fP: This method is provided to configure the \fBCoolTime\fP object through a configuration file\&.
.PP
\fBReturns:\fP
.RS 4
true if successful,false otherwise 
.RE
.PP

.PP
Definition at line 404 of file CoolTime\&.cpp\&.
.PP
.nf
405 {
406 
407 #if DEBUG == 1 
408 
409     Serial\&.println( F("Enter CoolTime\&.config()") );
410     Serial\&.println();
411 
412 #endif 
413 
414     File rtcConfig = SPIFFS\&.open("/rtcConfig\&.json", "r");
415 
416     if (!rtcConfig) 
417     {
418     
419         Serial\&.println( F("failed to read /rtcConfig\&.json") );
420         Serial\&.println();
421 
422         return(false);
423     }
424     else
425     {
426         size_t size = rtcConfig\&.size();
427         // Allocate a buffer to store contents of the file\&.
428         std::unique_ptr<char[]> buf(new char[size]);
429 
430         rtcConfig\&.readBytes(buf\&.get(), size);
431         DynamicJsonBuffer jsonBuffer;
432         JsonObject& json = jsonBuffer\&.parseObject(buf\&.get());
433         if (!json\&.success()) 
434         {
435 
436             Serial\&.println( F("failed to parse rtcConfig json") );
437             Serial\&.println();
438 
439             return(false);
440         } 
441         else
442         {  
443         
444         #if DEBUG == 1 
445 
446             Serial\&.println( F("configuration json is :") );
447             json\&.printTo(Serial);
448             Serial\&.println();
449 
450             Serial\&.print(F("jsonBuffer size: "));
451             Serial\&.println(jsonBuffer\&.size());
452             Serial\&.println();
453 
454 
455         #endif
456 
457             String ip;
458             
459             if(json["timeServer"]\&.success() )
460             {           
461                  ip=json["timeServer"]\&.as<String>();
462                 this->timeServer\&.fromString(ip);
463                 
464             }
465             else
466             {
467                 this->timeServer=this->timeServer;
468             }
469             json["timeServer"]=ip;
470             
471             if(json["localPort"]\&.success() )
472             {                       
473                 this->localPort=json["localPort"];
474             }
475             else
476             {
477                 this->localPort=this->localPort;
478             }
479             json["localPort"]=this->localPort;
480 
481 
482             if( json["timeSync"]\&.success() )
483             {
484 
485                 this->timeSync=json["timeSync"];
486             }
487             else
488             {
489                 this->timeSync=this->timeSync;
490             }
491             json["timeSync"]=this->timeSync;
492 
493             rtcConfig\&.close();
494             rtcConfig= SPIFFS\&.open("/rtcConfig\&.json", "w");
495             
496             if(!rtcConfig)
497             {
498             
499             #if DEBUG == 1
500 
501                 Serial\&.println( F("failed to write to /rtcConfig\&.json") );
502                 Serial\&.println();
503             
504             #endif
505 
506                 return(false);
507             }
508             
509             json\&.printTo(rtcConfig);
510             rtcConfig\&.close();
511 
512         #if DEBUG == 1 
513 
514             Serial\&.println( F("configuration is :") );
515             json\&.printTo(Serial);
516             Serial\&.println();
517         
518         #endif
519         
520             return(true); 
521         }
522     }   
523 
524 
525 
526 }
.fi
.SS "void CoolTime::config (IPAddress timeServer, unsigned int localPort)"
CoolTime::config(Time server IP , udp Port): This method is provided to do manual configuration\&. 
.PP
Definition at line 381 of file CoolTime\&.cpp\&.
.PP
.nf
382 {
383 
384 #if DEBUG == 1 
385 
386     Serial\&.println( F("Enter CoomTime\&.config() , no SPIFFS variant ") );
387     Serial\&.println();
388 
389 #endif 
390 
391     this->timeServer=timeServer;
392     this->localPort=localPort;
393     
394 } 
.fi
.SS "String CoolTime::formatDigits (int digits)"
CoolTime::printDigits(digit)
.PP
utility method for digital clock display adds leading 0
.PP
\fBReturns:\fP
.RS 4
formatted string of the input digit 
.RE
.PP

.PP
Definition at line 685 of file CoolTime\&.cpp\&.
.PP
.nf
686 {
687 
688 #if DEBUG == 1 
689 
690     Serial\&.println( F("Entering CoolTime\&.formatDigits()") );
691     Serial\&.println();
692 
693 #endif 
694 
695     if(digits < 10)
696     {
697     
698     #if DEBUG == 1
699 
700         Serial\&.println( F("output digit : ") );
701         Serial\&.println( String("0") + String(digits) );
702 
703     #endif
704 
705         return( String("0") + String(digits) );
706     }
707     
708 #if DEBUG == 1 
709 
710     Serial\&.println( F("output digit : ") );
711     Serial\&.println(digits);
712 
713 #endif
714 
715     return( String(digits) );
716 }
.fi
.SS "String CoolTime::getESDate ()"
CoolTime::getESD(): This method is provided to return an Elastic Search compatible date Format
.PP
\fBReturns:\fP
.RS 4
date String in Elastic Search format 
.RE
.PP

.PP
Definition at line 183 of file CoolTime\&.cpp\&.
.PP
.nf
184 {
185 
186 #if DEBUG == 1 
187 
188     Serial\&.println( F("Entering CoolTime\&.getESDate()") );
189     Serial\&.println();
190 
191 #endif 
192 
193     tmElements_t tm=this->getTimeDate();
194 
195     //"20yy-mm-ddT00:00:00Z"
196     String elasticSearchString =String(tm\&.Year+1970)+"-"+this->formatDigits(tm\&.Month)+"-";
197 
198     elasticSearchString +=this->formatDigits(tm\&.Day)+"T"+this->formatDigits(tm\&.Hour)+":";
199     
200     elasticSearchString +=this->formatDigits(tm\&.Minute)+":"+this->formatDigits(tm\&.Second)+"Z";
201 
202 #if DEBUG == 1 
203 
204     Serial\&.print( F("elastic Search date : ") );
205     Serial\&.println(elasticSearchString);
206     Serial\&.println();
207 
208 #endif
209 
210     return (elasticSearchString);
211 }
.fi
.SS "unsigned long CoolTime::getLastSyncTime ()"
\fBCoolTime::getLastSyncTime()\fP: This method is provided to get the last time we syncronised the time
.PP
\fBReturns:\fP
.RS 4
unsigned long representation of last syncronisation time in seconds 
.RE
.PP

.PP
Definition at line 221 of file CoolTime\&.cpp\&.
.PP
.nf
222 {
223 
224 #if DEBUG == 1 
225 
226     Serial\&.println( F("Entering CoolTime\&.getLastSyncTime()") );
227     Serial\&.println();
228     
229     Serial\&.print( F("last sync time : ") );
230     Serial\&.println(this->timeSync);
231 
232 #endif 
233 
234     return(this->timeSync);
235 }
.fi
.SS "time_t CoolTime::getNtpTime ()"
CoolTime::getNtopTime(): This method is provided to get the Time through an NTP request to a Time Server
.PP
\fBReturns:\fP
.RS 4
a time_t (unsigned long ) timestamp in seconds 
.RE
.PP

.PP
Definition at line 287 of file CoolTime\&.cpp\&.
.PP
.nf
288 {
289 
290 #if DEBUG == 1 
291 
292     Serial\&.println( F("Entering CoolTime\&.getNtpTime()") );
293     Serial\&.println();
294 
295 #endif 
296 
297     while (Udp\&.parsePacket() > 0) ; // discard any previously received packets
298 
299     Serial\&.println( F("Transmit NTP Request") );
300 
301     sendNTPpacket(timeServer);
302 
303     uint32_t beginWait = millis();
304 
305     while (millis() - beginWait < 1500) 
306     {
307         int size = Udp\&.parsePacket();
308         if (size >= NTP_PACKET_SIZE) 
309         {
310         
311         #if DEBUG == 1
312 
313             Serial\&.println( F("Receive NTP Response") );
314         
315         #endif
316 
317             Udp\&.read(packetBuffer, NTP_PACKET_SIZE);  // read packet into the buffer
318             unsigned long secsSince1900;
319             // convert four bytes starting at location 40 to a long integer
320             secsSince1900 =  (unsigned long)packetBuffer[40] << 24;
321             secsSince1900 |= (unsigned long)packetBuffer[41] << 16;
322             secsSince1900 |= (unsigned long)packetBuffer[42] << 8;
323             secsSince1900 |= (unsigned long)packetBuffer[43];
324         
325         #if DEBUG == 1 
326     
327             Serial\&.print( F("received unix time : ") );
328             Serial\&.println(secsSince1900 - 2208988800UL);
329             Serial\&.println();
330 
331         #endif 
332 
333             return secsSince1900 - 2208988800UL ;
334         }
335     }
336     
337     Serial\&.println( F("No NTP Response :-(") );
338 
339     return 0; // return 0 if unable to get the time
340 }
.fi
.SS "tmElements_t CoolTime::getTimeDate ()"
\fBCoolTime::getTimeDate()\fP: This method is provided to get the RTC Time
.PP
\fBReturns:\fP
.RS 4
a tmElements_t structre that has the time in it 
.RE
.PP

.PP
Definition at line 140 of file CoolTime\&.cpp\&.
.PP
.nf
141 {
142 
143 #if DEBUG == 1 
144     
145     Serial\&.println( F("Entering CoolTime\&.getTimeDate()") );
146     Serial\&.println();
147 
148 #endif
149 
150     tmElements_t tm;
151     time_t timeDate = this->rtc\&.get(CLOCK_ADDRESS);
152     breakTime(timeDate,tm);
153 
154 #if DEBUG == 1
155     
156     Serial\&.print( F("time is : ") );
157     Serial\&.print(tm\&.Year+ 1970 );
158     Serial\&.print( F("-") );
159     Serial\&.print( this->formatDigits( tm\&.Month ) );
160     Serial\&.print( F("-") );
161     Serial\&.print( this->formatDigits( tm\&.Day ) );
162     Serial\&.print( F("T") );
163     Serial\&.print( this->formatDigits( tm\&.Hour ) );
164     Serial\&.print( F(":") );
165     Serial\&.print( this->formatDigits( tm\&.Minute ) );
166     Serial\&.print( F(":") );
167     Serial\&.print( this->formatDigits( tm\&.Second ) );
168     Serial\&.print( F("Z") );
169 
170 #endif
171     
172     return(tm);
173 }
.fi
.SS "bool CoolTime::isTimeSync (unsigned long seconds = \fC604800\fP)"
CoolTime::isTimeSync( time in seconds): This method is provided to test if the time is syncronised or not\&. By default we test once per week\&.
.PP
\fBReturns:\fP
.RS 4
true if time is syncronised,false otherwise 
.RE
.PP

.PP
Definition at line 247 of file CoolTime\&.cpp\&.
.PP
.nf
248 {
249 
250 #if DEBUG == 1
251 
252     Serial\&.println( F("Entering CoolTime\&.isTimeSync() ") );
253     Serial\&.println();
254 
255 #endif 
256 
257 #if DEBUG == 0
258 
259     Serial\&.println( F("Check if Clock is ok and in sync\&.\&.\&."));
260 
261 #endif
262 
263     //default is once per week we try to get a time update
264     if( ( RTC\&.get(CLOCK_ADDRESS) - this->getLastSyncTime() ) > ( seconds ) ) 
265     {
266 
267         Serial\&.println( F("time is not syncronised ") );
268     
269         return(false);  
270     }
271     
272     Serial\&.println( F("time is syncronised : OK") );
273     Serial\&.println();
274 
275     return(true);
276 }
.fi
.SS "void CoolTime::printConf ()"
\fBCoolTime::printConf()\fP: This method is provided to print the \fBCoolTime\fP configuration to the Serial Monitor 
.PP
Definition at line 658 of file CoolTime\&.cpp\&.
.PP
.nf
659 {
660 
661 #if DEBUG == 1
662 
663     Serial\&.println( F("Entering CoolTime\&.printConf()") );
664     Serial\&.println();
665 
666 #endif 
667 
668     Serial\&.println("RTC Configuration") ;
669 
670     Serial\&.print("timeServer : ");
671     Serial\&.println(timeServer);
672     
673     Serial\&.print("localPort : :");
674     Serial\&.println(localPort);
675 }
.fi
.SS "bool CoolTime::saveTimeSync ()"
\fBCoolTime::saveTimeSync()\fP This method is provided to save the last sync time in the SPIFFS\&.
.PP
\fBReturns:\fP
.RS 4
true if successful,false otherwise 
.RE
.PP

.PP
Definition at line 537 of file CoolTime\&.cpp\&.
.PP
.nf
538 {
539     Serial\&.println( F("Enter CoolTime\&.saveTimeSync()") );
540     Serial\&.println();
541 
542     File rtcConfig = SPIFFS\&.open("/rtcConfig\&.json", "r");
543 
544     if (!rtcConfig) 
545     {
546         Serial\&.println( F("failed to read /rtcConfig\&.json") );
547         Serial\&.println();
548 
549         return(false);
550     }
551     else
552     {
553         size_t size = rtcConfig\&.size();
554         // Allocate a buffer to store contents of the file\&.
555         std::unique_ptr<char[]> buf(new char[size]);
556 
557         rtcConfig\&.readBytes(buf\&.get(), size);
558         DynamicJsonBuffer jsonBuffer;
559         JsonObject& json = jsonBuffer\&.parseObject(buf\&.get());
560         if (!json\&.success()) 
561         {
562 
563             Serial\&.println( F("failed to parse json") );
564             Serial\&.println();
565 
566             return(false);
567         } 
568         else
569         {
570 
571         #if DEBUG == 1
572     
573             Serial\&.println( F("configuration json is :") );
574             json\&.printTo(Serial);
575             Serial\&.println();
576 
577             Serial\&.print(F("jsonBuffer size: "));
578             Serial\&.println(jsonBuffer\&.size());
579             Serial\&.println();
580 
581         #endif
582 
583             String ip;
584                     
585             if(json["timeServer"]\&.success() )
586             {           
587                  ip=json["timeServer"]\&.as<String>();
588                 this->timeServer\&.fromString(ip);
589                 
590             }
591             else
592             {
593                 this->timeServer=this->timeServer;
594             }
595             json["timeServer"]=ip;
596             
597             if(json["localPort"]\&.success() )
598             {                       
599                 this->localPort=json["localPort"];
600             }
601             else
602             {
603                 this->localPort=this->localPort;
604             }
605             json["localPort"]=this->localPort;
606 
607 
608             if( json["timeSync"]\&.success() )
609             {
610                 json["timeSync"]=this->timeSync;
611             }
612             else
613             {
614                 this->timeSync=this->timeSync;
615             }
616             json["timeSync"]=this->timeSync;
617 
618 
619             rtcConfig\&.close();
620             rtcConfig= SPIFFS\&.open("/rtcConfig\&.json", "w");
621             
622             if(!rtcConfig)
623             {
624             #if DEBUG == 1
625 
626                 Serial\&.println( F("failed to write timeSync to /rtcConfig\&.json") );
627                 Serial\&.println();
628             
629             #endif
630 
631                 return(false);
632             }
633             
634             json\&.printTo(rtcConfig);
635             rtcConfig\&.close();
636     
637         #if DEBUG == 1
638 
639             Serial\&.println( F("configuration is :") );
640             json\&.printTo(Serial);
641             Serial\&.println();
642         
643         #endif
644             return(true); 
645         }
646     }   
647 
648 
649 
650 }
.fi
.SS "void CoolTime::sendNTPpacket (IPAddress & address)"
CoolTime::sendNTPpacket( Time Server IP address): This method is provided to send an NTP request to the time server at the given address 
.PP
Definition at line 347 of file CoolTime\&.cpp\&.
.PP
.nf
348 {
349 
350 #if DEBUG == 1 
351 
352     Serial\&.println( F("Enter CoolTime\&.sendNTPpacket()") );
353     Serial\&.println();
354 
355 #endif
356 
357     memset(packetBuffer, 0, NTP_PACKET_SIZE);
358     // Initialize values needed to form NTP request
359     // (see URL above for details on the packets)
360     packetBuffer[0] = 0b11100011;   // LI, Version, Mode
361     packetBuffer[1] = 0;     // Stratum, or type of clock
362     packetBuffer[2] = 6;     // Polling Interval
363     packetBuffer[3] = 0xEC;  // Peer Clock Precision
364     // 8 bytes of zero for Root Delay & Root Dispersion
365     packetBuffer[12]  = 49;
366     packetBuffer[13]  = 0x4E;
367     packetBuffer[14]  = 49;
368     packetBuffer[15]  = 52;
369     // all NTP fields have been given values, now
370     // you can send a packet requesting a timestamp:                 
371     Udp\&.beginPacket(address, 123); //NTP requests are to port 123
372     Udp\&.write(packetBuffer, NTP_PACKET_SIZE);
373     Udp\&.endPacket(); 
374 }
.fi
.SS "void CoolTime::setDateTime (int year, int month, int day, int hour, int minutes, int seconds)"
CoolTime::setDateTime(year,month,dat,hour,minutes,seconds): This method is provided to manually set the RTc Time 
.PP
Definition at line 86 of file CoolTime\&.cpp\&.
.PP
.nf
87 { 
88 
89 #if DEBUG == 1
90 
91     Serial\&.println( F("Entering CoolTime\&.setDateTime") );
92     Serial\&.println();
93 
94 #endif
95 
96     tmElements_t tm;
97     tm\&.Second=seconds; 
98     tm\&.Minute=minutes; 
99     tm\&.Hour=hour; 
100     tm\&.Day=day;
101     tm\&.Month=month; 
102     tm\&.Year=year;
103     
104     this->rtc\&.set(makeTime(tm),CLOCK_ADDRESS);   
105 
106 #if DEBUG == 1
107 
108     Serial\&.print( F("setting time to : ") );//"20yy-mm-ddT00:00:00Z
109 
110     Serial\&.print(tm\&.Year);
111     Serial\&.print( F("-") );
112     Serial\&.print( this->formatDigits( tm\&.Month ) );
113     Serial\&.print( F("-") );
114     Serial\&.print( this->formatDigits( tm\&.Day ) );
115     Serial\&.print( F("T") );
116     Serial\&.print( this->formatDigits( tm\&.Hour ) );
117     Serial\&.print( F(":") );
118     Serial\&.print( this->formatDigits( tm\&.Minute ) );
119     Serial\&.print( F(":") );
120     Serial\&.print( this->formatDigits( tm\&.Second ) );
121     Serial\&.print( F("Z") );
122 
123     Serial\&.println();
124     
125     Serial\&.print( F("time set to : ") );
126     Serial\&.println(this->getESDate());
127     Serial\&.println();
128 
129 #endif
130 
131 }
.fi
.SS "void CoolTime::update ()"
\fBCoolTime::update()\fP: This method is provided to correct the rtc Time when it drifts,once every week\&. 
.PP
Definition at line 53 of file CoolTime\&.cpp\&.
.PP
.nf
54 {
55 
56 #if DEBUG == 1
57 
58     Serial\&.println( F("Entering CoolTime\&.update()") );
59     Serial\&.println();
60 
61 #endif 
62 
63     if( !( this->isTimeSync() ) )
64     {
65     
66     #if DEBUG == 1
67 
68         Serial\&.println( F("waiting for sync") );
69         Serial\&.println();
70 
71     #endif 
72 
73         this->timeSync=this->getNtpTime();
74         breakTime(this->getNtpTime(), this->tmSet);
75         this->rtc\&.set(makeTime(this->tmSet), CLOCK_ADDRESS); // set the clock
76         this->saveTimeSync();
77     }
78     
79 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "unsigned int CoolTime::localPort =0\fC [private]\fP"

.PP
Definition at line 71 of file CoolTime\&.h\&.
.SS "byte CoolTime::packetBuffer[\fBNTP_PACKET_SIZE\fP]\fC [private]\fP"

.PP
Definition at line 73 of file CoolTime\&.h\&.
.SS "DS1337RTC CoolTime::rtc\fC [private]\fP"

.PP
Definition at line 77 of file CoolTime\&.h\&.
.SS "IPAddress CoolTime::timeServer\fC [private]\fP"

.PP
Definition at line 67 of file CoolTime\&.h\&.
.SS "unsigned long CoolTime::timeSync =0\fC [private]\fP"

.PP
Definition at line 65 of file CoolTime\&.h\&.
.SS "tmElements_t CoolTime::tmSet\fC [private]\fP"

.PP
Definition at line 75 of file CoolTime\&.h\&.
.SS "WiFiUDP CoolTime::Udp\fC [private]\fP"

.PP
Definition at line 69 of file CoolTime\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolBoardAPI from the source code\&.
