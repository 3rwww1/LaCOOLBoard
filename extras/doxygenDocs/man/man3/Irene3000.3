.TH "Irene3000" 3 "Thu Aug 24 2017" "CoolBoardAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Irene3000 \- This class is provided to manage the \fBIrene3000\fP Ph/Temperature Shield\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Irene3000\&.h>\fP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBparameters_T\fP"
.br
.ti -1c
.RI "struct \fBstate\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBbegin\fP ()"
.br
.ti -1c
.RI "bool \fBconfig\fP ()"
.br
.ti -1c
.RI "void \fBprintConf\fP ()"
.br
.ti -1c
.RI "String \fBread\fP ()"
.br
.ti -1c
.RI "int \fBreadButton\fP ()"
.br
.ti -1c
.RI "void \fBsetGain\fP (\fBadsGain_t\fP gain)"
.br
.ti -1c
.RI "int \fBreadADSChannel2\fP (\fBadsGain_t\fP gain)"
.br
.ti -1c
.RI "float \fBreadPh\fP (double t)"
.br
.ti -1c
.RI "double \fBreadTemp\fP ()"
.br
.ti -1c
.RI "void \fBresetParams\fP ()"
.br
.ti -1c
.RI "void \fBcalibratepH7\fP ()"
.br
.ti -1c
.RI "void \fBcalibratepH4\fP ()"
.br
.ti -1c
.RI "void \fBcalcpHSlope\fP ()"
.br
.ti -1c
.RI "\fBadsGain_t\fP \fBgainConvert\fP (uint16_t tempGain)"
.br
.ti -1c
.RI "bool \fBsaveParams\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBAdafruit_ADS1115\fP \fBads\fP"
.br
.ti -1c
.RI "struct \fBIrene3000::parameters_T\fP \fBparams\fP"
.br
.ti -1c
.RI "struct \fBIrene3000::state\fP \fBwaterTemp\fP"
.br
.ti -1c
.RI "struct \fBIrene3000::state\fP \fBphProbe\fP"
.br
.ti -1c
.RI "struct \fBIrene3000::state\fP \fBadc2\fP"
.br
.ti -1c
.RI "const float \fBvRef\fP = 1\&.024"
.br
.ti -1c
.RI "const float \fBopampGain\fP = 5\&.25"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class is provided to manage the \fBIrene3000\fP Ph/Temperature Shield\&. 
.PP
Definition at line 57 of file Irene3000\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "void Irene3000::begin (void)"
\fBIrene3000::begin()\fP: This method is provided to start the \fBIrene3000\fP 
.PP
Definition at line 50 of file irene3000\&.cpp\&.
.PP
.nf
51 {
52     this->ads\&.begin();
53 
54     delay(2000);
55 
56 #if DEBUG == 1 
57 
58 
59     Serial\&.println( F("Entering Irene3000\&.begin()") );
60     Serial\&.println();
61     
62     
63     
64 
65 #endif
66     Serial\&.println(F("Press the button to calibrate the Ph probe "));
67 
68     delay(2000);
69 
70     int bValue=this->readButton();
71     
72     while(bValue<500)
73     {
74         bValue=this->readButton();
75         delay(10);  
76     }
77 
78     if(  bValue > 20000 )
79     {
80     
81 
82         
83         Serial\&.println(F("calibrating the Ph probe " ) );
84         
85         Serial\&.println(F("ph7 calibration for 25 seconds"));
86         
87         delay(10000);
88         
89         this->calibratepH7();
90 
91         delay(15000);       
92     
93         this->calibratepH7();
94 
95         delay(1000);
96         Serial\&.println(F("ph 7 calibration ok"));
97         Serial\&.println();
98     
99 
100         Serial\&.println(F("ph 4 calibration for 25 seconds"));
101     
102         delay(10000);       
103 
104         this->calibratepH4();
105 
106         delay(15000);
107         
108         this->calibratepH4();
109     
110         delay(1000);        
111 
112         Serial\&.println(F("ph 4 calibration ok"));
113         Serial\&.println();
114     
115 
116 
117         this->saveParams();
118     
119     }
120 
121 }
.fi
.SS "void Irene3000::calcpHSlope ()"
Irene3000::calcpHSlop(): This method is provided to calculate th PH slope 
.PP
Definition at line 683 of file irene3000\&.cpp\&.
.PP
.nf
684 {
685 
686 #if DEBUG == 1 
687 
688     Serial\&.println( F("Entering Irene3000\&.calcpHSlope()") );
689     Serial\&.println();
690 
691 #endif 
692 
693     params\&.pHStep = ((((vRef * (float)(params\&.pH7Cal - params\&.pH4Cal)) / 32767) * 1000) / opampGain) / 3;
694 
695  
696 }
.fi
.SS "void Irene3000::calibratepH4 ()"
\fBIrene3000::calibratepH4()\fP: This method is provided to calibrate the PH probe to 4 
.PP
Definition at line 657 of file irene3000\&.cpp\&.
.PP
.nf
658 {
659 
660 #if DEBUG == 1 
661 
662     Serial\&.println( F("Entering Irene3000\&.calibraph4()") );
663     Serial\&.println();
664 
665 #endif 
666     delay(1000);
667 
668     this->setGain(GAIN_FOUR);
669 
670     this->params\&.pH4Cal =  ads\&.readADC_SingleEnded(ph);
671 
672     this->calcpHSlope();
673 
674 
675 
676 }
.fi
.SS "void Irene3000::calibratepH7 ()"
\fBIrene3000::calibratepH7()\fP: This method is provided to calibrate the PH probe to 7 
.PP
Definition at line 630 of file irene3000\&.cpp\&.
.PP
.nf
631 {
632 
633 #if DEBUG == 1 
634 
635     Serial\&.println( F("Entering Irene3000\&.calibratepH7() ") );
636     Serial\&.println();
637     
638     
639 
640 #endif 
641     delay(1000);
642 
643     this->setGain(GAIN_FOUR);
644         
645     this->params\&.pH7Cal = ads\&.readADC_SingleEnded(ph);
646  
647     this->calcpHSlope();
648 
649 
650 }
.fi
.SS "bool Irene3000::config ()"
\fBIrene3000::config()\fP: This method is provided to configure the \fBIrene3000\fP shield through a configuration file
.PP
\fBReturns:\fP
.RS 4
true if successful,false otherwise 
.RE
.PP

.PP
Definition at line 201 of file irene3000\&.cpp\&.
.PP
.nf
202 {
203 
204 #if DEBUG == 1 
205 
206     Serial\&.println( F("Entering Irene3000\&.config()") );
207     Serial\&.println();
208 
209 #endif
210 
211     File irene3000Config = SPIFFS\&.open("/irene3000Config\&.json", "r");
212 
213     if (!irene3000Config) 
214     {
215     
216     #if DEBUG == 1 
217 
218         Serial\&.println( F("failed to read /irene3000Config\&.json") );
219         Serial\&.println();
220     
221     #endif
222 
223         return(false);
224     }
225     else
226     {
227         size_t size = irene3000Config\&.size();
228         // Allocate a buffer to store contents of the file\&.
229         std::unique_ptr<char[]> buf(new char[size]);
230             uint16_t tempGain;
231         irene3000Config\&.readBytes(buf\&.get(), size);
232         DynamicJsonBuffer jsonBuffer;
233         JsonObject& json = jsonBuffer\&.parseObject(buf\&.get());
234         if (!json\&.success()) 
235         {
236         
237         #if DEBUG == 1 
238 
239             Serial\&.println( F("failed to parse json ") );
240             Serial\&.println();
241         
242         #endif
243             
244             return(false);
245         } 
246         else
247         {
248         
249         #if DEBUG == 1 
250     
251             Serial\&.println( F("read configuration file ") );
252             json\&.printTo(Serial);
253             Serial\&.println();
254 
255             Serial\&.print(F("jsonBuffer size: "));
256             Serial\&.println(jsonBuffer\&.size());
257             Serial\&.println();
258 
259         
260 
261         #endif          
262             if(json["waterTemp"]["active"]\&.success() )
263             {           
264                 this->waterTemp\&.active = json["waterTemp"]["active"]; 
265             }
266             else
267             {
268                 this->waterTemp\&.active=this->waterTemp\&.active;
269             }
270             json["waterTemp"]["active"]=this->waterTemp\&.active;
271 
272             
273             if(json["phProbe"]["active"]\&.success())
274             {
275                 this->phProbe\&.active=json["phProbe"]["active"];
276             }
277             else
278             {
279                 this->phProbe\&.active=this->phProbe\&.active;
280             }
281             json["phProbe"]["active"]=this->phProbe\&.active;
282 
283             
284             if(json["adc2"]["active"]\&.success() )
285             {
286                 this->adc2\&.active=json["adc2"]["active"];
287             }
288             else
289             {
290                 this->adc2\&.active=this->adc2\&.active;
291             }
292             json["adc2"]["active"]=this->adc2\&.active;
293 
294             
295             if(json["adc2"]["gain"]\&.success() )
296             {           
297                 tempGain=json["adc2"]["gain"];
298                 this->adc2\&.gain=this->gainConvert(tempGain);
299             }
300             else
301             {
302                 this->adc2\&.gain=this->adc2\&.gain;
303             }
304             json["adc2"]["gain"]=this->adc2\&.gain;
305 
306             
307             if(json["adc2"]["type"]\&.success() )
308             {
309                 this->adc2\&.type=json["adc2"]["type"]\&.as<String>(); 
310             }
311             else
312             {
313                 this->adc2\&.type=this->adc2\&.type;
314             }
315             json["adc2"]["type"]=this->adc2\&.type;
316 
317 
318             if(json["pH7Cal"]\&.success())
319             {
320                 this->params\&.pH7Cal=json["pH7Cal"];          
321             }
322             else
323             {
324                 this->params\&.pH7Cal=this->params\&.pH7Cal;
325             }
326             json["pH7Cal"]=this->params\&.pH7Cal;
327 
328             
329             if(json["pH4Cal"]\&.success())
330             {
331                 this->params\&.pH4Cal=json["pH4Cal"];          
332             }
333             else
334             {
335                 this->params\&.pH4Cal=this->params\&.pH4Cal;
336             }
337             json["pH4Cal"]=this->params\&.pH4Cal;
338 
339 
340             if(json["pHStep"]\&.success())
341             {
342                 this->params\&.pHStep=json["pHStep"];          
343             }
344             else
345             {
346                 this->params\&.pHStep=this->params\&.pHStep;
347             }
348             json["pHStep"]=this->params\&.pHStep;
349 
350 
351             irene3000Config\&.close();
352             irene3000Config = SPIFFS\&.open("/irene3000Config\&.json", "w");
353 
354             if(!irene3000Config)
355             {
356             
357             #if DEBUG == 1
358 
359                 Serial\&.println( F("failed to write to /irene3000Config\&.json") );
360                 Serial\&.println();
361             
362             #endif 
363 
364                 return(false);
365             }
366 
367             json\&.printTo(irene3000Config);
368             irene3000Config\&.close();
369             
370         #if DEBUG == 1 
371 
372             Serial\&.println( F("saved configuration file :")  );
373             json\&.printTo(Serial);
374             Serial\&.println();
375         
376         #endif
377 
378             return(true); 
379         }
380     }   
381 
382 }
.fi
.SS "\fBadsGain_t\fP Irene3000::gainConvert (uint16_t tempGain)"
\fBIrene3000::gainConvert\fP( gain : { 0\&.67 ,1,2,4,8,16 } ) This method is provided to convert the gain to Internal Constants
.PP
\fBReturns:\fP
.RS 4
internal representation of the ADS gain 
.RE
.PP

.PP
Definition at line 730 of file irene3000\&.cpp\&.
.PP
.nf
731 {
732 
733 #if DEBUG == 1 
734 
735     Serial\&.println( F("Entering Irene3000\&.gainConvert()") );
736     Serial\&.println();
737 
738 #endif 
739     
740     switch(tempGain)
741     {
742         case(1): return (GAIN_ONE);
743         case(2) : return(GAIN_TWO);
744         case(4): return(GAIN_FOUR) ;   
745         case(8):return(GAIN_EIGHT)  ;  
746         case(16):return(GAIN_SIXTEEN);
747         default: return(GAIN_TWOTHIRDS);    
748     }
749 
750     return(GAIN_ONE);
751 
752 }
.fi
.SS "void Irene3000::printConf ()"
\fBIrene3000::printConf()\fP: This method is provided to print the configuration to the Serial Monitor 
.PP
Definition at line 389 of file irene3000\&.cpp\&.
.PP
.nf
390 {
391 
392 #if DEBUG == 1 
393 
394     Serial\&.println( F("Entering Irene3000\&.printConf()") );
395     Serial\&.println();
396 
397 #endif 
398 
399     Serial\&.println("Irene Configuration ");
400 
401     Serial\&.print("waterTemp\&.active : ");
402     Serial\&.println(waterTemp\&.active);
403 
404     Serial\&.print("waterTemp\&.gain : ");
405     Serial\&.println(waterTemp\&.gain,HEX);   
406 
407     Serial\&.print("phProbe\&.active : ");
408     Serial\&.println(phProbe\&.active);
409 
410     Serial\&.print("phProbe\&.gain : ");
411     Serial\&.println(phProbe\&.gain,HEX);
412     
413     Serial\&.print("adc2\&.active : ");
414     Serial\&.println(adc2\&.active);
415 
416     Serial\&.print("adc2\&.gain : ");
417     Serial\&.println(adc2\&.gain,HEX);
418 
419     Serial\&.print("adc2\&.type : ");
420     Serial\&.println(adc2\&.type);
421 
422     Serial\&.println();
423 }
.fi
.SS "String Irene3000::read (void)"
\fBIrene3000\fP:\fBread()\fP: This method is provided to read the \fBIrene3000\fP sensors data
.PP
\fBReturns:\fP
.RS 4
json string of the sensors data 
.RE
.PP

.PP
Definition at line 131 of file irene3000\&.cpp\&.
.PP
.nf
132 {
133 
134 #if DEBUG == 1 
135     
136     Serial\&.println( F("Entering Irene3000\&.read()") );
137     Serial\&.println();
138 
139 #endif 
140 
141     String data;
142     DynamicJsonBuffer jsonBuffer;
143     JsonObject& root = jsonBuffer\&.createObject();
144     if( !( root\&.success()) )
145     {
146     
147     #if DEBUG == 1 
148 
149         Serial\&.println( F("failed to create json") );
150     
151     #endif 
152 
153         return("");
154     }
155 
156         
157     if(waterTemp\&.active)
158     {
159         root["waterTemp"] = this->readTemp();
160 
161         if(phProbe\&.active)
162         {
163             root["ph"] =this->readPh( root["waterTemp"]\&.as<double>() ) ;
164         }
165 
166     }
167 
168     if(adc2\&.active)
169     {
170         root[adc2\&.type] =this->readADSChannel2(adc2\&.gain);
171     }
172     
173     root\&.printTo(data);
174     
175 #if DEBUG == 1 
176 
177     Serial\&.println( F("Irene data : ") );
178     Serial\&.println(data);
179     Serial\&.println();
180 
181     Serial\&.print(F("jsonBuffer size: "));
182     Serial\&.println(jsonBuffer\&.size());
183     Serial\&.println();
184 
185 
186 #endif
187     
188     return(data);
189     
190     
191 
192 }
.fi
.SS "int Irene3000::readADSChannel2 (\fBadsGain_t\fP gain)"
Irene3000::readADSChannel2(gain): This method is provided to read from the ADS channel 2 \&. ADS Channel 2 is free and the user can connect another analog sensor to it\&.
.PP
\fBReturns:\fP
.RS 4
the ADS Channel 2 value 
.RE
.PP

.PP
Definition at line 482 of file irene3000\&.cpp\&.
.PP
.nf
483 { 
484 
485 #if DEBUG == 1 
486     
487     Serial\&.println( F("Entering Irene3000\&.readADSChannel2()") );
488     Serial\&.println();
489 
490 #endif
491 
492     this->setGain(gain);
493     int result = this->ads\&.readADC_SingleEnded(freeAdc);
494 #if DEBUG == 1 
495     
496     Serial\&.println( F("adc2 value : ") );
497     Serial\&.println( );
498     Serial\&.println();
499 
500 #endif
501 
502     return( result ) ;
503 }
.fi
.SS "int Irene3000::readButton ()"
\fBIrene3000::readButton()\fP: This method is provided to read the \fBIrene3000\fP button
.PP
\fBReturns:\fP
.RS 4
the button value 
.RE
.PP

.PP
Definition at line 432 of file irene3000\&.cpp\&.
.PP
.nf
433 {
434 
435 #if DEBUG == 1 
436 
437     Serial\&.println( F("Entering Irene3000\&.readButton()" ) );
438     Serial\&.println();
439 
440 #endif 
441 
442     this->setGain(GAIN_TWOTHIRDS);
443     int result =this->ads\&.readADC_SingleEnded(button);
444 #if DEBUG == 1
445     
446     Serial\&.println( F("button value : ") );
447     Serial\&.println( result );
448 
449 #endif 
450 
451     return( result );
452     
453 }
.fi
.SS "float Irene3000::readPh (double t)"
\fBIrene3000::readPh(double t)\fP: This method is provided to read the PH probe note that for the best results, PH must be correlated to Temperature\&.
.PP
\fBReturns:\fP
.RS 4
the PH probe value 
.RE
.PP

.PP
Definition at line 513 of file irene3000\&.cpp\&.
.PP
.nf
514 {
515 
516 #if DEBUG == 1 
517 
518     Serial\&.println( F("Entering Irene3000\&.readPh()") );
519     Serial\&.println();
520 
521 #endif 
522 
523     this->setGain(GAIN_FOUR);
524     int adcR=ads\&.readADC_SingleEnded(ph);
525     double Voltage =  REFERENCE_VOLTAGE_GAIN_4 * ( adcR ) / ADC_MAXIMUM_VALUE;
526 
527     float miliVolts = Voltage * 1000;
528     float temporary = ((((vRef * (float)params\&.pH7Cal) / 32767) * 1000) - miliVolts) / opampGain;
529     
530     float phT=7 - (temporary / params\&.pHStep);
531 
532     float ph25= ( phT / ( 1 + 0\&.009*( t - 25 ) ) );
533 
534 #if DEBUG == 1 
535 
536     Serial\&.println( F("ph is : ") );
537     Serial\&.println( phT ) ;
538     
539     Serial\&.println(F("corrected ph to 25°C is : "));
540     Serial\&.println(ph25);
541 
542 #endif 
543     if(isnan(ph25) )
544     {
545         return(-42);    
546     }
547 
548     return(ph25);
549 
550 }
.fi
.SS "double Irene3000::readTemp ()"
Irene3000::readTemp(gain): This method is provided to read the Temeperature probe
.PP
\fBReturns:\fP
.RS 4
the Temperature probe value 
.RE
.PP

.PP
Definition at line 559 of file irene3000\&.cpp\&.
.PP
.nf
560 {
561 
562 #if DEBUG == 1 
563 
564     Serial\&.println( F("Entering Irene3000\&.readTemp()") );
565     Serial\&.println();
566 
567 #endif
568 
569     const double A = 3\&.9083E-3;
570     const double B = -5\&.775E-7;
571     double T;
572 
573     this->setGain(GAIN_EIGHT);
574 
575     double adc0 = ads\&.readADC_SingleEnded(temp);
576 
577 
578     double R = ( ( adc0 * V_GAIN_8 ) / 0\&.095 ) / 1000 ;
579 
580     T = 0\&.0 - A;
581     T += sqrt((A * A) - 4\&.0 * B * (1\&.0 - R));
582     T /= (2\&.0 * B);
583 
584     if (T > 0 && T < 200) 
585     {
586 
587     #if DEBUG == 1 
588 
589         Serial\&.print( F(" temperature : ") );
590         Serial\&.println(T);
591         Serial\&.println();
592     
593     #endif 
594         if(isnan(T))
595         {
596             return(-300);           
597         }
598 
599         return T;
600     }
601     else 
602     {
603         T = 0\&.0 - A;
604         T -= sqrt((A * A) - 4\&.0 * B * (1\&.0 - R));
605         T /= (2\&.0 * B);
606     
607     #if DEBUG == 1 
608     
609         Serial\&.println( F("temperature : ") );
610         Serial\&.println(T);
611         Serial\&.println();
612     
613     #endif
614         if(isnan(T))
615         {
616             return(-400);           
617         }
618 
619         return T;
620     }
621 
622 }
.fi
.SS "void Irene3000::resetParams (void)"
\fBIrene3000::resetParams()\fP: This method is provided to reset the PH configuration, assuming Ideal configuration 
.PP
Definition at line 704 of file irene3000\&.cpp\&.
.PP
.nf
705 {
706 
707 #if DEBUG == 1 
708 
709     Serial\&.println( F("Entering Irene3000\&.resetParams()") );
710     Serial\&.println();
711 
712 #endif 
713 
714     //Restore to default set of parameters!
715     params\&.WriteCheck = Write_Check;
716     params\&.pH7Cal = 16384; //assume ideal probe and amp conditions 1/2 of 4096
717     params\&.pH4Cal = 8192; //using ideal probe slope we end up this many 12bit units away on the 4 scale
718     params\&.pHStep = 59\&.16;//ideal probe slope
719 
720 
721 }
.fi
.SS "bool Irene3000::saveParams ()"

.PP
Definition at line 755 of file irene3000\&.cpp\&.
.PP
.nf
756 {
757 
758 #if DEBUG == 1
759         
760     Serial\&.println(F("Entering Irene3000\&.saveParams()"));
761     Serial\&.println();
762     
763     Serial\&.println(F("saving new params"));
764 #endif
765     
766     //open file
767     File irene3000Config = SPIFFS\&.open("/irene3000Config\&.json", "r");
768 
769     if (!irene3000Config) 
770     {
771     
772     #if DEBUG == 1 
773 
774         Serial\&.println( F("failed to read /irene3000Config\&.json") );
775         Serial\&.println();
776     
777     #endif
778 
779         return(false);
780     }
781     else
782     {
783         //read file into json
784         size_t size = irene3000Config\&.size();
785         // Allocate a buffer to store contents of the file\&.
786         std::unique_ptr<char[]> buf(new char[size]);
787             irene3000Config\&.readBytes(buf\&.get(), size);
788         DynamicJsonBuffer jsonBuffer;
789         JsonObject& json = jsonBuffer\&.parseObject(buf\&.get());
790         if (!json\&.success()) 
791         {
792         
793         #if DEBUG == 1 
794 
795             Serial\&.println( F("failed to parse json ") );
796             Serial\&.println();
797         
798         #endif
799             
800             return(false);
801         } 
802         else
803         {
804         
805         #if DEBUG == 1 
806     
807             Serial\&.println( F("read configuration file ") );
808             json\&.printTo(Serial);
809             Serial\&.println();
810 
811             Serial\&.print(F("jsonBuffer size: "));
812             Serial\&.println(jsonBuffer\&.size());
813             Serial\&.println();
814 
815         
816 
817         #endif          
818     
819             //add params to json
820             json["pH7Cal"]=this->params\&.pH7Cal;
821             json["pH4Cal"]=this->params\&.pH4Cal;
822             json["pHStep"]=this->params\&.pHStep;          
823             
824             irene3000Config\&.close();
825             
826             
827             //save json to file
828             irene3000Config = SPIFFS\&.open("/irene3000Config\&.json", "w");
829 
830             if(!irene3000Config)
831             {
832             
833             #if DEBUG == 1
834 
835                 Serial\&.println( F("failed to write to /irene3000Config\&.json") );
836                 Serial\&.println();
837             
838             #endif 
839 
840                 return(false);
841             }
842 
843             json\&.printTo(irene3000Config);
844             irene3000Config\&.close();
845             
846         #if DEBUG == 1 
847 
848             Serial\&.println( F("saved configuration file :")  );
849             json\&.printTo(Serial);
850             Serial\&.println();
851         
852         #endif
853 
854             return(true); 
855         }
856     }   
857 
858 }
.fi
.SS "void Irene3000::setGain (\fBadsGain_t\fP gain)"
Irene3000::setGain(gain): This method is provided to set the ADS chip gain 
.PP
Definition at line 460 of file irene3000\&.cpp\&.
.PP
.nf
461 {
462 
463 #if DEBUG == 1  
464 
465     Serial\&.println( F("Entering Irene3000\&.setGain()") );
466     Serial\&.println();
467 
468 #endif
469 
470     this->ads\&.setGain(gain);
471 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "struct \fBIrene3000::state\fP Irene3000::adc2\fC [private]\fP"

.SS "\fBAdafruit_ADS1115\fP Irene3000::ads\fC [private]\fP"

.PP
Definition at line 94 of file Irene3000\&.h\&.
.SS "const float Irene3000::opampGain = 5\&.25\fC [private]\fP"

.PP
Definition at line 114 of file Irene3000\&.h\&.
.SS "struct \fBIrene3000::parameters_T\fP Irene3000::params\fC [private]\fP"

.SS "struct \fBIrene3000::state\fP  Irene3000::phProbe\fC [private]\fP"

.SS "const float Irene3000::vRef = 1\&.024\fC [private]\fP"

.PP
Definition at line 112 of file Irene3000\&.h\&.
.SS "struct \fBIrene3000::state\fP  Irene3000::waterTemp\fC [private]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for CoolBoardAPI from the source code\&.
