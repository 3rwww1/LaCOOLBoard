.TH "CoolBoard" 3 "Mon Sep 4 2017" "CoolBoard API" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoolBoard \- This class manages the \fBCoolBoard\fP and all of Its functions\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolBoard\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBCoolBoard\fP ()"
.br
.ti -1c
.RI "void \fBbegin\fP ()"
.br
.ti -1c
.RI "bool \fBconfig\fP ()"
.br
.ti -1c
.RI "void \fBupdate\fP (const char *\fBanswer\fP)"
.br
.ti -1c
.RI "void \fBoffLineMode\fP ()"
.br
.ti -1c
.RI "void \fBonLineMode\fP ()"
.br
.ti -1c
.RI "int \fBconnect\fP ()"
.br
.ti -1c
.RI "int \fBisConnected\fP ()"
.br
.ti -1c
.RI "unsigned long \fBgetLogInterval\fP ()"
.br
.ti -1c
.RI "void \fBprintConf\fP ()"
.br
.ti -1c
.RI "void \fBsleep\fP (unsigned long interval)"
.br
.ti -1c
.RI "String \fBreadSensors\fP ()"
.br
.ti -1c
.RI "void \fBinitReadI2C\fP ()"
.br
.ti -1c
.RI "String \fBuserData\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBCoolFileSystem\fP \fBfileSystem\fP"
.br
.ti -1c
.RI "\fBCoolBoardSensors\fP \fBcoolBoardSensors\fP"
.br
.ti -1c
.RI "\fBCoolBoardLed\fP \fBcoolBoardLed\fP"
.br
.ti -1c
.RI "\fBCoolTime\fP \fBrtc\fP"
.br
.ti -1c
.RI "\fBCoolWifi\fP \fBwifiManager\fP"
.br
.ti -1c
.RI "\fBCoolMQTT\fP \fBmqtt\fP"
.br
.ti -1c
.RI "\fBJetpack\fP \fBjetPack\fP"
.br
.ti -1c
.RI "\fBIrene3000\fP \fBirene3000\fP"
.br
.ti -1c
.RI "\fBExternalSensors\fP \fBexternalSensors\fP"
.br
.ti -1c
.RI "\fBCoolBoardActor\fP \fBonBoardActor\fP"
.br
.ti -1c
.RI "bool \fBuserActive\fP =0"
.br
.ti -1c
.RI "bool \fBireneActive\fP =0"
.br
.ti -1c
.RI "bool \fBjetpackActive\fP =0"
.br
.ti -1c
.RI "bool \fBexternalSensorsActive\fP =0"
.br
.ti -1c
.RI "bool \fBsleepActive\fP =0"
.br
.ti -1c
.RI "bool \fBmanual\fP =0"
.br
.ti -1c
.RI "unsigned long \fBlogInterval\fP =1"
.br
.ti -1c
.RI "String \fBdata\fP =''"
.br
.ti -1c
.RI "String \fBanswer\fP =''"
.br
.ti -1c
.RI "const int \fBEnI2C\fP = 5"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class manages the \fBCoolBoard\fP and all of Its functions\&. 
.PP
Definition at line 56 of file CoolBoard\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "CoolBoard::CoolBoard ()"
\fBCoolBoard::CoolBoard()\fP: This Constructor is provided to start the I2C interface and Init the different used pins 
.PP
Definition at line 50 of file CoolBoard\&.cpp\&.
.PP
References EnI2C\&.
.SH "Member Function Documentation"
.PP 
.SS "void CoolBoard::begin ()"
\fBCoolBoard::begin()\fP: This method is provided to configure and start the used CoolKit Parts\&. It also starts the first connection try If Serial is enabled,it prints the configuration of the used parts\&. 
.PP
Definition at line 75 of file CoolBoard\&.cpp\&.
.PP
References CoolBoardActor::begin(), Jetpack::begin(), CoolMQTT::begin(), ExternalSensors::begin(), CoolBoardSensors::begin(), CoolWifi::begin(), CoolTime::begin(), Irene3000::begin(), CoolBoardLed::blink(), ExternalSensors::config(), CoolWifi::config(), CoolMQTT::config(), CoolTime::config(), Irene3000::config(), CoolBoardSensors::config(), CoolBoardActor::config(), Jetpack::config(), connect(), coolBoardLed, coolBoardSensors, externalSensors, externalSensorsActive, CoolBoardLed::fadeOut(), initReadI2C(), irene3000, ireneActive, jetPack, jetpackActive, mqtt, onBoardActor, ExternalSensors::printConf(), CoolBoardLed::printConf(), CoolMQTT::printConf(), CoolTime::printConf(), Irene3000::printConf(), CoolBoardSensors::printConf(), CoolWifi::printConf(), CoolBoardActor::printConf(), Jetpack::printConf(), rtc, wifiManager, and CoolBoardLed::write()\&.
.SS "bool CoolBoard::config ()"
\fBCoolBoard::config()\fP: This method is provided to configure the \fBCoolBoard\fP : -log interval -irene3000 activated/deactivated -jetpack activated/deactivated -external Sensors activated/deactivated -mqtt server timeout
.PP
\fBReturns:\fP
.RS 4
true if configuration is done, false otherwise 
.RE
.PP

.PP
Definition at line 727 of file CoolBoard\&.cpp\&.
.PP
References CoolFileSystem::begin(), CoolBoardLed::begin(), CoolBoardLed::blink(), CoolBoardLed::config(), coolBoardLed, externalSensorsActive, CoolBoardLed::fadeIn(), CoolBoardLed::fadeOut(), fileSystem, ireneActive, jetpackActive, logInterval, manual, sleepActive, CoolBoardLed::strobe(), and userActive\&.
.SS "void CoolBoard::update (const char * answer)"
CoolBoard::update(mqtt answer): This method is provided to handle the configuration update of the different parts 
.PP
Definition at line 965 of file CoolBoard\&.cpp\&.
.PP
References coolBoardLed, CoolBoardLed::fadeIn(), CoolBoardLed::fadeOut(), fileSystem, jetPack, manual, mqtt, CoolMQTT::mqttLoop(), onBoardActor, CoolMQTT::publish(), CoolBoardLed::strobe(), CoolFileSystem::updateConfigFiles(), CoolBoardActor::write(), and Jetpack::writeBit()\&.
.PP
Referenced by onLineMode()\&.
.SS "void CoolBoard::offLineMode ()"
CoolBoard::offlineMode(): This method is provided to manage the offLine mode: -read sensors -do actions -save data in the file system -if there is WiFi but no Internet : make data available over AP -if there is no connection : retry to connect 
.PP
Definition at line 573 of file CoolBoard\&.cpp\&.
.PP
References CoolBoardLed::blink(), connect(), CoolWifi::connectAP(), coolBoardLed, data, CoolBoardActor::doAction(), Jetpack::doAction(), CoolBoardLed::fade(), CoolBoardLed::fadeIn(), CoolBoardLed::fadeOut(), fileSystem, jetPack, jetpackActive, mqtt, onBoardActor, readSensors(), CoolFileSystem::saveSensorData(), CoolMQTT::state(), CoolWifi::state(), userActive, userData(), and wifiManager\&.
.SS "void CoolBoard::onLineMode ()"
\fBCoolBoard::onLineMode()\fP: This method is provided to manage the online mode: -update clock -read sensor -do actions -publish data -read answer -update config 
.PP
Definition at line 314 of file CoolBoard\&.cpp\&.
.PP
References answer, CoolBoardLed::blink(), coolBoardLed, data, CoolBoardActor::doAction(), Jetpack::doAction(), CoolBoardLed::fade(), CoolBoardLed::fadeIn(), CoolBoardLed::fadeOut(), fileSystem, getLogInterval(), CoolFileSystem::getSensorSavedData(), CoolFileSystem::isDataSaved(), jetPack, jetpackActive, manual, mqtt, CoolMQTT::mqttLoop(), onBoardActor, CoolMQTT::publish(), CoolMQTT::read(), readSensors(), rtc, sleep(), sleepActive, CoolBoardLed::strobe(), CoolTime::update(), update(), userActive, and userData()\&.
.SS "int CoolBoard::connect ()"
\fBCoolBoard::connect()\fP: This method is provided to manage the network connection and the mqtt connection\&.
.PP
\fBReturns:\fP
.RS 4
mqtt client state 
.RE
.PP

.PP
Definition at line 246 of file CoolBoard\&.cpp\&.
.PP
References CoolBoardLed::blink(), CoolMQTT::connect(), CoolWifi::connect(), coolBoardLed, getLogInterval(), mqtt, CoolWifi::state(), CoolMQTT::state(), wifiManager, and CoolBoardLed::write()\&.
.PP
Referenced by begin(), and offLineMode()\&.
.SS "int CoolBoard::isConnected ()"
\fBCoolBoard::isConnected()\fP
.PP
This method is provided to check if the card is connected to Wifi and MQTT
.PP
\fBReturns:\fP
.RS 4
0 : connected -1: Wifi Not Connected -2: MQTT Not Connected 
.RE
.PP

.PP
Definition at line 198 of file CoolBoard\&.cpp\&.
.PP
References mqtt, CoolMQTT::state(), CoolWifi::state(), and wifiManager\&.
.SS "unsigned long CoolBoard::getLogInterval ()"
\fBCoolBoard::getLogInterval()\fP: This method is provided to get the log interval
.PP
\fBReturns:\fP
.RS 4
interval value in s 
.RE
.PP

.PP
Definition at line 1151 of file CoolBoard\&.cpp\&.
.PP
References logInterval\&.
.PP
Referenced by connect(), and onLineMode()\&.
.SS "void CoolBoard::printConf ()"
\fBCoolBoard::printConf()\fP: This method is provided to print the configuration to the Serial Monitor\&. 
.PP
Definition at line 921 of file CoolBoard\&.cpp\&.
.PP
References externalSensorsActive, ireneActive, jetpackActive, logInterval, manual, sleepActive, and userActive\&.
.SS "void CoolBoard::sleep (unsigned long interval)"
CoolBoard::sleep(int interval): This method is provided to allow the board to enter deepSleep mode for a period of time equal to interval in s 
.PP
Definition at line 1315 of file CoolBoard\&.cpp\&.
.PP
Referenced by onLineMode()\&.
.SS "String CoolBoard::readSensors ()"
\fBCoolBoard::readSensors()\fP: This method is provided to read and format all the sensors data in a single json\&.
.PP
\fBReturns:\fP
.RS 4
json string of all the sensors read\&. 
.RE
.PP

.PP
Definition at line 1175 of file CoolBoard\&.cpp\&.
.PP
References coolBoardLed, coolBoardSensors, externalSensors, externalSensorsActive, CoolBoardLed::fadeIn(), CoolBoardLed::fadeOut(), CoolTime::getTimeDate(), initReadI2C(), irene3000, ireneActive, ExternalSensors::read(), CoolBoardSensors::read(), Irene3000::read(), rtc, and CoolBoardLed::strobe()\&.
.PP
Referenced by offLineMode(), and onLineMode()\&.
.SS "void CoolBoard::initReadI2C ()"
\fBCoolBoard::initReadI2C()\fP: This method is provided to enable the I2C Interface\&. 
.PP
Definition at line 1246 of file CoolBoard\&.cpp\&.
.PP
References EnI2C\&.
.PP
Referenced by begin(), and readSensors()\&.
.SS "String CoolBoard::userData ()"
\fBCoolBoard::userData()\fP: This method is provided to return the user's data\&.
.PP
\fBReturns:\fP
.RS 4
json string of the user's data 
.RE
.PP

.PP
Definition at line 1268 of file CoolBoard\&.cpp\&.
.PP
References CoolTime::getESDate(), CoolMQTT::getUser(), mqtt, and rtc\&.
.PP
Referenced by offLineMode(), and onLineMode()\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBCoolFileSystem\fP CoolBoard::fileSystem\fC [private]\fP"
fileSystem handler instance 
.PP
Definition at line 95 of file CoolBoard\&.h\&.
.PP
Referenced by config(), offLineMode(), onLineMode(), and update()\&.
.SS "\fBCoolBoardSensors\fP CoolBoard::coolBoardSensors\fC [private]\fP"
Sensor Board handler instance 
.PP
Definition at line 100 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), and readSensors()\&.
.SS "\fBCoolBoardLed\fP CoolBoard::coolBoardLed\fC [private]\fP"
Led handler instance 
.PP
Definition at line 105 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), config(), connect(), offLineMode(), onLineMode(), readSensors(), and update()\&.
.SS "\fBCoolTime\fP CoolBoard::rtc\fC [private]\fP"
RTC handler instance 
.PP
Definition at line 110 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), onLineMode(), readSensors(), and userData()\&.
.SS "\fBCoolWifi\fP CoolBoard::wifiManager\fC [private]\fP"
Wifi handler instance 
.PP
Definition at line 115 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), connect(), isConnected(), and offLineMode()\&.
.SS "\fBCoolMQTT\fP CoolBoard::mqtt\fC [private]\fP"
MQTT handler instance 
.PP
Definition at line 120 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), connect(), isConnected(), offLineMode(), onLineMode(), update(), and userData()\&.
.SS "\fBJetpack\fP CoolBoard::jetPack\fC [private]\fP"
\fBJetpack\fP handler instance 
.PP
Definition at line 125 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), offLineMode(), onLineMode(), and update()\&.
.SS "\fBIrene3000\fP CoolBoard::irene3000\fC [private]\fP"
\fBIrene3000\fP handler instance 
.PP
Definition at line 130 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), and readSensors()\&.
.SS "\fBExternalSensors\fP CoolBoard::externalSensors\fC [private]\fP"
External Sensors handler instance 
.PP
Definition at line 135 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), and readSensors()\&.
.SS "\fBCoolBoardActor\fP CoolBoard::onBoardActor\fC [private]\fP"
On Board Actor handler instance 
.PP
Definition at line 140 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), offLineMode(), onLineMode(), and update()\&.
.SS "bool CoolBoard::userActive =0\fC [private]\fP"
userActive flag, set to 1 to collect userData(MAC,userName,TimeStamp) 
.PP
Definition at line 146 of file CoolBoard\&.h\&.
.PP
Referenced by config(), offLineMode(), onLineMode(), and printConf()\&.
.SS "bool CoolBoard::ireneActive =0\fC [private]\fP"
ireneActive flag, set to 1 when using an Irene module 
.PP
Definition at line 152 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), config(), printConf(), and readSensors()\&.
.SS "bool CoolBoard::jetpackActive =0\fC [private]\fP"
jetpackActive flag, set to 1 when using a \fBJetpack\fP module 
.PP
Definition at line 158 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), config(), offLineMode(), onLineMode(), and printConf()\&.
.SS "bool CoolBoard::externalSensorsActive =0\fC [private]\fP"
externalSensors flag, set to 1 when using 1/many external Sensor(s) 
.PP
Definition at line 164 of file CoolBoard\&.h\&.
.PP
Referenced by begin(), config(), printConf(), and readSensors()\&.
.SS "bool CoolBoard::sleepActive =0\fC [private]\fP"
sleepActive flag, set to 1 when using sleep Mode in Sleep mode : the \fBCoolBoard\fP will do a cycle (init, read sensors, do action,log) and go to sleep for a LogInterval period of time 
.PP
Definition at line 173 of file CoolBoard\&.h\&.
.PP
Referenced by config(), onLineMode(), and printConf()\&.
.SS "bool CoolBoard::manual =0\fC [private]\fP"
manual flag, set to 1 when using manual mode in manual Mode , user can activate/deactivate actors through a specific MQTT command
.PP
/!\\ in manual Mode, receving an update will not reset the \fBCoolBoard\fP /!\\ resetting the \fBCoolBoard\fP in manual mode will deactivate all actors 
.PP
Definition at line 184 of file CoolBoard\&.h\&.
.PP
Referenced by config(), onLineMode(), printConf(), and update()\&.
.SS "unsigned long CoolBoard::logInterval =1\fC [private]\fP"
log Interval value, the period of time between logs
.IP "\(bu" 2
in Seconds 
.PP

.PP
Definition at line 191 of file CoolBoard\&.h\&.
.PP
Referenced by config(), getLogInterval(), and printConf()\&.
.SS "String CoolBoard::data =''\fC [private]\fP"
data string, string that contains sensors data 
.PP
Definition at line 197 of file CoolBoard\&.h\&.
.PP
Referenced by offLineMode(), and onLineMode()\&.
.SS "String CoolBoard::answer =''\fC [private]\fP"
answer string, string that contains received MQTT messages 
.PP
Definition at line 203 of file CoolBoard\&.h\&.
.PP
Referenced by onLineMode()\&.
.SS "const int CoolBoard::EnI2C = 5\fC [private]\fP"
Enable I2C pin, double usage for I2C and shift register latch , HIGH=I2C , LOW=shift register latch All I2C is over pins (2,14) 
.PP
Definition at line 210 of file CoolBoard\&.h\&.
.PP
Referenced by CoolBoard(), and initReadI2C()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolBoard API from the source code\&.
