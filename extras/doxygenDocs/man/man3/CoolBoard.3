.TH "CoolBoard" 3 "Thu Aug 24 2017" "CoolBoardAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoolBoard \- This class manages the \fBCoolBoard\fP and all of Its functions\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolBoard\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBCoolBoard\fP ()"
.br
.ti -1c
.RI "void \fBbegin\fP ()"
.br
.ti -1c
.RI "bool \fBconfig\fP ()"
.br
.ti -1c
.RI "void \fBupdate\fP (const char *\fBanswer\fP)"
.br
.ti -1c
.RI "void \fBoffLineMode\fP ()"
.br
.ti -1c
.RI "void \fBonLineMode\fP ()"
.br
.ti -1c
.RI "int \fBconnect\fP ()"
.br
.ti -1c
.RI "int \fBisConnected\fP ()"
.br
.ti -1c
.RI "unsigned long \fBgetLogInterval\fP ()"
.br
.ti -1c
.RI "void \fBprintConf\fP ()"
.br
.ti -1c
.RI "void \fBsleep\fP (unsigned long interval)"
.br
.ti -1c
.RI "String \fBreadSensors\fP ()"
.br
.ti -1c
.RI "void \fBinitReadI2C\fP ()"
.br
.ti -1c
.RI "String \fBuserData\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBCoolFileSystem\fP \fBfileSystem\fP"
.br
.ti -1c
.RI "\fBCoolBoardSensors\fP \fBcoolBoardSensors\fP"
.br
.ti -1c
.RI "\fBCoolBoardLed\fP \fBcoolBoardLed\fP"
.br
.ti -1c
.RI "\fBCoolTime\fP \fBrtc\fP"
.br
.ti -1c
.RI "\fBCoolWifi\fP \fBwifiManager\fP"
.br
.ti -1c
.RI "\fBCoolMQTT\fP \fBmqtt\fP"
.br
.ti -1c
.RI "\fBJetpack\fP \fBjetPack\fP"
.br
.ti -1c
.RI "\fBIrene3000\fP \fBirene3000\fP"
.br
.ti -1c
.RI "\fBExternalSensors\fP \fBexternalSensors\fP"
.br
.ti -1c
.RI "\fBCoolBoardActor\fP \fBonBoardActor\fP"
.br
.ti -1c
.RI "bool \fBuserActive\fP =0"
.br
.ti -1c
.RI "bool \fBireneActive\fP =0"
.br
.ti -1c
.RI "bool \fBjetpackActive\fP =0"
.br
.ti -1c
.RI "bool \fBexternalSensorsActive\fP =0"
.br
.ti -1c
.RI "bool \fBsleepActive\fP =0"
.br
.ti -1c
.RI "bool \fBmanual\fP =0"
.br
.ti -1c
.RI "unsigned long \fBlogInterval\fP =1"
.br
.ti -1c
.RI "String \fBdata\fP =''"
.br
.ti -1c
.RI "String \fBanswer\fP =''"
.br
.ti -1c
.RI "const int \fBEnI2C\fP = 5"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class manages the \fBCoolBoard\fP and all of Its functions\&. 
.PP
Definition at line 54 of file CoolBoard\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "CoolBoard::CoolBoard ()"
\fBCoolBoard::CoolBoard()\fP: This Constructor is provided to start the I2C interface and Init the different used pins 
.PP
Definition at line 48 of file CoolBoard\&.cpp\&.
.PP
.nf
49 {
50 
51 #if DEBUG == 1
52 
53     Serial\&.println( F("Entering CoolBoard Constructor") );
54     Serial\&.println();
55 
56 #endif
57     
58     Wire\&.begin(2, 14);                       //I2C init 
59 
60     pinMode(EnI2C, OUTPUT);        //Declare I2C Enable pin 
61 
62 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void CoolBoard::begin ()"
\fBCoolBoard::begin()\fP: This method is provided to configure and start the used CoolKit Parts\&. It also starts the first connection try If Serial is enabled,it prints the configuration of the used parts\&. 
.PP
Definition at line 73 of file CoolBoard\&.cpp\&.
.PP
.nf
74 {
75 
76 #if DEBUG == 1
77 
78     Serial\&.println( F("Starting the CoolBoard  ")  );
79     Serial\&.println( F("Entering CoolBoard\&.begin() ")  );
80     Serial\&.println();
81 #endif  
82 
83 #if DEBUG == 0
84     Serial\&.println( F("Starting Coolboard\&.\&.\&."));
85 #endif
86 
87 
88     delay(100);
89     
90     coolBoardLed\&.write(255,128,0);//orange
91 
92     this->initReadI2C();
93     delay(50);
94 
95     coolBoardSensors\&.config();
96     coolBoardSensors\&.begin();
97     delay(100);
98     
99     onBoardActor\&.config();
100     onBoardActor\&.begin();
101     delay(100);
102     
103     wifiManager\&.config();
104     wifiManager\&.begin();
105     delay(100);
106 
107     mqtt\&.config();
108     mqtt\&.begin();
109     delay(100);
110 
111 #if DEBUG == 1
112 
113     coolBoardLed\&.printConf();
114 
115     coolBoardSensors\&.printConf();
116 
117     onBoardActor\&.printConf();
118 
119     wifiManager\&.printConf();
120 
121     mqtt\&.printConf();
122     
123 
124 #endif
125 
126 
127     if (jetpackActive)
128     {
129         jetPack\&.config();
130         jetPack\&.begin();
131 
132     #if DEBUG == 1
133         
134         jetPack\&.printConf();
135 
136     #endif
137         delay(100);
138     }
139 
140     if (ireneActive)
141     {
142         irene3000\&.config();
143         irene3000\&.begin();
144 
145     #if DEBUG == 1
146 
147         irene3000\&.printConf();
148 
149     #endif
150         delay(100);
151     }
152 
153     if (externalSensorsActive)
154     {
155         externalSensors\&.config();
156         externalSensors\&.begin();
157 
158     #if DEBUG == 1
159 
160         externalSensors\&.printConf();
161 
162     #endif
163         delay(100);
164     }
165     
166     coolBoardLed\&.fadeOut(255,128,0,0\&.5);//orange
167 
168     this->connect();
169     delay(100);
170 
171     rtc\&.config();
172     rtc\&.begin();
173 
174 #if DEBUG == 1
175 
176     rtc\&.printConf();
177 
178 #endif
179     delay(100);
180     
181     coolBoardLed\&.blink(0,255,0,0\&.5);//green
182 
183 }
.fi
.SS "bool CoolBoard::config ()"
\fBCoolBoard::config()\fP: This method is provided to configure the \fBCoolBoard\fP : -log interval -irene3000 activated/deactivated -jetpack activated/deactivated -external Sensors activated/deactivated -mqtt server timeout
.PP
\fBReturns:\fP
.RS 4
true if configuration is done, false otherwise 
.RE
.PP

.PP
Definition at line 725 of file CoolBoard\&.cpp\&.
.PP
.nf
726 {
727     yield();
728 
729 #if DEBUG == 1
730 
731     Serial\&.println( F("Entering CoolBoard\&.config() ") );
732     Serial\&.println();
733 
734 #endif
735 #if DEBUG == 0
736     Serial\&.println();
737     Serial\&.println( F("Loading configuration for this CoolBoard\&.\&.\&."));
738 #endif 
739 
740     //open file system
741     fileSystem\&.begin();
742     
743     //start the led
744     coolBoardLed\&.config();
745     coolBoardLed\&.begin();
746     coolBoardLed\&.fadeIn(243,171,46,0\&.5);//shade of orange     
747 
748     
749     //open configuration file
750     File configFile = SPIFFS\&.open("/coolBoardConfig\&.json", "r");
751     
752     if (!configFile)
753 
754     {
755     
756         Serial\&.println( F("failed to read /coolBoardConfig\&.json  ") );
757 
758         coolBoardLed\&.blink(255,0,0,0\&.5);//shade of red        
759         return(false);
760     }
761 
762     else
763     {
764         size_t size = configFile\&.size();
765 
766         // Allocate a buffer to store contents of the file\&.
767         std::unique_ptr < char[] > buf(new char[size]);
768 
769         configFile\&.readBytes(buf\&.get(), size);
770 
771         DynamicJsonBuffer jsonBuffer;
772 
773         JsonObject & json = jsonBuffer\&.parseObject(buf\&.get());
774 
775         if (!json\&.success())
776         {
777         
778             Serial\&.println( F("failed to parse CoolBoard Config json object ") );
779     
780             coolBoardLed\&.blink(255,0,0,0\&.5);//shade of red        
781             return(false);
782         }
783 
784         else
785         {   
786         
787         #if DEBUG == 1
788             
789             Serial\&.println( F("configuration json : ") );
790             json\&.printTo(Serial);
791             Serial\&.println();
792             
793             Serial\&.print(F("jsonBuffer size : "));
794             Serial\&.print(jsonBuffer\&.size());
795             Serial\&.println();
796 
797         #endif
798             
799             //parsing userActive Key
800             if (json["userActive"]\&.success())
801             {
802                 this -> userActive = json["userActive"];
803             }
804 
805             else
806             {
807                 this -> userActive = this -> userActive;
808             }
809             json["userActive"] = this -> userActive;
810 
811             //parsing logInterval key
812             if (json["logInterval"]\&.success())
813             {
814                 this -> logInterval = json["logInterval"];
815             }
816             else
817             {
818                 this -> logInterval = this -> logInterval;
819             }
820             json["logInterval"] = this -> logInterval;
821             
822             //parsing ireneActive key           
823             if (json["ireneActive"]\&.success())
824             {
825                 this -> ireneActive = json["ireneActive"];
826             }
827             else
828             {
829                 this -> ireneActive = this -> ireneActive;
830             }
831             json["ireneActive"] = this -> ireneActive;
832             
833             //parsing jetpackActive key
834             if (json["jetpackActive"]\&.success())
835             {
836                 this -> jetpackActive = json["jetpackActive"];
837             }
838             else
839             {
840                 this -> jetpackActive = this -> jetpackActive;
841             }
842             json["jetpackActive"] = this -> jetpackActive;
843 
844             //parsing externalSensorsActive key
845             if (json["externalSensorsActive"]\&.success())
846             {
847                 this -> externalSensorsActive = json["externalSensorsActive"];
848             }
849             else
850             {
851                 this -> externalSensorsActive = this -> externalSensorsActive;
852             }
853             json["externalSensorsActive"] = this -> externalSensorsActive;
854 
855             
856             //parsing sleepActive key
857             if (json["sleepActive"]\&.success())
858             {
859                 this -> sleepActive = json["sleepActive"];
860             }
861             else
862             {
863                 this -> sleepActive = this -> sleepActive;
864             }
865             json["sleepActive"] = this -> sleepActive;
866 
867 
868             //parsing manual key
869             if (json["manual"]\&.success())
870             {
871                 this -> manual = json["manual"];
872             }
873             else
874             {
875                 this -> manual = this -> manual;
876             }
877             json["manual"] = this -> manual;
878 
879 
880 
881             //saving the current/correct configuration
882             configFile\&.close();
883             configFile = SPIFFS\&.open("/coolBoardConfig\&.json", "w");
884             if (!configFile)
885             {
886             
887                 Serial\&.println( F("failed to write to /coolBoardConfig\&.json") );
888                 Serial\&.println();
889 
890                 coolBoardLed\&.blink(255,0,0,0\&.5);//shade of red        
891                 return(false);
892             }
893 
894             json\&.printTo(configFile);
895             configFile\&.close();
896             #if DEBUG == 0
897 
898                 Serial\&.println( F("Configuration loaded : OK"));
899                 Serial\&.println();
900 
901             #endif
902 
903             return(true);
904         }
905     }
906 
907     coolBoardLed\&.strobe(243,171,46,0\&.5);//shade of orange
908     
909     coolBoardLed\&.fadeOut(243,171,46,0\&.5);//shade of orange                
910 }
.fi
.SS "int CoolBoard::connect ()"
\fBCoolBoard::connect()\fP: This method is provided to manage the network connection and the mqtt connection\&.
.PP
\fBReturns:\fP
.RS 4
mqtt client state 
.RE
.PP

.PP
Definition at line 244 of file CoolBoard\&.cpp\&.
.PP
.nf
245 {
246 
247 #if DEBUG == 1  
248 
249     Serial\&.println( F("Entering CoolBoard\&.connect ") );
250     Serial\&.println();
251     Serial\&.println( F("Connecting the CoolBoard  ") );
252     delay(100);
253 
254 #endif
255     coolBoardLed\&.write(0,0,255);//blue
256 
257     
258             
259     
260 #if DEBUG == 1      
261 
262     Serial\&.println( F("Launching CoolWifi") );
263     Serial\&.println();
264 
265 #endif
266     wifiManager\&.connect();
267     delay(100);
268 
269 
270     //only attempt MQTT connection when Wifi is Connected
271     if (wifiManager\&.state() == WL_CONNECTED)
272     {
273 
274     #if DEBUG == 1  
275     
276         Serial\&.println( F("Launching mqtt\&.connect()") );
277         Serial\&.println();
278     
279     #endif  
280         //logInterval in seconds
281         mqtt\&.connect(this -> getLogInterval()*2);
282         delay(100);
283     }
284     
285         
286     
287     
288 #if DEBUG == 1
289 
290     Serial\&.println( F("mqtt state is :") );
291     Serial\&.println(mqtt\&.state());
292     Serial\&.println();
293     delay(100);
294 
295 #endif
296 
297     coolBoardLed\&.blink(0,0,255,0\&.5);//blue
298 
299     return(mqtt\&.state());
300 }
.fi
.SS "unsigned long CoolBoard::getLogInterval ()"
\fBCoolBoard::getLogInterval()\fP: This method is provided to get the log interval
.PP
\fBReturns:\fP
.RS 4
interval value in s 
.RE
.PP

.PP
Definition at line 1149 of file CoolBoard\&.cpp\&.
.PP
.nf
1150 {
1151 
1152 #if DEBUG == 1
1153 
1154     Serial\&.println( F("Entering CoolBoard\&.getLogInterval() ") );
1155     Serial\&.println();
1156     Serial\&.println( F("log Interval is :") );
1157     Serial\&.println(logInterval);
1158     Serial\&.println();
1159 
1160 #endif
1161 
1162     return(this -> logInterval);
1163 }
.fi
.SS "void CoolBoard::initReadI2C ()"
\fBCoolBoard::initReadI2C()\fP: This method is provided to enable the I2C Interface\&. 
.PP
Definition at line 1244 of file CoolBoard\&.cpp\&.
.PP
.nf
1245 {
1246 
1247 #if DEBUG == 1
1248 
1249     Serial\&.println( F("Entering CoolBoard\&.initReadI2C()") );
1250     Serial\&.println();
1251 
1252 #endif
1253  
1254     digitalWrite(EnI2C,HIGH);//HIGH= I2C Enable
1255 
1256 }
.fi
.SS "int CoolBoard::isConnected ()"
\fBCoolBoard::isConnected()\fP
.PP
This method is provided to check if the card is connected to Wifi and MQTT
.PP
\fBReturns:\fP
.RS 4
0 : connected -1: Wifi Not Connected -2: MQTT Not Connected 
.RE
.PP

.PP
Definition at line 196 of file CoolBoard\&.cpp\&.
.PP
.nf
197 {
198 
199 #if DEBUG == 1  
200 
201     Serial\&.println( F("Entering CoolBoard\&.isConnected ") );
202     Serial\&.println();
203 
204 #endif
205     if (wifiManager\&.state() != WL_CONNECTED)
206     {
207     
208         Serial\&.println(F("Wifi Not Connected"));
209 
210     #if DEBUG == 1
211 
212         Serial\&.println(F("Wifi State is "));
213         Serial\&.println(wifiManager\&.state());
214         
215     #endif
216         return(-1);
217     }
218     
219     if(mqtt\&.state() != 0)
220     {
221         
222         Serial\&.println( F("MQTT not Connected"));
223 
224     #if DEBUG==1
225         Serial\&.println( F("mqtt state is :") );
226         Serial\&.println(mqtt\&.state()); 
227     
228     #endif
229 
230     }
231     
232     return(0);
233 
234 }
.fi
.SS "void CoolBoard::offLineMode ()"
CoolBoard::offlineMode(): This method is provided to manage the offLine mode: -read sensors -do actions -save data in the file system -if there is WiFi but no Internet : make data available over AP -if there is no connection : retry to connect 
.PP
Definition at line 571 of file CoolBoard\&.cpp\&.
.PP
.nf
572 {
573     coolBoardLed\&.fade(51,100,50,0\&.5);//dark shade of green    
574 #if DEBUG == 1  
575     
576     Serial\&.println( F("Entering off line mode ") );  
577     
578 #endif
579 
580 #if DEBUG == 0
581 
582     Serial\&.println( F("CoolBoard is in Offline Mode"));
583 
584 #endif
585 
586     //read user data if user is active
587     if(userActive)
588     {
589 
590         coolBoardLed\&.fadeIn(245,237,27,0\&.5);//shade of yellow
591 
592     #if DEBUG == 1
593         
594         Serial\&.println( F("User is Active") );
595         Serial\&.println( F("Collecting User's data ( mac,username,timeStamp )") );
596         Serial\&.println();
597 
598     #endif
599 
600         coolBoardLed\&.blink(245,237,27,0\&.5);//shade of yellow  
601 
602         //reading user data
603         data=this->userData();//{"":"","":"","",""}
604 
605         //formatting json 
606         data\&.setCharAt( data\&.lastIndexOf('}') , ',');//{"":"","":"","","",
607         
608                 
609         //read sensors data
610 
611         Serial\&.println( F("Collecting sensors data ") );
612         Serial\&.println();
613 
614         data+=this->readSensors();//{"":"","":"","","",{\&.\&.\&.\&.\&.\&.\&.}
615 
616         
617 
618         //formatting json correctly
619         data\&.remove(data\&.lastIndexOf('{'), 1);//{"":"","":"","","",\&.\&.\&.\&.\&.\&.\&.}
620 
621         coolBoardLed\&.fadeOut(245,237,27,0\&.5);//shade of yellow
622                 
623     }   
624     else
625     {
626         //read sensors data
627     #if DEBUG == 1
628 
629         Serial\&.println( F("Collecting sensors data ") );
630         Serial\&.println();
631 
632     #endif
633 
634         coolBoardLed\&.fade(190,100,150,0\&.5);//shade of violet      
635 
636         data=this->readSensors();//{\&.\&.,\&.\&.,\&.\&.}
637     }
638 
639     coolBoardLed\&.fade(51,100,50,0\&.5);//dark shade of green    
640 
641     //do action
642 
643     if (jetpackActive)
644     {
645     
646 
647 
648     #if DEBUG == 1
649 
650         Serial\&.println( F("jetpack is Active ") );
651         Serial\&.println( F("jetpack doing action ") );
652         Serial\&.println();
653     
654     #endif
655         coolBoardLed\&.fade(100,100,150,0\&.5);//dark shade of blue   
656     
657         jetPack\&.doAction( data\&.c_str() );
658     }
659     
660     delay(100);
661 
662     onBoardActor\&.doAction( data\&.c_str() );    
663 
664 
665     coolBoardLed\&.fade(51,100,50,0\&.5);//dark shade of green    
666     
667     //saving data in the file system
668     
669     fileSystem\&.saveSensorData( data\&.c_str() );
670 
671     #if DEBUG == 0
672 
673         Serial\&.println( F("saving Data in Memory : OK"));
674 
675     #endif
676 
677     coolBoardLed\&.fadeOut(51,100,50,0\&.5);//dark shade of green
678 
679     //case we have wifi but no internet
680     if( (wifiManager\&.state() == WL_CONNECTED) && ( mqtt\&.state()!=0 ) )
681     {
682         
683         Serial\&.println(F("there is Wifi but no Internet"));
684         Serial\&.println(F("lunching AP to check saved files"));
685         Serial\&.println(F("and Add new WiFi if needed"));
686         
687         wifiManager\&.connectAP();
688         
689     }
690     
691     //case we have no connection at all
692     if( wifiManager\&.state() != WL_CONNECTED )
693     {
694     
695     #if DEBUG == 1
696         
697         Serial\&.println(F("there is No Wifi "));
698         Serial\&.println(F("retrying to connect"));
699     
700     #endif
701 
702     #if DEBUG == 0
703         Serial\&.println( F("there is no WiFi\&.\&.\&."));
704     #endif
705         
706         this->connect();//nomad case : just run wifiMulti
707                 //normal case : run wifiMulti+AP
708         
709     }   
710 
711 }
.fi
.SS "void CoolBoard::onLineMode ()"
\fBCoolBoard::onLineMode()\fP: This method is provided to manage the online mode: -update clock -read sensor -do actions -publish data -read answer -update config 
.PP
Definition at line 312 of file CoolBoard\&.cpp\&.
.PP
.nf
313 {
314 
315     coolBoardLed\&.fadeIn(128,255,50,0\&.5);//shade of green
316 
317 #if DEBUG == 1
318 
319     Serial\&.println( F("Entering CoolBoard\&.onLineMode() ") );
320     Serial\&.println();
321 
322 #endif
323 #if DEBUG == 0
324 
325     Serial\&.println( F("CoolBoard is in Online Mode"));
326 
327 #endif
328 
329     data="";
330     answer="";
331 
332     //send saved data if any
333     if(fileSystem\&.isDataSaved())
334     {
335 
336         coolBoardLed\&.fadeIn(128,128,255,0\&.5);//shade of blue
337 
338         Serial\&.println( F("There is data saved on the File System") );
339         Serial\&.println( F("Sending saved data over MQTT ") );
340         Serial\&.println();
341         coolBoardLed\&.strobe(128,128,255,0\&.5);//shade of blue 
342 
343         mqtt\&.publish("sending saved data");
344         mqtt\&.mqttLoop();
345 
346 
347         
348         int size=0;
349         std::unique_ptr<String[]> savedData(std::move(fileSystem\&.getSensorSavedData(size)));//{\&.\&.,\&.\&.,\&.\&.}
350 
351         int i=0;
352         //loop through the array
353         while(i<size)
354         {
355             //formatting data:
356         
357             String jsonData = "{\"state\":{\"reported\":";
358             jsonData += savedData[i]; // {"state":{"reported":{\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}
359             jsonData += " } }"; // {"state":{"reported":{\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}  } }
360 
361         #if DEBUG == 1 
362             Serial\&.println(F("Size is : "));
363             Serial\&.println(size);
364             Serial\&.print(F("sending line N°"));
365             Serial\&.println(i);
366             Serial\&.println(jsonData);
367             Serial\&.println();
368 
369         #endif
370 
371             coolBoardLed\&.strobe(128,128,255,0\&.5);//shade of blue
372         
373             mqtt\&.publish( jsonData\&.c_str() );
374             mqtt\&.mqttLoop();
375         
376             coolBoardLed\&.fadeOut(128,128,255,0\&.5);//shade of blue
377             
378             i++;
379             yield();
380         }       
381 
382 
383     #if DEBUG == 1
384 
385         Serial\&.println( F("Saved data sent ") );
386         Serial\&.println();
387     
388     #endif
389 
390     }
391 
392     coolBoardLed\&.blink(128,255,50,0\&.5);//shade of green
393 
394     //clock update
395     Serial\&.println( F("Re-checking RTC\&.\&.\&."));
396     rtc\&.update();
397 
398     //read user data if user is active
399     if(userActive)
400     {
401         coolBoardLed\&.fadeIn(245,237,27,0\&.5);//shade of yellow
402     
403     #if DEBUG == 1
404 
405         Serial\&.println( F("User is Active") );
406         Serial\&.println( F("Collecting User's data ( mac,username,timeStamp )") );
407         Serial\&.println();
408     
409     #endif  
410         coolBoardLed\&.blink(245,237,27,0\&.5);//shade of yellow  
411 
412         //reading user data
413         data=this->userData();//{"":"","":"","",""}
414 
415         //formatting json 
416         data\&.setCharAt( data\&.lastIndexOf('}') , ',');//{"":"","":"","","",
417                 
418         //read sensors data
419     #if DEBUG == 1
420 
421         Serial\&.println( F("Collecting sensors data ") );
422         Serial\&.println();
423     
424     #endif
425 
426         data+=this->readSensors();//{"":"","":"","","",{\&.\&.\&.\&.\&.\&.\&.}       
427 
428         //formatting json correctly
429         data\&.remove(data\&.lastIndexOf('{'), 1);//{"":"","":"","","",\&.\&.\&.\&.\&.\&.\&.}
430         
431         coolBoardLed\&.fadeOut(245,237,27,0\&.5);//shade of yellow
432                 
433     }   
434     else
435     {
436         //read sensors data
437     #if DEBUG == 1
438 
439         Serial\&.println( F("Collecting sensors data ") );
440         Serial\&.println();
441     
442     #endif
443         coolBoardLed\&.fade(190,100,150,0\&.5);//shade of violet      
444         data=this->readSensors();//{\&.\&.,\&.\&.,\&.\&.}
445     }
446     
447 
448 
449 
450     //do action
451 
452     if (jetpackActive)
453     {
454 
455 
456     #if DEBUG ==1
457 
458         Serial\&.println( F("jetpack is Active ") );
459         Serial\&.println();
460 
461     #endif
462     
463         if(this->manual == 0 )
464         {
465 
466             Serial\&.println( F("jetpack doing action ") );
467 
468             coolBoardLed\&.fade(100,100,150,0\&.5);//dark shade of blue       
469 
470             jetPack\&.doAction(data\&.c_str());
471             
472 
473         
474         }
475         
476         else if(this->manual == 1 )
477         {
478         
479             Serial\&.println(F("we are in manual mode"));
480             mqtt\&.mqttLoop();
481             answer = mqtt\&.read();
482             this -> update(answer\&.c_str());
483         }
484     }
485 
486     delay(100);
487 
488     onBoardActor\&.doAction( data\&.c_str() );    
489 
490 
491 
492     
493     coolBoardLed\&.fadeIn(128,255,50,0\&.5);//shade of green
494 
495     //formatting data:
496     String jsonData = "{\"state\":{\"reported\":";
497     jsonData += data; // {"state":{"reported":{\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}
498     jsonData += " } }"; // {"state":{"reported":{\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}  } }
499     
500     //mqtt client loop to allow data handling
501     mqtt\&.mqttLoop();
502 
503     coolBoardLed\&.blink(128,255,50,0\&.5);//shade of green   
504 
505     //read mqtt answer
506     answer = mqtt\&.read();
507 
508 #if DEBUG == 1 
509 
510     Serial\&.println( F("checking if there's an MQTT message ")  );
511     Serial\&.println( F("answer is : ") ); 
512     Serial\&.println(answer);  
513     Serial\&.println();
514 
515 #endif  
516 
517     coolBoardLed\&.fadeOut(128,255,50,0\&.5);//shade of green 
518 
519     //check if the configuration needs update 
520     //and update it if needed 
521     this -> update(answer\&.c_str());
522     
523     coolBoardLed\&.fadeIn(128,255,50,0\&.5);//shade of green  
524 
525     //publishing data   
526     if( this->sleepActive==0 )  
527     {   
528         coolBoardLed\&.strobe(255,0,230,0\&.5);//shade of pink
529         
530         //logInterval in seconds
531         mqtt\&.publish( jsonData\&.c_str(), this->getLogInterval() );
532         mqtt\&.mqttLoop();
533     
534     }
535     else
536     {
537         coolBoardLed\&.strobe(230,255,0,0\&.5);//shade of yellow  
538 
539         mqtt\&.publish(jsonData\&.c_str());       
540         mqtt\&.mqttLoop();
541         answer = mqtt\&.read();
542         this ->update(answer\&.c_str());
543 
544         //logInterval in seconds
545         this->sleep( this->getLogInterval() ) ;
546     }
547 
548     coolBoardLed\&.fadeOut(128,255,50,0\&.5);//shade of green     
549 
550     mqtt\&.mqttLoop();
551 
552     //read mqtt answer
553     answer = mqtt\&.read();
554     this -> update(answer\&.c_str());  
555 
556     coolBoardLed\&.blink(128,255,50,0\&.5);//shade of green   
557 
558 
559 }
.fi
.SS "void CoolBoard::printConf ()"
\fBCoolBoard::printConf()\fP: This method is provided to print the configuration to the Serial Monitor\&. 
.PP
Definition at line 919 of file CoolBoard\&.cpp\&.
.PP
.nf
920 {
921 
922 #if DEBUG == 1
923     
924     Serial\&.println( F("Entering CoolBoard\&.printConf() ") );
925     Serial\&.println();
926 
927 #endif
928 
929     Serial\&.println( F("Printing Cool Board Configuration "));
930     Serial\&.print( F("log interval        : "));
931     Serial\&.println(this->logInterval);
932 
933     Serial\&.print( F("irene active        : "));
934     Serial\&.println(this->ireneActive);
935 
936     Serial\&.print( F("jetpack active      : "));
937     Serial\&.println(this->jetpackActive);
938 
939     Serial\&.print( F("external sensors active     : "));
940     Serial\&.println(this->externalSensorsActive);
941 
942     Serial\&.print( F("sleep active        : "));
943     Serial\&.println(this->sleepActive);
944 
945     Serial\&.print( F("user active         : "));
946     Serial\&.println(this->userActive);
947 
948     Serial\&.print( F("manual active       : "));
949     Serial\&.println(this->manual);
950 
951     Serial\&.println();
952 
953 
954 
955 
956 }
.fi
.SS "String CoolBoard::readSensors ()"
\fBCoolBoard::readSensors()\fP: This method is provided to read and format all the sensors data in a single json\&.
.PP
\fBReturns:\fP
.RS 4
json string of all the sensors read\&. 
.RE
.PP

.PP
Definition at line 1173 of file CoolBoard\&.cpp\&.
.PP
.nf
1174 {
1175 
1176     coolBoardLed\&.fadeIn(128,255,0,0\&.5);//light shade of green
1177                 
1178 #if DEBUG == 1
1179 
1180     Serial\&.println( F("Entering CoolBoard\&.readSensors()") );
1181     Serial\&.println();
1182 
1183 #endif
1184     coolBoardLed\&.strobe(128,255,0,0\&.5);//light shade of green
1185 
1186     String sensorsData;
1187     
1188     this->initReadI2C();
1189 
1190     sensorsData = coolBoardSensors\&.read(); // {\&.\&.,\&.\&.,\&.\&.}
1191     
1192     if (externalSensorsActive)
1193     {
1194         sensorsData += externalSensors\&.read(); // {\&.\&.,\&.\&.,\&.\&.}{\&.\&.,\&.\&.}
1195 
1196         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf('}'), ','); // {\&.\&.,\&.\&.,\&.\&.}{\&.\&.,\&.\&.,
1197         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf('{'), ','); // {\&.\&.,\&.\&.,\&.\&.},\&.\&.,\&.\&.,
1198         sensorsData\&.remove(sensorsData\&.lastIndexOf('}'), 1); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,
1199         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf(','), '}'); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}
1200 
1201     }
1202     if (ireneActive)
1203     {
1204         sensorsData += irene3000\&.read(); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}{\&.\&.,\&.\&.,\&.\&.}
1205 
1206         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf('}'), ','); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}{\&.\&.,\&.\&.,\&.\&.,
1207         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf('{'), ','); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.},\&.\&.,\&.\&.,\&.\&.,
1208         sensorsData\&.remove(sensorsData\&.lastIndexOf('}'), 1); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,
1209         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf(','), '}'); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}        
1210         
1211         
1212     }
1213 
1214     //getting Hour:
1215     tmElements_t tm;
1216     tm=rtc\&.getTimeDate();
1217     
1218     //adding Hour
1219     sensorsData\&.remove(sensorsData\&.lastIndexOf('}'), 1); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&., 
1220     sensorsData+=",\"hour\":";  
1221     sensorsData+=tm\&.Hour;
1222     sensorsData+=",\"minute\":";
1223     sensorsData+=tm\&.Minute;
1224     sensorsData+="}";
1225     
1226 #if DEBUG == 1
1227     Serial\&.println();
1228     Serial\&.println( F("sensors data is ") );
1229     Serial\&.println(sensorsData);
1230     Serial\&.println();
1231 
1232 #endif
1233     coolBoardLed\&.fadeOut(128,255,0,0\&.5);//light shade of green
1234 
1235     return(sensorsData);
1236 
1237 }
.fi
.SS "void CoolBoard::sleep (unsigned long interval)"
CoolBoard::sleep(int interval): This method is provided to allow the board to enter deepSleep mode for a period of time equal to interval in s 
.PP
Definition at line 1313 of file CoolBoard\&.cpp\&.
.PP
.nf
1314 {
1315 
1316     Serial\&.println( F("Entering CoolBoard\&.sleep() ") );
1317     Serial\&.print( F("going to sleep for ") );
1318     Serial\&.print(interval);
1319     Serial\&.println(F("s") );
1320     Serial\&.println();
1321     
1322     //interval is in seconds , interval*1000*1000 in µS
1323     ESP\&.deepSleep ( ( interval * 1000 * 1000 ), WAKE_RF_DEFAULT) ;
1324 
1325 }
.fi
.SS "void CoolBoard::update (const char * answer)"
CoolBoard::update(mqtt answer): This method is provided to handle the configuration update of the different parts 
.PP
Definition at line 963 of file CoolBoard\&.cpp\&.
.PP
.nf
964 {
965     coolBoardLed\&.fadeIn(153,76,0,0\&.5);//shade of brown        
966 
967 #if DEBUG == 1
968 
969     Serial\&.println( F("Entering CoolBoard\&.update() ") );
970     Serial\&.println();
971     Serial\&.println( F("message is : ") );
972     Serial\&.println(answer);
973     Serial\&.println();
974 
975 #endif
976 
977     DynamicJsonBuffer jsonBuffer;
978     JsonObject & root = jsonBuffer\&.parseObject(answer);
979     JsonObject & stateDesired = root["state"];
980 
981 #if DEBUG == 1
982 
983     Serial\&.println( F("root json : ") );
984     root\&.printTo(Serial);
985     Serial\&.println();
986 
987     Serial\&.println( F("stateDesired json : "));
988     stateDesired\&.printTo(Serial);
989     Serial\&.println();
990     
991     Serial\&.print( F("jsonBuffer size : "));
992     Serial\&.println(jsonBuffer\&.size());
993 
994 #endif
995 
996     if (stateDesired\&.success())
997     {
998     
999     #if DEBUG == 1
1000 
1001         Serial\&.println( F("update message parsing : success") );
1002         Serial\&.println();
1003     
1004     #endif
1005 
1006             String answerDesired;
1007         
1008             stateDesired\&.printTo(answerDesired);
1009             
1010         #if DEBUG == 1      
1011         
1012             Serial\&.println( F("update is ok ") );
1013             Serial\&.println( F("desired update is : ") );         
1014             Serial\&.println(answerDesired);
1015             Serial\&.println("json size is : ");
1016             Serial\&.println(jsonBuffer\&.size() ) ;              
1017             Serial\&.println();
1018 
1019         
1020         #endif
1021             //manual mode check
1022             if(this->manual == 1 )
1023             { 
1024                 JsonObject & manualMode=stateDesired["manual"];
1025                 //json parse
1026                 for(auto kv : manualMode)
1027                 {
1028                 #if DEBUG == 1
1029 
1030                     Serial\&.print(F("writing to "));
1031                     Serial\&.println(kv\&.key);
1032                     Serial\&.print(F("state : "));
1033                     Serial\&.println(kv\&.value\&.as<bool>());       
1034                     
1035                 #endif              
1036 
1037                     if( strcmp(kv\&.key,"Act0") == 0 )
1038                     {
1039                     
1040                         jetPack\&.writeBit(0,kv\&.value\&.as<bool>() ); 
1041                         
1042                     }
1043                     else if(strcmp(kv\&.key,"Act1") == 0)
1044                     {
1045                         jetPack\&.writeBit(1,kv\&.value\&.as<bool>() ); 
1046 
1047                     }
1048                     else if(strcmp(kv\&.key,"Act2") == 0)
1049                     {
1050                         jetPack\&.writeBit(2,kv\&.value\&.as<bool>() ); 
1051 
1052                     }
1053                     else if(strcmp(kv\&.key,"Act3") == 0)
1054                     {
1055                         jetPack\&.writeBit(3,kv\&.value\&.as<bool>() ); 
1056 
1057                     }
1058                     else if(strcmp(kv\&.key,"Act4") == 0)
1059                     {
1060                         jetPack\&.writeBit(4,kv\&.value\&.as<bool>() ); 
1061 
1062                     }
1063                     else if(strcmp(kv\&.key,"Act5") == 0)
1064                     {
1065                         jetPack\&.writeBit(5,kv\&.value\&.as<bool>() ); 
1066 
1067                     }
1068                     else if(strcmp(kv\&.key,"Act6") == 0)
1069                     {
1070                         jetPack\&.writeBit(6,kv\&.value\&.as<bool>() ); 
1071 
1072                     }
1073                     else if (strcmp(kv\&.key,"Act7") == 0)
1074                     {
1075                         jetPack\&.writeBit(7,kv\&.value\&.as<bool>() ); 
1076 
1077                     }
1078                     else if (strcmp(kv\&.key,"ActB") == 0)
1079                     {
1080                         onBoardActor\&.write(kv\&.value\&.as<bool>() ); 
1081 
1082                     }
1083                                 
1084                 
1085                 }
1086 
1087                 
1088             }
1089 
1090             //saving the new configuration
1091             fileSystem\&.updateConfigFiles(answerDesired);
1092 
1093                 //answering the update msg:
1094             //reported = received configuration
1095             //desired=null
1096         
1097             String updateAnswer;
1098             String tempString;
1099             
1100             stateDesired\&.printTo(tempString);
1101             updateAnswer="{\"state\":{\"reported\":";
1102             updateAnswer+=tempString;
1103             updateAnswer+=",\"desired\":null}}";
1104 
1105         #if DEBUG == 1
1106 
1107             Serial\&.println( F("preparing answer message ") );
1108             Serial\&.println();
1109             Serial\&.println( F("updateAnswer : ") );
1110             Serial\&.println(updateAnswer);
1111         
1112         #endif  
1113 
1114             mqtt\&.publish(updateAnswer\&.c_str());
1115             
1116             mqtt\&.mqttLoop();
1117 
1118             delay(10);
1119         
1120             if(manual == 0 )
1121             {
1122                 //restart the esp to apply the config
1123                 ESP\&.restart();
1124             }
1125     }
1126     else
1127     {
1128     
1129     #if DEBUG == 1
1130 
1131         Serial\&.println( F("Failed to parse update message( OR no message received )") );
1132         Serial\&.println();
1133     
1134     #endif
1135     
1136     }
1137 
1138     coolBoardLed\&.strobe(153,76,0,0\&.5);//shade of brown
1139     coolBoardLed\&.fadeOut(153,76,0,0\&.5);//shade of brown                               
1140 }
.fi
.SS "String CoolBoard::userData ()"
\fBCoolBoard::userData()\fP: This method is provided to return the user's data\&.
.PP
\fBReturns:\fP
.RS 4
json string of the user's data 
.RE
.PP

.PP
Definition at line 1266 of file CoolBoard\&.cpp\&.
.PP
.nf
1267 {
1268 
1269 #if DEBUG == 1
1270 
1271     Serial\&.println( F("Entering CoolBoard\&.userData() ") );
1272     Serial\&.println();
1273 
1274 #endif
1275 
1276     String tempMAC = WiFi\&.macAddress();
1277 
1278     tempMAC\&.replace(":", "");
1279 
1280     String userJson = "{\"user\":\"";
1281 
1282     userJson += mqtt\&.getUser();
1283 
1284     userJson += "\",\"timestamp\":\"";
1285 
1286     userJson += rtc\&.getESDate(); // "timestamp":"20yy-mm-ddThh:mm:ssZ"
1287 
1288     userJson += "\",\"mac\":\"";
1289 
1290     userJson += tempMAC;
1291 
1292     userJson += "\"}";
1293 
1294 #if DEBUG == 1
1295 
1296     Serial\&.println( F("userData is : ") );
1297     Serial\&.println(userJson);
1298     Serial\&.println();
1299 
1300 #endif  
1301     
1302     return(userJson);
1303     
1304 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "String CoolBoard::answer =''\fC [private]\fP"

.PP
Definition at line 126 of file CoolBoard\&.h\&.
.SS "\fBCoolBoardLed\fP CoolBoard::coolBoardLed\fC [private]\fP"

.PP
Definition at line 94 of file CoolBoard\&.h\&.
.SS "\fBCoolBoardSensors\fP CoolBoard::coolBoardSensors\fC [private]\fP"

.PP
Definition at line 92 of file CoolBoard\&.h\&.
.SS "String CoolBoard::data =''\fC [private]\fP"

.PP
Definition at line 124 of file CoolBoard\&.h\&.
.SS "const int CoolBoard::EnI2C = 5\fC [private]\fP"

.PP
Definition at line 128 of file CoolBoard\&.h\&.
.SS "\fBExternalSensors\fP CoolBoard::externalSensors\fC [private]\fP"

.PP
Definition at line 106 of file CoolBoard\&.h\&.
.SS "bool CoolBoard::externalSensorsActive =0\fC [private]\fP"

.PP
Definition at line 116 of file CoolBoard\&.h\&.
.SS "\fBCoolFileSystem\fP CoolBoard::fileSystem\fC [private]\fP"

.PP
Definition at line 90 of file CoolBoard\&.h\&.
.SS "\fBIrene3000\fP CoolBoard::irene3000\fC [private]\fP"

.PP
Definition at line 104 of file CoolBoard\&.h\&.
.SS "bool CoolBoard::ireneActive =0\fC [private]\fP"

.PP
Definition at line 112 of file CoolBoard\&.h\&.
.SS "\fBJetpack\fP CoolBoard::jetPack\fC [private]\fP"

.PP
Definition at line 102 of file CoolBoard\&.h\&.
.SS "bool CoolBoard::jetpackActive =0\fC [private]\fP"

.PP
Definition at line 114 of file CoolBoard\&.h\&.
.SS "unsigned long CoolBoard::logInterval =1\fC [private]\fP"

.PP
Definition at line 122 of file CoolBoard\&.h\&.
.SS "bool CoolBoard::manual =0\fC [private]\fP"

.PP
Definition at line 120 of file CoolBoard\&.h\&.
.SS "\fBCoolMQTT\fP CoolBoard::mqtt\fC [private]\fP"

.PP
Definition at line 100 of file CoolBoard\&.h\&.
.SS "\fBCoolBoardActor\fP CoolBoard::onBoardActor\fC [private]\fP"

.PP
Definition at line 108 of file CoolBoard\&.h\&.
.SS "\fBCoolTime\fP CoolBoard::rtc\fC [private]\fP"

.PP
Definition at line 96 of file CoolBoard\&.h\&.
.SS "bool CoolBoard::sleepActive =0\fC [private]\fP"

.PP
Definition at line 118 of file CoolBoard\&.h\&.
.SS "bool CoolBoard::userActive =0\fC [private]\fP"

.PP
Definition at line 110 of file CoolBoard\&.h\&.
.SS "\fBCoolWifi\fP CoolBoard::wifiManager\fC [private]\fP"

.PP
Definition at line 98 of file CoolBoard\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolBoardAPI from the source code\&.
