.TH "CoolBoard" 3 "Tue Aug 22 2017" "CoolBoardAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoolBoard \- This class manages the \fBCoolBoard\fP and all of Its functions\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolBoard\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBCoolBoard\fP ()"
.br
.ti -1c
.RI "void \fBbegin\fP ()"
.br
.ti -1c
.RI "bool \fBconfig\fP ()"
.br
.ti -1c
.RI "void \fBupdate\fP (const char *\fBanswer\fP)"
.br
.ti -1c
.RI "void \fBoffLineMode\fP ()"
.br
.ti -1c
.RI "void \fBonLineMode\fP ()"
.br
.ti -1c
.RI "int \fBconnect\fP ()"
.br
.ti -1c
.RI "int \fBisConnected\fP ()"
.br
.ti -1c
.RI "unsigned long \fBgetLogInterval\fP ()"
.br
.ti -1c
.RI "void \fBprintConf\fP ()"
.br
.ti -1c
.RI "void \fBsleep\fP (unsigned long interval)"
.br
.ti -1c
.RI "String \fBreadSensors\fP ()"
.br
.ti -1c
.RI "void \fBinitReadI2C\fP ()"
.br
.ti -1c
.RI "String \fBuserData\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBCoolFileSystem\fP \fBfileSystem\fP"
.br
.ti -1c
.RI "\fBCoolBoardSensors\fP \fBcoolBoardSensors\fP"
.br
.ti -1c
.RI "\fBCoolBoardLed\fP \fBcoolBoardLed\fP"
.br
.ti -1c
.RI "\fBCoolTime\fP \fBrtc\fP"
.br
.ti -1c
.RI "\fBCoolWifi\fP \fBwifiManager\fP"
.br
.ti -1c
.RI "\fBCoolMQTT\fP \fBmqtt\fP"
.br
.ti -1c
.RI "\fBJetpack\fP \fBjetPack\fP"
.br
.ti -1c
.RI "\fBIrene3000\fP \fBirene3000\fP"
.br
.ti -1c
.RI "\fBExternalSensors\fP \fBexternalSensors\fP"
.br
.ti -1c
.RI "\fBCoolBoardActor\fP \fBonBoardActor\fP"
.br
.ti -1c
.RI "bool \fBuserActive\fP =0"
.br
.ti -1c
.RI "bool \fBireneActive\fP =0"
.br
.ti -1c
.RI "bool \fBjetpackActive\fP =0"
.br
.ti -1c
.RI "bool \fBexternalSensorsActive\fP =0"
.br
.ti -1c
.RI "bool \fBsleepActive\fP =0"
.br
.ti -1c
.RI "bool \fBmanual\fP =0"
.br
.ti -1c
.RI "unsigned long \fBlogInterval\fP =1"
.br
.ti -1c
.RI "String \fBdata\fP =''"
.br
.ti -1c
.RI "String \fBanswer\fP =''"
.br
.ti -1c
.RI "const int \fBEnI2C\fP = 5"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class manages the \fBCoolBoard\fP and all of Its functions\&. 
.PP
Definition at line 34 of file CoolBoard\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "CoolBoard::CoolBoard ()"
\fBCoolBoard::CoolBoard()\fP: This Constructor is provided to start the I2C interface and Init the different used pins 
.PP
Definition at line 28 of file CoolBoard\&.cpp\&.
.PP
.nf
29 {
30 
31 #if DEBUG == 1
32 
33     Serial\&.println( F("Entering CoolBoard Constructor") );
34     Serial\&.println();
35 
36 #endif
37     
38     Wire\&.begin(2, 14);                       //I2C init 
39 
40     pinMode(EnI2C, OUTPUT);        //Declare I2C Enable pin 
41 
42 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void CoolBoard::begin ()"
\fBCoolBoard::begin()\fP: This method is provided to configure and start the used CoolKit Parts\&. It also starts the first connection try If Serial is enabled,it prints the configuration of the used parts\&. 
.PP
Definition at line 53 of file CoolBoard\&.cpp\&.
.PP
.nf
54 {
55 
56 #if DEBUG == 1
57 
58     Serial\&.println( F("Starting the CoolBoard  ")  );
59     Serial\&.println( F("Entering CoolBoard\&.begin() ")  );
60     Serial\&.println();
61 #endif  
62 
63 #if DEBUG == 0
64     Serial\&.println( F("Starting Coolboard\&.\&.\&."));
65 #endif
66 
67 
68     delay(100);
69     
70     coolBoardLed\&.write(255,128,0);//orange
71 
72     this->initReadI2C();
73     delay(50);
74 
75     coolBoardSensors\&.config();
76     coolBoardSensors\&.begin();
77     delay(100);
78     
79     onBoardActor\&.config();
80     onBoardActor\&.begin();
81     delay(100);
82     
83     wifiManager\&.config();
84     wifiManager\&.begin();
85     delay(100);
86 
87     mqtt\&.config();
88     mqtt\&.begin();
89     delay(100);
90 
91 #if DEBUG == 1
92 
93     coolBoardLed\&.printConf();
94 
95     coolBoardSensors\&.printConf();
96 
97     onBoardActor\&.printConf();
98 
99     wifiManager\&.printConf();
100 
101     mqtt\&.printConf();
102     
103 
104 #endif
105 
106 
107     if (jetpackActive)
108     {
109         jetPack\&.config();
110         jetPack\&.begin();
111 
112     #if DEBUG == 1
113         
114         jetPack\&.printConf();
115 
116     #endif
117         delay(100);
118     }
119 
120     if (ireneActive)
121     {
122         irene3000\&.config();
123         irene3000\&.begin();
124 
125     #if DEBUG == 1
126 
127         irene3000\&.printConf();
128 
129     #endif
130         delay(100);
131     }
132 
133     if (externalSensorsActive)
134     {
135         externalSensors\&.config();
136         externalSensors\&.begin();
137 
138     #if DEBUG == 1
139 
140         externalSensors\&.printConf();
141 
142     #endif
143         delay(100);
144     }
145     
146     coolBoardLed\&.fadeOut(255,128,0,0\&.5);//orange
147 
148     this->connect();
149     delay(100);
150 
151     rtc\&.config();
152     rtc\&.begin();
153 
154 #if DEBUG == 1
155 
156     rtc\&.printConf();
157 
158 #endif
159     delay(100);
160     
161     coolBoardLed\&.blink(0,255,0,0\&.5);//green
162 
163 }
.fi
.SS "bool CoolBoard::config ()"
\fBCoolBoard::config()\fP: This method is provided to configure the \fBCoolBoard\fP : -log interval -irene3000 activated/deactivated -jetpack activated/deactivated -external Sensors activated/deactivated -mqtt server timeout
.PP
\fBReturns:\fP
.RS 4
true if configuration is done, false otherwise 
.RE
.PP

.PP
Definition at line 705 of file CoolBoard\&.cpp\&.
.PP
.nf
706 {
707     yield();
708 
709 #if DEBUG == 1
710 
711     Serial\&.println( F("Entering CoolBoard\&.config() ") );
712     Serial\&.println();
713 
714 #endif
715 #if DEBUG == 0
716     Serial\&.println();
717     Serial\&.println( F("Loading configuration for this CoolBoard\&.\&.\&."));
718 #endif 
719 
720     //open file system
721     fileSystem\&.begin();
722     
723     //start the led
724     coolBoardLed\&.config();
725     coolBoardLed\&.begin();
726     coolBoardLed\&.fadeIn(243,171,46,0\&.5);//shade of orange     
727 
728     
729     //open configuration file
730     File configFile = SPIFFS\&.open("/coolBoardConfig\&.json", "r");
731     
732     if (!configFile)
733 
734     {
735     
736         Serial\&.println( F("failed to read /coolBoardConfig\&.json  ") );
737 
738         coolBoardLed\&.blink(255,0,0,0\&.5);//shade of red        
739         return(false);
740     }
741 
742     else
743     {
744         size_t size = configFile\&.size();
745 
746         // Allocate a buffer to store contents of the file\&.
747         std::unique_ptr < char[] > buf(new char[size]);
748 
749         configFile\&.readBytes(buf\&.get(), size);
750 
751         DynamicJsonBuffer jsonBuffer;
752 
753         JsonObject & json = jsonBuffer\&.parseObject(buf\&.get());
754 
755         if (!json\&.success())
756         {
757         
758             Serial\&.println( F("failed to parse CoolBoard Config json object ") );
759     
760             coolBoardLed\&.blink(255,0,0,0\&.5);//shade of red        
761             return(false);
762         }
763 
764         else
765         {   
766         
767         #if DEBUG == 1
768             
769             Serial\&.println( F("configuration json : ") );
770             json\&.printTo(Serial);
771             Serial\&.println();
772             
773             Serial\&.print(F("jsonBuffer size : "));
774             Serial\&.print(jsonBuffer\&.size());
775             Serial\&.println();
776 
777         #endif
778             
779             //parsing userActive Key
780             if (json["userActive"]\&.success())
781             {
782                 this -> userActive = json["userActive"];
783             }
784 
785             else
786             {
787                 this -> userActive = this -> userActive;
788             }
789             json["userActive"] = this -> userActive;
790 
791             //parsing logInterval key
792             if (json["logInterval"]\&.success())
793             {
794                 this -> logInterval = json["logInterval"];
795             }
796             else
797             {
798                 this -> logInterval = this -> logInterval;
799             }
800             json["logInterval"] = this -> logInterval;
801             
802             //parsing ireneActive key           
803             if (json["ireneActive"]\&.success())
804             {
805                 this -> ireneActive = json["ireneActive"];
806             }
807             else
808             {
809                 this -> ireneActive = this -> ireneActive;
810             }
811             json["ireneActive"] = this -> ireneActive;
812             
813             //parsing jetpackActive key
814             if (json["jetpackActive"]\&.success())
815             {
816                 this -> jetpackActive = json["jetpackActive"];
817             }
818             else
819             {
820                 this -> jetpackActive = this -> jetpackActive;
821             }
822             json["jetpackActive"] = this -> jetpackActive;
823 
824             //parsing externalSensorsActive key
825             if (json["externalSensorsActive"]\&.success())
826             {
827                 this -> externalSensorsActive = json["externalSensorsActive"];
828             }
829             else
830             {
831                 this -> externalSensorsActive = this -> externalSensorsActive;
832             }
833             json["externalSensorsActive"] = this -> externalSensorsActive;
834 
835             
836             //parsing sleepActive key
837             if (json["sleepActive"]\&.success())
838             {
839                 this -> sleepActive = json["sleepActive"];
840             }
841             else
842             {
843                 this -> sleepActive = this -> sleepActive;
844             }
845             json["sleepActive"] = this -> sleepActive;
846 
847 
848             //parsing manual key
849             if (json["manual"]\&.success())
850             {
851                 this -> manual = json["manual"];
852             }
853             else
854             {
855                 this -> manual = this -> manual;
856             }
857             json["manual"] = this -> manual;
858 
859 
860 
861             //saving the current/correct configuration
862             configFile\&.close();
863             configFile = SPIFFS\&.open("/coolBoardConfig\&.json", "w");
864             if (!configFile)
865             {
866             
867                 Serial\&.println( F("failed to write to /coolBoardConfig\&.json") );
868                 Serial\&.println();
869 
870                 coolBoardLed\&.blink(255,0,0,0\&.5);//shade of red        
871                 return(false);
872             }
873 
874             json\&.printTo(configFile);
875             configFile\&.close();
876             #if DEBUG == 0
877 
878                 Serial\&.println( F("Configuration loaded : OK"));
879                 Serial\&.println();
880 
881             #endif
882 
883             return(true);
884         }
885     }
886 
887     coolBoardLed\&.strobe(243,171,46,0\&.5);//shade of orange
888     
889     coolBoardLed\&.fadeOut(243,171,46,0\&.5);//shade of orange                
890 }
.fi
.SS "int CoolBoard::connect ()"
\fBCoolBoard::connect()\fP: This method is provided to manage the network connection and the mqtt connection\&.
.PP
\fBReturns:\fP
.RS 4
mqtt client state 
.RE
.PP

.PP
Definition at line 224 of file CoolBoard\&.cpp\&.
.PP
.nf
225 {
226 
227 #if DEBUG == 1  
228 
229     Serial\&.println( F("Entering CoolBoard\&.connect ") );
230     Serial\&.println();
231     Serial\&.println( F("Connecting the CoolBoard  ") );
232     delay(100);
233 
234 #endif
235     coolBoardLed\&.write(0,0,255);//blue
236 
237     
238             
239     
240 #if DEBUG == 1      
241 
242     Serial\&.println( F("Launching CoolWifi") );
243     Serial\&.println();
244 
245 #endif
246     wifiManager\&.connect();
247     delay(100);
248 
249 
250     //only attempt MQTT connection when Wifi is Connected
251     if (wifiManager\&.state() == WL_CONNECTED)
252     {
253 
254     #if DEBUG == 1  
255     
256         Serial\&.println( F("Launching mqtt\&.connect()") );
257         Serial\&.println();
258     
259     #endif  
260         //logInterval in seconds
261         mqtt\&.connect(this -> getLogInterval()*2);
262         delay(100);
263     }
264     
265         
266     
267     
268 #if DEBUG == 1
269 
270     Serial\&.println( F("mqtt state is :") );
271     Serial\&.println(mqtt\&.state());
272     Serial\&.println();
273     delay(100);
274 
275 #endif
276 
277     coolBoardLed\&.blink(0,0,255,0\&.5);//blue
278 
279     return(mqtt\&.state());
280 }
.fi
.SS "unsigned long CoolBoard::getLogInterval ()"
\fBCoolBoard::getLogInterval()\fP: This method is provided to get the log interval
.PP
\fBReturns:\fP
.RS 4
interval value in s 
.RE
.PP

.PP
Definition at line 1129 of file CoolBoard\&.cpp\&.
.PP
.nf
1130 {
1131 
1132 #if DEBUG == 1
1133 
1134     Serial\&.println( F("Entering CoolBoard\&.getLogInterval() ") );
1135     Serial\&.println();
1136     Serial\&.println( F("log Interval is :") );
1137     Serial\&.println(logInterval);
1138     Serial\&.println();
1139 
1140 #endif
1141 
1142     return(this -> logInterval);
1143 }
.fi
.SS "void CoolBoard::initReadI2C ()"
\fBCoolBoard::initReadI2C()\fP: This method is provided to enable the I2C Interface\&. 
.PP
Definition at line 1224 of file CoolBoard\&.cpp\&.
.PP
.nf
1225 {
1226 
1227 #if DEBUG == 1
1228 
1229     Serial\&.println( F("Entering CoolBoard\&.initReadI2C()") );
1230     Serial\&.println();
1231 
1232 #endif
1233  
1234     digitalWrite(EnI2C,HIGH);//HIGH= I2C Enable
1235 
1236 }
.fi
.SS "int CoolBoard::isConnected ()"
\fBCoolBoard::isConnected()\fP
.PP
This method is provided to check if the card is connected to Wifi and MQTT
.PP
\fBReturns:\fP
.RS 4
0 : connected -1: Wifi Not Connected -2: MQTT Not Connected 
.RE
.PP

.PP
Definition at line 176 of file CoolBoard\&.cpp\&.
.PP
.nf
177 {
178 
179 #if DEBUG == 1  
180 
181     Serial\&.println( F("Entering CoolBoard\&.isConnected ") );
182     Serial\&.println();
183 
184 #endif
185     if (wifiManager\&.state() != WL_CONNECTED)
186     {
187     
188         Serial\&.println(F("Wifi Not Connected"));
189 
190     #if DEBUG == 1
191 
192         Serial\&.println(F("Wifi State is "));
193         Serial\&.println(wifiManager\&.state());
194         
195     #endif
196         return(-1);
197     }
198     
199     if(mqtt\&.state() != 0)
200     {
201         
202         Serial\&.println( F("MQTT not Connected"));
203 
204     #if DEBUG==1
205         Serial\&.println( F("mqtt state is :") );
206         Serial\&.println(mqtt\&.state()); 
207     
208     #endif
209 
210     }
211     
212     return(0);
213 
214 }
.fi
.SS "void CoolBoard::offLineMode ()"
CoolBoard::offlineMode(): This method is provided to manage the offLine mode: -read sensors -do actions -save data in the file system -if there is WiFi but no Internet : make data available over AP -if there is no connection : retry to connect 
.PP
Definition at line 551 of file CoolBoard\&.cpp\&.
.PP
.nf
552 {
553     coolBoardLed\&.fade(51,100,50,0\&.5);//dark shade of green    
554 #if DEBUG == 1  
555     
556     Serial\&.println( F("Entering off line mode ") );  
557     
558 #endif
559 
560 #if DEBUG == 0
561 
562     Serial\&.println( F("CoolBoard is in Offline Mode"));
563 
564 #endif
565 
566     //read user data if user is active
567     if(userActive)
568     {
569 
570         coolBoardLed\&.fadeIn(245,237,27,0\&.5);//shade of yellow
571 
572     #if DEBUG == 1
573         
574         Serial\&.println( F("User is Active") );
575         Serial\&.println( F("Collecting User's data ( mac,username,timeStamp )") );
576         Serial\&.println();
577 
578     #endif
579 
580         coolBoardLed\&.blink(245,237,27,0\&.5);//shade of yellow  
581 
582         //reading user data
583         data=this->userData();//{"":"","":"","",""}
584 
585         //formatting json 
586         data\&.setCharAt( data\&.lastIndexOf('}') , ',');//{"":"","":"","","",
587         
588                 
589         //read sensors data
590 
591         Serial\&.println( F("Collecting sensors data ") );
592         Serial\&.println();
593 
594         data+=this->readSensors();//{"":"","":"","","",{\&.\&.\&.\&.\&.\&.\&.}
595 
596         
597 
598         //formatting json correctly
599         data\&.remove(data\&.lastIndexOf('{'), 1);//{"":"","":"","","",\&.\&.\&.\&.\&.\&.\&.}
600 
601         coolBoardLed\&.fadeOut(245,237,27,0\&.5);//shade of yellow
602                 
603     }   
604     else
605     {
606         //read sensors data
607     #if DEBUG == 1
608 
609         Serial\&.println( F("Collecting sensors data ") );
610         Serial\&.println();
611 
612     #endif
613 
614         coolBoardLed\&.fade(190,100,150,0\&.5);//shade of violet      
615 
616         data=this->readSensors();//{\&.\&.,\&.\&.,\&.\&.}
617     }
618 
619     coolBoardLed\&.fade(51,100,50,0\&.5);//dark shade of green    
620 
621     //do action
622 
623     if (jetpackActive)
624     {
625     
626 
627 
628     #if DEBUG == 1
629 
630         Serial\&.println( F("jetpack is Active ") );
631         Serial\&.println( F("jetpack doing action ") );
632         Serial\&.println();
633     
634     #endif
635         coolBoardLed\&.fade(100,100,150,0\&.5);//dark shade of blue   
636     
637         jetPack\&.doAction( data\&.c_str() );
638     }
639     
640     delay(100);
641 
642     onBoardActor\&.doAction( data\&.c_str() );    
643 
644 
645     coolBoardLed\&.fade(51,100,50,0\&.5);//dark shade of green    
646     
647     //saving data in the file system
648     
649     fileSystem\&.saveSensorData( data\&.c_str() );
650 
651     #if DEBUG == 0
652 
653         Serial\&.println( F("saving Data in Memory : OK"));
654 
655     #endif
656 
657     coolBoardLed\&.fadeOut(51,100,50,0\&.5);//dark shade of green
658 
659     //case we have wifi but no internet
660     if( (wifiManager\&.state() == WL_CONNECTED) && ( mqtt\&.state()!=0 ) )
661     {
662         
663         Serial\&.println(F("there is Wifi but no Internet"));
664         Serial\&.println(F("lunching AP to check saved files"));
665         Serial\&.println(F("and Add new WiFi if needed"));
666         
667         wifiManager\&.connectAP();
668         
669     }
670     
671     //case we have no connection at all
672     if( wifiManager\&.state() != WL_CONNECTED )
673     {
674     
675     #if DEBUG == 1
676         
677         Serial\&.println(F("there is No Wifi "));
678         Serial\&.println(F("retrying to connect"));
679     
680     #endif
681 
682     #if DEBUG == 0
683         Serial\&.println( F("there is no WiFi\&.\&.\&."));
684     #endif
685         
686         this->connect();//nomad case : just run wifiMulti
687                 //normal case : run wifiMulti+AP
688         
689     }   
690 
691 }
.fi
.SS "void CoolBoard::onLineMode ()"
\fBCoolBoard::onLineMode()\fP: This method is provided to manage the online mode: -update clock -read sensor -do actions -publish data -read answer -update config 
.PP
Definition at line 292 of file CoolBoard\&.cpp\&.
.PP
.nf
293 {
294 
295     coolBoardLed\&.fadeIn(128,255,50,0\&.5);//shade of green
296 
297 #if DEBUG == 1
298 
299     Serial\&.println( F("Entering CoolBoard\&.onLineMode() ") );
300     Serial\&.println();
301 
302 #endif
303 #if DEBUG == 0
304 
305     Serial\&.println( F("CoolBoard is in Online Mode"));
306 
307 #endif
308 
309     data="";
310     answer="";
311 
312     //send saved data if any
313     if(fileSystem\&.isDataSaved())
314     {
315 
316         coolBoardLed\&.fadeIn(128,128,255,0\&.5);//shade of blue
317 
318         Serial\&.println( F("There is data saved on the File System") );
319         Serial\&.println( F("Sending saved data over MQTT ") );
320         Serial\&.println();
321         coolBoardLed\&.strobe(128,128,255,0\&.5);//shade of blue 
322 
323         mqtt\&.publish("sending saved data");
324         mqtt\&.mqttLoop();
325 
326 
327         
328         int size=0;
329         std::unique_ptr<String[]> savedData(std::move(fileSystem\&.getSensorSavedData(size)));//{\&.\&.,\&.\&.,\&.\&.}
330 
331         int i=0;
332         //loop through the array
333         while(i<size)
334         {
335             //formatting data:
336         
337             String jsonData = "{\"state\":{\"reported\":";
338             jsonData += savedData[i]; // {"state":{"reported":{\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}
339             jsonData += " } }"; // {"state":{"reported":{\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}  } }
340 
341         #if DEBUG == 1 
342             Serial\&.println(F("Size is : "));
343             Serial\&.println(size);
344             Serial\&.print(F("sending line N°"));
345             Serial\&.println(i);
346             Serial\&.println(jsonData);
347             Serial\&.println();
348 
349         #endif
350 
351             coolBoardLed\&.strobe(128,128,255,0\&.5);//shade of blue
352         
353             mqtt\&.publish( jsonData\&.c_str() );
354             mqtt\&.mqttLoop();
355         
356             coolBoardLed\&.fadeOut(128,128,255,0\&.5);//shade of blue
357             
358             i++;
359             yield();
360         }       
361 
362 
363     #if DEBUG == 1
364 
365         Serial\&.println( F("Saved data sent ") );
366         Serial\&.println();
367     
368     #endif
369 
370     }
371 
372     coolBoardLed\&.blink(128,255,50,0\&.5);//shade of green
373 
374     //clock update
375     Serial\&.println( F("Re-checking RTC\&.\&.\&."));
376     rtc\&.update();
377 
378     //read user data if user is active
379     if(userActive)
380     {
381         coolBoardLed\&.fadeIn(245,237,27,0\&.5);//shade of yellow
382     
383     #if DEBUG == 1
384 
385         Serial\&.println( F("User is Active") );
386         Serial\&.println( F("Collecting User's data ( mac,username,timeStamp )") );
387         Serial\&.println();
388     
389     #endif  
390         coolBoardLed\&.blink(245,237,27,0\&.5);//shade of yellow  
391 
392         //reading user data
393         data=this->userData();//{"":"","":"","",""}
394 
395         //formatting json 
396         data\&.setCharAt( data\&.lastIndexOf('}') , ',');//{"":"","":"","","",
397                 
398         //read sensors data
399     #if DEBUG == 1
400 
401         Serial\&.println( F("Collecting sensors data ") );
402         Serial\&.println();
403     
404     #endif
405 
406         data+=this->readSensors();//{"":"","":"","","",{\&.\&.\&.\&.\&.\&.\&.}       
407 
408         //formatting json correctly
409         data\&.remove(data\&.lastIndexOf('{'), 1);//{"":"","":"","","",\&.\&.\&.\&.\&.\&.\&.}
410         
411         coolBoardLed\&.fadeOut(245,237,27,0\&.5);//shade of yellow
412                 
413     }   
414     else
415     {
416         //read sensors data
417     #if DEBUG == 1
418 
419         Serial\&.println( F("Collecting sensors data ") );
420         Serial\&.println();
421     
422     #endif
423         coolBoardLed\&.fade(190,100,150,0\&.5);//shade of violet      
424         data=this->readSensors();//{\&.\&.,\&.\&.,\&.\&.}
425     }
426     
427 
428 
429 
430     //do action
431 
432     if (jetpackActive)
433     {
434 
435 
436     #if DEBUG ==1
437 
438         Serial\&.println( F("jetpack is Active ") );
439         Serial\&.println();
440 
441     #endif
442     
443         if(this->manual == 0 )
444         {
445 
446             Serial\&.println( F("jetpack doing action ") );
447 
448             coolBoardLed\&.fade(100,100,150,0\&.5);//dark shade of blue       
449 
450             jetPack\&.doAction(data\&.c_str());
451             
452 
453         
454         }
455         
456         else if(this->manual == 1 )
457         {
458         
459             Serial\&.println(F("we are in manual mode"));
460             mqtt\&.mqttLoop();
461             answer = mqtt\&.read();
462             this -> update(answer\&.c_str());
463         }
464     }
465 
466     delay(100);
467 
468     onBoardActor\&.doAction( data\&.c_str() );    
469 
470 
471 
472     
473     coolBoardLed\&.fadeIn(128,255,50,0\&.5);//shade of green
474 
475     //formatting data:
476     String jsonData = "{\"state\":{\"reported\":";
477     jsonData += data; // {"state":{"reported":{\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}
478     jsonData += " } }"; // {"state":{"reported":{\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}  } }
479     
480     //mqtt client loop to allow data handling
481     mqtt\&.mqttLoop();
482 
483     coolBoardLed\&.blink(128,255,50,0\&.5);//shade of green   
484 
485     //read mqtt answer
486     answer = mqtt\&.read();
487 
488 #if DEBUG == 1 
489 
490     Serial\&.println( F("checking if there's an MQTT message ")  );
491     Serial\&.println( F("answer is : ") ); 
492     Serial\&.println(answer);  
493     Serial\&.println();
494 
495 #endif  
496 
497     coolBoardLed\&.fadeOut(128,255,50,0\&.5);//shade of green 
498 
499     //check if the configuration needs update 
500     //and update it if needed 
501     this -> update(answer\&.c_str());
502     
503     coolBoardLed\&.fadeIn(128,255,50,0\&.5);//shade of green  
504 
505     //publishing data   
506     if( this->sleepActive==0 )  
507     {   
508         coolBoardLed\&.strobe(255,0,230,0\&.5);//shade of pink
509         
510         //logInterval in seconds
511         mqtt\&.publish( jsonData\&.c_str(), this->getLogInterval() );
512         mqtt\&.mqttLoop();
513     
514     }
515     else
516     {
517         coolBoardLed\&.strobe(230,255,0,0\&.5);//shade of yellow  
518 
519         mqtt\&.publish(jsonData\&.c_str());       
520         mqtt\&.mqttLoop();
521         answer = mqtt\&.read();
522         this ->update(answer\&.c_str());
523 
524         //logInterval in seconds
525         this->sleep( this->getLogInterval() ) ;
526     }
527 
528     coolBoardLed\&.fadeOut(128,255,50,0\&.5);//shade of green     
529 
530     mqtt\&.mqttLoop();
531 
532     //read mqtt answer
533     answer = mqtt\&.read();
534     this -> update(answer\&.c_str());  
535 
536     coolBoardLed\&.blink(128,255,50,0\&.5);//shade of green   
537 
538 
539 }
.fi
.SS "void CoolBoard::printConf ()"
\fBCoolBoard::printConf()\fP: This method is provided to print the configuration to the Serial Monitor\&. 
.PP
Definition at line 899 of file CoolBoard\&.cpp\&.
.PP
.nf
900 {
901 
902 #if DEBUG == 1
903     
904     Serial\&.println( F("Entering CoolBoard\&.printConf() ") );
905     Serial\&.println();
906 
907 #endif
908 
909     Serial\&.println( F("Printing Cool Board Configuration "));
910     Serial\&.print( F("log interval        : "));
911     Serial\&.println(this->logInterval);
912 
913     Serial\&.print( F("irene active        : "));
914     Serial\&.println(this->ireneActive);
915 
916     Serial\&.print( F("jetpack active      : "));
917     Serial\&.println(this->jetpackActive);
918 
919     Serial\&.print( F("external sensors active     : "));
920     Serial\&.println(this->externalSensorsActive);
921 
922     Serial\&.print( F("sleep active        : "));
923     Serial\&.println(this->sleepActive);
924 
925     Serial\&.print( F("user active         : "));
926     Serial\&.println(this->userActive);
927 
928     Serial\&.print( F("manual active       : "));
929     Serial\&.println(this->manual);
930 
931     Serial\&.println();
932 
933 
934 
935 
936 }
.fi
.SS "String CoolBoard::readSensors ()"
\fBCoolBoard::readSensors()\fP: This method is provided to read and format all the sensors data in a single json\&.
.PP
\fBReturns:\fP
.RS 4
json string of all the sensors read\&. 
.RE
.PP

.PP
Definition at line 1153 of file CoolBoard\&.cpp\&.
.PP
.nf
1154 {
1155 
1156     coolBoardLed\&.fadeIn(128,255,0,0\&.5);//light shade of green
1157                 
1158 #if DEBUG == 1
1159 
1160     Serial\&.println( F("Entering CoolBoard\&.readSensors()") );
1161     Serial\&.println();
1162 
1163 #endif
1164     coolBoardLed\&.strobe(128,255,0,0\&.5);//light shade of green
1165 
1166     String sensorsData;
1167     
1168     this->initReadI2C();
1169 
1170     sensorsData = coolBoardSensors\&.read(); // {\&.\&.,\&.\&.,\&.\&.}
1171     
1172     if (externalSensorsActive)
1173     {
1174         sensorsData += externalSensors\&.read(); // {\&.\&.,\&.\&.,\&.\&.}{\&.\&.,\&.\&.}
1175 
1176         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf('}'), ','); // {\&.\&.,\&.\&.,\&.\&.}{\&.\&.,\&.\&.,
1177         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf('{'), ','); // {\&.\&.,\&.\&.,\&.\&.},\&.\&.,\&.\&.,
1178         sensorsData\&.remove(sensorsData\&.lastIndexOf('}'), 1); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,
1179         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf(','), '}'); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}
1180 
1181     }
1182     if (ireneActive)
1183     {
1184         sensorsData += irene3000\&.read(); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}{\&.\&.,\&.\&.,\&.\&.}
1185 
1186         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf('}'), ','); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}{\&.\&.,\&.\&.,\&.\&.,
1187         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf('{'), ','); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.},\&.\&.,\&.\&.,\&.\&.,
1188         sensorsData\&.remove(sensorsData\&.lastIndexOf('}'), 1); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,
1189         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf(','), '}'); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}        
1190         
1191         
1192     }
1193 
1194     //getting Hour:
1195     tmElements_t tm;
1196     tm=rtc\&.getTimeDate();
1197     
1198     //adding Hour
1199     sensorsData\&.remove(sensorsData\&.lastIndexOf('}'), 1); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&., 
1200     sensorsData+=",\"hour\":";  
1201     sensorsData+=tm\&.Hour;
1202     sensorsData+=",\"minute\":";
1203     sensorsData+=tm\&.Minute;
1204     sensorsData+="}";
1205     
1206 #if DEBUG == 1
1207     Serial\&.println();
1208     Serial\&.println( F("sensors data is ") );
1209     Serial\&.println(sensorsData);
1210     Serial\&.println();
1211 
1212 #endif
1213     coolBoardLed\&.fadeOut(128,255,0,0\&.5);//light shade of green
1214 
1215     return(sensorsData);
1216 
1217 }
.fi
.SS "void CoolBoard::sleep (unsigned long interval)"
CoolBoard::sleep(int interval): This method is provided to allow the board to enter deepSleep mode for a period of time equal to interval in s 
.PP
Definition at line 1293 of file CoolBoard\&.cpp\&.
.PP
.nf
1294 {
1295 
1296     Serial\&.println( F("Entering CoolBoard\&.sleep() ") );
1297     Serial\&.print( F("going to sleep for ") );
1298     Serial\&.print(interval);
1299     Serial\&.println(F("s") );
1300     Serial\&.println();
1301     
1302     //interval is in seconds , interval*1000*1000 in µS
1303     ESP\&.deepSleep ( ( interval * 1000 * 1000 ), WAKE_RF_DEFAULT) ;
1304 
1305 }
.fi
.SS "void CoolBoard::update (const char * answer)"
CoolBoard::update(mqtt answer): This method is provided to handle the configuration update of the different parts 
.PP
Definition at line 943 of file CoolBoard\&.cpp\&.
.PP
.nf
944 {
945     coolBoardLed\&.fadeIn(153,76,0,0\&.5);//shade of brown        
946 
947 #if DEBUG == 1
948 
949     Serial\&.println( F("Entering CoolBoard\&.update() ") );
950     Serial\&.println();
951     Serial\&.println( F("message is : ") );
952     Serial\&.println(answer);
953     Serial\&.println();
954 
955 #endif
956 
957     DynamicJsonBuffer jsonBuffer;
958     JsonObject & root = jsonBuffer\&.parseObject(answer);
959     JsonObject & stateDesired = root["state"];
960 
961 #if DEBUG == 1
962 
963     Serial\&.println( F("root json : ") );
964     root\&.printTo(Serial);
965     Serial\&.println();
966 
967     Serial\&.println( F("stateDesired json : "));
968     stateDesired\&.printTo(Serial);
969     Serial\&.println();
970     
971     Serial\&.print( F("jsonBuffer size : "));
972     Serial\&.println(jsonBuffer\&.size());
973 
974 #endif
975 
976     if (stateDesired\&.success())
977     {
978     
979     #if DEBUG == 1
980 
981         Serial\&.println( F("update message parsing : success") );
982         Serial\&.println();
983     
984     #endif
985 
986             String answerDesired;
987         
988             stateDesired\&.printTo(answerDesired);
989             
990         #if DEBUG == 1      
991         
992             Serial\&.println( F("update is ok ") );
993             Serial\&.println( F("desired update is : ") );         
994             Serial\&.println(answerDesired);
995             Serial\&.println("json size is : ");
996             Serial\&.println(jsonBuffer\&.size() ) ;              
997             Serial\&.println();
998 
999         
1000         #endif
1001             //manual mode check
1002             if(this->manual == 1 )
1003             { 
1004                 JsonObject & manualMode=stateDesired["manual"];
1005                 //json parse
1006                 for(auto kv : manualMode)
1007                 {
1008                 #if DEBUG == 1
1009 
1010                     Serial\&.print(F("writing to "));
1011                     Serial\&.println(kv\&.key);
1012                     Serial\&.print(F("state : "));
1013                     Serial\&.println(kv\&.value\&.as<bool>());       
1014                     
1015                 #endif              
1016 
1017                     if( strcmp(kv\&.key,"Act0") == 0 )
1018                     {
1019                     
1020                         jetPack\&.writeBit(0,kv\&.value\&.as<bool>() ); 
1021                         
1022                     }
1023                     else if(strcmp(kv\&.key,"Act1") == 0)
1024                     {
1025                         jetPack\&.writeBit(1,kv\&.value\&.as<bool>() ); 
1026 
1027                     }
1028                     else if(strcmp(kv\&.key,"Act2") == 0)
1029                     {
1030                         jetPack\&.writeBit(2,kv\&.value\&.as<bool>() ); 
1031 
1032                     }
1033                     else if(strcmp(kv\&.key,"Act3") == 0)
1034                     {
1035                         jetPack\&.writeBit(3,kv\&.value\&.as<bool>() ); 
1036 
1037                     }
1038                     else if(strcmp(kv\&.key,"Act4") == 0)
1039                     {
1040                         jetPack\&.writeBit(4,kv\&.value\&.as<bool>() ); 
1041 
1042                     }
1043                     else if(strcmp(kv\&.key,"Act5") == 0)
1044                     {
1045                         jetPack\&.writeBit(5,kv\&.value\&.as<bool>() ); 
1046 
1047                     }
1048                     else if(strcmp(kv\&.key,"Act6") == 0)
1049                     {
1050                         jetPack\&.writeBit(6,kv\&.value\&.as<bool>() ); 
1051 
1052                     }
1053                     else if (strcmp(kv\&.key,"Act7") == 0)
1054                     {
1055                         jetPack\&.writeBit(7,kv\&.value\&.as<bool>() ); 
1056 
1057                     }
1058                     else if (strcmp(kv\&.key,"ActB") == 0)
1059                     {
1060                         onBoardActor\&.write(kv\&.value\&.as<bool>() ); 
1061 
1062                     }
1063                                 
1064                 
1065                 }
1066 
1067                 
1068             }
1069 
1070             //saving the new configuration
1071             fileSystem\&.updateConfigFiles(answerDesired);
1072 
1073                 //answering the update msg:
1074             //reported = received configuration
1075             //desired=null
1076         
1077             String updateAnswer;
1078             String tempString;
1079             
1080             stateDesired\&.printTo(tempString);
1081             updateAnswer="{\"state\":{\"reported\":";
1082             updateAnswer+=tempString;
1083             updateAnswer+=",\"desired\":null}}";
1084 
1085         #if DEBUG == 1
1086 
1087             Serial\&.println( F("preparing answer message ") );
1088             Serial\&.println();
1089             Serial\&.println( F("updateAnswer : ") );
1090             Serial\&.println(updateAnswer);
1091         
1092         #endif  
1093 
1094             mqtt\&.publish(updateAnswer\&.c_str());
1095             
1096             mqtt\&.mqttLoop();
1097 
1098             delay(10);
1099         
1100             if(manual == 0 )
1101             {
1102                 //restart the esp to apply the config
1103                 ESP\&.restart();
1104             }
1105     }
1106     else
1107     {
1108     
1109     #if DEBUG == 1
1110 
1111         Serial\&.println( F("Failed to parse update message( OR no message received )") );
1112         Serial\&.println();
1113     
1114     #endif
1115     
1116     }
1117 
1118     coolBoardLed\&.strobe(153,76,0,0\&.5);//shade of brown
1119     coolBoardLed\&.fadeOut(153,76,0,0\&.5);//shade of brown                               
1120 }
.fi
.SS "String CoolBoard::userData ()"
\fBCoolBoard::userData()\fP: This method is provided to return the user's data\&.
.PP
\fBReturns:\fP
.RS 4
json string of the user's data 
.RE
.PP

.PP
Definition at line 1246 of file CoolBoard\&.cpp\&.
.PP
.nf
1247 {
1248 
1249 #if DEBUG == 1
1250 
1251     Serial\&.println( F("Entering CoolBoard\&.userData() ") );
1252     Serial\&.println();
1253 
1254 #endif
1255 
1256     String tempMAC = WiFi\&.macAddress();
1257 
1258     tempMAC\&.replace(":", "");
1259 
1260     String userJson = "{\"user\":\"";
1261 
1262     userJson += mqtt\&.getUser();
1263 
1264     userJson += "\",\"timestamp\":\"";
1265 
1266     userJson += rtc\&.getESDate(); // "timestamp":"20yy-mm-ddThh:mm:ssZ"
1267 
1268     userJson += "\",\"mac\":\"";
1269 
1270     userJson += tempMAC;
1271 
1272     userJson += "\"}";
1273 
1274 #if DEBUG == 1
1275 
1276     Serial\&.println( F("userData is : ") );
1277     Serial\&.println(userJson);
1278     Serial\&.println();
1279 
1280 #endif  
1281     
1282     return(userJson);
1283     
1284 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "String CoolBoard::answer =''\fC [private]\fP"

.PP
Definition at line 106 of file CoolBoard\&.h\&.
.SS "\fBCoolBoardLed\fP CoolBoard::coolBoardLed\fC [private]\fP"

.PP
Definition at line 74 of file CoolBoard\&.h\&.
.SS "\fBCoolBoardSensors\fP CoolBoard::coolBoardSensors\fC [private]\fP"

.PP
Definition at line 72 of file CoolBoard\&.h\&.
.SS "String CoolBoard::data =''\fC [private]\fP"

.PP
Definition at line 104 of file CoolBoard\&.h\&.
.SS "const int CoolBoard::EnI2C = 5\fC [private]\fP"

.PP
Definition at line 108 of file CoolBoard\&.h\&.
.SS "\fBExternalSensors\fP CoolBoard::externalSensors\fC [private]\fP"

.PP
Definition at line 86 of file CoolBoard\&.h\&.
.SS "bool CoolBoard::externalSensorsActive =0\fC [private]\fP"

.PP
Definition at line 96 of file CoolBoard\&.h\&.
.SS "\fBCoolFileSystem\fP CoolBoard::fileSystem\fC [private]\fP"

.PP
Definition at line 70 of file CoolBoard\&.h\&.
.SS "\fBIrene3000\fP CoolBoard::irene3000\fC [private]\fP"

.PP
Definition at line 84 of file CoolBoard\&.h\&.
.SS "bool CoolBoard::ireneActive =0\fC [private]\fP"

.PP
Definition at line 92 of file CoolBoard\&.h\&.
.SS "\fBJetpack\fP CoolBoard::jetPack\fC [private]\fP"

.PP
Definition at line 82 of file CoolBoard\&.h\&.
.SS "bool CoolBoard::jetpackActive =0\fC [private]\fP"

.PP
Definition at line 94 of file CoolBoard\&.h\&.
.SS "unsigned long CoolBoard::logInterval =1\fC [private]\fP"

.PP
Definition at line 102 of file CoolBoard\&.h\&.
.SS "bool CoolBoard::manual =0\fC [private]\fP"

.PP
Definition at line 100 of file CoolBoard\&.h\&.
.SS "\fBCoolMQTT\fP CoolBoard::mqtt\fC [private]\fP"

.PP
Definition at line 80 of file CoolBoard\&.h\&.
.SS "\fBCoolBoardActor\fP CoolBoard::onBoardActor\fC [private]\fP"

.PP
Definition at line 88 of file CoolBoard\&.h\&.
.SS "\fBCoolTime\fP CoolBoard::rtc\fC [private]\fP"

.PP
Definition at line 76 of file CoolBoard\&.h\&.
.SS "bool CoolBoard::sleepActive =0\fC [private]\fP"

.PP
Definition at line 98 of file CoolBoard\&.h\&.
.SS "bool CoolBoard::userActive =0\fC [private]\fP"

.PP
Definition at line 90 of file CoolBoard\&.h\&.
.SS "\fBCoolWifi\fP CoolBoard::wifiManager\fC [private]\fP"

.PP
Definition at line 78 of file CoolBoard\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolBoardAPI from the source code\&.
