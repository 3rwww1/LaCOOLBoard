.TH "CoolBoard" 3 "Thu Aug 17 2017" "CoolBoardAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoolBoard \- This class manages the \fBCoolBoard\fP and all of Its functions\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolBoard\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBCoolBoard\fP ()"
.br
.ti -1c
.RI "void \fBbegin\fP ()"
.br
.ti -1c
.RI "bool \fBconfig\fP ()"
.br
.ti -1c
.RI "void \fBupdate\fP (const char *\fBanswer\fP)"
.br
.ti -1c
.RI "void \fBoffLineMode\fP ()"
.br
.ti -1c
.RI "void \fBonLineMode\fP ()"
.br
.ti -1c
.RI "int \fBconnect\fP ()"
.br
.ti -1c
.RI "int \fBisConnected\fP ()"
.br
.ti -1c
.RI "unsigned long \fBgetLogInterval\fP ()"
.br
.ti -1c
.RI "void \fBprintConf\fP ()"
.br
.ti -1c
.RI "void \fBsleep\fP (unsigned long interval)"
.br
.ti -1c
.RI "String \fBreadSensors\fP ()"
.br
.ti -1c
.RI "void \fBinitReadI2C\fP ()"
.br
.ti -1c
.RI "String \fBuserData\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBCoolFileSystem\fP \fBfileSystem\fP"
.br
.ti -1c
.RI "\fBCoolBoardSensors\fP \fBcoolBoardSensors\fP"
.br
.ti -1c
.RI "\fBCoolBoardLed\fP \fBcoolBoardLed\fP"
.br
.ti -1c
.RI "\fBCoolTime\fP \fBrtc\fP"
.br
.ti -1c
.RI "\fBCoolWifi\fP \fBwifiManager\fP"
.br
.ti -1c
.RI "\fBCoolMQTT\fP \fBmqtt\fP"
.br
.ti -1c
.RI "\fBJetpack\fP \fBjetPack\fP"
.br
.ti -1c
.RI "\fBIrene3000\fP \fBirene3000\fP"
.br
.ti -1c
.RI "\fBExternalSensors\fP \fBexternalSensors\fP"
.br
.ti -1c
.RI "bool \fBuserActive\fP =0"
.br
.ti -1c
.RI "bool \fBireneActive\fP =0"
.br
.ti -1c
.RI "bool \fBjetpackActive\fP =0"
.br
.ti -1c
.RI "bool \fBexternalSensorsActive\fP =0"
.br
.ti -1c
.RI "bool \fBsleepActive\fP =0"
.br
.ti -1c
.RI "unsigned long \fBlogInterval\fP =1"
.br
.ti -1c
.RI "String \fBdata\fP =''"
.br
.ti -1c
.RI "String \fBanswer\fP =''"
.br
.ti -1c
.RI "const int \fBEnI2C\fP = 5"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class manages the \fBCoolBoard\fP and all of Its functions\&. 
.PP
Definition at line 33 of file CoolBoard\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "CoolBoard::CoolBoard ()"
\fBCoolBoard::CoolBoard()\fP: This Constructor is provided to start the I2C interface and Init the different used pins 
.PP
Definition at line 28 of file CoolBoard\&.cpp\&.
.PP
.nf
29 {
30 
31 #if DEBUG == 1
32 
33     Serial\&.println( F("Entering CoolBoard Constructor") );
34     Serial\&.println();
35 
36 #endif
37     
38     Wire\&.begin(2, 14);                       //I2C init 
39 
40     pinMode(EnI2C, OUTPUT);        //Declare I2C Enable pin 
41 
42 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void CoolBoard::begin ()"
\fBCoolBoard::begin()\fP: This method is provided to configure and start the used CoolKit Parts\&. It also starts the first connection try If Serial is enabled,it prints the configuration of the used parts\&. 
.PP
Definition at line 53 of file CoolBoard\&.cpp\&.
.PP
.nf
54 {
55 
56 #if DEBUG == 1
57 
58     Serial\&.println( F("Starting the CoolBoard  ")  );
59     Serial\&.println( F("Entering CoolBoard\&.begin() ")  );
60     Serial\&.println();
61 #endif  
62 
63 #if DEBUG == 0
64     Serial\&.println( F("Starting Coolboard\&.\&.\&."));
65 #endif
66 
67 
68     delay(100);
69     
70     coolBoardLed\&.write(255,128,0);//orange
71 
72     this->initReadI2C();
73     delay(50);
74 
75     coolBoardSensors\&.config();
76     coolBoardSensors\&.begin();
77     delay(100);
78     
79     wifiManager\&.config();
80     wifiManager\&.begin();
81     delay(100);
82 
83     mqtt\&.config();
84     mqtt\&.begin();
85     delay(100);
86 
87 #if DEBUG == 1
88 
89     coolBoardLed\&.printConf();
90     coolBoardSensors\&.printConf();
91     wifiManager\&.printConf();
92     mqtt\&.printConf();
93 
94 #endif
95 
96 
97     if (jetpackActive)
98     {
99         jetPack\&.config();
100         jetPack\&.begin();
101 
102     #if DEBUG == 1
103         
104         jetPack\&.printConf();
105 
106     #endif
107         delay(100);
108     }
109 
110     if (ireneActive)
111     {
112         irene3000\&.config();
113         irene3000\&.begin();
114 
115     #if DEBUG == 1
116 
117         irene3000\&.printConf();
118 
119     #endif
120         delay(100);
121     }
122 
123     if (externalSensorsActive)
124     {
125         externalSensors\&.config();
126         externalSensors\&.begin();
127 
128     #if DEBUG == 1
129 
130         externalSensors\&.printConf();
131 
132     #endif
133         delay(100);
134     }
135     
136     coolBoardLed\&.fadeOut(255,128,0,0\&.5);//orange
137 
138     this->connect();
139     delay(100);
140 
141     rtc\&.config();
142     rtc\&.begin();
143 
144 #if DEBUG == 1
145 
146     rtc\&.printConf();
147 
148 #endif
149     delay(100);
150     
151     coolBoardLed\&.blink(0,255,0,0\&.5);//green
152 
153 }
.fi
.SS "bool CoolBoard::config ()"
\fBCoolBoard::config()\fP: This method is provided to configure the \fBCoolBoard\fP : -log interval -irene3000 activated/deactivated -jetpack activated/deactivated -external Sensors activated/deactivated -mqtt server timeout
.PP
\fBReturns:\fP
.RS 4
true if configuration is done, false otherwise 
.RE
.PP

.PP
Definition at line 659 of file CoolBoard\&.cpp\&.
.PP
.nf
660 {
661     yield();
662 
663 #if DEBUG == 1
664 
665     Serial\&.println( F("Entering CoolBoard\&.config() ") );
666     Serial\&.println();
667 
668 #endif
669 #if DEBUG == 0
670     Serial\&.println();
671     Serial\&.println( F("Loading configuration for this CoolBoard\&.\&.\&."));
672 #endif 
673 
674     //open file system
675     fileSystem\&.begin();
676     
677     //start the led
678     coolBoardLed\&.config();
679     coolBoardLed\&.begin();
680     coolBoardLed\&.fadeIn(243,171,46,0\&.5);//shade of orange     
681 
682     
683     //open configuration file
684     File configFile = SPIFFS\&.open("/coolBoardConfig\&.json", "r");
685     
686     if (!configFile)
687 
688     {
689     
690         Serial\&.println( F("failed to read /coolBoardConfig\&.json  ") );
691 
692         coolBoardLed\&.blink(255,0,0,0\&.5);//shade of red        
693         return(false);
694     }
695 
696     else
697     {
698         size_t size = configFile\&.size();
699 
700         // Allocate a buffer to store contents of the file\&.
701         std::unique_ptr < char[] > buf(new char[size]);
702 
703         configFile\&.readBytes(buf\&.get(), size);
704 
705         DynamicJsonBuffer jsonBuffer;
706 
707         JsonObject & json = jsonBuffer\&.parseObject(buf\&.get());
708 
709         if (!json\&.success())
710         {
711         
712             Serial\&.println( F("failed to parse CoolBoard Config json object ") );
713     
714             coolBoardLed\&.blink(255,0,0,0\&.5);//shade of red        
715             return(false);
716         }
717 
718         else
719         {   
720         
721         #if DEBUG == 1
722             
723             Serial\&.println( F("configuration json : ") );
724             json\&.printTo(Serial);
725             Serial\&.println();
726             
727             Serial\&.print(F("jsonBuffer size : "));
728             Serial\&.print(jsonBuffer\&.size());
729             Serial\&.println();
730 
731         #endif
732             
733             //parsing userActive Key
734             if (json["userActive"]\&.success())
735             {
736                 this -> userActive = json["userActive"];
737             }
738 
739             else
740             {
741                 this -> userActive = this -> userActive;
742             }
743             json["userActive"] = this -> userActive;
744 
745             //parsing logInterval key
746             if (json["logInterval"]\&.success())
747             {
748                 this -> logInterval = json["logInterval"];
749             }
750             else
751             {
752                 this -> logInterval = this -> logInterval;
753             }
754             json["logInterval"] = this -> logInterval;
755             
756             //parsing ireneActive key           
757             if (json["ireneActive"]\&.success())
758             {
759                 this -> ireneActive = json["ireneActive"];
760             }
761             else
762             {
763                 this -> ireneActive = this -> ireneActive;
764             }
765             json["ireneActive"] = this -> ireneActive;
766             
767             //parsing jetpackActive key
768             if (json["jetpackActive"]\&.success())
769             {
770                 this -> jetpackActive = json["jetpackActive"];
771             }
772             else
773             {
774                 this -> jetpackActive = this -> jetpackActive;
775             }
776             json["jetpackActive"] = this -> jetpackActive;
777 
778             //parsing externalSensorsActive key
779             if (json["externalSensorsActive"]\&.success())
780             {
781                 this -> externalSensorsActive = json["externalSensorsActive"];
782             }
783             else
784             {
785                 this -> externalSensorsActive = this -> externalSensorsActive;
786             }
787             json["externalSensorsActive"] = this -> externalSensorsActive;
788 
789             
790             //parsing sleepActive key
791             if (json["sleepActive"]\&.success())
792             {
793                 this -> sleepActive = json["sleepActive"];
794             }
795             else
796             {
797                 this -> sleepActive = this -> sleepActive;
798             }
799             json["sleepActive"] = this -> sleepActive;
800 
801             //saving the current/correct configuration
802             configFile\&.close();
803             configFile = SPIFFS\&.open("/coolBoardConfig\&.json", "w");
804             if (!configFile)
805             {
806             
807                 Serial\&.println( F("failed to write to /coolBoardConfig\&.json") );
808                 Serial\&.println();
809 
810                 coolBoardLed\&.blink(255,0,0,0\&.5);//shade of red        
811                 return(false);
812             }
813 
814             json\&.printTo(configFile);
815             configFile\&.close();
816             #if DEBUG == 0
817 
818                 Serial\&.println( F("Configuration loaded : OK"));
819                 Serial\&.println();
820 
821             #endif
822 
823             return(true);
824         }
825     }
826 
827     coolBoardLed\&.strobe(243,171,46,0\&.5);//shade of orange
828     
829     coolBoardLed\&.fadeOut(243,171,46,0\&.5);//shade of orange                
830 }
.fi
.SS "int CoolBoard::connect ()"
\fBCoolBoard::connect()\fP: This method is provided to manage the network connection and the mqtt connection\&.
.PP
\fBReturns:\fP
.RS 4
mqtt client state 
.RE
.PP

.PP
Definition at line 214 of file CoolBoard\&.cpp\&.
.PP
.nf
215 {
216 
217 #if DEBUG == 1  
218 
219     Serial\&.println( F("Entering CoolBoard\&.connect ") );
220     Serial\&.println();
221     Serial\&.println( F("Connecting the CoolBoard  ") );
222     delay(100);
223 
224 #endif
225     coolBoardLed\&.write(0,0,255);//blue
226 
227     
228             
229     
230 #if DEBUG == 1      
231 
232     Serial\&.println( F("Launching CoolWifi") );
233     Serial\&.println();
234 
235 #endif
236     wifiManager\&.connect();
237     delay(100);
238 
239 
240     //only attempt MQTT connection when Wifi is Connected
241     if (wifiManager\&.state() == WL_CONNECTED)
242     {
243 
244     #if DEBUG == 1  
245     
246         Serial\&.println( F("Launching mqtt\&.connect()") );
247         Serial\&.println();
248     
249     #endif  
250         //logInterval in seconds
251         mqtt\&.connect(this -> getLogInterval());
252         delay(100);
253     }
254     
255         
256     
257     
258 #if DEBUG == 1
259 
260     Serial\&.println( F("mqtt state is :") );
261     Serial\&.println(mqtt\&.state());
262     Serial\&.println();
263     delay(100);
264 
265 #endif
266 
267     coolBoardLed\&.blink(0,0,255,0\&.5);//blue
268 
269     return(mqtt\&.state());
270 }
.fi
.SS "unsigned long CoolBoard::getLogInterval ()"
\fBCoolBoard::getLogInterval()\fP: This method is provided to get the log interval
.PP
\fBReturns:\fP
.RS 4
interval value in s 
.RE
.PP

.PP
Definition at line 994 of file CoolBoard\&.cpp\&.
.PP
.nf
995 {
996 
997 #if DEBUG == 1
998 
999     Serial\&.println( F("Entering CoolBoard\&.getLogInterval() ") );
1000     Serial\&.println();
1001     Serial\&.println( F("log Interval is :") );
1002     Serial\&.println(logInterval);
1003     Serial\&.println();
1004 
1005 #endif
1006 
1007     return(this -> logInterval);
1008 }
.fi
.SS "void CoolBoard::initReadI2C ()"
\fBCoolBoard::initReadI2C()\fP: This method is provided to enable the I2C Interface\&. 
.PP
Definition at line 1089 of file CoolBoard\&.cpp\&.
.PP
.nf
1090 {
1091 
1092 #if DEBUG == 1
1093 
1094     Serial\&.println( F("Entering CoolBoard\&.initReadI2C()") );
1095     Serial\&.println();
1096 
1097 #endif
1098  
1099     digitalWrite(EnI2C,HIGH);//HIGH= I2C Enable
1100 
1101 }
.fi
.SS "int CoolBoard::isConnected ()"
\fBCoolBoard::isConnected()\fP
.PP
This method is provided to check if the card is connected to Wifi and MQTT
.PP
\fBReturns:\fP
.RS 4
0 : connected -1: Wifi Not Connected -2: MQTT Not Connected 
.RE
.PP

.PP
Definition at line 166 of file CoolBoard\&.cpp\&.
.PP
.nf
167 {
168 
169 #if DEBUG == 1  
170 
171     Serial\&.println( F("Entering CoolBoard\&.isConnected ") );
172     Serial\&.println();
173 
174 #endif
175     if (wifiManager\&.state() != WL_CONNECTED)
176     {
177     
178         Serial\&.println(F("Wifi Not Connected"));
179 
180     #if DEBUG == 1
181 
182         Serial\&.println(F("Wifi State is "));
183         Serial\&.println(wifiManager\&.state());
184         
185     #endif
186         return(-1);
187     }
188     
189     if(mqtt\&.state() != 0)
190     {
191         
192         Serial\&.println( F("MQTT not Connected"));
193 
194     #if DEBUG==1
195         Serial\&.println( F("mqtt state is :") );
196         Serial\&.println(mqtt\&.state()); 
197     
198     #endif
199 
200     }
201     
202     return(0);
203 
204 }
.fi
.SS "void CoolBoard::offLineMode ()"
CoolBoard::offlineMode(): This method is provided to manage the offLine mode: -read sensors -do actions -save data in the file system -if there is WiFi but no Internet : make data available over AP -if there is no connection : retry to connect 
.PP
Definition at line 511 of file CoolBoard\&.cpp\&.
.PP
.nf
512 {
513     coolBoardLed\&.fade(51,100,50,0\&.5);//dark shade of green    
514 #if DEBUG == 1  
515     
516     Serial\&.println( F("Entering off line mode ") );  
517     
518 #endif
519 
520 #if DEBUG == 0
521 
522     Serial\&.println( F("CoolBoard is in Offline Mode"));
523 
524 #endif
525 
526     //read user data if user is active
527     if(userActive)
528     {
529 
530         coolBoardLed\&.fadeIn(245,237,27,0\&.5);//shade of yellow
531 
532     #if DEBUG == 1
533         
534         Serial\&.println( F("User is Active") );
535         Serial\&.println( F("Collecting User's data ( mac,username,timeStamp )") );
536         Serial\&.println();
537 
538     #endif
539 
540         coolBoardLed\&.blink(245,237,27,0\&.5);//shade of yellow  
541 
542         //reading user data
543         data=this->userData();//{"":"","":"","",""}
544 
545         //formatting json 
546         data\&.setCharAt( data\&.lastIndexOf('}') , ',');//{"":"","":"","","",
547         
548                 
549         //read sensors data
550 
551         Serial\&.println( F("Collecting sensors data ") );
552         Serial\&.println();
553 
554         data+=this->readSensors();//{"":"","":"","","",{\&.\&.\&.\&.\&.\&.\&.}
555 
556         
557 
558         //formatting json correctly
559         data\&.remove(data\&.lastIndexOf('{'), 1);//{"":"","":"","","",\&.\&.\&.\&.\&.\&.\&.}
560 
561         coolBoardLed\&.fadeOut(245,237,27,0\&.5);//shade of yellow
562                 
563     }   
564     else
565     {
566         //read sensors data
567     #if DEBUG == 1
568 
569         Serial\&.println( F("Collecting sensors data ") );
570         Serial\&.println();
571 
572     #endif
573 
574         coolBoardLed\&.fade(190,100,150,0\&.5);//shade of violet      
575 
576         data=this->readSensors();//{\&.\&.,\&.\&.,\&.\&.}
577     }
578 
579     coolBoardLed\&.fade(51,100,50,0\&.5);//dark shade of green    
580 
581     //do action
582     if (jetpackActive)
583     {
584     
585 
586 
587     #if DEBUG == 1
588 
589         Serial\&.println( F("jetpack is Active ") );
590         Serial\&.println( F("jetpack doing action ") );
591         Serial\&.println();
592     
593     #endif
594         coolBoardLed\&.fade(100,100,150,0\&.5);//dark shade of blue   
595     
596         jetPack\&.doAction( data\&.c_str() );
597     }
598     
599     coolBoardLed\&.fade(51,100,50,0\&.5);//dark shade of green    
600     
601     //saving data in the file system
602     
603     fileSystem\&.saveSensorData( data\&.c_str() );
604 
605     #if DEBUG == 0
606 
607         Serial\&.println( F("saving Data in Memory : OK"));
608 
609     #endif
610 
611     coolBoardLed\&.fadeOut(51,100,50,0\&.5);//dark shade of green
612 
613     //case we have wifi but no internet
614     if( (wifiManager\&.state() == WL_CONNECTED) && ( mqtt\&.state()!=0 ) )
615     {
616         
617         Serial\&.println(F("there is Wifi but no Internet"));
618         Serial\&.println(F("lunching AP to check saved files"));
619         Serial\&.println(F("and Add new WiFi if needed"));
620         
621         wifiManager\&.connectAP();
622         
623     }
624     
625     //case we have no connection at all
626     if( wifiManager\&.state() != WL_CONNECTED )
627     {
628     
629     #if DEBUG == 1
630         
631         Serial\&.println(F("there is No Wifi "));
632         Serial\&.println(F("retrying to connect"));
633     
634     #endif
635 
636     #if DEBUG == 0
637         Serial\&.println( F("there is no WiFi\&.\&.\&."));
638     #endif
639         
640         this->connect();//nomad case : just run wifiMulti
641                 //normal case : run wifiMulti+AP
642         
643     }   
644 
645 }
.fi
.SS "void CoolBoard::onLineMode ()"
\fBCoolBoard::onLineMode()\fP: This method is provided to manage the online mode: -update clock -read sensor -do actions -publish data -read answer -update config 
.PP
Definition at line 282 of file CoolBoard\&.cpp\&.
.PP
.nf
283 {
284 
285     coolBoardLed\&.fadeIn(128,255,50,0\&.5);//shade of green
286 
287 #if DEBUG == 1
288 
289     Serial\&.println( F("Entering CoolBoard\&.onLineMode() ") );
290     Serial\&.println();
291 
292 #endif
293 #if DEBUG == 0
294 
295     Serial\&.println( F("CoolBoard is in Online Mode"));
296 
297 #endif
298 
299     data="";
300     answer="";
301 
302     //send saved data if any
303     if(fileSystem\&.isDataSaved())
304     {
305 
306         coolBoardLed\&.fadeIn(128,128,255,0\&.5);//shade of blue
307 
308         Serial\&.println( F("There is data saved on the File System") );
309         Serial\&.println( F("Sending saved data over MQTT ") );
310         Serial\&.println();
311         coolBoardLed\&.strobe(128,128,255,0\&.5);//shade of blue 
312 
313         mqtt\&.publish("sending saved data");
314         mqtt\&.mqttLoop();
315 
316 
317         
318         int size=0;
319         std::unique_ptr<String[]> savedData(std::move(fileSystem\&.getSensorSavedData(size)));//{\&.\&.,\&.\&.,\&.\&.}
320 
321         int i=0;
322         //loop through the array
323         while(i<size)
324         {
325             //formatting data:
326         
327             String jsonData = "{\"state\":{\"reported\":";
328             jsonData += savedData[i]; // {"state":{"reported":{\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}
329             jsonData += " } }"; // {"state":{"reported":{\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}  } }
330 
331         #if DEBUG == 1 
332             Serial\&.println(F("Size is : "));
333             Serial\&.println(size);
334             Serial\&.print(F("sending line N°"));
335             Serial\&.println(i);
336             Serial\&.println(jsonData);
337             Serial\&.println();
338 
339         #endif
340 
341             coolBoardLed\&.strobe(128,128,255,0\&.5);//shade of blue
342         
343             mqtt\&.publish( jsonData\&.c_str() );
344             mqtt\&.mqttLoop();
345         
346             coolBoardLed\&.fadeOut(128,128,255,0\&.5);//shade of blue
347             
348             i++;
349             yield();
350         }       
351 
352 
353     #if DEBUG == 1
354 
355         Serial\&.println( F("Saved data sent ") );
356         Serial\&.println();
357     
358     #endif
359 
360     }
361 
362     coolBoardLed\&.blink(128,255,50,0\&.5);//shade of green
363 
364     //clock update
365     Serial\&.println( F("Re-checking RTC\&.\&.\&."));
366     rtc\&.update();
367 
368     //read user data if user is active
369     if(userActive)
370     {
371         coolBoardLed\&.fadeIn(245,237,27,0\&.5);//shade of yellow
372     
373     #if DEBUG == 1
374 
375         Serial\&.println( F("User is Active") );
376         Serial\&.println( F("Collecting User's data ( mac,username,timeStamp )") );
377         Serial\&.println();
378     
379     #endif  
380         coolBoardLed\&.blink(245,237,27,0\&.5);//shade of yellow  
381 
382         //reading user data
383         data=this->userData();//{"":"","":"","",""}
384 
385         //formatting json 
386         data\&.setCharAt( data\&.lastIndexOf('}') , ',');//{"":"","":"","","",
387                 
388         //read sensors data
389     #if DEBUG == 1
390 
391         Serial\&.println( F("Collecting sensors data ") );
392         Serial\&.println();
393     
394     #endif
395 
396         data+=this->readSensors();//{"":"","":"","","",{\&.\&.\&.\&.\&.\&.\&.}       
397 
398         //formatting json correctly
399         data\&.remove(data\&.lastIndexOf('{'), 1);//{"":"","":"","","",\&.\&.\&.\&.\&.\&.\&.}
400         
401         coolBoardLed\&.fadeOut(245,237,27,0\&.5);//shade of yellow
402                 
403     }   
404     else
405     {
406         //read sensors data
407     #if DEBUG == 1
408 
409         Serial\&.println( F("Collecting sensors data ") );
410         Serial\&.println();
411     
412     #endif
413         coolBoardLed\&.fade(190,100,150,0\&.5);//shade of violet      
414         data=this->readSensors();//{\&.\&.,\&.\&.,\&.\&.}
415     }
416     
417     //do action
418     if (jetpackActive)
419     {
420 
421 
422     #if DEBUG ==1
423 
424         Serial\&.println( F("jetpack is Active ") );
425         Serial\&.println( F("jetpack doing action ") );
426         Serial\&.println();
427 
428     #endif
429         coolBoardLed\&.fade(100,100,150,0\&.5);//dark shade of blue       
430         jetPack\&.doAction(data\&.c_str());
431     }
432     
433     coolBoardLed\&.fadeIn(128,255,50,0\&.5);//shade of green
434 
435     //formatting data:
436     String jsonData = "{\"state\":{\"reported\":";
437     jsonData += data; // {"state":{"reported":{\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}
438     jsonData += " } }"; // {"state":{"reported":{\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}  } }
439     
440     //mqtt client loop to allow data handling
441     mqtt\&.mqttLoop();
442 
443     coolBoardLed\&.blink(128,255,50,0\&.5);//shade of green   
444 
445     //read mqtt answer
446     answer = mqtt\&.read();
447 
448 #if DEBUG == 1 
449 
450     Serial\&.println( F("checking if there's an MQTT message ")  );
451     Serial\&.println( F("answer is : ") ); 
452     Serial\&.println(answer);  
453     Serial\&.println();
454 
455 #endif  
456 
457     coolBoardLed\&.fadeOut(128,255,50,0\&.5);//shade of green 
458 
459     //check if the configuration needs update 
460     //and update it if needed 
461     this -> update(answer\&.c_str());
462     
463     coolBoardLed\&.fadeIn(128,255,50,0\&.5);//shade of green  
464 
465     //publishing data   
466     if( this->sleepActive==0 )  
467     {   
468         coolBoardLed\&.strobe(255,0,230,0\&.5);//shade of pink
469         
470         //logInterval in seconds
471         mqtt\&.publish( jsonData\&.c_str(), this->getLogInterval() );
472         mqtt\&.mqttLoop();
473     
474     }
475     else
476     {
477         coolBoardLed\&.strobe(230,255,0,0\&.5);//shade of yellow  
478 
479         mqtt\&.publish(jsonData\&.c_str());       
480         mqtt\&.mqttLoop();
481         answer = mqtt\&.read();
482         this ->update(answer\&.c_str());
483 
484         //logInterval in seconds
485         this->sleep( this->getLogInterval() ) ;
486     }
487 
488     coolBoardLed\&.fadeOut(128,255,50,0\&.5);//shade of green     
489 
490     mqtt\&.mqttLoop();
491 
492     //read mqtt answer
493     answer = mqtt\&.read();
494     this -> update(answer\&.c_str());  
495 
496     coolBoardLed\&.blink(128,255,50,0\&.5);//shade of green   
497 
498 
499 }
.fi
.SS "void CoolBoard::printConf ()"
\fBCoolBoard::printConf()\fP: This method is provided to print the configuration to the Serial Monitor\&. 
.PP
Definition at line 839 of file CoolBoard\&.cpp\&.
.PP
.nf
840 {
841 
842 #if DEBUG == 1
843     
844     Serial\&.println( F("Entering CoolBoard\&.printConf() ") );
845     Serial\&.println();
846 
847 #endif
848 
849     Serial\&.println( F("Printing Cool Board Configuration "));
850     Serial\&.print( F("log interval        : "));
851     Serial\&.println(this->logInterval);
852 
853     Serial\&.print( F("irene active        : "));
854     Serial\&.println(this->ireneActive);
855 
856     Serial\&.print( F("jetpack active      : "));
857     Serial\&.println(this->jetpackActive);
858 
859     Serial\&.print( F("external sensors active     : "));
860     Serial\&.println(this->externalSensorsActive);
861 
862     Serial\&.print( F("sleept active       : "));
863     Serial\&.println(this->sleepActive);
864 
865     Serial\&.print( F("user active         : "));
866     Serial\&.println(this->userActive);
867 
868     Serial\&.println();
869 
870 
871 
872 
873 }
.fi
.SS "String CoolBoard::readSensors ()"
\fBCoolBoard::readSensors()\fP: This method is provided to read and format all the sensors data in a single json\&.
.PP
\fBReturns:\fP
.RS 4
json string of all the sensors read\&. 
.RE
.PP

.PP
Definition at line 1018 of file CoolBoard\&.cpp\&.
.PP
.nf
1019 {
1020 
1021     coolBoardLed\&.fadeIn(128,255,0,0\&.5);//light shade of green
1022                 
1023 #if DEBUG == 1
1024 
1025     Serial\&.println( F("Entering CoolBoard\&.readSensors()") );
1026     Serial\&.println();
1027 
1028 #endif
1029     coolBoardLed\&.strobe(128,255,0,0\&.5);//light shade of green
1030 
1031     String sensorsData;
1032     
1033     this->initReadI2C();
1034 
1035     sensorsData = coolBoardSensors\&.read(); // {\&.\&.,\&.\&.,\&.\&.}
1036     
1037     if (externalSensorsActive)
1038     {
1039         sensorsData += externalSensors\&.read(); // {\&.\&.,\&.\&.,\&.\&.}{\&.\&.,\&.\&.}
1040 
1041         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf('}'), ','); // {\&.\&.,\&.\&.,\&.\&.}{\&.\&.,\&.\&.,
1042         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf('{'), ','); // {\&.\&.,\&.\&.,\&.\&.},\&.\&.,\&.\&.,
1043         sensorsData\&.remove(sensorsData\&.lastIndexOf('}'), 1); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,
1044         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf(','), '}'); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}
1045 
1046     }
1047     if (ireneActive)
1048     {
1049         sensorsData += irene3000\&.read(); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}{\&.\&.,\&.\&.,\&.\&.}
1050 
1051         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf('}'), ','); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}{\&.\&.,\&.\&.,\&.\&.,
1052         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf('{'), ','); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.},\&.\&.,\&.\&.,\&.\&.,
1053         sensorsData\&.remove(sensorsData\&.lastIndexOf('}'), 1); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,
1054         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf(','), '}'); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}        
1055         
1056         
1057     }
1058 
1059     //getting Hour:
1060     tmElements_t tm;
1061     tm=rtc\&.getTimeDate();
1062     
1063     //adding Hour
1064     sensorsData\&.remove(sensorsData\&.lastIndexOf('}'), 1); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&., 
1065     sensorsData+=",\"hour\":";  
1066     sensorsData+=tm\&.Hour;
1067     sensorsData+=",\"minute\":";
1068     sensorsData+=tm\&.Minute;
1069     sensorsData+="}";
1070     
1071 #if DEBUG == 1
1072     Serial\&.println();
1073     Serial\&.println( F("sensors data is ") );
1074     Serial\&.println(sensorsData);
1075     Serial\&.println();
1076 
1077 #endif
1078     coolBoardLed\&.fadeOut(128,255,0,0\&.5);//light shade of green
1079 
1080     return(sensorsData);
1081 
1082 }
.fi
.SS "void CoolBoard::sleep (unsigned long interval)"
CoolBoard::sleep(int interval): This method is provided to allow the board to enter deepSleep mode for a period of time equal to interval in s 
.PP
Definition at line 1158 of file CoolBoard\&.cpp\&.
.PP
.nf
1159 {
1160 
1161     Serial\&.println( F("Entering CoolBoard\&.sleep() ") );
1162     Serial\&.print( F("going to sleep for ") );
1163     Serial\&.print(interval);
1164     Serial\&.println(F("s") );
1165     Serial\&.println();
1166     
1167     //interval is in seconds , interval*1000*1000 in µS
1168     ESP\&.deepSleep ( ( interval * 1000 * 1000 ), WAKE_RF_DEFAULT) ;
1169 
1170 }
.fi
.SS "void CoolBoard::update (const char * answer)"
CoolBoard::update(mqtt answer): This method is provided to handle the configuration update of the different parts 
.PP
Definition at line 880 of file CoolBoard\&.cpp\&.
.PP
.nf
881 {
882     coolBoardLed\&.fadeIn(153,76,0,0\&.5);//shade of brown        
883 
884 #if DEBUG == 1
885 
886     Serial\&.println( F("Entering CoolBoard\&.update() ") );
887     Serial\&.println();
888     Serial\&.println( F("message is : ") );
889     Serial\&.println(answer);
890     Serial\&.println();
891 
892 #endif
893 
894     DynamicJsonBuffer jsonBuffer;
895     JsonObject & root = jsonBuffer\&.parseObject(answer);
896     JsonObject & stateDesired = root["state"];
897 
898 #if DEBUG == 1
899 
900     Serial\&.println( F("root json : ") );
901     root\&.printTo(Serial);
902     Serial\&.println();
903 
904     Serial\&.println( F("stateDesired json : "));
905     stateDesired\&.printTo(Serial);
906     Serial\&.println();
907     
908     Serial\&.print( F("jsonBuffer size : "));
909     Serial\&.println(jsonBuffer\&.size());
910 
911 #endif
912 
913     if (stateDesired\&.success())
914     {
915     
916     #if DEBUG == 1
917 
918         Serial\&.println( F("update message parsing : success") );
919         Serial\&.println();
920     
921     #endif
922 
923             String answerDesired;
924         
925             stateDesired\&.printTo(answerDesired);
926             
927         #if DEBUG == 1      
928         
929             Serial\&.println( F("update is ok ") );
930             Serial\&.println( F("desired update is : ") );         
931             Serial\&.println(answerDesired);
932             Serial\&.println("json size is : ");
933             Serial\&.println(jsonBuffer\&.size() ) ;              
934             Serial\&.println();
935 
936         
937         #endif
938             //saving the new configuration
939             fileSystem\&.updateConfigFiles(answerDesired);
940 
941                 //answering the update msg:
942             //reported = received configuration
943             //desired=null
944         
945             String updateAnswer;
946             String tempString;
947             
948             stateDesired\&.printTo(tempString);
949             updateAnswer="{\"state\":{\"reported\":";
950             updateAnswer+=tempString;
951             updateAnswer+=",\"desired\":null}}";
952 
953         #if DEBUG == 1
954 
955             Serial\&.println( F("preparing answer message ") );
956             Serial\&.println();
957             Serial\&.println( F("updateAnswer : ") );
958             Serial\&.println(updateAnswer);
959         
960         #endif  
961 
962             mqtt\&.publish(updateAnswer\&.c_str());
963             
964             mqtt\&.mqttLoop();
965 
966             delay(10);
967             
968             //restart the esp to apply the config
969             ESP\&.restart();
970     }
971     else
972     {
973     
974     #if DEBUG == 1
975 
976         Serial\&.println( F("Failed to parse update message( OR no message received )") );
977         Serial\&.println();
978     
979     #endif
980     
981     }
982 
983     coolBoardLed\&.strobe(153,76,0,0\&.5);//shade of brown
984     coolBoardLed\&.fadeOut(153,76,0,0\&.5);//shade of brown                               
985 }
.fi
.SS "String CoolBoard::userData ()"
\fBCoolBoard::userData()\fP: This method is provided to return the user's data\&.
.PP
\fBReturns:\fP
.RS 4
json string of the user's data 
.RE
.PP

.PP
Definition at line 1111 of file CoolBoard\&.cpp\&.
.PP
.nf
1112 {
1113 
1114 #if DEBUG == 1
1115 
1116     Serial\&.println( F("Entering CoolBoard\&.userData() ") );
1117     Serial\&.println();
1118 
1119 #endif
1120 
1121     String tempMAC = WiFi\&.macAddress();
1122 
1123     tempMAC\&.replace(":", "");
1124 
1125     String userJson = "{\"user\":\"";
1126 
1127     userJson += mqtt\&.getUser();
1128 
1129     userJson += "\",\"timestamp\":\"";
1130 
1131     userJson += rtc\&.getESDate(); // "timestamp":"20yy-mm-ddThh:mm:ssZ"
1132 
1133     userJson += "\",\"mac\":\"";
1134 
1135     userJson += tempMAC;
1136 
1137     userJson += "\"}";
1138 
1139 #if DEBUG == 1
1140 
1141     Serial\&.println( F("userData is : ") );
1142     Serial\&.println(userJson);
1143     Serial\&.println();
1144 
1145 #endif  
1146     
1147     return(userJson);
1148     
1149 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "String CoolBoard::answer =''\fC [private]\fP"

.PP
Definition at line 101 of file CoolBoard\&.h\&.
.SS "\fBCoolBoardLed\fP CoolBoard::coolBoardLed\fC [private]\fP"

.PP
Definition at line 73 of file CoolBoard\&.h\&.
.SS "\fBCoolBoardSensors\fP CoolBoard::coolBoardSensors\fC [private]\fP"

.PP
Definition at line 71 of file CoolBoard\&.h\&.
.SS "String CoolBoard::data =''\fC [private]\fP"

.PP
Definition at line 99 of file CoolBoard\&.h\&.
.SS "const int CoolBoard::EnI2C = 5\fC [private]\fP"

.PP
Definition at line 103 of file CoolBoard\&.h\&.
.SS "\fBExternalSensors\fP CoolBoard::externalSensors\fC [private]\fP"

.PP
Definition at line 85 of file CoolBoard\&.h\&.
.SS "bool CoolBoard::externalSensorsActive =0\fC [private]\fP"

.PP
Definition at line 93 of file CoolBoard\&.h\&.
.SS "\fBCoolFileSystem\fP CoolBoard::fileSystem\fC [private]\fP"

.PP
Definition at line 69 of file CoolBoard\&.h\&.
.SS "\fBIrene3000\fP CoolBoard::irene3000\fC [private]\fP"

.PP
Definition at line 83 of file CoolBoard\&.h\&.
.SS "bool CoolBoard::ireneActive =0\fC [private]\fP"

.PP
Definition at line 89 of file CoolBoard\&.h\&.
.SS "\fBJetpack\fP CoolBoard::jetPack\fC [private]\fP"

.PP
Definition at line 81 of file CoolBoard\&.h\&.
.SS "bool CoolBoard::jetpackActive =0\fC [private]\fP"

.PP
Definition at line 91 of file CoolBoard\&.h\&.
.SS "unsigned long CoolBoard::logInterval =1\fC [private]\fP"

.PP
Definition at line 97 of file CoolBoard\&.h\&.
.SS "\fBCoolMQTT\fP CoolBoard::mqtt\fC [private]\fP"

.PP
Definition at line 79 of file CoolBoard\&.h\&.
.SS "\fBCoolTime\fP CoolBoard::rtc\fC [private]\fP"

.PP
Definition at line 75 of file CoolBoard\&.h\&.
.SS "bool CoolBoard::sleepActive =0\fC [private]\fP"

.PP
Definition at line 95 of file CoolBoard\&.h\&.
.SS "bool CoolBoard::userActive =0\fC [private]\fP"

.PP
Definition at line 87 of file CoolBoard\&.h\&.
.SS "\fBCoolWifi\fP CoolBoard::wifiManager\fC [private]\fP"

.PP
Definition at line 77 of file CoolBoard\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolBoardAPI from the source code\&.
