.TH "CoolBoard" 3 "Wed Aug 30 2017" "CoolBoardAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoolBoard \- This class manages the \fBCoolBoard\fP and all of Its functions\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolBoard\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBCoolBoard\fP ()"
.br
.ti -1c
.RI "void \fBbegin\fP ()"
.br
.ti -1c
.RI "bool \fBconfig\fP ()"
.br
.ti -1c
.RI "void \fBupdate\fP (const char *\fBanswer\fP)"
.br
.ti -1c
.RI "void \fBoffLineMode\fP ()"
.br
.ti -1c
.RI "void \fBonLineMode\fP ()"
.br
.ti -1c
.RI "int \fBconnect\fP ()"
.br
.ti -1c
.RI "int \fBisConnected\fP ()"
.br
.ti -1c
.RI "unsigned long \fBgetLogInterval\fP ()"
.br
.ti -1c
.RI "void \fBprintConf\fP ()"
.br
.ti -1c
.RI "void \fBsleep\fP (unsigned long interval)"
.br
.ti -1c
.RI "String \fBreadSensors\fP ()"
.br
.ti -1c
.RI "void \fBinitReadI2C\fP ()"
.br
.ti -1c
.RI "String \fBuserData\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBCoolFileSystem\fP \fBfileSystem\fP"
.br
.ti -1c
.RI "\fBCoolBoardSensors\fP \fBcoolBoardSensors\fP"
.br
.ti -1c
.RI "\fBCoolBoardLed\fP \fBcoolBoardLed\fP"
.br
.ti -1c
.RI "\fBCoolTime\fP \fBrtc\fP"
.br
.ti -1c
.RI "\fBCoolWifi\fP \fBwifiManager\fP"
.br
.ti -1c
.RI "\fBCoolMQTT\fP \fBmqtt\fP"
.br
.ti -1c
.RI "\fBJetpack\fP \fBjetPack\fP"
.br
.ti -1c
.RI "\fBIrene3000\fP \fBirene3000\fP"
.br
.ti -1c
.RI "\fBExternalSensors\fP \fBexternalSensors\fP"
.br
.ti -1c
.RI "\fBCoolBoardActor\fP \fBonBoardActor\fP"
.br
.ti -1c
.RI "bool \fBuserActive\fP =0"
.br
.ti -1c
.RI "bool \fBireneActive\fP =0"
.br
.ti -1c
.RI "bool \fBjetpackActive\fP =0"
.br
.ti -1c
.RI "bool \fBexternalSensorsActive\fP =0"
.br
.ti -1c
.RI "bool \fBsleepActive\fP =0"
.br
.ti -1c
.RI "bool \fBmanual\fP =0"
.br
.ti -1c
.RI "unsigned long \fBlogInterval\fP =1"
.br
.ti -1c
.RI "String \fBdata\fP =''"
.br
.ti -1c
.RI "String \fBanswer\fP =''"
.br
.ti -1c
.RI "const int \fBEnI2C\fP = 5"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class manages the \fBCoolBoard\fP and all of Its functions\&. 
.PP
Definition at line 55 of file CoolBoard\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "CoolBoard::CoolBoard ()"
\fBCoolBoard::CoolBoard()\fP: This Constructor is provided to start the I2C interface and Init the different used pins 
.PP
Definition at line 49 of file CoolBoard\&.cpp\&.
.PP
.nf
50 {
51 
52 #if DEBUG == 1
53 
54     Serial\&.println( F("Entering CoolBoard Constructor") );
55     Serial\&.println();
56 
57 #endif
58     
59     Wire\&.begin(2, 14);                       //I2C init 
60 
61     pinMode(EnI2C, OUTPUT);        //Declare I2C Enable pin 
62 
63 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void CoolBoard::begin ()"
\fBCoolBoard::begin()\fP: This method is provided to configure and start the used CoolKit Parts\&. It also starts the first connection try If Serial is enabled,it prints the configuration of the used parts\&. 
.PP
Definition at line 74 of file CoolBoard\&.cpp\&.
.PP
.nf
75 {
76 
77 #if DEBUG == 1
78 
79     Serial\&.println( F("Starting the CoolBoard  ")  );
80     Serial\&.println( F("Entering CoolBoard\&.begin() ")  );
81     Serial\&.println();
82 #endif  
83 
84 #if DEBUG == 0
85     Serial\&.println( F("Starting Coolboard\&.\&.\&."));
86 #endif
87 
88 
89     delay(100);
90     
91     coolBoardLed\&.write(255,128,0);//orange
92 
93     this->initReadI2C();
94     delay(50);
95 
96     coolBoardSensors\&.config();
97     coolBoardSensors\&.begin();
98     delay(100);
99     
100     onBoardActor\&.config();
101     onBoardActor\&.begin();
102     delay(100);
103     
104     wifiManager\&.config();
105     wifiManager\&.begin();
106     delay(100);
107 
108     mqtt\&.config();
109     mqtt\&.begin();
110     delay(100);
111 
112 #if DEBUG == 1
113 
114     coolBoardLed\&.printConf();
115 
116     coolBoardSensors\&.printConf();
117 
118     onBoardActor\&.printConf();
119 
120     wifiManager\&.printConf();
121 
122     mqtt\&.printConf();
123     
124 
125 #endif
126 
127 
128     if (jetpackActive)
129     {
130         jetPack\&.config();
131         jetPack\&.begin();
132 
133     #if DEBUG == 1
134         
135         jetPack\&.printConf();
136 
137     #endif
138         delay(100);
139     }
140 
141     if (ireneActive)
142     {
143         irene3000\&.config();
144         irene3000\&.begin();
145 
146     #if DEBUG == 1
147 
148         irene3000\&.printConf();
149 
150     #endif
151         delay(100);
152     }
153 
154     if (externalSensorsActive)
155     {
156         externalSensors\&.config();
157         externalSensors\&.begin();
158 
159     #if DEBUG == 1
160 
161         externalSensors\&.printConf();
162 
163     #endif
164         delay(100);
165     }
166     
167     coolBoardLed\&.fadeOut(255,128,0,0\&.5);//orange
168 
169     this->connect();
170     delay(100);
171 
172     rtc\&.config();
173     rtc\&.begin();
174 
175 #if DEBUG == 1
176 
177     rtc\&.printConf();
178 
179 #endif
180     delay(100);
181     
182     coolBoardLed\&.blink(0,255,0,0\&.5);//green
183 
184 }
.fi
.SS "bool CoolBoard::config ()"
\fBCoolBoard::config()\fP: This method is provided to configure the \fBCoolBoard\fP : -log interval -irene3000 activated/deactivated -jetpack activated/deactivated -external Sensors activated/deactivated -mqtt server timeout
.PP
\fBReturns:\fP
.RS 4
true if configuration is done, false otherwise 
.RE
.PP

.PP
Definition at line 726 of file CoolBoard\&.cpp\&.
.PP
.nf
727 {
728     yield();
729 
730 #if DEBUG == 1
731 
732     Serial\&.println( F("Entering CoolBoard\&.config() ") );
733     Serial\&.println();
734 
735 #endif
736 #if DEBUG == 0
737     Serial\&.println();
738     Serial\&.println( F("Loading configuration for this CoolBoard\&.\&.\&."));
739 #endif 
740 
741     //open file system
742     fileSystem\&.begin();
743     
744     //start the led
745     coolBoardLed\&.config();
746     coolBoardLed\&.begin();
747     coolBoardLed\&.fadeIn(243,171,46,0\&.5);//shade of orange     
748 
749     
750     //open configuration file
751     File configFile = SPIFFS\&.open("/coolBoardConfig\&.json", "r");
752     
753     if (!configFile)
754 
755     {
756     
757         Serial\&.println( F("failed to read /coolBoardConfig\&.json  ") );
758 
759         coolBoardLed\&.blink(255,0,0,0\&.5);//shade of red        
760         return(false);
761     }
762 
763     else
764     {
765         size_t size = configFile\&.size();
766 
767         // Allocate a buffer to store contents of the file\&.
768         std::unique_ptr < char[] > buf(new char[size]);
769 
770         configFile\&.readBytes(buf\&.get(), size);
771 
772         DynamicJsonBuffer jsonBuffer;
773 
774         JsonObject & json = jsonBuffer\&.parseObject(buf\&.get());
775 
776         if (!json\&.success())
777         {
778         
779             Serial\&.println( F("failed to parse CoolBoard Config json object ") );
780     
781             coolBoardLed\&.blink(255,0,0,0\&.5);//shade of red        
782             return(false);
783         }
784 
785         else
786         {   
787         
788         #if DEBUG == 1
789             
790             Serial\&.println( F("configuration json : ") );
791             json\&.printTo(Serial);
792             Serial\&.println();
793             
794             Serial\&.print(F("jsonBuffer size : "));
795             Serial\&.print(jsonBuffer\&.size());
796             Serial\&.println();
797 
798         #endif
799             
800             //parsing userActive Key
801             if (json["userActive"]\&.success())
802             {
803                 this -> userActive = json["userActive"];
804             }
805 
806             else
807             {
808                 this -> userActive = this -> userActive;
809             }
810             json["userActive"] = this -> userActive;
811 
812             //parsing logInterval key
813             if (json["logInterval"]\&.success())
814             {
815                 this -> logInterval = json["logInterval"];
816             }
817             else
818             {
819                 this -> logInterval = this -> logInterval;
820             }
821             json["logInterval"] = this -> logInterval;
822             
823             //parsing ireneActive key           
824             if (json["ireneActive"]\&.success())
825             {
826                 this -> ireneActive = json["ireneActive"];
827             }
828             else
829             {
830                 this -> ireneActive = this -> ireneActive;
831             }
832             json["ireneActive"] = this -> ireneActive;
833             
834             //parsing jetpackActive key
835             if (json["jetpackActive"]\&.success())
836             {
837                 this -> jetpackActive = json["jetpackActive"];
838             }
839             else
840             {
841                 this -> jetpackActive = this -> jetpackActive;
842             }
843             json["jetpackActive"] = this -> jetpackActive;
844 
845             //parsing externalSensorsActive key
846             if (json["externalSensorsActive"]\&.success())
847             {
848                 this -> externalSensorsActive = json["externalSensorsActive"];
849             }
850             else
851             {
852                 this -> externalSensorsActive = this -> externalSensorsActive;
853             }
854             json["externalSensorsActive"] = this -> externalSensorsActive;
855 
856             
857             //parsing sleepActive key
858             if (json["sleepActive"]\&.success())
859             {
860                 this -> sleepActive = json["sleepActive"];
861             }
862             else
863             {
864                 this -> sleepActive = this -> sleepActive;
865             }
866             json["sleepActive"] = this -> sleepActive;
867 
868 
869             //parsing manual key
870             if (json["manual"]\&.success())
871             {
872                 this -> manual = json["manual"];
873             }
874             else
875             {
876                 this -> manual = this -> manual;
877             }
878             json["manual"] = this -> manual;
879 
880 
881 
882             //saving the current/correct configuration
883             configFile\&.close();
884             configFile = SPIFFS\&.open("/coolBoardConfig\&.json", "w");
885             if (!configFile)
886             {
887             
888                 Serial\&.println( F("failed to write to /coolBoardConfig\&.json") );
889                 Serial\&.println();
890 
891                 coolBoardLed\&.blink(255,0,0,0\&.5);//shade of red        
892                 return(false);
893             }
894 
895             json\&.printTo(configFile);
896             configFile\&.close();
897             #if DEBUG == 0
898 
899                 Serial\&.println( F("Configuration loaded : OK"));
900                 Serial\&.println();
901 
902             #endif
903 
904             return(true);
905         }
906     }
907 
908     coolBoardLed\&.strobe(243,171,46,0\&.5);//shade of orange
909     
910     coolBoardLed\&.fadeOut(243,171,46,0\&.5);//shade of orange                
911 }
.fi
.SS "int CoolBoard::connect ()"
\fBCoolBoard::connect()\fP: This method is provided to manage the network connection and the mqtt connection\&.
.PP
\fBReturns:\fP
.RS 4
mqtt client state 
.RE
.PP

.PP
Definition at line 245 of file CoolBoard\&.cpp\&.
.PP
.nf
246 {
247 
248 #if DEBUG == 1  
249 
250     Serial\&.println( F("Entering CoolBoard\&.connect ") );
251     Serial\&.println();
252     Serial\&.println( F("Connecting the CoolBoard  ") );
253     delay(100);
254 
255 #endif
256     coolBoardLed\&.write(0,0,255);//blue
257 
258     
259             
260     
261 #if DEBUG == 1      
262 
263     Serial\&.println( F("Launching CoolWifi") );
264     Serial\&.println();
265 
266 #endif
267     wifiManager\&.connect();
268     delay(100);
269 
270 
271     //only attempt MQTT connection when Wifi is Connected
272     if (wifiManager\&.state() == WL_CONNECTED)
273     {
274 
275     #if DEBUG == 1  
276     
277         Serial\&.println( F("Launching mqtt\&.connect()") );
278         Serial\&.println();
279     
280     #endif  
281         //logInterval in seconds
282         mqtt\&.connect(this -> getLogInterval()*2);
283         delay(100);
284     }
285     
286         
287     
288     
289 #if DEBUG == 1
290 
291     Serial\&.println( F("mqtt state is :") );
292     Serial\&.println(mqtt\&.state());
293     Serial\&.println();
294     delay(100);
295 
296 #endif
297 
298     coolBoardLed\&.blink(0,0,255,0\&.5);//blue
299 
300     return(mqtt\&.state());
301 }
.fi
.SS "unsigned long CoolBoard::getLogInterval ()"
\fBCoolBoard::getLogInterval()\fP: This method is provided to get the log interval
.PP
\fBReturns:\fP
.RS 4
interval value in s 
.RE
.PP

.PP
Definition at line 1150 of file CoolBoard\&.cpp\&.
.PP
.nf
1151 {
1152 
1153 #if DEBUG == 1
1154 
1155     Serial\&.println( F("Entering CoolBoard\&.getLogInterval() ") );
1156     Serial\&.println();
1157     Serial\&.println( F("log Interval is :") );
1158     Serial\&.println(logInterval);
1159     Serial\&.println();
1160 
1161 #endif
1162 
1163     return(this -> logInterval);
1164 }
.fi
.SS "void CoolBoard::initReadI2C ()"
\fBCoolBoard::initReadI2C()\fP: This method is provided to enable the I2C Interface\&. 
.PP
Definition at line 1245 of file CoolBoard\&.cpp\&.
.PP
.nf
1246 {
1247 
1248 #if DEBUG == 1
1249 
1250     Serial\&.println( F("Entering CoolBoard\&.initReadI2C()") );
1251     Serial\&.println();
1252 
1253 #endif
1254  
1255     digitalWrite(EnI2C,HIGH);//HIGH= I2C Enable
1256 
1257 }
.fi
.SS "int CoolBoard::isConnected ()"
\fBCoolBoard::isConnected()\fP
.PP
This method is provided to check if the card is connected to Wifi and MQTT
.PP
\fBReturns:\fP
.RS 4
0 : connected -1: Wifi Not Connected -2: MQTT Not Connected 
.RE
.PP

.PP
Definition at line 197 of file CoolBoard\&.cpp\&.
.PP
.nf
198 {
199 
200 #if DEBUG == 1  
201 
202     Serial\&.println( F("Entering CoolBoard\&.isConnected ") );
203     Serial\&.println();
204 
205 #endif
206     if (wifiManager\&.state() != WL_CONNECTED)
207     {
208     
209         Serial\&.println(F("Wifi Not Connected"));
210 
211     #if DEBUG == 1
212 
213         Serial\&.println(F("Wifi State is "));
214         Serial\&.println(wifiManager\&.state());
215         
216     #endif
217         return(-1);
218     }
219     
220     if(mqtt\&.state() != 0)
221     {
222         
223         Serial\&.println( F("MQTT not Connected"));
224 
225     #if DEBUG==1
226         Serial\&.println( F("mqtt state is :") );
227         Serial\&.println(mqtt\&.state()); 
228     
229     #endif
230 
231     }
232     
233     return(0);
234 
235 }
.fi
.SS "void CoolBoard::offLineMode ()"
CoolBoard::offlineMode(): This method is provided to manage the offLine mode: -read sensors -do actions -save data in the file system -if there is WiFi but no Internet : make data available over AP -if there is no connection : retry to connect 
.PP
Definition at line 572 of file CoolBoard\&.cpp\&.
.PP
.nf
573 {
574     coolBoardLed\&.fade(51,100,50,0\&.5);//dark shade of green    
575 #if DEBUG == 1  
576     
577     Serial\&.println( F("Entering off line mode ") );  
578     
579 #endif
580 
581 #if DEBUG == 0
582 
583     Serial\&.println( F("CoolBoard is in Offline Mode"));
584 
585 #endif
586 
587     //read user data if user is active
588     if(userActive)
589     {
590 
591         coolBoardLed\&.fadeIn(245,237,27,0\&.5);//shade of yellow
592 
593     #if DEBUG == 1
594         
595         Serial\&.println( F("User is Active") );
596         Serial\&.println( F("Collecting User's data ( mac,username,timeStamp )") );
597         Serial\&.println();
598 
599     #endif
600 
601         coolBoardLed\&.blink(245,237,27,0\&.5);//shade of yellow  
602 
603         //reading user data
604         data=this->userData();//{"":"","":"","",""}
605 
606         //formatting json 
607         data\&.setCharAt( data\&.lastIndexOf('}') , ',');//{"":"","":"","","",
608         
609                 
610         //read sensors data
611 
612         Serial\&.println( F("Collecting sensors data ") );
613         Serial\&.println();
614 
615         data+=this->readSensors();//{"":"","":"","","",{\&.\&.\&.\&.\&.\&.\&.}
616 
617         
618 
619         //formatting json correctly
620         data\&.remove(data\&.lastIndexOf('{'), 1);//{"":"","":"","","",\&.\&.\&.\&.\&.\&.\&.}
621 
622         coolBoardLed\&.fadeOut(245,237,27,0\&.5);//shade of yellow
623                 
624     }   
625     else
626     {
627         //read sensors data
628     #if DEBUG == 1
629 
630         Serial\&.println( F("Collecting sensors data ") );
631         Serial\&.println();
632 
633     #endif
634 
635         coolBoardLed\&.fade(190,100,150,0\&.5);//shade of violet      
636 
637         data=this->readSensors();//{\&.\&.,\&.\&.,\&.\&.}
638     }
639 
640     coolBoardLed\&.fade(51,100,50,0\&.5);//dark shade of green    
641 
642     //do action
643 
644     if (jetpackActive)
645     {
646     
647 
648 
649     #if DEBUG == 1
650 
651         Serial\&.println( F("jetpack is Active ") );
652         Serial\&.println( F("jetpack doing action ") );
653         Serial\&.println();
654     
655     #endif
656         coolBoardLed\&.fade(100,100,150,0\&.5);//dark shade of blue   
657     
658         jetPack\&.doAction( data\&.c_str() );
659     }
660     
661     delay(100);
662 
663     onBoardActor\&.doAction( data\&.c_str() );    
664 
665 
666     coolBoardLed\&.fade(51,100,50,0\&.5);//dark shade of green    
667     
668     //saving data in the file system
669     
670     fileSystem\&.saveSensorData( data\&.c_str() );
671 
672     #if DEBUG == 0
673 
674         Serial\&.println( F("saving Data in Memory : OK"));
675 
676     #endif
677 
678     coolBoardLed\&.fadeOut(51,100,50,0\&.5);//dark shade of green
679 
680     //case we have wifi but no internet
681     if( (wifiManager\&.state() == WL_CONNECTED) && ( mqtt\&.state()!=0 ) )
682     {
683         
684         Serial\&.println(F("there is Wifi but no Internet"));
685         Serial\&.println(F("lunching AP to check saved files"));
686         Serial\&.println(F("and Add new WiFi if needed"));
687         
688         wifiManager\&.connectAP();
689         
690     }
691     
692     //case we have no connection at all
693     if( wifiManager\&.state() != WL_CONNECTED )
694     {
695     
696     #if DEBUG == 1
697         
698         Serial\&.println(F("there is No Wifi "));
699         Serial\&.println(F("retrying to connect"));
700     
701     #endif
702 
703     #if DEBUG == 0
704         Serial\&.println( F("there is no WiFi\&.\&.\&."));
705     #endif
706         
707         this->connect();//nomad case : just run wifiMulti
708                 //normal case : run wifiMulti+AP
709         
710     }   
711 
712 }
.fi
.SS "void CoolBoard::onLineMode ()"
\fBCoolBoard::onLineMode()\fP: This method is provided to manage the online mode: -update clock -read sensor -do actions -publish data -read answer -update config 
.PP
Definition at line 313 of file CoolBoard\&.cpp\&.
.PP
.nf
314 {
315 
316     coolBoardLed\&.fadeIn(128,255,50,0\&.5);//shade of green
317 
318 #if DEBUG == 1
319 
320     Serial\&.println( F("Entering CoolBoard\&.onLineMode() ") );
321     Serial\&.println();
322 
323 #endif
324 #if DEBUG == 0
325 
326     Serial\&.println( F("CoolBoard is in Online Mode"));
327 
328 #endif
329 
330     data="";
331     answer="";
332 
333     //send saved data if any
334     if(fileSystem\&.isDataSaved())
335     {
336 
337         coolBoardLed\&.fadeIn(128,128,255,0\&.5);//shade of blue
338 
339         Serial\&.println( F("There is data saved on the File System") );
340         Serial\&.println( F("Sending saved data over MQTT ") );
341         Serial\&.println();
342         coolBoardLed\&.strobe(128,128,255,0\&.5);//shade of blue 
343 
344         mqtt\&.publish("sending saved data");
345         mqtt\&.mqttLoop();
346 
347 
348         
349         int size=0;
350         std::unique_ptr<String[]> savedData(std::move(fileSystem\&.getSensorSavedData(size)));//{\&.\&.,\&.\&.,\&.\&.}
351 
352         int i=0;
353         //loop through the array
354         while(i<size)
355         {
356             //formatting data:
357         
358             String jsonData = "{\"state\":{\"reported\":";
359             jsonData += savedData[i]; // {"state":{"reported":{\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}
360             jsonData += " } }"; // {"state":{"reported":{\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}  } }
361 
362         #if DEBUG == 1 
363             Serial\&.println(F("Size is : "));
364             Serial\&.println(size);
365             Serial\&.print(F("sending line N°"));
366             Serial\&.println(i);
367             Serial\&.println(jsonData);
368             Serial\&.println();
369 
370         #endif
371 
372             coolBoardLed\&.strobe(128,128,255,0\&.5);//shade of blue
373         
374             mqtt\&.publish( jsonData\&.c_str() );
375             mqtt\&.mqttLoop();
376         
377             coolBoardLed\&.fadeOut(128,128,255,0\&.5);//shade of blue
378             
379             i++;
380             yield();
381         }       
382 
383 
384     #if DEBUG == 1
385 
386         Serial\&.println( F("Saved data sent ") );
387         Serial\&.println();
388     
389     #endif
390 
391     }
392 
393     coolBoardLed\&.blink(128,255,50,0\&.5);//shade of green
394 
395     //clock update
396     Serial\&.println( F("Re-checking RTC\&.\&.\&."));
397     rtc\&.update();
398 
399     //read user data if user is active
400     if(userActive)
401     {
402         coolBoardLed\&.fadeIn(245,237,27,0\&.5);//shade of yellow
403     
404     #if DEBUG == 1
405 
406         Serial\&.println( F("User is Active") );
407         Serial\&.println( F("Collecting User's data ( mac,username,timeStamp )") );
408         Serial\&.println();
409     
410     #endif  
411         coolBoardLed\&.blink(245,237,27,0\&.5);//shade of yellow  
412 
413         //reading user data
414         data=this->userData();//{"":"","":"","",""}
415 
416         //formatting json 
417         data\&.setCharAt( data\&.lastIndexOf('}') , ',');//{"":"","":"","","",
418                 
419         //read sensors data
420     #if DEBUG == 1
421 
422         Serial\&.println( F("Collecting sensors data ") );
423         Serial\&.println();
424     
425     #endif
426 
427         data+=this->readSensors();//{"":"","":"","","",{\&.\&.\&.\&.\&.\&.\&.}       
428 
429         //formatting json correctly
430         data\&.remove(data\&.lastIndexOf('{'), 1);//{"":"","":"","","",\&.\&.\&.\&.\&.\&.\&.}
431         
432         coolBoardLed\&.fadeOut(245,237,27,0\&.5);//shade of yellow
433                 
434     }   
435     else
436     {
437         //read sensors data
438     #if DEBUG == 1
439 
440         Serial\&.println( F("Collecting sensors data ") );
441         Serial\&.println();
442     
443     #endif
444         coolBoardLed\&.fade(190,100,150,0\&.5);//shade of violet      
445         data=this->readSensors();//{\&.\&.,\&.\&.,\&.\&.}
446     }
447     
448 
449 
450 
451     //do action
452 
453     if (jetpackActive)
454     {
455 
456 
457     #if DEBUG ==1
458 
459         Serial\&.println( F("jetpack is Active ") );
460         Serial\&.println();
461 
462     #endif
463     
464         if(this->manual == 0 )
465         {
466 
467             Serial\&.println( F("jetpack doing action ") );
468 
469             coolBoardLed\&.fade(100,100,150,0\&.5);//dark shade of blue       
470 
471             jetPack\&.doAction(data\&.c_str());
472             
473 
474         
475         }
476         
477         else if(this->manual == 1 )
478         {
479         
480             Serial\&.println(F("we are in manual mode"));
481             mqtt\&.mqttLoop();
482             answer = mqtt\&.read();
483             this -> update(answer\&.c_str());
484         }
485     }
486 
487     delay(100);
488 
489     onBoardActor\&.doAction( data\&.c_str() );    
490 
491 
492 
493     
494     coolBoardLed\&.fadeIn(128,255,50,0\&.5);//shade of green
495 
496     //formatting data:
497     String jsonData = "{\"state\":{\"reported\":";
498     jsonData += data; // {"state":{"reported":{\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}
499     jsonData += " } }"; // {"state":{"reported":{\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}  } }
500     
501     //mqtt client loop to allow data handling
502     mqtt\&.mqttLoop();
503 
504     coolBoardLed\&.blink(128,255,50,0\&.5);//shade of green   
505 
506     //read mqtt answer
507     answer = mqtt\&.read();
508 
509 #if DEBUG == 1 
510 
511     Serial\&.println( F("checking if there's an MQTT message ")  );
512     Serial\&.println( F("answer is : ") ); 
513     Serial\&.println(answer);  
514     Serial\&.println();
515 
516 #endif  
517 
518     coolBoardLed\&.fadeOut(128,255,50,0\&.5);//shade of green 
519 
520     //check if the configuration needs update 
521     //and update it if needed 
522     this -> update(answer\&.c_str());
523     
524     coolBoardLed\&.fadeIn(128,255,50,0\&.5);//shade of green  
525 
526     //publishing data   
527     if( this->sleepActive==0 )  
528     {   
529         coolBoardLed\&.strobe(255,0,230,0\&.5);//shade of pink
530         
531         //logInterval in seconds
532         mqtt\&.publish( jsonData\&.c_str(), this->getLogInterval() );
533         mqtt\&.mqttLoop();
534     
535     }
536     else
537     {
538         coolBoardLed\&.strobe(230,255,0,0\&.5);//shade of yellow  
539 
540         mqtt\&.publish(jsonData\&.c_str());       
541         mqtt\&.mqttLoop();
542         answer = mqtt\&.read();
543         this ->update(answer\&.c_str());
544 
545         //logInterval in seconds
546         this->sleep( this->getLogInterval() ) ;
547     }
548 
549     coolBoardLed\&.fadeOut(128,255,50,0\&.5);//shade of green     
550 
551     mqtt\&.mqttLoop();
552 
553     //read mqtt answer
554     answer = mqtt\&.read();
555     this -> update(answer\&.c_str());  
556 
557     coolBoardLed\&.blink(128,255,50,0\&.5);//shade of green   
558 
559 
560 }
.fi
.SS "void CoolBoard::printConf ()"
\fBCoolBoard::printConf()\fP: This method is provided to print the configuration to the Serial Monitor\&. 
.PP
Definition at line 920 of file CoolBoard\&.cpp\&.
.PP
.nf
921 {
922 
923 #if DEBUG == 1
924     
925     Serial\&.println( F("Entering CoolBoard\&.printConf() ") );
926     Serial\&.println();
927 
928 #endif
929 
930     Serial\&.println( F("Printing Cool Board Configuration "));
931     Serial\&.print( F("log interval        : "));
932     Serial\&.println(this->logInterval);
933 
934     Serial\&.print( F("irene active        : "));
935     Serial\&.println(this->ireneActive);
936 
937     Serial\&.print( F("jetpack active      : "));
938     Serial\&.println(this->jetpackActive);
939 
940     Serial\&.print( F("external sensors active     : "));
941     Serial\&.println(this->externalSensorsActive);
942 
943     Serial\&.print( F("sleep active        : "));
944     Serial\&.println(this->sleepActive);
945 
946     Serial\&.print( F("user active         : "));
947     Serial\&.println(this->userActive);
948 
949     Serial\&.print( F("manual active       : "));
950     Serial\&.println(this->manual);
951 
952     Serial\&.println();
953 
954 
955 
956 
957 }
.fi
.SS "String CoolBoard::readSensors ()"
\fBCoolBoard::readSensors()\fP: This method is provided to read and format all the sensors data in a single json\&.
.PP
\fBReturns:\fP
.RS 4
json string of all the sensors read\&. 
.RE
.PP

.PP
Definition at line 1174 of file CoolBoard\&.cpp\&.
.PP
.nf
1175 {
1176 
1177     coolBoardLed\&.fadeIn(128,255,0,0\&.5);//light shade of green
1178                 
1179 #if DEBUG == 1
1180 
1181     Serial\&.println( F("Entering CoolBoard\&.readSensors()") );
1182     Serial\&.println();
1183 
1184 #endif
1185     coolBoardLed\&.strobe(128,255,0,0\&.5);//light shade of green
1186 
1187     String sensorsData;
1188     
1189     this->initReadI2C();
1190 
1191     sensorsData = coolBoardSensors\&.read(); // {\&.\&.,\&.\&.,\&.\&.}
1192     
1193     if (externalSensorsActive)
1194     {
1195         sensorsData += externalSensors\&.read(); // {\&.\&.,\&.\&.,\&.\&.}{\&.\&.,\&.\&.}
1196 
1197         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf('}'), ','); // {\&.\&.,\&.\&.,\&.\&.}{\&.\&.,\&.\&.,
1198         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf('{'), ','); // {\&.\&.,\&.\&.,\&.\&.},\&.\&.,\&.\&.,
1199         sensorsData\&.remove(sensorsData\&.lastIndexOf('}'), 1); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,
1200         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf(','), '}'); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}
1201 
1202     }
1203     if (ireneActive)
1204     {
1205         sensorsData += irene3000\&.read(); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}{\&.\&.,\&.\&.,\&.\&.}
1206 
1207         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf('}'), ','); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}{\&.\&.,\&.\&.,\&.\&.,
1208         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf('{'), ','); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.},\&.\&.,\&.\&.,\&.\&.,
1209         sensorsData\&.remove(sensorsData\&.lastIndexOf('}'), 1); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,
1210         sensorsData\&.setCharAt(sensorsData\&.lastIndexOf(','), '}'); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.}        
1211         
1212         
1213     }
1214 
1215     //getting Hour:
1216     tmElements_t tm;
1217     tm=rtc\&.getTimeDate();
1218     
1219     //adding Hour
1220     sensorsData\&.remove(sensorsData\&.lastIndexOf('}'), 1); // {\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&.,\&.\&., 
1221     sensorsData+=",\"hour\":";  
1222     sensorsData+=tm\&.Hour;
1223     sensorsData+=",\"minute\":";
1224     sensorsData+=tm\&.Minute;
1225     sensorsData+="}";
1226     
1227 #if DEBUG == 1
1228     Serial\&.println();
1229     Serial\&.println( F("sensors data is ") );
1230     Serial\&.println(sensorsData);
1231     Serial\&.println();
1232 
1233 #endif
1234     coolBoardLed\&.fadeOut(128,255,0,0\&.5);//light shade of green
1235 
1236     return(sensorsData);
1237 
1238 }
.fi
.SS "void CoolBoard::sleep (unsigned long interval)"
CoolBoard::sleep(int interval): This method is provided to allow the board to enter deepSleep mode for a period of time equal to interval in s 
.PP
Definition at line 1314 of file CoolBoard\&.cpp\&.
.PP
.nf
1315 {
1316 
1317     Serial\&.println( F("Entering CoolBoard\&.sleep() ") );
1318     Serial\&.print( F("going to sleep for ") );
1319     Serial\&.print(interval);
1320     Serial\&.println(F("s") );
1321     Serial\&.println();
1322     
1323     //interval is in seconds , interval*1000*1000 in µS
1324     ESP\&.deepSleep ( ( interval * 1000 * 1000 ), WAKE_RF_DEFAULT) ;
1325 
1326 }
.fi
.SS "void CoolBoard::update (const char * answer)"
CoolBoard::update(mqtt answer): This method is provided to handle the configuration update of the different parts 
.PP
Definition at line 964 of file CoolBoard\&.cpp\&.
.PP
.nf
965 {
966     coolBoardLed\&.fadeIn(153,76,0,0\&.5);//shade of brown        
967 
968 #if DEBUG == 1
969 
970     Serial\&.println( F("Entering CoolBoard\&.update() ") );
971     Serial\&.println();
972     Serial\&.println( F("message is : ") );
973     Serial\&.println(answer);
974     Serial\&.println();
975 
976 #endif
977 
978     DynamicJsonBuffer jsonBuffer;
979     JsonObject & root = jsonBuffer\&.parseObject(answer);
980     JsonObject & stateDesired = root["state"];
981 
982 #if DEBUG == 1
983 
984     Serial\&.println( F("root json : ") );
985     root\&.printTo(Serial);
986     Serial\&.println();
987 
988     Serial\&.println( F("stateDesired json : "));
989     stateDesired\&.printTo(Serial);
990     Serial\&.println();
991     
992     Serial\&.print( F("jsonBuffer size : "));
993     Serial\&.println(jsonBuffer\&.size());
994 
995 #endif
996 
997     if (stateDesired\&.success())
998     {
999     
1000     #if DEBUG == 1
1001 
1002         Serial\&.println( F("update message parsing : success") );
1003         Serial\&.println();
1004     
1005     #endif
1006 
1007             String answerDesired;
1008         
1009             stateDesired\&.printTo(answerDesired);
1010             
1011         #if DEBUG == 1      
1012         
1013             Serial\&.println( F("update is ok ") );
1014             Serial\&.println( F("desired update is : ") );         
1015             Serial\&.println(answerDesired);
1016             Serial\&.println("json size is : ");
1017             Serial\&.println(jsonBuffer\&.size() ) ;              
1018             Serial\&.println();
1019 
1020         
1021         #endif
1022             //manual mode check
1023             if(this->manual == 1 )
1024             { 
1025                 JsonObject & manualMode=stateDesired["manual"];
1026                 //json parse
1027                 for(auto kv : manualMode)
1028                 {
1029                 #if DEBUG == 1
1030 
1031                     Serial\&.print(F("writing to "));
1032                     Serial\&.println(kv\&.key);
1033                     Serial\&.print(F("state : "));
1034                     Serial\&.println(kv\&.value\&.as<bool>());       
1035                     
1036                 #endif              
1037 
1038                     if( strcmp(kv\&.key,"Act0") == 0 )
1039                     {
1040                     
1041                         jetPack\&.writeBit(0,kv\&.value\&.as<bool>() ); 
1042                         
1043                     }
1044                     else if(strcmp(kv\&.key,"Act1") == 0)
1045                     {
1046                         jetPack\&.writeBit(1,kv\&.value\&.as<bool>() ); 
1047 
1048                     }
1049                     else if(strcmp(kv\&.key,"Act2") == 0)
1050                     {
1051                         jetPack\&.writeBit(2,kv\&.value\&.as<bool>() ); 
1052 
1053                     }
1054                     else if(strcmp(kv\&.key,"Act3") == 0)
1055                     {
1056                         jetPack\&.writeBit(3,kv\&.value\&.as<bool>() ); 
1057 
1058                     }
1059                     else if(strcmp(kv\&.key,"Act4") == 0)
1060                     {
1061                         jetPack\&.writeBit(4,kv\&.value\&.as<bool>() ); 
1062 
1063                     }
1064                     else if(strcmp(kv\&.key,"Act5") == 0)
1065                     {
1066                         jetPack\&.writeBit(5,kv\&.value\&.as<bool>() ); 
1067 
1068                     }
1069                     else if(strcmp(kv\&.key,"Act6") == 0)
1070                     {
1071                         jetPack\&.writeBit(6,kv\&.value\&.as<bool>() ); 
1072 
1073                     }
1074                     else if (strcmp(kv\&.key,"Act7") == 0)
1075                     {
1076                         jetPack\&.writeBit(7,kv\&.value\&.as<bool>() ); 
1077 
1078                     }
1079                     else if (strcmp(kv\&.key,"ActB") == 0)
1080                     {
1081                         onBoardActor\&.write(kv\&.value\&.as<bool>() ); 
1082 
1083                     }
1084                                 
1085                 
1086                 }
1087 
1088                 
1089             }
1090 
1091             //saving the new configuration
1092             fileSystem\&.updateConfigFiles(answerDesired);
1093 
1094                 //answering the update msg:
1095             //reported = received configuration
1096             //desired=null
1097         
1098             String updateAnswer;
1099             String tempString;
1100             
1101             stateDesired\&.printTo(tempString);
1102             updateAnswer="{\"state\":{\"reported\":";
1103             updateAnswer+=tempString;
1104             updateAnswer+=",\"desired\":null}}";
1105 
1106         #if DEBUG == 1
1107 
1108             Serial\&.println( F("preparing answer message ") );
1109             Serial\&.println();
1110             Serial\&.println( F("updateAnswer : ") );
1111             Serial\&.println(updateAnswer);
1112         
1113         #endif  
1114 
1115             mqtt\&.publish(updateAnswer\&.c_str());
1116             
1117             mqtt\&.mqttLoop();
1118 
1119             delay(10);
1120         
1121             if(manual == 0 )
1122             {
1123                 //restart the esp to apply the config
1124                 ESP\&.restart();
1125             }
1126     }
1127     else
1128     {
1129     
1130     #if DEBUG == 1
1131 
1132         Serial\&.println( F("Failed to parse update message( OR no message received )") );
1133         Serial\&.println();
1134     
1135     #endif
1136     
1137     }
1138 
1139     coolBoardLed\&.strobe(153,76,0,0\&.5);//shade of brown
1140     coolBoardLed\&.fadeOut(153,76,0,0\&.5);//shade of brown                               
1141 }
.fi
.SS "String CoolBoard::userData ()"
\fBCoolBoard::userData()\fP: This method is provided to return the user's data\&.
.PP
\fBReturns:\fP
.RS 4
json string of the user's data 
.RE
.PP

.PP
Definition at line 1267 of file CoolBoard\&.cpp\&.
.PP
.nf
1268 {
1269 
1270 #if DEBUG == 1
1271 
1272     Serial\&.println( F("Entering CoolBoard\&.userData() ") );
1273     Serial\&.println();
1274 
1275 #endif
1276 
1277     String tempMAC = WiFi\&.macAddress();
1278 
1279     tempMAC\&.replace(":", "");
1280 
1281     String userJson = "{\"user\":\"";
1282 
1283     userJson += mqtt\&.getUser();
1284 
1285     userJson += "\",\"timestamp\":\"";
1286 
1287     userJson += rtc\&.getESDate(); // "timestamp":"20yy-mm-ddThh:mm:ssZ"
1288 
1289     userJson += "\",\"mac\":\"";
1290 
1291     userJson += tempMAC;
1292 
1293     userJson += "\"}";
1294 
1295 #if DEBUG == 1
1296 
1297     Serial\&.println( F("userData is : ") );
1298     Serial\&.println(userJson);
1299     Serial\&.println();
1300 
1301 #endif  
1302     
1303     return(userJson);
1304     
1305 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "String CoolBoard::answer =''\fC [private]\fP"
answer string, string that contains received MQTT messages 
.PP
Definition at line 202 of file CoolBoard\&.h\&.
.SS "\fBCoolBoardLed\fP CoolBoard::coolBoardLed\fC [private]\fP"
Led handler instance 
.PP
Definition at line 104 of file CoolBoard\&.h\&.
.SS "\fBCoolBoardSensors\fP CoolBoard::coolBoardSensors\fC [private]\fP"
Sensor Board handler instance 
.PP
Definition at line 99 of file CoolBoard\&.h\&.
.SS "String CoolBoard::data =''\fC [private]\fP"
data string, string that contains sensors data 
.PP
Definition at line 196 of file CoolBoard\&.h\&.
.SS "const int CoolBoard::EnI2C = 5\fC [private]\fP"
Enable I2C pin, double usage for I2C and shift register latch , HIGH=I2C , LOW=shift register latch All I2C is over pins (2,14) 
.PP
Definition at line 209 of file CoolBoard\&.h\&.
.SS "\fBExternalSensors\fP CoolBoard::externalSensors\fC [private]\fP"
External Sensors handler instance 
.PP
Definition at line 134 of file CoolBoard\&.h\&.
.SS "bool CoolBoard::externalSensorsActive =0\fC [private]\fP"
externalSensors flag, set to 1 when using 1/many external Sensor(s) 
.PP
Definition at line 163 of file CoolBoard\&.h\&.
.SS "\fBCoolFileSystem\fP CoolBoard::fileSystem\fC [private]\fP"
fileSystem handler instance 
.PP
Definition at line 94 of file CoolBoard\&.h\&.
.SS "\fBIrene3000\fP CoolBoard::irene3000\fC [private]\fP"
\fBIrene3000\fP handler instance 
.PP
Definition at line 129 of file CoolBoard\&.h\&.
.SS "bool CoolBoard::ireneActive =0\fC [private]\fP"
ireneActive flag, set to 1 when using an Irene module 
.PP
Definition at line 151 of file CoolBoard\&.h\&.
.SS "\fBJetpack\fP CoolBoard::jetPack\fC [private]\fP"
\fBJetpack\fP handler instance 
.PP
Definition at line 124 of file CoolBoard\&.h\&.
.SS "bool CoolBoard::jetpackActive =0\fC [private]\fP"
jetpackActive flag, set to 1 when using a \fBJetpack\fP module 
.PP
Definition at line 157 of file CoolBoard\&.h\&.
.SS "unsigned long CoolBoard::logInterval =1\fC [private]\fP"
log Interval value, the period of time between logs
.IP "\(bu" 2
in Seconds 
.PP

.PP
Definition at line 190 of file CoolBoard\&.h\&.
.SS "bool CoolBoard::manual =0\fC [private]\fP"
manual flag, set to 1 when using manual mode in manual Mode , user can activate/deactivate actors through a specific MQTT command
.PP
/!\\ in manual Mode, receving an update will not reset the \fBCoolBoard\fP /!\\ resetting the \fBCoolBoard\fP in manual mode will deactivate all actors 
.PP
Definition at line 183 of file CoolBoard\&.h\&.
.SS "\fBCoolMQTT\fP CoolBoard::mqtt\fC [private]\fP"
MQTT handler instance 
.PP
Definition at line 119 of file CoolBoard\&.h\&.
.SS "\fBCoolBoardActor\fP CoolBoard::onBoardActor\fC [private]\fP"
On Board Actor handler instance 
.PP
Definition at line 139 of file CoolBoard\&.h\&.
.SS "\fBCoolTime\fP CoolBoard::rtc\fC [private]\fP"
RTC handler instance 
.PP
Definition at line 109 of file CoolBoard\&.h\&.
.SS "bool CoolBoard::sleepActive =0\fC [private]\fP"
sleepActive flag, set to 1 when using sleep Mode in Sleep mode : the \fBCoolBoard\fP will do a cycle (init, read sensors, do action,log) and go to sleep for a LogInterval period of time 
.PP
Definition at line 172 of file CoolBoard\&.h\&.
.SS "bool CoolBoard::userActive =0\fC [private]\fP"
userActive flag, set to 1 to collect userData(MAC,userName,TimeStamp) 
.PP
Definition at line 145 of file CoolBoard\&.h\&.
.SS "\fBCoolWifi\fP CoolBoard::wifiManager\fC [private]\fP"
Wifi handler instance 
.PP
Definition at line 114 of file CoolBoard\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolBoardAPI from the source code\&.
