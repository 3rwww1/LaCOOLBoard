.TH "CoolBoardLed" 3 "Wed Aug 30 2017" "CoolBoardAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoolBoardLed \- This class handles the led in the Sensor Board\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolBoardLed\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBbegin\fP ()"
.br
.ti -1c
.RI "void \fBwrite\fP (int R, int G, int B)"
.br
.ti -1c
.RI "void \fBend\fP ()"
.br
.ti -1c
.RI "bool \fBconfig\fP ()"
.br
.ti -1c
.RI "void \fBactivate\fP ()"
.br
.ti -1c
.RI "void \fBprintConf\fP ()"
.br
.ti -1c
.RI "void \fBfade\fP (int R, int G, int B, float T)"
.br
.ti -1c
.RI "void \fBblink\fP (int R, int G, int B, float T)"
.br
.ti -1c
.RI "void \fBfadeIn\fP (int R, int G, int B, float T)"
.br
.ti -1c
.RI "void \fBfadeOut\fP (int R, int G, int B, float T)"
.br
.ti -1c
.RI "void \fBstrobe\fP (int R, int G, int B, float T)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "NeoPixelBus< NeoGrbFeature, Neo800KbpsMethod > * \fBneoPixelLed\fP = NULL"
.br
.ti -1c
.RI "bool \fBledActive\fP =0"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class handles the led in the Sensor Board\&. 
.PP
Definition at line 44 of file CoolBoardLed\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "void CoolBoardLed::activate ()"
\fBCoolBoardLed::activate()\fP: This method is provided to activate the Led Object without the configuration file 
.PP
Definition at line 440 of file CoolBoardLed\&.cpp\&.
.PP
.nf
441 {
442 
443     this->ledActive=1;
444 
445 }
.fi
.SS "void CoolBoardLed::begin ()"
\fBCoolBoardLed::begin()\fP: This method is provided to start the Led Object by setting the correct pin and creating a dynamic neoPixelBus 
.PP
Definition at line 248 of file CoolBoardLed\&.cpp\&.
.PP
.nf
249 {
250 
251 #if DEBUG == 1
252 
253     Serial\&.println( F("Entering CoolBoardLed\&.begin() ") );
254 
255 #endif
256     yield();
257     if(this->ledActive == 1 )
258     {
259         pinMode(5,OUTPUT);
260         digitalWrite(5,HIGH);
261         neoPixelLed = new NeoPixelBus<NeoGrbFeature, Neo800KbpsMethod>(1,2); 
262         neoPixelLed->Begin();
263         neoPixelLed->Show();
264 
265     }
266 
267 } 
.fi
.SS "void CoolBoardLed::blink (int R, int G, int B, float T)"
CoolBoardLed::blink( Red , Green , Blue , Time in seconds ): Blink animation: Led On for T seconds Led off 
.PP
Definition at line 90 of file CoolBoardLed\&.cpp\&.
.PP
.nf
91 {
92 
93 #if DEBUG == 1
94 
95     Serial\&.println( F("Entering CoolBoardLed\&.blink()"));
96     Serial\&.println();
97     Serial\&.print( F("R : "));
98     Serial\&.println(R);
99     Serial\&.print( F("G : ") );
100     Serial\&.println(G);
101     Serial\&.print( F("B : ") );
102     Serial\&.println(B);
103     Serial\&.print( F("Time :") );
104     Serial\&.println(T);
105     Serial\&.println();
106 
107 #endif  
108 
109     if(this->ledActive == 1 )
110     {
111         neoPixelLed->SetPixelColor(0, RgbColor(R, G, B));
112         neoPixelLed->Show();
113         delay(T);
114         neoPixelLed->SetPixelColor(0, RgbColor(0, 0, 0));
115         neoPixelLed->Show();
116     }
117 }
.fi
.SS "bool CoolBoardLed::config ()"
\fBCoolBoardLed::config()\fP: This method is provided to configure the Led Object : -ledActive=0 : deactivated -ledActive=1 : activated 
.PP
\fBReturns:\fP
.RS 4
true if the configuration done, false otherwise 
.RE
.PP

.PP
Definition at line 307 of file CoolBoardLed\&.cpp\&.
.PP
.nf
308 {
309 
310 #if DEBUG == 1 
311         
312     Serial\&.println( F("Entering CoolBoardLed\&.config()") );
313     Serial\&.println();
314 
315 #endif
316     
317     File coolBoardLedConfig = SPIFFS\&.open("/coolBoardLedConfig\&.json", "r");
318 
319     if (!coolBoardLedConfig) 
320     {
321     
322     #if DEBUG == 1
323 
324         Serial\&.println( F("failed to read /coolBoardLedConfig\&.json") );
325         Serial\&.println();
326 
327     #endif
328 
329         return(false);
330     }
331     else
332     {
333         size_t size = coolBoardLedConfig\&.size();
334         // Allocate a buffer to store contents of the file\&.
335         std::unique_ptr<char[]> buf(new char[size]);
336 
337         coolBoardLedConfig\&.readBytes(buf\&.get(), size);
338         DynamicJsonBuffer jsonBuffer;
339         JsonObject& json = jsonBuffer\&.parseObject(buf\&.get());
340         if (!json\&.success()) 
341         {
342         
343         #if DEBUG == 1
344 
345             Serial\&.println( F("failed to parse json") );
346             Serial\&.println();
347         
348         #endif
349 
350             return(false);
351         } 
352         else
353         {
354         
355         #if DEBUG == 1
356     
357             Serial\&.println( F("read configuration file : ") );
358             json\&.printTo(Serial);
359             Serial\&.println();
360             
361             Serial\&.print(F("jsonBuffer size :"));
362             Serial\&.println(jsonBuffer\&.size());
363             Serial\&.println();
364 
365         #endif
366   
367             if(json["ledActive"]\&.success() )
368             {
369                 this->ledActive = json["ledActive"]; 
370             }
371             else
372             {
373                 this->ledActive=this->ledActive;            
374             }
375             
376             json["ledActive"]=this->ledActive;
377             coolBoardLedConfig\&.close();
378             
379             coolBoardLedConfig = SPIFFS\&.open("/coolBoardLedConfig\&.json", "w");
380             if(!coolBoardLedConfig)
381             {
382             
383             #if DEBUG == 1 
384 
385                 Serial\&.println( F("failed to write to /coolBoardLedConfig\&.json") );
386                 Serial\&.println();
387 
388             #endif
389 
390                 return(false);          
391             }
392 
393             json\&.printTo(coolBoardLedConfig);
394             coolBoardLedConfig\&.close();
395 
396         #if DEBUG == 1
397     
398             Serial\&.println( F("saved Led Config is : ") );
399             json\&.printTo(Serial);
400             Serial\&.println();
401 
402         #endif
403 
404             return(true); 
405         }
406     }   
407 
408 }               
.fi
.SS "void CoolBoardLed::end ()"
\fBCoolBoardLed::end()\fP : this method is provided to delete the dynamically created neoPixelLed 
.PP
Definition at line 229 of file CoolBoardLed\&.cpp\&.
.PP
.nf
230 {
231 
232 #if DEBUG == 1 
233     
234     Serial\&.println( F("Entering CoolBoardLed\&.end()") );
235 
236 #endif
237 
238     delete neoPixelLed;
239 }
.fi
.SS "void CoolBoardLed::fade (int R, int G, int B, float T)"
\fBCoolBoardLed::fade\fP ( Red , Green , Blue, Time in seconds ): fade animation: Fade In over T(seconds) Fade Out over T(seconds) 
.PP
Definition at line 49 of file CoolBoardLed\&.cpp\&.
.PP
.nf
50 {
51 
52 #if DEBUG == 1
53 
54     Serial\&.println( F("Entering CoolBoardLed\&.fade()") );
55     Serial\&.println();
56     Serial\&.print( F("R : ") );
57     Serial\&.println(R);
58     Serial\&.print( F("G : ") );
59     Serial\&.println(G);
60     Serial\&.print( F("B : ") );
61     Serial\&.println(B);
62     Serial\&.print( F("Time : ") );
63     Serial\&.println(T);
64     Serial\&.println();
65 
66 #endif  
67     if(this->ledActive == 1 )
68     {
69         for (int k = 0; k < 1000; k++) 
70         {
71             neoPixelLed->SetPixelColor(0, RgbColor(k * R / 1000, k * G / 1000, k * B / 1000));
72             neoPixelLed->Show();
73             delay(T);
74         }
75         
76         for (int k = 1000; k >= 0; k--) 
77         {
78             neoPixelLed->SetPixelColor(0, RgbColor(k * R / 1000, k * G / 1000, k * B / 1000));
79             neoPixelLed->Show();
80             delay(T);
81         }
82     }
83 }
.fi
.SS "void CoolBoardLed::fadeIn (int R, int G, int B, float T)"
CoolBoardLed::fadeIn(Red , Green , Blue , Time in seconds) Fade In animation: gradual increase over T(seconds) 
.PP
Definition at line 123 of file CoolBoardLed\&.cpp\&.
.PP
.nf
124 {
125 
126 #if DEBUG == 1
127 
128     Serial\&.println( F("Entering CoolBoardLed\&.fadeIn()") );
129     Serial\&.println();
130     Serial\&.print( F("R : ") );
131     Serial\&.println(R);
132     Serial\&.print( F("G : ") );
133     Serial\&.println(G);
134     Serial\&.print( F("B : ") );
135     Serial\&.println(B);
136     Serial\&.print( F("Time :") );
137     Serial\&.println(T);
138     Serial\&.println();
139 
140 #endif  
141     
142     if(this->ledActive == 1 )
143     {
144         for (int k = 0; k < 1000; k++) 
145         {
146             neoPixelLed->SetPixelColor(0, RgbColor(k * R / 1000, k * G / 1000, k * B / 1000));
147             neoPixelLed->Show();
148             delay(T);
149         }
150     }
151 
152 }
.fi
.SS "void CoolBoardLed::fadeOut (int R, int G, int B, float T)"
CoolBoardLed::fadeOut( Red , Green , Blue , Time in seconds) Fade Out animation: gradual decrease over T(seconds) 
.PP
Definition at line 158 of file CoolBoardLed\&.cpp\&.
.PP
.nf
159 {
160 
161 #if DEBUG == 1 
162 
163     Serial\&.println( F("Entering CoolBoardLed\&.fadeOut()" ) );
164     Serial\&.println();
165     Serial\&.print( F("R : ") );
166     Serial\&.println(R);
167     Serial\&.print( F("G : ") );
168     Serial\&.println(G);
169     Serial\&.print( F("B : ") );
170     Serial\&.println(B);
171     Serial\&.print( F("Time :") );
172     Serial\&.println(T);
173     Serial\&.println();
174 
175 #endif  
176 
177     if(this->ledActive == 1 )
178     {
179         for (int k = 1000; k >= 0; k--) 
180         {
181             neoPixelLed->SetPixelColor(0, RgbColor(k * R / 1000, k * G / 1000, k * B / 1000));
182             neoPixelLed->Show();
183             delay(T);
184         }
185     }
186 }
.fi
.SS "void CoolBoardLed::printConf ()"
\fBCoolBoardLed::printConf()\fP: This method is provided to print the Led Object Configuration to the Serial Monitor 
.PP
Definition at line 416 of file CoolBoardLed\&.cpp\&.
.PP
.nf
417 {
418 
419 #if DEBUG == 1 
420 
421     Serial\&.println( F("Entering CoolBoardLed\&.printConf()") );
422     Serial\&.println();
423 
424 #endif
425 
426     Serial\&.println("Led Configuration");
427 
428     Serial\&.print("ledActive : ");
429     Serial\&.println(ledActive);
430 
431     Serial\&.println();    
432 }
.fi
.SS "void CoolBoardLed::strobe (int R, int G, int B, float T)"
CoolBoardLed::strobe(Red , Green , Blue , Time in seconds) Strobe animation: blinks over T(seconds) 
.PP
Definition at line 192 of file CoolBoardLed\&.cpp\&.
.PP
.nf
193 {
194 
195 #if DEBUG == 1
196 
197     Serial\&.println( F("Entering CoolBoardLed\&.strobe()") );
198     Serial\&.println();
199     Serial\&.print( F("R : ") );
200     Serial\&.println(R);
201     Serial\&.print( F("G: ") );
202     Serial\&.println(G);
203     Serial\&.print( F("B : ") );
204     Serial\&.println(B);
205     Serial\&.print( F("Time :") );
206     Serial\&.println(T);
207     Serial\&.println();
208 
209 #endif  
210 
211     if(this->ledActive == 1 )
212     {   
213         for (int k = 1000; k >= 0; k--) 
214         {
215             neoPixelLed->SetPixelColor(0, RgbColor(R, G, B));
216             neoPixelLed->Show();
217             delay(T);
218             neoPixelLed->SetPixelColor(0, RgbColor(0, 0, 0));
219             neoPixelLed->Show();
220             delay(T);
221         }
222     }
223 }
.fi
.SS "void CoolBoardLed::write (int R, int G, int B)"
CoolBoardLed::write(Red,Green,Blue): This method is provided to set the Color of the Led 
.PP
Definition at line 274 of file CoolBoardLed\&.cpp\&.
.PP
.nf
275 {
276 
277 #if DEBUG == 1
278 
279     Serial\&.println( F("Entering CoolBoardLed\&.write()") );
280     Serial\&.println();
281     Serial\&.print( F("R : ") );
282     Serial\&.println(R);
283     Serial\&.print( F("G : ") );
284     Serial\&.println(G);
285     Serial\&.print( F("B : ") );
286     Serial\&.println(B);
287     Serial\&.println();    
288 
289 #endif
290 
291     if(this->ledActive == 1 )
292     {
293         neoPixelLed->SetPixelColor(0, RgbColor(R, G, B));
294         neoPixelLed->Show();
295     }
296 
297 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "bool CoolBoardLed::ledActive =0\fC [private]\fP"
ledActive flag set to 1 if you want LED animation 
.PP
Definition at line 88 of file CoolBoardLed\&.h\&.
.SS "NeoPixelBus<NeoGrbFeature, Neo800KbpsMethod>* CoolBoardLed::neoPixelLed = NULL\fC [private]\fP"
NeoPixel Led Instance 
.PP
Definition at line 82 of file CoolBoardLed\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolBoardAPI from the source code\&.
