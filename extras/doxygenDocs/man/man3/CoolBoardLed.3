.TH "CoolBoardLed" 3 "Thu Aug 24 2017" "CoolBoardAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoolBoardLed \- This class handles the led in the Sensor Board\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolBoardLed\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBbegin\fP ()"
.br
.ti -1c
.RI "void \fBwrite\fP (int R, int G, int B)"
.br
.ti -1c
.RI "void \fBend\fP ()"
.br
.ti -1c
.RI "bool \fBconfig\fP ()"
.br
.ti -1c
.RI "void \fBactivate\fP ()"
.br
.ti -1c
.RI "void \fBprintConf\fP ()"
.br
.ti -1c
.RI "void \fBfade\fP (int R, int G, int B, float T)"
.br
.ti -1c
.RI "void \fBblink\fP (int R, int G, int B, float T)"
.br
.ti -1c
.RI "void \fBfadeIn\fP (int R, int G, int B, float T)"
.br
.ti -1c
.RI "void \fBfadeOut\fP (int R, int G, int B, float T)"
.br
.ti -1c
.RI "void \fBstrobe\fP (int R, int G, int B, float T)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "NeoPixelBus< NeoGrbFeature, Neo800KbpsMethod > * \fBneoPixelLed\fP = NULL"
.br
.ti -1c
.RI "bool \fBledActive\fP =0"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class handles the led in the Sensor Board\&. 
.PP
Definition at line 42 of file CoolBoardLed\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "void CoolBoardLed::activate ()"
\fBCoolBoardLed::activate()\fP: This method is provided to activate the Led Object without the configuration file 
.PP
Definition at line 437 of file CoolBoardLed\&.cpp\&.
.PP
.nf
438 {
439 
440     this->ledActive=1;
441 
442 }
.fi
.SS "void CoolBoardLed::begin ()"
\fBCoolBoardLed::begin()\fP: This method is provided to start the Led Object by setting the correct pin and creating a dynamic neoPixelBus 
.PP
Definition at line 245 of file CoolBoardLed\&.cpp\&.
.PP
.nf
246 {
247 
248 #if DEBUG == 1
249 
250     Serial\&.println( F("Entering CoolBoardLed\&.begin() ") );
251 
252 #endif
253     yield();
254     if(this->ledActive == 1 )
255     {
256         pinMode(5,OUTPUT);
257         digitalWrite(5,HIGH);
258         neoPixelLed = new NeoPixelBus<NeoGrbFeature, Neo800KbpsMethod>(1,2); 
259         neoPixelLed->Begin();
260         neoPixelLed->Show();
261 
262     }
263 
264 } 
.fi
.SS "void CoolBoardLed::blink (int R, int G, int B, float T)"
CoolBoardLed::blink( Red , Green , Blue , Time in seconds ): Blink animation: Led On for T seconds Led off 
.PP
Definition at line 87 of file CoolBoardLed\&.cpp\&.
.PP
.nf
88 {
89 
90 #if DEBUG == 1
91 
92     Serial\&.println( F("Entering CoolBoardLed\&.blink()"));
93     Serial\&.println();
94     Serial\&.print( F("R : "));
95     Serial\&.println(R);
96     Serial\&.print( F("G : ") );
97     Serial\&.println(G);
98     Serial\&.print( F("B : ") );
99     Serial\&.println(B);
100     Serial\&.print( F("Time :") );
101     Serial\&.println(T);
102     Serial\&.println();
103 
104 #endif  
105 
106     if(this->ledActive == 1 )
107     {
108         neoPixelLed->SetPixelColor(0, RgbColor(R, G, B));
109         neoPixelLed->Show();
110         delay(T);
111         neoPixelLed->SetPixelColor(0, RgbColor(0, 0, 0));
112         neoPixelLed->Show();
113     }
114 }
.fi
.SS "bool CoolBoardLed::config ()"
\fBCoolBoardLed::config()\fP: This method is provided to configure the Led Object : -ledActive=0 : deactivated -ledActive=1 : activated 
.PP
\fBReturns:\fP
.RS 4
true if the configuration done, false otherwise 
.RE
.PP

.PP
Definition at line 304 of file CoolBoardLed\&.cpp\&.
.PP
.nf
305 {
306 
307 #if DEBUG == 1 
308         
309     Serial\&.println( F("Entering CoolBoardLed\&.config()") );
310     Serial\&.println();
311 
312 #endif
313     
314     File coolBoardLedConfig = SPIFFS\&.open("/coolBoardLedConfig\&.json", "r");
315 
316     if (!coolBoardLedConfig) 
317     {
318     
319     #if DEBUG == 1
320 
321         Serial\&.println( F("failed to read /coolBoardLedConfig\&.json") );
322         Serial\&.println();
323 
324     #endif
325 
326         return(false);
327     }
328     else
329     {
330         size_t size = coolBoardLedConfig\&.size();
331         // Allocate a buffer to store contents of the file\&.
332         std::unique_ptr<char[]> buf(new char[size]);
333 
334         coolBoardLedConfig\&.readBytes(buf\&.get(), size);
335         DynamicJsonBuffer jsonBuffer;
336         JsonObject& json = jsonBuffer\&.parseObject(buf\&.get());
337         if (!json\&.success()) 
338         {
339         
340         #if DEBUG == 1
341 
342             Serial\&.println( F("failed to parse json") );
343             Serial\&.println();
344         
345         #endif
346 
347             return(false);
348         } 
349         else
350         {
351         
352         #if DEBUG == 1
353     
354             Serial\&.println( F("read configuration file : ") );
355             json\&.printTo(Serial);
356             Serial\&.println();
357             
358             Serial\&.print(F("jsonBuffer size :"));
359             Serial\&.println(jsonBuffer\&.size());
360             Serial\&.println();
361 
362         #endif
363   
364             if(json["ledActive"]\&.success() )
365             {
366                 this->ledActive = json["ledActive"]; 
367             }
368             else
369             {
370                 this->ledActive=this->ledActive;            
371             }
372             
373             json["ledActive"]=this->ledActive;
374             coolBoardLedConfig\&.close();
375             
376             coolBoardLedConfig = SPIFFS\&.open("/coolBoardLedConfig\&.json", "w");
377             if(!coolBoardLedConfig)
378             {
379             
380             #if DEBUG == 1 
381 
382                 Serial\&.println( F("failed to write to /coolBoardLedConfig\&.json") );
383                 Serial\&.println();
384 
385             #endif
386 
387                 return(false);          
388             }
389 
390             json\&.printTo(coolBoardLedConfig);
391             coolBoardLedConfig\&.close();
392 
393         #if DEBUG == 1
394     
395             Serial\&.println( F("saved Led Config is : ") );
396             json\&.printTo(Serial);
397             Serial\&.println();
398 
399         #endif
400 
401             return(true); 
402         }
403     }   
404 
405 }               
.fi
.SS "void CoolBoardLed::end ()"
\fBCoolBoardLed::end()\fP : this method is provided to delete the dynamically created neoPixelLed 
.PP
Definition at line 226 of file CoolBoardLed\&.cpp\&.
.PP
.nf
227 {
228 
229 #if DEBUG == 1 
230     
231     Serial\&.println( F("Entering CoolBoardLed\&.end()") );
232 
233 #endif
234 
235     delete neoPixelLed;
236 }
.fi
.SS "void CoolBoardLed::fade (int R, int G, int B, float T)"
\fBCoolBoardLed::fade\fP ( Red , Green , Blue, Time in seconds ): fade animation: Fade In over T(seconds) Fade Out over T(seconds) 
.PP
Definition at line 46 of file CoolBoardLed\&.cpp\&.
.PP
.nf
47 {
48 
49 #if DEBUG == 1
50 
51     Serial\&.println( F("Entering CoolBoardLed\&.fade()") );
52     Serial\&.println();
53     Serial\&.print( F("R : ") );
54     Serial\&.println(R);
55     Serial\&.print( F("G : ") );
56     Serial\&.println(G);
57     Serial\&.print( F("B : ") );
58     Serial\&.println(B);
59     Serial\&.print( F("Time : ") );
60     Serial\&.println(T);
61     Serial\&.println();
62 
63 #endif  
64     if(this->ledActive == 1 )
65     {
66         for (int k = 0; k < 1000; k++) 
67         {
68             neoPixelLed->SetPixelColor(0, RgbColor(k * R / 1000, k * G / 1000, k * B / 1000));
69             neoPixelLed->Show();
70             delay(T);
71         }
72         
73         for (int k = 1000; k >= 0; k--) 
74         {
75             neoPixelLed->SetPixelColor(0, RgbColor(k * R / 1000, k * G / 1000, k * B / 1000));
76             neoPixelLed->Show();
77             delay(T);
78         }
79     }
80 }
.fi
.SS "void CoolBoardLed::fadeIn (int R, int G, int B, float T)"
CoolBoardLed::fadeIn(Red , Green , Blue , Time in seconds) Fade In animation: gradual increase over T(seconds) 
.PP
Definition at line 120 of file CoolBoardLed\&.cpp\&.
.PP
.nf
121 {
122 
123 #if DEBUG == 1
124 
125     Serial\&.println( F("Entering CoolBoardLed\&.fadeIn()") );
126     Serial\&.println();
127     Serial\&.print( F("R : ") );
128     Serial\&.println(R);
129     Serial\&.print( F("G : ") );
130     Serial\&.println(G);
131     Serial\&.print( F("B : ") );
132     Serial\&.println(B);
133     Serial\&.print( F("Time :") );
134     Serial\&.println(T);
135     Serial\&.println();
136 
137 #endif  
138     
139     if(this->ledActive == 1 )
140     {
141         for (int k = 0; k < 1000; k++) 
142         {
143             neoPixelLed->SetPixelColor(0, RgbColor(k * R / 1000, k * G / 1000, k * B / 1000));
144             neoPixelLed->Show();
145             delay(T);
146         }
147     }
148 
149 }
.fi
.SS "void CoolBoardLed::fadeOut (int R, int G, int B, float T)"
CoolBoardLed::fadeOut( Red , Green , Blue , Time in seconds) Fade Out animation: gradual decrease over T(seconds) 
.PP
Definition at line 155 of file CoolBoardLed\&.cpp\&.
.PP
.nf
156 {
157 
158 #if DEBUG == 1 
159 
160     Serial\&.println( F("Entering CoolBoardLed\&.fadeOut()" ) );
161     Serial\&.println();
162     Serial\&.print( F("R : ") );
163     Serial\&.println(R);
164     Serial\&.print( F("G : ") );
165     Serial\&.println(G);
166     Serial\&.print( F("B : ") );
167     Serial\&.println(B);
168     Serial\&.print( F("Time :") );
169     Serial\&.println(T);
170     Serial\&.println();
171 
172 #endif  
173 
174     if(this->ledActive == 1 )
175     {
176         for (int k = 1000; k >= 0; k--) 
177         {
178             neoPixelLed->SetPixelColor(0, RgbColor(k * R / 1000, k * G / 1000, k * B / 1000));
179             neoPixelLed->Show();
180             delay(T);
181         }
182     }
183 }
.fi
.SS "void CoolBoardLed::printConf ()"
\fBCoolBoardLed::printConf()\fP: This method is provided to print the Led Object Configuration to the Serial Monitor 
.PP
Definition at line 413 of file CoolBoardLed\&.cpp\&.
.PP
.nf
414 {
415 
416 #if DEBUG == 1 
417 
418     Serial\&.println( F("Entering CoolBoardLed\&.printConf()") );
419     Serial\&.println();
420 
421 #endif
422 
423     Serial\&.println("Led Configuration");
424 
425     Serial\&.print("ledActive : ");
426     Serial\&.println(ledActive);
427 
428     Serial\&.println();    
429 }
.fi
.SS "void CoolBoardLed::strobe (int R, int G, int B, float T)"
CoolBoardLed::strobe(Red , Green , Blue , Time in seconds) Strobe animation: blinks over T(seconds) 
.PP
Definition at line 189 of file CoolBoardLed\&.cpp\&.
.PP
.nf
190 {
191 
192 #if DEBUG == 1
193 
194     Serial\&.println( F("Entering CoolBoardLed\&.strobe()") );
195     Serial\&.println();
196     Serial\&.print( F("R : ") );
197     Serial\&.println(R);
198     Serial\&.print( F("G: ") );
199     Serial\&.println(G);
200     Serial\&.print( F("B : ") );
201     Serial\&.println(B);
202     Serial\&.print( F("Time :") );
203     Serial\&.println(T);
204     Serial\&.println();
205 
206 #endif  
207 
208     if(this->ledActive == 1 )
209     {   
210         for (int k = 1000; k >= 0; k--) 
211         {
212             neoPixelLed->SetPixelColor(0, RgbColor(R, G, B));
213             neoPixelLed->Show();
214             delay(T);
215             neoPixelLed->SetPixelColor(0, RgbColor(0, 0, 0));
216             neoPixelLed->Show();
217             delay(T);
218         }
219     }
220 }
.fi
.SS "void CoolBoardLed::write (int R, int G, int B)"
CoolBoardLed::write(Red,Green,Blue): This method is provided to set the Color of the Led 
.PP
Definition at line 271 of file CoolBoardLed\&.cpp\&.
.PP
.nf
272 {
273 
274 #if DEBUG == 1
275 
276     Serial\&.println( F("Entering CoolBoardLed\&.write()") );
277     Serial\&.println();
278     Serial\&.print( F("R : ") );
279     Serial\&.println(R);
280     Serial\&.print( F("G : ") );
281     Serial\&.println(G);
282     Serial\&.print( F("B : ") );
283     Serial\&.println(B);
284     Serial\&.println();    
285 
286 #endif
287 
288     if(this->ledActive == 1 )
289     {
290         neoPixelLed->SetPixelColor(0, RgbColor(R, G, B));
291         neoPixelLed->Show();
292     }
293 
294 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "bool CoolBoardLed::ledActive =0\fC [private]\fP"

.PP
Definition at line 80 of file CoolBoardLed\&.h\&.
.SS "NeoPixelBus<NeoGrbFeature, Neo800KbpsMethod>* CoolBoardLed::neoPixelLed = NULL\fC [private]\fP"

.PP
Definition at line 78 of file CoolBoardLed\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolBoardAPI from the source code\&.
