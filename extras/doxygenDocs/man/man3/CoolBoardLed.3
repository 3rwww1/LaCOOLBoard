.TH "CoolBoardLed" 3 "Thu Aug 17 2017" "CoolBoardAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoolBoardLed \- This class handles the led in the Sensor Board\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolBoardLed\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBbegin\fP ()"
.br
.ti -1c
.RI "void \fBwrite\fP (int R, int G, int B)"
.br
.ti -1c
.RI "void \fBend\fP ()"
.br
.ti -1c
.RI "bool \fBconfig\fP ()"
.br
.ti -1c
.RI "void \fBactivate\fP ()"
.br
.ti -1c
.RI "void \fBprintConf\fP ()"
.br
.ti -1c
.RI "void \fBfade\fP (int R, int G, int B, float T)"
.br
.ti -1c
.RI "void \fBblink\fP (int R, int G, int B, float T)"
.br
.ti -1c
.RI "void \fBfadeIn\fP (int R, int G, int B, float T)"
.br
.ti -1c
.RI "void \fBfadeOut\fP (int R, int G, int B, float T)"
.br
.ti -1c
.RI "void \fBstrobe\fP (int R, int G, int B, float T)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "NeoPixelBus< NeoGrbFeature, Neo800KbpsMethod > * \fBneoPixelLed\fP = NULL"
.br
.ti -1c
.RI "bool \fBledActive\fP =0"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class handles the led in the Sensor Board\&. 
.PP
Definition at line 20 of file CoolBoardLed\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "void CoolBoardLed::activate ()"
\fBCoolBoardLed::activate()\fP: This method is provided to activate the Led Object without the configuration file 
.PP
Definition at line 416 of file CoolBoardLed\&.cpp\&.
.PP
.nf
417 {
418 
419     this->ledActive=1;
420 
421 }
.fi
.SS "void CoolBoardLed::begin ()"
\fBCoolBoardLed::begin()\fP: This method is provided to start the Led Object by setting the correct pin and creating a dynamic neoPixelBus 
.PP
Definition at line 224 of file CoolBoardLed\&.cpp\&.
.PP
.nf
225 {
226 
227 #if DEBUG == 1
228 
229     Serial\&.println( F("Entering CoolBoardLed\&.begin() ") );
230 
231 #endif
232     yield();
233     if(this->ledActive == 1 )
234     {
235         pinMode(5,OUTPUT);
236         digitalWrite(5,HIGH);
237         neoPixelLed = new NeoPixelBus<NeoGrbFeature, Neo800KbpsMethod>(1,2); 
238         neoPixelLed->Begin();
239         neoPixelLed->Show();
240 
241     }
242 
243 } 
.fi
.SS "void CoolBoardLed::blink (int R, int G, int B, float T)"
CoolBoardLed::blink( Red , Green , Blue , Time in seconds ): Blink animation: Led On for T seconds Led off 
.PP
Definition at line 66 of file CoolBoardLed\&.cpp\&.
.PP
.nf
67 {
68 
69 #if DEBUG == 1
70 
71     Serial\&.println( F("Entering CoolBoardLed\&.blink()"));
72     Serial\&.println();
73     Serial\&.print( F("R : "));
74     Serial\&.println(R);
75     Serial\&.print( F("G : ") );
76     Serial\&.println(G);
77     Serial\&.print( F("B : ") );
78     Serial\&.println(B);
79     Serial\&.print( F("Time :") );
80     Serial\&.println(T);
81     Serial\&.println();
82 
83 #endif  
84 
85     if(this->ledActive == 1 )
86     {
87         neoPixelLed->SetPixelColor(0, RgbColor(R, G, B));
88         neoPixelLed->Show();
89         delay(T);
90         neoPixelLed->SetPixelColor(0, RgbColor(0, 0, 0));
91         neoPixelLed->Show();
92     }
93 }
.fi
.SS "bool CoolBoardLed::config ()"
\fBCoolBoardLed::config()\fP: This method is provided to configure the Led Object : -ledActive=0 : deactivated -ledActive=1 : activated 
.PP
\fBReturns:\fP
.RS 4
true if the configuration done, false otherwise 
.RE
.PP

.PP
Definition at line 283 of file CoolBoardLed\&.cpp\&.
.PP
.nf
284 {
285 
286 #if DEBUG == 1 
287         
288     Serial\&.println( F("Entering CoolBoardLed\&.config()") );
289     Serial\&.println();
290 
291 #endif
292     
293     File coolBoardLedConfig = SPIFFS\&.open("/coolBoardLedConfig\&.json", "r");
294 
295     if (!coolBoardLedConfig) 
296     {
297     
298     #if DEBUG == 1
299 
300         Serial\&.println( F("failed to read /coolBoardLedConfig\&.json") );
301         Serial\&.println();
302 
303     #endif
304 
305         return(false);
306     }
307     else
308     {
309         size_t size = coolBoardLedConfig\&.size();
310         // Allocate a buffer to store contents of the file\&.
311         std::unique_ptr<char[]> buf(new char[size]);
312 
313         coolBoardLedConfig\&.readBytes(buf\&.get(), size);
314         DynamicJsonBuffer jsonBuffer;
315         JsonObject& json = jsonBuffer\&.parseObject(buf\&.get());
316         if (!json\&.success()) 
317         {
318         
319         #if DEBUG == 1
320 
321             Serial\&.println( F("failed to parse json") );
322             Serial\&.println();
323         
324         #endif
325 
326             return(false);
327         } 
328         else
329         {
330         
331         #if DEBUG == 1
332     
333             Serial\&.println( F("read configuration file : ") );
334             json\&.printTo(Serial);
335             Serial\&.println();
336             
337             Serial\&.print(F("jsonBuffer size :"));
338             Serial\&.println(jsonBuffer\&.size());
339             Serial\&.println();
340 
341         #endif
342   
343             if(json["ledActive"]\&.success() )
344             {
345                 this->ledActive = json["ledActive"]; 
346             }
347             else
348             {
349                 this->ledActive=this->ledActive;            
350             }
351             
352             json["ledActive"]=this->ledActive;
353             coolBoardLedConfig\&.close();
354             
355             coolBoardLedConfig = SPIFFS\&.open("/coolBoardLedConfig\&.json", "w");
356             if(!coolBoardLedConfig)
357             {
358             
359             #if DEBUG == 1 
360 
361                 Serial\&.println( F("failed to write to /coolBoardLedConfig\&.json") );
362                 Serial\&.println();
363 
364             #endif
365 
366                 return(false);          
367             }
368 
369             json\&.printTo(coolBoardLedConfig);
370             coolBoardLedConfig\&.close();
371 
372         #if DEBUG == 1
373     
374             Serial\&.println( F("saved Led Config is : ") );
375             json\&.printTo(Serial);
376             Serial\&.println();
377 
378         #endif
379 
380             return(true); 
381         }
382     }   
383 
384 }               
.fi
.SS "void CoolBoardLed::end ()"
\fBCoolBoardLed::end()\fP : this method is provided to delete the dynamically created neoPixelLed 
.PP
Definition at line 205 of file CoolBoardLed\&.cpp\&.
.PP
.nf
206 {
207 
208 #if DEBUG == 1 
209     
210     Serial\&.println( F("Entering CoolBoardLed\&.end()") );
211 
212 #endif
213 
214     delete neoPixelLed;
215 }
.fi
.SS "void CoolBoardLed::fade (int R, int G, int B, float T)"
\fBCoolBoardLed::fade\fP ( Red , Green , Blue, Time in seconds ): fade animation: Fade In over T(seconds) Fade Out over T(seconds) 
.PP
Definition at line 25 of file CoolBoardLed\&.cpp\&.
.PP
.nf
26 {
27 
28 #if DEBUG == 1
29 
30     Serial\&.println( F("Entering CoolBoardLed\&.fade()") );
31     Serial\&.println();
32     Serial\&.print( F("R : ") );
33     Serial\&.println(R);
34     Serial\&.print( F("G : ") );
35     Serial\&.println(G);
36     Serial\&.print( F("B : ") );
37     Serial\&.println(B);
38     Serial\&.print( F("Time : ") );
39     Serial\&.println(T);
40     Serial\&.println();
41 
42 #endif  
43     if(this->ledActive == 1 )
44     {
45         for (int k = 0; k < 1000; k++) 
46         {
47             neoPixelLed->SetPixelColor(0, RgbColor(k * R / 1000, k * G / 1000, k * B / 1000));
48             neoPixelLed->Show();
49             delay(T);
50         }
51         
52         for (int k = 1000; k >= 0; k--) 
53         {
54             neoPixelLed->SetPixelColor(0, RgbColor(k * R / 1000, k * G / 1000, k * B / 1000));
55             neoPixelLed->Show();
56             delay(T);
57         }
58     }
59 }
.fi
.SS "void CoolBoardLed::fadeIn (int R, int G, int B, float T)"
CoolBoardLed::fadeIn(Red , Green , Blue , Time in seconds) Fade In animation: gradual increase over T(seconds) 
.PP
Definition at line 99 of file CoolBoardLed\&.cpp\&.
.PP
.nf
100 {
101 
102 #if DEBUG == 1
103 
104     Serial\&.println( F("Entering CoolBoardLed\&.fadeIn()") );
105     Serial\&.println();
106     Serial\&.print( F("R : ") );
107     Serial\&.println(R);
108     Serial\&.print( F("G : ") );
109     Serial\&.println(G);
110     Serial\&.print( F("B : ") );
111     Serial\&.println(B);
112     Serial\&.print( F("Time :") );
113     Serial\&.println(T);
114     Serial\&.println();
115 
116 #endif  
117     
118     if(this->ledActive == 1 )
119     {
120         for (int k = 0; k < 1000; k++) 
121         {
122             neoPixelLed->SetPixelColor(0, RgbColor(k * R / 1000, k * G / 1000, k * B / 1000));
123             neoPixelLed->Show();
124             delay(T);
125         }
126     }
127 
128 }
.fi
.SS "void CoolBoardLed::fadeOut (int R, int G, int B, float T)"
CoolBoardLed::fadeOut( Red , Green , Blue , Time in seconds) Fade Out animation: gradual decrease over T(seconds) 
.PP
Definition at line 134 of file CoolBoardLed\&.cpp\&.
.PP
.nf
135 {
136 
137 #if DEBUG == 1 
138 
139     Serial\&.println( F("Entering CoolBoardLed\&.fadeOut()" ) );
140     Serial\&.println();
141     Serial\&.print( F("R : ") );
142     Serial\&.println(R);
143     Serial\&.print( F("G : ") );
144     Serial\&.println(G);
145     Serial\&.print( F("B : ") );
146     Serial\&.println(B);
147     Serial\&.print( F("Time :") );
148     Serial\&.println(T);
149     Serial\&.println();
150 
151 #endif  
152 
153     if(this->ledActive == 1 )
154     {
155         for (int k = 1000; k >= 0; k--) 
156         {
157             neoPixelLed->SetPixelColor(0, RgbColor(k * R / 1000, k * G / 1000, k * B / 1000));
158             neoPixelLed->Show();
159             delay(T);
160         }
161     }
162 }
.fi
.SS "void CoolBoardLed::printConf ()"
\fBCoolBoardLed::printConf()\fP: This method is provided to print the Led Object Configuration to the Serial Monitor 
.PP
Definition at line 392 of file CoolBoardLed\&.cpp\&.
.PP
.nf
393 {
394 
395 #if DEBUG == 1 
396 
397     Serial\&.println( F("Entering CoolBoardLed\&.printConf()") );
398     Serial\&.println();
399 
400 #endif
401 
402     Serial\&.println("Led Configuration");
403 
404     Serial\&.print("ledActive : ");
405     Serial\&.println(ledActive);
406 
407     Serial\&.println();    
408 }
.fi
.SS "void CoolBoardLed::strobe (int R, int G, int B, float T)"
CoolBoardLed::strobe(Red , Green , Blue , Time in seconds) Strobe animation: blinks over T(seconds) 
.PP
Definition at line 168 of file CoolBoardLed\&.cpp\&.
.PP
.nf
169 {
170 
171 #if DEBUG == 1
172 
173     Serial\&.println( F("Entering CoolBoardLed\&.strobe()") );
174     Serial\&.println();
175     Serial\&.print( F("R : ") );
176     Serial\&.println(R);
177     Serial\&.print( F("G: ") );
178     Serial\&.println(G);
179     Serial\&.print( F("B : ") );
180     Serial\&.println(B);
181     Serial\&.print( F("Time :") );
182     Serial\&.println(T);
183     Serial\&.println();
184 
185 #endif  
186 
187     if(this->ledActive == 1 )
188     {   
189         for (int k = 1000; k >= 0; k--) 
190         {
191             neoPixelLed->SetPixelColor(0, RgbColor(R, G, B));
192             neoPixelLed->Show();
193             delay(T);
194             neoPixelLed->SetPixelColor(0, RgbColor(0, 0, 0));
195             neoPixelLed->Show();
196             delay(T);
197         }
198     }
199 }
.fi
.SS "void CoolBoardLed::write (int R, int G, int B)"
CoolBoardLed::write(Red,Green,Blue): This method is provided to set the Color of the Led 
.PP
Definition at line 250 of file CoolBoardLed\&.cpp\&.
.PP
.nf
251 {
252 
253 #if DEBUG == 1
254 
255     Serial\&.println( F("Entering CoolBoardLed\&.write()") );
256     Serial\&.println();
257     Serial\&.print( F("R : ") );
258     Serial\&.println(R);
259     Serial\&.print( F("G : ") );
260     Serial\&.println(G);
261     Serial\&.print( F("B : ") );
262     Serial\&.println(B);
263     Serial\&.println();    
264 
265 #endif
266 
267     if(this->ledActive == 1 )
268     {
269         neoPixelLed->SetPixelColor(0, RgbColor(R, G, B));
270         neoPixelLed->Show();
271     }
272 
273 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "bool CoolBoardLed::ledActive =0\fC [private]\fP"

.PP
Definition at line 58 of file CoolBoardLed\&.h\&.
.SS "NeoPixelBus<NeoGrbFeature, Neo800KbpsMethod>* CoolBoardLed::neoPixelLed = NULL\fC [private]\fP"

.PP
Definition at line 56 of file CoolBoardLed\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolBoardAPI from the source code\&.
