.TH "CoolWifi" 3 "Fri Aug 11 2017" "CoolBoardAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoolWifi \- This class manages the WiFi connection \&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CoolWifi\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBbegin\fP ()"
.br
.ti -1c
.RI "bool \fBconfig\fP ()"
.br
.ti -1c
.RI "bool \fBconfig\fP (String \fBssid\fP[], String \fBpass\fP[], int wifiNumber, int APTimeOut, bool \fBnomad\fP)"
.br
.ti -1c
.RI "wl_status_t \fBconnect\fP ()"
.br
.ti -1c
.RI "wl_status_t \fBconnectWifiMulti\fP ()"
.br
.ti -1c
.RI "wl_status_t \fBconnectAP\fP ()"
.br
.ti -1c
.RI "wl_status_t \fBstate\fP ()"
.br
.ti -1c
.RI "void \fBprintConf\fP ()"
.br
.ti -1c
.RI "bool \fBaddWifi\fP (String \fBssid\fP, String \fBpass\fP='')"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "ESP8266WiFiMulti \fBwifiMulti\fP"
.br
.ti -1c
.RI "int \fBwifiCount\fP =0"
.br
.ti -1c
.RI "String \fBssid\fP [50] ={'0'}"
.br
.ti -1c
.RI "String \fBpass\fP [50] ={'0'}"
.br
.ti -1c
.RI "int \fBtimeOut\fP =0"
.br
.ti -1c
.RI "bool \fBnomad\fP =0"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class manages the WiFi connection \&. 
.PP
Definition at line 29 of file CoolWifi\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "bool CoolWifi::addWifi (String ssid, String pass = \fC''\fP)"
CoolWifi::addWifi(ssid,pass) This method is provided to add new WiFi detected by the \fBWiFiManager\fP to the jsonConfig(if used )
.PP
\fBReturns:\fP
.RS 4
true if successfull , false otherwise 
.RE
.PP

.PP
Definition at line 555 of file CoolWifi\&.cpp\&.
.PP
.nf
556 {
557 
558 #if DEBUG == 1
559     
560     Serial\&.println("Entering CoolWifi\&.addWifi() ") ;
561 
562 #endif  
563     
564     this->wifiCount++;
565     if( this->wifiCount >=50)
566     {
567     
568     #if DEBUG == 1
569 
570         Serial\&.println("You have reached the limit of 50");
571         return(false);  
572     
573     #endif
574 
575     }
576 
577     this->ssid[this->wifiCount-1]=ssid;
578     this->pass[this->wifiCount-1]=pass;
579     
580     //read config file
581     //update data
582     File configFile = SPIFFS\&.open("/wifiConfig\&.json", "r");
583 
584     if (!configFile) 
585     {
586     
587     #if DEBUG == 1 
588 
589         Serial\&.println( F("failed to read /wifiConfig\&.json") );
590         Serial\&.println();
591 
592     #endif
593     }
594     else
595     {
596         size_t size = configFile\&.size();
597         // Allocate a buffer to store contents of the file\&.
598         std::unique_ptr<char[]> buf(new char[size]);
599 
600         configFile\&.readBytes(buf\&.get(), size);
601         DynamicJsonBuffer jsonBuffer;
602         JsonObject& json = jsonBuffer\&.parseObject(buf\&.get());
603         if (!json\&.success()) 
604         {
605         
606         #if DEBUG == 1 
607 
608             Serial\&.println( F("failed to parse json ") );
609             Serial\&.println();
610         
611         #endif
612         } 
613         else
614         {
615         
616         #if DEBUG == 1 
617         
618             Serial\&.println( F("configuration json is ") );
619             json\&.printTo(Serial);
620             Serial\&.println();
621 
622             Serial\&.print(F("jsonBuffer size: "));
623             Serial\&.println(jsonBuffer\&.size());
624             Serial\&.println();
625 
626 
627         #endif
628             //wifiCount
629             if(json["wifiCount"]\&.success() )
630             {           
631                 json["wifiCount"]=this->wifiCount;
632             }
633             else
634             {
635                 this->wifiCount=this->wifiCount;
636             }
637             json["wifiCount"]=this->wifiCount;
638 
639             
640             //AP timeOut
641             if(json["timeOut"]\&.success() )
642             {
643                 this->timeOut=json["timeOut"];
644             }
645             else
646             {
647                 this->timeOut=this->timeOut;
648 
649             }
650             json["timeOut"]=this->timeOut;
651             
652             
653             //new Wifi SSID and PASS
654             JsonObject& newWifi = json\&.createNestedObject( "Wifi"+String( this->wifiCount-1 ) );
655             
656             newWifi["ssid"] =this->ssid[this->wifiCount-1];
657             newWifi["pass"] = this->pass[this->wifiCount-1];
658             
659 
660             configFile\&.close();
661             configFile = SPIFFS\&.open("/wifiConfig\&.json", "w");
662             if(!configFile)
663             {
664             
665             #if DEBUG == 1 
666 
667                 Serial\&.println( F("failed to write to /wifiConfig\&.json") );
668             
669             #endif
670 
671             }
672             
673             json\&.printTo(configFile);
674             configFile\&.close();
675 
676         #if DEBUG == 1 
677 
678             Serial\&.println( F("saved configuration is :") );
679             json\&.printTo(Serial);
680             Serial\&.println();
681         
682         #endif
683 
684             return(true); 
685         }
686     }   
687 
688     
689     return(true);
690     
691 }
.fi
.SS "void CoolWifi::begin ()"
\fBCoolWifi::begin()\fP: This method is provided to set the wifiMulti Access points and the wifiManager time out 
.PP
Definition at line 29 of file CoolWifi\&.cpp\&.
.PP
.nf
30 { 
31 
32 #if DEBUG == 1 
33 
34     Serial\&.println( F("Entering CoolWifi\&.begin()") );
35     Serial\&.println();
36 
37 #endif
38     for(int i =0;i<this->wifiCount;i++)
39     {
40          this->wifiMulti\&.addAP(this->ssid[i]\&.c_str() , this->pass[i]\&.c_str() );    
41     }
42     
43 }
.fi
.SS "bool CoolWifi::config ()"
\fBCoolWifi::config()\fP: This method is provided to set the wifi parameters : -ssid -pass -AP timeOut -wifiCount
.PP
\fBReturns:\fP
.RS 4
true if successful,false otherwise 
.RE
.PP

.PP
Definition at line 282 of file CoolWifi\&.cpp\&.
.PP
.nf
283 {
284 
285 #if DEBUG == 1 
286 
287     Serial\&.println( F("Entering CoolWifi\&.config()") );
288     Serial\&.println();
289 
290 #endif
291 #if DEBUG == 0
292 
293     Serial\&.println( "Reading Wifi Configuration\&.\&.");
294     delay(100);
295 #endif 
296 
297     //read config file
298     //update data
299     File configFile = SPIFFS\&.open("/wifiConfig\&.json", "r");
300 
301     if (!configFile) 
302     {
303     
304         Serial\&.println( F("failed to read /wifiConfig\&.json") );
305         Serial\&.println();
306 
307         return(false);
308     }
309     else
310     {
311         size_t size = configFile\&.size();
312         // Allocate a buffer to store contents of the file\&.
313         std::unique_ptr<char[]> buf(new char[size]);
314 
315         configFile\&.readBytes(buf\&.get(), size);
316         DynamicJsonBuffer jsonBuffer;
317         JsonObject& json = jsonBuffer\&.parseObject(buf\&.get());
318         if (!json\&.success()) 
319         {
320 
321             Serial\&.println( F("failed to parse json ") );
322             Serial\&.println();
323 
324             return(false);
325         } 
326         else
327         {
328         
329         #if DEBUG == 1 
330         
331             Serial\&.println( F("configuration json is ") );
332             json\&.printTo(Serial);
333             Serial\&.println();
334 
335             Serial\&.print(F("jsonBuffer size: "));
336             Serial\&.println(jsonBuffer\&.size());
337             Serial\&.println();
338 
339 
340         #endif
341             //wifiCount
342             if(json["wifiCount"]\&.success() )
343             {           
344                 this->wifiCount=json["wifiCount"];
345             }
346             else
347             {
348                 this->wifiCount=this->wifiCount;
349             }
350             json["wifiCount"]=this->wifiCount;
351 
352             
353             //AP timeOut
354             if(json["timeOut"]\&.success() )
355             {
356                 this->timeOut=json["timeOut"];
357             }
358             else
359             {
360                 this->timeOut=this->timeOut;
361 
362             }
363             json["timeOut"]=this->timeOut;
364 
365             //nomad
366             if(json["nomad"]\&.success() )
367             {
368                 this->nomad=json["nomad"];
369             }
370             else
371             {
372                 this->nomad=this->nomad;
373 
374             }
375             json["nomad"]=this->nomad;
376 
377             
378             
379             //Wifis SSID and PASS
380             for(int i =0; i<this->wifiCount ;i++)
381             {
382                 if ( json["Wifi"+String(i)]\&.success() )
383                 {
384                     
385                     if( json["Wifi"+String(i)]["ssid"]\&.success() )
386                     {
387                         const char* tempSsid=json["Wifi"+String(i)]["ssid"]; 
388                         this->ssid[i]=tempSsid;                 
389                     }
390                     else
391                     {
392                         this->ssid[i]=this->ssid[i];                    
393                     }
394                     json["Wifi"+String(i)]["ssid"]=this->ssid[i]\&.c_str();
395                     
396                     
397                     if( json["Wifi"+String(i)]["pass"]\&.success() )
398                     {
399                         const char* tempPass =json["Wifi"+String(i)]["pass"];
400                         this->pass[i]=tempPass ;                    
401                     }
402                     else
403                     {
404                         this->pass[i]=this->pass[i];                    
405                     }
406                     json["Wifi"+String(i)]["pass"]=this->pass[i]\&.c_str();            
407                 
408                 }
409                 else
410                 {
411                     
412                     this->ssid[i]=this->ssid[i];
413                     this->pass[i]=this->pass[i];                    
414                     
415                 }
416                 json["Wifi"+String(i)]["ssid"]=this->ssid[i]\&.c_str();
417                 json["Wifi"+String(i)]["pass"]=this->pass[i]\&.c_str();            
418                         
419             }
420 
421             configFile\&.close();
422             configFile = SPIFFS\&.open("/wifiConfig\&.json", "w");
423             if(!configFile)
424             {
425             
426                 Serial\&.println( F("failed to write to /wifiConfig\&.json") );
427             
428                 return(false);              
429             }
430             
431             json\&.printTo(configFile);
432             configFile\&.close();
433 
434         #if DEBUG == 1 
435 
436             Serial\&.println( F("saved configuration is :") );
437             json\&.printTo(Serial);
438             Serial\&.println();
439         
440         #endif
441         #if DEBUG == 0
442             Serial\&.println( F("Configuration loaded : OK"));
443         #endif
444             return(true); 
445         }
446     }   
447     
448 
449 }
.fi
.SS "bool CoolWifi::config (String ssid[], String pass[], int wifiNumber, int APTimeOut, bool nomad)"
CoolWifi::config(ssid array, pass array, number of wifis, AP timeout,nomad flag ); This method is provided to configure the Wifi without SPIFFS
.PP
\fBReturns:\fP
.RS 4
true if successfull, false otherwise 
.RE
.PP

.PP
Definition at line 457 of file CoolWifi\&.cpp\&.
.PP
.nf
458 {
459 
460 #if DEBUG == 1 
461     
462     Serial\&.println("Entering CoolWifi\&.config(), no SPIFFS variant ") ;
463     
464 #endif
465     
466     if(wifiNumber>50)
467     {
468     
469     #if DEBUG == 1 
470         
471         Serial\&.println("the limit of WiFis is 50 " );
472         
473     #endif
474         return(false);  
475     }
476 
477     this->wifiCount=wifiNumber;
478 
479     this->timeOut=APTimeOut;
480 
481     this->nomad=nomad;
482     
483     for(int i=0;i<wifiNumber;i++)
484     {
485         this->ssid[i]=ssid[i];
486         
487         this->pass[i]=pass[i];
488     }
489         
490     return(true);
491 
492 }
.fi
.SS "wl_status_t CoolWifi::connect ()"
\fBCoolWifi::connect( )\fP: This method is provided to connect to the strongest WiFi in the provided list of wiFis\&. If none are found , it starts the AP mode\&.
.PP
\fBReturns:\fP
.RS 4
wifi state 
.RE
.PP

.PP
Definition at line 82 of file CoolWifi\&.cpp\&.
.PP
.nf
83 {       
84 
85 
86 
87 #if DEBUG == 1 
88 
89     Serial\&.println( F("Entering CoolWifi\&.connect()") );
90 
91 #endif
92 
93     Serial\&.println( F("Wifi connecting\&.\&.\&.") );
94 
95 
96     //if WifiCount > 0 , lunch wifiMulti
97     //else no need to , skip this part
98     // to wifiManager  
99     if(this->wifiCount !=0)
100     {
101     
102         this->connectWifiMulti();
103         
104         //if nomad is true, only check wifi list
105         if(this->nomad == true)
106         {
107     
108         #if DEBUG == 1
109     
110             Serial\&.print(F("nomad mode :"));
111             Serial\&.println(this->nomad);
112         
113             Serial\&.print(F("Wifi status: "));
114             Serial\&.println(WiFi\&.status());
115         
116         #endif  
117             return(WiFi\&.status());   
118         }
119 
120     }
121 
122 
123     //Wifi Manager
124     if( WiFi\&.status() != WL_CONNECTED ) 
125     {
126 
127     #if DEBUG == 1 
128     
129         Serial\&.println(F("No matching wifi Found ") );
130         Serial\&.println( F("Starting Access Point ") );   
131         Serial\&.println();
132 
133     #endif
134         
135         this->connectAP();      
136         
137     }
138     else
139     {
140 
141         Serial\&.println(F("connected to "));
142         Serial\&.println( WiFi\&.SSID() );
143         Serial\&.println();
144     
145     }
146     
147     return( WiFi\&.status() ) ;
148 
149 }
.fi
.SS "wl_status_t CoolWifi::connectAP ()"
\fBCoolWifi::connectAP()\fP This function is provided to run the WifiManager part of the Wifi connection process
.PP
\fBReturns:\fP
.RS 4
wifi state 
.RE
.PP

.PP
Definition at line 209 of file CoolWifi\&.cpp\&.
.PP
.nf
210 {
211 
212 #if DEBUG == 1 
213     
214     Serial\&.println( F("Entering CoolWifi\&.connectAP()") ); 
215     Serial\&.println();
216 
217 #endif
218     WiFiManager wifiManager;
219     
220     wifiManager\&.setRemoveDuplicateAPs(true);
221 
222     wifiManager\&.setTimeout(this->timeOut);
223     
224     String tempMAC = WiFi\&.macAddress();
225     tempMAC\&.replace(":","");
226 
227     String name="CoolBoard-"+tempMAC;   
228 
229     if(!wifiManager\&.autoConnect(name\&.c_str())) 
230     {
231 
232         Serial\&.println( F("failed to connect and hit timeout") );
233 
234         delay(30);
235 
236     } 
237 
238     //if you get here you have connected to the WiFi
239 
240     if(WiFi\&.status()==WL_CONNECTED)
241     {
242 
243     #if DEBUG == 1
244 
245         Serial\&.println( F("connected\&.\&.\&.yeey :)" ));
246         Serial\&.println("connected to ");
247         Serial\&.println( WiFi\&.SSID() );
248         //Serial\&.println( WiFi\&.psk() ) ;
249         
250     #endif
251 
252         this->addWifi( WiFi\&.SSID() , WiFi\&.psk() );
253         
254     }
255     else
256     {
257 
258         this->addWifi( WiFi\&.SSID() , WiFi\&.psk() );
259 
260         Serial\&.println( F("connected\&.\&.\&.yeey :)" ));
261         Serial\&.println(F("connected to ") );
262         Serial\&.println( WiFi\&.SSID() );
263         Serial\&.println();
264     
265     }
266     
267     return(WiFi\&.status());
268 
269 }
.fi
.SS "wl_status_t CoolWifi::connectWifiMulti ()"
\fBCoolWifi::connectWifiMulti()\fP This function is provided to run the WifiMulti part of the Wifi connection process
.PP
\fBReturns:\fP
.RS 4
wifi state 
.RE
.PP

.PP
Definition at line 159 of file CoolWifi\&.cpp\&.
.PP
.nf
160 {
161     int i=0;
162 
163 #if DEBUG == 1 
164 
165     Serial\&.println(F("Entering CoolWifi\&.connectWifiMulti()"));
166     Serial\&.println();
167     
168     Serial\&.println( F("entry time to multi : ") );
169     Serial\&.println(millis() ) ;
170 
171 #endif
172     
173     //Wifi MULTI
174     while( (this->wifiMulti\&.run() != WL_CONNECTED) && (i<500)  ) 
175     {
176 
177     #if DEBUG == 1
178 
179         Serial\&.print(F("\&."));
180         
181     #endif
182         i++;
183         delay(5);
184         }   
185 
186 #if DEBUG == 1 
187 
188     Serial\&.println();    
189     Serial\&.println(F("exit point from multi : "));
190     Serial\&.println(millis() );
191     
192     Serial\&.print(F("Wifi Status :"));
193     Serial\&.println(WiFi\&.status());
194 #endif
195 
196     return(WiFi\&.status());
197 
198 }
.fi
.SS "void CoolWifi::printConf ()"
\fBCoolWifi::printConf()\fP: This method is provided to print the configuration to the Serial Monitor 
.PP
Definition at line 500 of file CoolWifi\&.cpp\&.
.PP
.nf
501 {
502 
503 #if DEBUG == 1 
504 
505     Serial\&.println( F("Entering CoolWifi\&.printConf()") );
506     Serial\&.println();    
507 
508 #endif
509     
510     Serial\&.println(F("Wifi configuration "));
511 
512     
513     Serial\&.println(F("wifiCount : "));
514     Serial\&.println(this->wifiCount);
515     
516     for(int i=0;i<this->wifiCount;i++)
517     {   
518         Serial\&.print(F("SSID"));
519         Serial\&.print(i);
520         Serial\&.println(F(" : "));
521         Serial\&.println(this->ssid[i]);
522                 
523 
524         //Serial\&.print("PASS");
525         //Serial\&.print(i);
526         //Serial\&.println(" : ");
527 
528         //Serial\&.print(F("PASS"));
529         //Serial\&.print(i);
530         //Serial\&.println(F(" : "));
531 
532         //Serial\&.println(this->pass[i]);
533         
534     }
535     
536     Serial\&.println(F("timeOut : "));
537     Serial\&.println(this->timeOut);
538 
539     Serial\&.println(F("nomad : "));
540     Serial\&.println(this->nomad);
541 
542     Serial\&.println();
543 
544 
545 }
.fi
.SS "wl_status_t CoolWifi::state ()"
\fBCoolWifi::state()\fP: This method is provided to return the Wifi client's state\&. 
.PP
\fBReturns:\fP
.RS 4
wifi client state: WL_NO_SHIELD = 255, WL_IDLE_STATUS = 0, WL_NO_SSID_AVAIL = 1, WL_SCAN_COMPLETED = 2, WL_CONNECTED = 3, WL_CONNECT_FAILED = 4, WL_CONNECTION_LOST = 5, WL_DISCONNECTED = 6 
.RE
.PP

.PP
Definition at line 59 of file CoolWifi\&.cpp\&.
.PP
.nf
60 {
61 
62 #if DEBUG == 1 
63 
64     Serial\&.println( F("Entering CoolWifi\&.state()") );
65     Serial\&.println();    
66     Serial\&.print( F("state : ") );
67     Serial\&.println( WiFi\&.status() );
68 
69 #endif
70     
71     return( WiFi\&.status() ) ;
72 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "bool CoolWifi::nomad =0\fC [private]\fP"

.PP
Definition at line 63 of file CoolWifi\&.h\&.
.SS "String CoolWifi::pass[50] ={'0'}\fC [private]\fP"

.PP
Definition at line 59 of file CoolWifi\&.h\&.
.SS "String CoolWifi::ssid[50] ={'0'}\fC [private]\fP"

.PP
Definition at line 57 of file CoolWifi\&.h\&.
.SS "int CoolWifi::timeOut =0\fC [private]\fP"

.PP
Definition at line 61 of file CoolWifi\&.h\&.
.SS "int CoolWifi::wifiCount =0\fC [private]\fP"

.PP
Definition at line 55 of file CoolWifi\&.h\&.
.SS "ESP8266WiFiMulti CoolWifi::wifiMulti\fC [private]\fP"

.PP
Definition at line 53 of file CoolWifi\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CoolBoardAPI from the source code\&.
